{"ContextPrompt":{"Function":[{"Name":"ARMCONV","Definition":"Converts a SAS System 9 or later ARM log written in simple format to the more readable label=item format that was used in SAS 8.2.","Parameter1":"login='aname'","Description1":"Is the physical name of the input ARM log.","Parameter2":"logout='aname'","Description2":"Is the physical name of the output ARM log."},{"Name":"ARMEND","Definition":"Indicates the termination of an application.","Parameter1":"option-1&lt;","Description1":"Options: APPID=numeric variable or constant; APPIDVAR=numeric variable; LEVEL= variable; MACONLY=NO | YES; SCL=NO | YES.","Parameter2":"...option-n&gt;","Description2":"Options: APPID=numeric variable or constant; APPIDVAR=numeric variable; LEVEL= variable; MACONLY=NO | YES; SCL=NO | YES."},{"Name":"ARMGTID","Definition":"Assigns a unique identifier to a transaction class.","Parameter1":"TXNNAME='aname'&lt;","Description1":"Is a required transaction name that is a SAS character variable or quoted literal value, up to 127 characters.","Parameter2":"option-1&lt;, ...option-n&gt;&gt;","Description2":"Options: APPID=numeric variable or constant; APPIDVAR=numeric variable; LEVEL=numeric constant or variable; MACONLY=NO | YES; METRNAM1-7='aname'; METRDEF1-7=option; SCL=NO | YES; TXNDET='aname'; TXNIDVAR=numeric variable."},{"Name":"ARMINIT","Definition":"Starts the initialization of an application.","Parameter1":"APPNAME='aname'&lt;","Description1":"Is the required application name that is a SAS character variable or quoted literal value.","Parameter2":"option-1&lt;","Description2":"Options: APPIDVAR=numeric variable; APPUSER='aname'; GETID=NO | YES; LEVEL=numeric constant or variable; MACONLY=NO | YES; SCL=NO | YES; TXNIDVAR=numeric variable; TXNDET='aname'; TXNNAME='aname'","Parameter3":"...option-n&gt;&gt;","Description3":"Options: APPIDVAR=numeric variable; APPUSER='aname'; GETID=NO | YES; LEVEL=numeric constant or variable; MACONLY=NO | YES; SCL=NO | YES; TXNIDVAR=numeric variable; TXNDET='aname'; TXNNAME='aname'"},{"Name":"ARMJOIN","Definition":"Reads the six SAS data sets created by the %ARMPROC macro, and creates SAS data sets and SQL views that contain common information about applications and transactions.","Parameter1":"&lt;option-1&lt;","Description1":"Options: LIBIN=libref; LIBOUT=libref; TXNDS=YES | NO; UPDTDS=YES | NO.","Parameter2":"...option-n&gt;&gt;","Description2":"Options: LIBIN=libref; LIBOUT=libref; TXNDS=YES | NO; UPDTDS=YES | NO."},{"Name":"ARMPROC","Definition":"Processes an input ARM log, and outputs six SAS data sets that contain the gathered information from the log.","Parameter1":"&lt;option-1&lt;","Description1":"Options: LIB=libref; LOG=pathname; LOGNEW=pathname.","Parameter2":"...option-n&gt;&gt;","Description2":"Options: LIB=libref; LOG=pathname; LOGNEW=pathname."},{"Name":"ARMSTOP","Definition":"Specifies the end of a transaction instance.","Parameter1":["&lt;option-1&lt;","...option-n&gt;&gt;"],"Description1":["Options: LEVEL=numeric constant or variable; MACONLY=NO | YES; METRVAL1-7='aname'; SCL=NO | YES; SHANDLE=numeric variable or constant; SHDLVAR=numeric variable; STATUS=numeric variable or numeric constants.","Options: LEVEL=numeric constant or variable; MACONLY=NO | YES; METRVAL1-7='aname'; SCL=NO | YES; SHANDLE=numeric variable or constant; SHDLVAR=numeric variable; STATUS=numeric variable or numeric constants."]},{"Name":"ARMSTRT","Definition":"Specifies the start of execution of a transaction instance, and returns a unique handle that is passed to %ARMUPDT and %ARMSTOP.","Parameter1":"option-1&lt;","Description1":"Options: APPID=numeric variable or constant; APPIDVAR=numeric variable; CORR=n; GETID=NO | YES; LEVEL=numeric constant or variable; MACONLY=NO | YES; METRVAL1-7='aname'; PARNTVAR=numeric variable; SCL=NO | YES; SHDLVAR=numeric variable; TXNDET='aname'; TXNID=numeric variable or constant; TXNIDVAR=numeric variable; TXNNAME='aname'.","Parameter2":"...option-n&gt;","Description2":"Options: APPID=numeric variable or constant; APPIDVAR=numeric variable; CORR=n; GETID=NO | YES; LEVEL=numeric constant or variable; MACONLY=NO | YES; METRVAL1-7='aname'; PARNTVAR=numeric variable; SCL=NO | YES; SHDLVAR=numeric variable; TXNDET='aname'; TXNID=numeric variable or constant; TXNIDVAR=numeric variable; TXNNAME='aname'."},{"Name":"ARMUPDT","Definition":"Updates a transaction instance that has been previously started.","Parameter1":"DATA='variable'&lt;","Description1":"Is a SAS character variable or a quoted literal user-supplied data buffer that contains text to pass to the ARM_UPDATE function call. DATA = is not required but highly recommended.","Parameter2":"option-1&lt;","Description2":"Options: LEVEL=numeric constant or variable; MACONLY=NO | YES; METRVAL1-7='aname'; SCL=NO | YES; SHANDLE=numeric or constant; SHDLVAR=numeric variable.","Parameter3":"...option-n&gt;&gt;","Description3":"Options: LEVEL=numeric constant or variable; MACONLY=NO | YES; METRVAL1-7='aname'; SCL=NO | YES; SHANDLE=numeric or constant; SHDLVAR=numeric variable."},{"Name":"ABS","Definition":"Returns the absolute value.","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE, BIGINT\n    "},{"Name":"ADDR","Definition":"Returns the memory address of a variable on a 32-bit platform. The value that is returned is numeric.","Parameter1":"variable","Description1":"Specifies a variable name."},{"Name":"ADDRLONG","Definition":"Returns the memory address of a variable on 32-bit and 64-bit platforms. The return value is a character string that contains the binary representation of the address. To display this value, use the $HEXw. format to convert the binary value to its hexadecimal equivalent.","Parameter1":"variable","Description1":"Specifies a variable."},{"Name":"AIRY","Definition":"Returns the value of the Airy function.","Parameter1":"x","Description1":"Specifies a numeric constant, variable, or expression."},{"Name":"ALLPERM","Definition":"Generates all permutations of the values of several variables in a minimal change order.","Parameter1":"count","Description1":"Specifies an integer variable that ranges from 1 to the number of permutations.","Parameter2":"variable-1&lt;","Description2":"Specifies either all numeric variables, or all character variables that have the same length. The values of these variables are permuted.","Parameter3":"variable-2...&gt;","Description3":"Specifies either all numeric variables, or all character variables that have the same length. The values of these variables are permuted."},{"Name":"ANYALNUM","Definition":"Searches a character string for an alphanumeric character, and returns the first position at which the character is found.","Parameter1":"string &lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional integer that specifies the position at which the search should start and the direction in which to search."},{"Name":"ANYALPHA","Definition":"Searches a character string for an alphabetic character, and returns the first position at which the character is found.","Parameter1":"string &lt;","Description1":"Is the character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional integer that specifies the position at which the search should start and the direction in which to search."},{"Name":"ANYCNTRL","Definition":"Searches a character string for a control character, and returns the first position at which that character is found.","Parameter1":"string &lt;","Description1":"Is the character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional integer that specifies the position at which the search should start and the direction in which to search."},{"Name":"ANYDIGIT","Definition":"Searches a character string for a digit, and returns the first position at which the digit is found.","Parameter1":"string &lt;","Description1":"Is the character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional integer that specifies the position at which the search should start and the direction in which to search."},{"Name":"ANYFIRST","Definition":"Searches a character string for a character that is valid as the first character in a SAS variable name under VALIDVARNAME=V7, and returns the first position at which that character is found.","Parameter1":"string &lt;","Description1":"Is the character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional integer that specifies the position at which the search should start and the direction in which to search."},{"Name":"ANYGRAPH","Definition":"Searches a character string for a graphical character, and returns the first position at which that character is found.","Parameter1":"string &lt;","Description1":"Is the character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional integer that specifies the position at which the search should start and the direction in which to search."},{"Name":"ANYLOWER","Definition":"Searches a character string for a lowercase letter, and returns the first position at which the letter is found.","Parameter1":"string &lt;","Description1":"Is the character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional integer that specifies the position at which the search should start and the direction in which to search."},{"Name":"ANYNAME","Definition":"Searches a character string for a character that is valid in a SAS variable name under VALIDVARNAME=V7, and returns the first position at which that character is found.","Parameter1":"string &lt;","Description1":"Is the character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional integer that specifies the position at which the search should start and the direction in which to search."},{"Name":"ANYPRINT","Definition":"Searches a character string for a printable character, and returns the first position at which that character is found.","Parameter1":"string &lt;","Description1":"Is the character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional integer that specifies the position at which the search should start and the direction in which to search."},{"Name":"ANYPUNCT","Definition":"Searches a character string for a punctuation character, and returns the first position at which that character is found.","Parameter1":"string &lt;","Description1":"Is the character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional integer that specifies the position at which the search should start and the direction in which to search."},{"Name":"ANYSPACE","Definition":"Searches a character string for a white-space character (blank, horizontal and vertical tab, carriage return, line feed, and form feed), and returns the first position at which that character is found.","Parameter1":"string &lt;","Description1":"Is the character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional integer that specifies the position at which the search should start and the direction in which to search."},{"Name":"ANYUPPER","Definition":"Searches a character string for an uppercase letter, and returns the first position at which the letter is found.","Parameter1":"string &lt;","Description1":"Is the character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional integer that specifies the position at which the search should start and the direction in which to search."},{"Name":"ANYXDIGIT","Definition":"Searches a character string for a hexadecimal character that represents a digit, and returns the first position at which that character is found.","Parameter1":"string &lt;","Description1":"Is the character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional integer that specifies the position at which the search should start and the direction in which to search."},{"Name":"ARCOS","Definition":"Returns the arccosine in radians. \n    \nReturn value data type: DOUBLE  \n    ","Parameter1":"argument ","Description1":"Specifies a numeric constant, variable, or expression. \n    \nRange: -1 to 1 \n\nValid data types: DOUBLE"},{"Name":"ARCOSH","Definition":"Returns the inverse hyperbolic cosine.","Parameter1":"x","Description1":"Specifies a numeric constant, variable, or expression. Range is greater than or equal to 1."},{"Name":"ARSIN","Definition":"Returns the arcsine in radians.","Parameter1":"argument ","Description1":"Specifies any valid expression that evaluates to a numeric value.\n    \nRange: -1 to 1\n\nValid data types: DOUBLE"},{"Name":"ARSINH","Definition":"Returns the inverse hyperbolic sine.","Parameter1":"x","Description1":"Specifies a numeric constant, variable, or expression. Range is from negative infinity to infinity."},{"Name":"ARTANH","Definition":"Returns the inverse hyperbolic tangent.","Parameter1":"x","Description1":"Specifies a numeric constant, variable, or expression. Range is between -1 to 1."},{"Name":"ATAN","Definition":"Returns the arctangent in radians.","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n    \nRange: -1 to 1\n\nValid data types: DOUBLE"},{"Name":"ARTAN","Definition":"Returns the arctangent in radians.","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n    \nRange: -1 to 1\n\nValid data types: DOUBLE"},{"Name":"ATAN2","Definition":"Returns the arctangent of the x and y coordinates of a right triangle, in radians.\n    \nReturn value data type: DOUBLE","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value. \n    \nexpression-1 specifies the x coordinate of the end of the hypotenuse of a right triangle.\n\nValid data types: DOUBLE","Parameter2":"expression-2","Description2":"Specifies any valid expression that evaluates to a numeric value. \n    \nexpression-2 specifies the y coordinate of the end of the hypotenuse of a right triangle.\n\nValid data types: DOUBLE"},{"Name":"ATTRC","Definition":"Returns the value of a character attribute for a SAS data set.","Parameter1":"data-set-id","Description1":"Specifies the data set identifier that the OPEN function returns.","Parameter2":"attr-name","Description2":"Is an attribute name. If attr-name is invalid, a missing value is returned. Valid values are: \"CHARSET\", \"ENCRYPT\", \"ENGINE\", \"LABEL\", \"LIB\", \"MEM\", \"MODE\", \"MTYPE\", \"SORTEDBY\", \"SORTLVL\", \"SORTSEQ\", \"TYPE\".\n    "},{"Name":"ATTRN","Definition":"Returns the value of a numeric attribute for a SAS data set.","Parameter1":"data-set-id","Description1":"Specifies the data set identifier that the OPEN function returns.","Parameter2":"attr-name","Description2":"Is the name of the SAS data set attribute whose numeric value\nis returned. If the value of attr-name is invalid, a missing\nvalue is returned. The following values are valid: \"ALTERPW\",\n\"ANOBS\", \"ANY\", \"ARAND\", \"ARWU\", \"AUDIT\", \"AUDIT_DATA\",\n\"AUDIT_BEFORE\", \"AUDIT_ERROR\", \"CRDTE\", \"ICONST\", \"INDEX\",\n\"ISINDEX\", \"ISSUBSET\", \"LRECL\", \"LRID\", \"MAXGEN\", \"MAXRC\",\n\"MODTE\", \"NDEL\", \"NEXTGEN\", \"NLOBS\", \"NLOBSF\", \"NOBS\", \"NVARS\",\n\"PW\", \"RADIX\", \"READPW\", \"TAPE\", \"WHSTMT\", \"WRITEPW\".\n    "},{"Name":"BAND","Definition":"Returns the bitwise logical AND of two arguments. \n    \nReturn value data type: DOUBLE","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value. \n\nRange: between 0 and (2\u00b3\u00b2)-1 inclusive \nValid data types: DOUBLE","Parameter2":"expression-2","Description2":"Specifies any valid expression that evaluates to a numeric value. \n\nRange: between 0 and (2\u00b3\u00b2)-1 inclusive \nValid data types: DOUBLE"},{"Name":"BETA","Definition":"Returns the value of the beta function.","Parameter1":"a","Description1":"Is the first shape parameter, where a &gt; 0.","Parameter2":"b","Description2":"Is the second shape parameter, where b &gt; 0."},{"Name":"BETAINV","Definition":"Returns a quantile from the beta distribution with shape parameters a and b.","Parameter1":"p","Description1":"Is a numeric probability. Range: 0 \u2264 p \u2264 1.","Parameter2":"a","Description2":"Is a numeric shape parameter. Range: a &gt; 0.","Parameter3":"b","Description3":"Is a numeric shape parameter. Range: b &gt; 0."},{"Name":"BLACKCLPRC","Definition":"Calculates call prices for European options on futures, based on the Black model.","Parameter1":"E","Description1":"Is a non-missing, positive value that specifies exercise price. Specify E and F in the same units.","Parameter2":"t","Description2":"Is a non-missing value that specifies time to maturity.","Parameter3":"F","Description3":"Is a non-missing, positive value that specifies future price. Specify F and E in the same units.","Parameter4":"r","Description4":"Is a non-missing, positive fraction that specifies the risk-free interest rate between the present time and t. Specify a value for r for the same time period as the unit of t.","Parameter5":"sigma","Description5":"Is a non-missing, positive fraction that specifies the volatility (the square root of the variance of r). Specify a value for sigma for the same time period as the unit of t."},{"Name":"BLACKPTPRC","Definition":"Calculates put prices for European options on futures, based on the Black model.","Parameter1":"E","Description1":"Is a non-missing, positive value that specifies exercise price. Specify E and F in the same units.","Parameter2":"t","Description2":"Is a non-missing value that specifies time to maturity.","Parameter3":"F","Description3":"Is a non-missing, positive value that specifies future price. Specify F and E in the same units.","Parameter4":"r","Description4":"Is a non-missing, positive fraction that specifies the risk-free interest rate between the present time and t. Specify a value for r for the same time period as the unit of t.","Parameter5":"sigma","Description5":"Is a non-missing, positive fraction that specifies the volatility (the square root of the variance of r). Specify a value for sigma for the same time period as the unit of t."},{"Name":"BLKSHCLPRC","Definition":"Calculates call prices for European options on stocks, based on the Black-Scholes model.","Parameter1":"E","Description1":"Is a non-missing, positive value that specifies exercise price. Specify E and S in the same units.","Parameter2":"t","Description2":"Is a non-missing value that specifies time to maturity.","Parameter3":"S","Description3":"Is a non-missing, positive value that specifies share price. Specify S and E in the same units.","Parameter4":"r","Description4":"Is a non-missing, positive fraction that specifies the risk-free interest rate between the present time and t. Specify a value for r for the same time period as the unit of t.","Parameter5":"sigma","Description5":"Is a non-missing, positive fraction that specifies the volatility (the square root of the variance of r). Specify a value for sigma for the same time period as the unit of t."},{"Name":"BLSHIFT","Definition":"Returns the bitwise logical left shift of two arguments. If either argument contains a missing value, then the function returns a missing value and sets _ERROR_ equal to 1.","Parameter1":"expression-1","Description1":"Specifies a numeric constant, variable, or expression. Range: between 0 and 2\u00b3\u00b2-1 inclusive.","Parameter2":"expression-2","Description2":"Specifies a numeric constant, variable, or expression. Range: 0 to 31, inclusive."},{"Name":"BNOT","Definition":"Returns the bitwise logical NOT of an argument. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.  \n    \nRange: between 0 and (2\u00b3\u00b2)-1 inclusive.\nValid data types: DOUBLE"},{"Name":"BOR","Definition":"Returns the bitwise logical OR of two arguments.\n    \nReturn value data type: DOUBLE","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value.  \n    \nRange: between 0 and (2\u00b3\u00b2)-1 inclusive.\nValid data types: DOUBLE","Parameter2":"expression-2","Description2":"Specifies any valid expression that evaluates to a numeric value.  \n    \nRange: between 0 and (2\u00b3\u00b2)-1 inclusive.\nValid data types: DOUBLE"},{"Name":"BRSHIFT","Definition":"Returns the bitwise logical right shift of two arguments.\n    \nReturn value data type: DOUBLE","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value.  \n    \nRange: between 0 and (2\u00b3\u00b2)-1 inclusive.\nValid data types: DOUBLE","Parameter2":"expression-2","Description2":"Specifies any valid expression that evaluates to a numeric value.  \n    \nRange: between 0 and (2\u00b3\u00b2)-1 inclusive.\nValid data types: DOUBLE"},{"Name":"BXOR","Definition":"Returns the bitwise logical EXCLUSIVE OR of two arguments. \n    \nReturn value data type: DOUBLE","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value.  \n    \nRange: between 0 and (2\u00b3\u00b2)-1 inclusive.\nValid data types: DOUBLE","Parameter2":"expression-2","Description2":"Specifies any valid expression that evaluates to a numeric value.  \n    \nRange: between 0 and (2\u00b3\u00b2)-1 inclusive.\nValid data types: DOUBLE"},{"Name":"BYTE","Definition":"Returns one character in the ASCII or the EBCDIC collating sequence.","Parameter1":"n","Description1":"Specifies an integer that represents a specific ASCII or EBCDIC character. \n    \nRange: 0-255. \nValid data types: NCHAR"},{"Name":"ALLCOMB","Definition":"Generates all combinations of the values of n variables taken k at a time in a minimal change order.","Parameter1":"count","Description1":"Specifies an integer variable that is assigned from 1 to the number of combinations in a loop.","Parameter2":"variable-1, ..., variable-n","Description2":"Specifies either all numeric variables, or all character variables that have the same length. The values of these variables are permuted."},{"Name":"ALLCOMBI","Definition":"Generates all combinations of the indices of n objects taken k at a time in a minimal change order.","Parameter1":"N","Description1":"Is a numeric constant, variable, or expression that specifies the total number of objects.","Parameter2":"K","Description2":"Is a numeric constant, variable, or expression that specifies the number of objects in each combination.","Parameter3":"index-1, ..., index-K &lt;","Description3":"Is a numeric variable that contains indices of the objects in the returned combination. Indices are integers between 1 and N inclusive.","Parameter4":"index-added","Description4":"Is a numeric variable in which ALLCOMBI returns the value of the index that was added.","Parameter5":"index-removed&gt;","Description5":"Is a numeric variable in which ALLCOMBI returns the value of the index that was removed."},{"Name":"CATS*1","Definition":"Removes leading and trailing blanks, and returns a concatenated character string.","Parameter1":"string-1&lt;, ...string-n&gt;","Description1":"Specifies a SAS character string."},{"Name":"CATS*2","Definition":"Removes leading and trailing blanks, and returns a concatenated character string.","Parameter1":"result","Description1":"Specifies a character variable.","Parameter2":"string-1&lt;, ...string-n&gt;","Description2":"Specifies a constant, variable, or expression, either character or numeric. If item is numeric, then its value is converted to a character string using the BESTw. format. In this case, SAS does not write a note to the log."},{"Name":"CATT*1","Definition":"Removes trailing blanks, and returns a concatenated character string.","Parameter1":"string-1&lt;, ...string-n&gt;","Description1":"Specifies a SAS character string."},{"Name":"CATT*2","Definition":"Removes trailing blanks, and returns a concatenated character string.","Parameter1":"result","Description1":"Specifies a character variable.","Parameter2":"string-1&lt;, ...string-n&gt;","Description2":"Specifies a constant, variable, or expression, either character or numeric. If item is numeric, then its value is converted to a character string using the BESTw. format. In this case, SAS does not write a note to the log."},{"Name":"CATX*1","Definition":"Removes leading and trailing blanks, inserts delimiters, and returns a concatenated character string.","Parameter1":"delimiter","Description1":"Specifies a character string that is used as a delimiter between concatenated strings.","Parameter2":"string-1&lt;, ...string-n&gt;","Description2":"Specifies a constant, variable, or expression, either character or numeric. If item is numeric, then its value is converted to a character string using the BESTw. format. In this case, SAS does not write a note to the log."},{"Name":"CATX*2","Definition":"Removes leading and trailing blanks, inserts delimiters, and returns a concatenated character string.","Parameter1":"delimiter","Description1":"Specifies a character string that is used as a delimiter between concatenated strings.","Parameter2":"result","Description2":"Specifies a character variable.","Parameter3":"string-1&lt;, ...string-n&gt;","Description3":"Specifies a constant, variable, or expression, either character or numeric. If item is numeric, then its value is converted to a character string using the BESTw. format. In this case, SAS does not write a note to the log."},{"Name":"COMPCOST","Definition":"Sets the costs of operations for later use by the COMPGED function.","Parameter1":"operation","Description1":"Is a character constant, variable, or expression that specifies an operation that is performed by the COMPGED function.","Parameter2":"value-1 &lt;","Description2":"Is a numeric constant, variable, or expression that specifies the cost of the operation that is indicated by the preceding argument. Must be an integer that ranges from -32767 to 32767, or a missing value.","Parameter3":"operation-2, value-2 ...&gt;","Description3":"Optional additional operation-value pairs."},{"Name":"EXECUTE","Definition":"Resolves the argument, and issues the resolved value for execution at the next step boundary.","Parameter1":"argument","Description1":"Specifies a character expression, a DATA step variable, or a character constant (enclosed in quotation marks) that yields a macro invocation or a SAS statement."},{"Name":"GRAYCODE*1","Definition":"Generates all subsets of n items in a minimal change order.","Parameter1":"k","Description1":"Specifies a numeric variable. Initializing k to a negative number causes CALL GRAYCODE to initialize the subset to be empty.","Parameter2":"numeric-variable-1, ..., numeric-variable-n","Description2":"Specifies numeric variables that have values of 0 or 1 which are updated when CALL GRAYCODE is executed."},{"Name":"GRAYCODE*2","Definition":"Generates all subsets of n items in a minimal change order.","Parameter1":"k","Description1":"Specifies a numeric variable. Initializing k to a negative number causes CALL GRAYCODE to initialize the subset to be empty.","Parameter2":"character-variable&lt;","Description2":"Specifies a character variable that has a length of at least n characters. The first n characters indicate which items are in the subset.","Parameter3":"n&lt;","Description3":"Specifies a numeric constant, variable, or expression. By default, n is the length of character-variable.","Parameter4":"in-out&gt;&gt;","Description4":"Specifies a character constant, variable, or expression. The default value is \"IO.\" The first character is used to indicate that an item is in the subset. The second character is used to indicate that an item is out of the subset."},{"Name":"IS8601_CONVERT","Definition":"Converts an ISO 8601 interval to datetime and duration values, or converts datetime and duration values to an ISO 8601 interval.","Parameter1":"convert-from","Description1":"Specifies a keyword in single quotation marks that indicates whether the source for the conversion is an interval, a datetime and duration value, or a duration value.","Parameter2":"convert-to","Description2":"Specifies a keyword in single quotation marks that indicates the results of the conversion.","Parameter3":"&lt;from-variable(s)&gt;","Description3":"Specifies one or two variables that contain the source value. Specify one variable for an interval value and two variables, one each, for datetime and duration values.","Parameter4":"&lt;to-variable(s)&gt;","Description4":"Specifies one or two variables that contain converted values. Specify one variable for in interval value and two variables, one each, for datetime and duration values.","Parameter5":"date_time_replacements","Description5":"Specifies date or time component values to use when a month, day, or time component is omitted from an interval, datetime, or duration value. date_time_replacements is specified as a series of numbers separated by a comma to represent, in this order, the year, month, day, hour, minute, or second."},{"Name":"LABEL","Definition":"Assigns a variable label to a specified character variable.","Parameter1":"variable-1","Description1":"Specifies any SAS variable. If variable-1 does not have a label, the variable name is assigned as the value of variable-2.","Parameter2":"variable-2","Description2":"Specifies any SAS character variable. Variable labels can be up to 256 characters long; therefore, the length of variable-2 should be at least 256 characters to avoid truncating variable labels."},{"Name":"LEXCOMB","Definition":"Generates all distinct combinations of the non-missing values of n variables taken k at a time in lexicographic order.","Parameter1":"count","Description1":"Specifies an integer value that is assigned values from 1 to the number of combinations in a loop.","Parameter2":"k","Description2":"Specifies an integer constant, variable, or expression between 1 and n, inclusive, that specifies the number of items in each combination.","Parameter3":"variable-1, ..., variable-n","Description3":"Specifies either all numeric variables, or all character variables that have the same length. The values of these variables are permuted."},{"Name":"LEXCOMBI","Definition":"Generates all combinations of the indices of n objects taken k at a time in lexicographic order.","Parameter1":"n","Description1":"Is a numeric constant, variable, or expression that specifies the total number of objects.","Parameter2":"k","Description2":"Is a numeric constant, variable, or expression that specifies the number of objects in each combination.","Parameter3":"index-1, ..., index-k","Description3":"Is a numeric variable that contains indices of the objects in the combination that is returned. Indices are integers between 1 and n, inclusive."},{"Name":"LEXPERK","Definition":"Generates all distinct permutations of the non-missing values of n variables taken k at a time in lexicographic order.","Parameter1":"count","Description1":"Specifies an integer variable that is assigned a value from 1 to the number of permutations in a loop.","Parameter2":"k","Description2":"Specifies an integer constant, variable, or expression between 1 and n, inclusive, that specifies the number of items in each permutation.","Parameter3":"variable-1, ..., variable-n","Description3":"Specifies either all numeric variables, or all character variables that have the same length. The values of these variables are permuted."},{"Name":"LEXPERM","Definition":"Generates all distinct permutations of the non-missing values of several variables in lexicographic order.","Parameter1":"count","Description1":"Specifies a numeric variable that has an integer value that ranges from 1 to the number of permutations.","Parameter2":"variable-1 &lt;, ..., variable-N&gt;","Description2":"Specifies either all numeric variables, or all character variables that have the same length. The values of these variables are permuted by LEXPERM."},{"Name":"LOGISTIC","Definition":"Applies the logistic function to each argument.","Parameter1":"argument&lt;, argument, ...&gt;","Description1":"Is a numeric variable."},{"Name":"MISSING","Definition":"Assigns missing values to the specified character or numeric variables.","Parameter1":"varname1&lt;, varname2, ...&gt;","Description1":"Specifies the name of SAS character or numeric variables."},{"Name":"MODULE","Definition":"Calls an external routine without any return code.","Parameter1":"&lt;cntl-string","Description1":"Is an optional control string whose first character must be an asterisk (*), followed by any combination of the following characters: I (detects incorrect arguments or attribute tables), E (prints error messages), Sx (uses x as a separator character to separate field definitions), H (provides help on CALL MODULE routine syntax).","Parameter2":"&gt;module-name&lt;","Description2":"Is the name of the external module to use.","Parameter3":"expression-1","Description3":"Is one or more arguments to pass to the requested routine.","Parameter4":"..., expression-n&gt;","Description4":"Is one or more arguments to pass to the requested routine."},{"Name":"POKE","Definition":"Writes a value directly into memory on a 32-bit platform.","Parameter1":"source","Description1":"Specifies a character constant, variable, or expression that contains a value to write into memory.","Parameter2":"pointer","Description2":"Specifies a character string that contains the virtual address of the data that the CALL POKE routine alters.","Parameter3":"&lt;length&gt;","Description3":"Specifies a numeric constant, variable, or expression that contains the number of bytes to write from the source to the address that is indicated by pointer.","Parameter4":"&lt;floating-point&gt;","Description4":"Specifies that the value of source is stored as a floating-point number. The value of floating-point can be any number."},{"Name":"POKELONG","Definition":"Writes a value directly into memory on 32-bit and 64-bit platforms.","Parameter1":"source","Description1":"Specifies a character constant, variable, or expression that contains a value to write into memory.","Parameter2":"pointer","Description2":"Specifies a character string that contains the virtual address of the data that the CALL POKELONG routine alters.","Parameter3":"&lt;length&gt;","Description3":"Specifies a numeric SAS expression that contains the number of bytes to write from the source to the address that is indicated by the pointer.","Parameter4":"&lt;floating-point&gt;","Description4":"Specifies that the value of source is stored as a floating-point number. The value of floating-point can be any number."},{"Name":"PRXDEBUG","Definition":"Enables Perl regular expressions in a DATA step to send debugging output to the SAS log.","Parameter1":"on-off","Description1":"Specifies a numeric constant, variable, or expression. If the value of on-off is positive and non-zero, then debugging is turned on. If the value of on-off is zero, then debugging is turned off."},{"Name":"PRXFREE","Definition":"Frees memory that was allocated for a Perl regular expression.","Parameter1":"regular-expression-id","Description1":"Specifies a numeric variable with a value that is the identification number that is returned by the PRXPARSE function. regular-expression-id is set to missing if the call to the PRXFREE routine occurs without error."},{"Name":"PRXNEXT","Definition":"Returns the position and length of a substring that matches a pattern, and iterates over multiple matches within one string.","Parameter1":"regular-expression-id","Description1":"Specifies a numeric variable with a value that is the identification number that is returned by the PRXPARSE function.","Parameter2":"start","Description2":"Is a numeric variable that specifies the position at which to start the pattern matching in source.","Parameter3":"stop","Description3":"Is a numeric constant, variable, or expression that specifies the last character to use in source. If stop is -1, then the last character is the last non-blank character in source.","Parameter4":"source","Description4":"Specifies a character constant, variable, or expression that you want to search.","Parameter5":"position","Description5":"Is a numeric variable with a returned value that is the position in source at which the pattern begins. If no match is found, CALL PRXNEXT returns zero.","Parameter6":"length","Description6":"Is a numeric variable with a returned value that is the length of the string that is matched by the pattern. If no match is found, CALL PRXNEXT returns zero."},{"Name":"PRXPOSN","Definition":"Returns the start position and length for a capture buffer.","Parameter1":"regular-expression-id","Description1":"Specifies a numeric variable with a value that is a pattern identifier that is returned by the PRXPARSE function.","Parameter2":"capture-buffer","Description2":"Is a numeric constant, variable, or expression with a value that identifies the capture buffer from which to retrieve the start position and length.","Parameter3":"start &lt;","Description3":"Is a numeric variable with a returned value that is the position at which the capture buffer is found.","Parameter4":"length&gt;","Description4":"Is a numeric variable with a returned value that is the position at which the capture buffer is found."},{"Name":"PRXSUBSTR","Definition":"Returns the position and length of a substring that matches a pattern.","Parameter1":"regular-expression-id","Description1":"Specifies a numeric variable with a value that is an identification number that is returned by the PRXPARSE function.","Parameter2":"source","Description2":"Specifies a character constant, variable, or expression that you want to search.","Parameter3":"position &lt;","Description3":"Is a numeric variable with a returned value that is the position in source where the pattern begins. If no match is found, CALL PRXSUBSTR returns zero.","Parameter4":"length&gt;","Description4":"Is a numeric variable with a returned value that is the length of the substring that is matched by the pattern. If no match is found, CALL PRXSUBSTR returns zero."},{"Name":"RANBIN*1","Definition":"Returns a random variate from a binomial distribution.","Parameter1":"seed","Description1":"Is an integer. If seed is less than or equal to 0, the time of day is used to initialize the seed stream. Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"n","Description2":"Is an integer number of independent Bernoulli trials. Range: n &gt; 0.","Parameter3":"p","Description3":"Is a numeric probability of success parameter. Range: 0 &lt; p &lt; 1."},{"Name":"RANBIN*2","Definition":"Returns a random variate from a binomial distribution.","Parameter1":"seed","Description1":"Is the seed value. A new value for seed is returned each time CALL RANBIN is executed. Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"n","Description2":"Is an integer number of independent Bernoulli trials. Range: n &gt; 0.","Parameter3":"p","Description3":"Is a numeric probability of success parameter. Range: 0 &lt; p &lt; 1.","Parameter4":"x","Description4":"Is a numeric SAS variable. A new value for the random variate x is returned each time CALL RANBIN is executed."},{"Name":"RANCAU*1","Definition":"Returns a random variate from a Cauchy distribution.","Parameter1":"seed","Description1":"Is an integer. If seed is less than or equal to 0, the time of day is used to initialize the seed stream.  Range: seed &lt; 2\u00b3\u00b9 - 1."},{"Name":"RANCAU*2","Definition":"Returns a random variate from a Cauchy distribution.","Parameter1":"seed","Description1":"Is the seed value. A new value for seed is returned each time CALL RANCAU is executed. Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"x","Description2":"Is a numeric SAS variable. A new value for the random variate x is returned each time CALL RANCAU is executed."},{"Name":"RANEXP*1","Definition":"Returns a random variate from an exponential distribution.","Parameter1":"seed","Description1":"Is an integer. If seed is less than or equal to 0, the time of day is used to initialize the seed stream.  Range: seed &lt; 2\u00b3\u00b9 - 1."},{"Name":"RANEXP*2","Definition":"Returns a random variate from an exponential distribution.","Parameter1":"seed","Description1":"Is the seed value. A new value for seed is returned each time CALL RANEXP is executed. Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"x","Description2":"Is a numeric variable. A new value for the random variate x is returned each time CALL RANEXP is executed."},{"Name":"RANGAM*1","Definition":"Returns a random variate from a gamma distribution.","Parameter1":"seed","Description1":"Is an integer. If seed is less than or equal to 0, the time of day is used to initialize the seed stream.  Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"a","Description2":"Is a numeric shape parameter. Range: a &gt; 0."},{"Name":"RANGAM*2","Definition":"Returns a random variate from a gamma distribution.","Parameter1":"seed","Description1":"Is the seed value. A new value for seed is returned each time CALL RANGAM is executed. Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"a","Description2":"Is a numeric shape parameter. Range: a &gt; 0.","Parameter3":"x","Description3":"Is a numeric variable. A new value for the random variate x is returned each time CALL RANGAM is executed."},{"Name":"RANNOR*1","Definition":"Returns a random variate from a normal distribution.","Parameter1":"seed","Description1":"Is an integer. If seed is less than or equal to 0, the time of day is used to initialize the seed stream.  Range: seed &lt; 2\u00b3\u00b9 - 1."},{"Name":"RANNOR*2","Definition":"Returns a random variate from a normal distribution.","Parameter1":"seed","Description1":"Is the seed value. A new value for seed is returned each time CALL RANNOR is executed. Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"x","Description2":"Is a numeric variable. A new value for the random variate x is returned each time CALL RANNOR is executed."},{"Name":"RANPERK","Definition":"Randomly permutes the values of the arguments, and returns a permutation of k out of n values.","Parameter1":"seed","Description1":"Is a numeric variable that contains the random number seed.","Parameter2":"k","Description2":"Is the number of values that you want to have in the random permutation.","Parameter3":"variable-1&lt;","Description3":"Specifies all numeric variables, or all character variables that have the same length. K values of these variables are randomly permuted.","Parameter4":"variable-2, ...&gt;","Description4":"Specifies all numeric variables, or all character variables that have the same length. K values of these variables are randomly permuted."},{"Name":"RANPERM","Definition":"Randomly permutes the values of the arguments.","Parameter1":"seed","Description1":"Is a numeric variable that contains the random number seed.","Parameter2":"variable-1&lt;","Description2":"Specifies all numeric variables or all character variables that have the same length. The values of these variables are randomly permuted.","Parameter3":"variable-2, ...&gt;","Description3":"Specifies all numeric variables or all character variables that have the same length. The values of these variables are randomly permuted."},{"Name":"RANPOI*1","Definition":"Returns a random variate from a Poisson distribution.","Parameter1":"seed","Description1":"Is an integer. If seed is less than or equal to 0, the time of day is used to initialize the seed stream.  Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"m","Description2":"Is a numeric mean parameter greater than or equal to zero."},{"Name":"RANPOI*2","Definition":"Returns a random variate from a Poisson distribution.","Parameter1":"seed","Description1":"Is the seed value. A new value for seed is returned each time CALL RANPOI is executed. Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"m","Description2":"Is a numeric mean parameter greater than or equal to zero.","Parameter3":"x","Description3":"Is a numeric variable. A new value for the random variate x is returned each time CALL RANPOI is executed."},{"Name":"RANTBL*1","Definition":"Returns a random variate from a tabled probability distribution.","Parameter1":"seed","Description1":"Is an integer. If seed is less than or equal to 0, the time of day is used to initialize the seed stream.  Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"p1, ...pn","Description2":"Is a numeric SAS value."},{"Name":"RANTBL*2","Definition":"Returns a random variate from a tabled probability distribution.","Parameter1":"seed","Description1":"Is the seed value. A new value for seed is returned each time CALL RANTBL is executed. Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"p1, ...pn","Description2":"Is a numeric SAS value.","Parameter3":"x","Description3":"Is a numeric SAS variable. A new value for the random variate x is returned each time CALL RANTBL is executed."},{"Name":"RANTRI*1","Definition":"Returns a random variate from a triangular distribution.","Parameter1":"seed","Description1":"Is an integer. If seed is less than or equal to 0, the time of day is used to initialize the seed stream.  Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"h","Description2":"Is a numeric SAS value. Range: 0 &lt; h &lt; 1."},{"Name":"RANTRI*2","Definition":"Returns a random variate from a triangular distribution.","Parameter1":"seed","Description1":"Is the seed value. A new value for seed is returned each time CALL RANTRI is executed. Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"h","Description2":"Is a numeric SAS value. Range: 0 &lt; h &lt; 1.","Parameter3":"x","Description3":"Is a numeric SAS variable. A new value for the random variate x is returned each time CALL RANTRI is executed."},{"Name":"RANUNI*1","Definition":"Returns a random variate from a uniform distribution.","Parameter1":"seed","Description1":"Is an integer. If seed is less than or equal to 0, the time of day is used to initialize the seed stream.  Range: seed &lt; 2\u00b3\u00b9 - 1."},{"Name":"RANUNI*2","Definition":"Returns a random variate from a uniform distribution.","Parameter1":"seed","Description1":"Is the seed value. A new value for seed is returned each time CALL RANUNI is executed. Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"x","Description2":"Is a numeric variable. A new value for the random variate x is returned each time CALL RANUNI is executed."},{"Name":"SET","Definition":"Links SAS data set variables to DATA step or macro variables that have the same name and data type.","Parameter1":"data-set-id","Description1":"Is the identifier that is assigned by the OPEN function when the data set is opened."},{"Name":"SOFTMAX","Definition":"Returns the softmax value.","Parameter1":"argument&lt;,argument, ...&gt;","Description1":"Is numeric."},{"Name":"SORTC","Definition":"Sorts the values of character arguments.","Parameter1":"variable-1&lt;, ..., variable-n&gt;","Description1":"Specifies a character variable."},{"Name":"SORTN","Definition":"Sorts the values of numeric arguments.","Parameter1":"variable-1&lt;, ..., variable-n&gt;","Description1":"Specifies a numeric variable."},{"Name":"STDIZE","Definition":"Standardizes the values of one or more variables.","Parameter1":"&lt;option-1, option-2, ...","Description1":"Specifies a character expression whose values can be uppercase, lowercase, or mixed case letters. Leading and trailing blanks are ignored.","Parameter2":"&gt;variable-1&lt;","Description2":"Is numeric. These values will be standardized according to the method that you use.","Parameter3":"variable-2, ...&gt;","Description3":"Is numeric. These values will be standardized according to the method that you use."},{"Name":"STREAMINIT","Definition":"Specifies a seed value to use for subsequent random number generation by the RAND function.","Parameter1":"seed","Description1":"Is an integer seed value.  Range: seed &lt; 2\u00b3\u00b9 - 1."},{"Name":"SYMPUT","Definition":"Assigns DATA step information to a macro variable.","Parameter1":"expression-1","Description1":"Specifies a character expression that identifies the macro variable that is assigned a value. If the macro variable does not exist, the routine creates it.","Parameter2":"expression-2","Description2":"Specifies a character constant, variable, or expression that contains the value that is assigned."},{"Name":"SYMPUTX","Definition":"Assigns a value to a macro variable, and removes both leading and trailing blanks.","Parameter1":"macro-variable","Description1":"A character constant, variable, or expression.","Parameter2":"value","Description2":"Specifies a character or numeric constant, variable, or expression. If value is numeric, SAS converts the value to a character string using the BEST. format and does not issue a note to the SAS log.","Parameter3":"symbol-table","Description3":"Specifies a character constant, variable, or expression. The following values are valid as the first non-blank character in symbol-table: G (global symbol table), L (local symbol table), F (any symbol table)."},{"Name":"SYSTEM","Definition":"Submits an operating environment command for execution.","Parameter1":"command","Description1":"Specifies any of the following: a system command that is enclosed in quotation marks (character string), an expression whose value is a system command, or the name of a character variable whose value is a system command that is executed."},{"Name":"VNEXT","Definition":"Returns the name, type, and length of a variable that is used in a DATA step.","Parameter1":"varname&lt;","Description1":"Is a character variable that is updated by the CALL VNEXT routine.","Parameter2":"vartype&lt;","Description2":"Is a character variable whose input value is ignored. The value that is returned is \"N\" or \"C\".","Parameter3":"varlength","Description3":"Is a numeric variable. The input value of varlength is ignored."},{"Name":"CAT","Definition":"Does not remove leading or trailing blanks, and returns a concatenated character string.","Parameter1":"item-1 &lt;, ..., item-n&gt;","Description1":"Specifies a constant, variable, or expression, either character or numeric. If item is numeric, then its value is converted to a character string by using the BESTw. format."},{"Name":"CATQ","Definition":"Concatenates character or numeric values by using a delimiter to separate items and by adding quotation marks to strings that contain the delimiter.","Parameter1":"modifier(s)&lt;","Description1":"Specifies a character constant, variable, or expression in which each non-blank character modifies the action of the CATQ function. Blanks are ignored.","Parameter2":"delimiter&gt;","Description2":"Specifies a character constant, variable, or expression that is used as a delimiter between concatenated strings. If you specify this argument, then you must also specify the D modifier.","Parameter3":"item","Description3":"Specifies a constant, variable, or expression, either character or numeric. If item is numeric, then its value is converted to a character string by using the BESTw. format."},{"Name":"CDF","Definition":"Returns a value from a cumulative probability distribution.","Parameter1":"distribution","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"quantile&lt;","Description2":"Is a numeric constant, variable, or expression that specifies the value of the random variable.","Parameter3":"parm-1, ... ,parm-k&gt;","Description3":"Are optional constants, variables, or expressions that specify shape, location, or scale parameters appropriate for the specific distribution."},{"Name":"CEIL","Definition":"Returns the smallest integer greater than or equal to a numeric value expression. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"CEILZ","Definition":"Returns the smallest integer that is greater than or equal to the argument, using zero fuzzing. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"CEXIST","Definition":"Verifies the existence of a SAS catalog or SAS catalog entry.","Parameter1":"entry&lt;","Description1":"Is a character constant, variable, or expression that specifies a SAS catalog, or the name of an entry in a catalog. If the entry value is a one- or two-level name, then it is assumed to be the name of a catalog.","Parameter2":"'U'&gt;","Description2":"tests whether the catalog can be opened for updating."},{"Name":"CHAR","Definition":"Returns a single character from a specified position in a character string.","Parameter1":"string","Description1":"Specifies a character constant, variable, or expression.","Parameter2":"position","Description2":"Is an integer that specifies the position of the character to be returned."},{"Name":"CHOOSEC","Definition":"Returns a character value that represents the results of choosing from a list of arguments.","Parameter1":"index-expression","Description1":"Specifies a numeric constant, variable, or expression.","Parameter2":"selection-1 &lt;","Description2":"Specifies a character constant, variable, or expression. The value of this argument is returned by the CHOOSEC function.","Parameter3":"...selection-n&gt;","Description3":"Specifies a character constant, variable, or expression. The value of this argument is returned by the CHOOSEC function."},{"Name":"CHOOSEN","Definition":"Returns a numeric value that represents the results of choosing from a list of arguments.","Parameter1":"index-expression","Description1":"Specifies a numeric constant, variable, or expression.","Parameter2":"selection-1 &lt;","Description2":"Specifies a numeric constant, variable, or expression. The value of this argument is returned by the CHOOSEN function.","Parameter3":"...selection-n&gt;","Description3":"Specifies a numeric constant, variable, or expression. The value of this argument is returned by the CHOOSEN function."},{"Name":"CINV","Definition":"Returns a quantile from the chi-square distribution.","Parameter1":"p","Description1":"Is a numeric probability. Range: 0 \u2264 p &lt; 1","Parameter2":"df&lt;","Description2":"Is a numeric degrees of freedom parameter. Range: df &gt; 0.","Parameter3":"nc&gt;","Description3":"Is an optional numeric noncentrality parameter. Range: nc \u2265 0."},{"Name":"CLOSE","Definition":"Closes a SAS data set.","Parameter1":"data-set-id","Description1":"Is a numeric variable that specifies the data set identifier that the OPEN function returns."},{"Name":"CMISS","Definition":"Counts the number of missing arguments.","Parameter1":"expression-1 &lt;","Description1":"Specifies a constant, variable, or expression. Argument can be either a character value or a numeric value.","Parameter2":"expression-2...&gt;","Description2":"Specifies a constant, variable, or expression. Argument can be either a character value or a numeric value."},{"Name":"CNONCT","Definition":"Returns the noncentrality parameter from a chi-square distribution.","Parameter1":"x","Description1":"Is a numeric random variable greater than or equal to zero.","Parameter2":"df","Description2":"Is a numeric degrees of freedom parameter. Range:  df &gt; 0.","Parameter3":"prob","Description3":"Is a probability. Range: 0 &lt; prob &lt; 1."},{"Name":"COALESCE","Definition":"Returns the first non-null or non-missing value from a list of numeric arguments. \n    \nReturn value data type: DOUBLE","Parameter1":"expression-1 [","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE","Parameter2":"... expression-n ]","Description2":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"COALESCEC","Definition":"Returns the first non-null or non-missing value from a list of character arguments.","Parameter1":"expression-1 [","Description1":"Specifies any valid expression that evaluates to a character value. \n\nValid data types: NCHAR","Parameter2":"... expression-n ]","Description2":"Specifies any valid expression that evaluates to a character value. \n\nValid data types: NCHAR"},{"Name":"COLLATE*1","Definition":"Returns a character string in ASCII or EBCDIC collating sequence. \n    \nValid for Data Types: NCHAR","Parameter1":"start-position [","Description1":"Specifies the numeric position in the collating sequence of the first character \nto be returned. \n\nInteraction: If you specify only start-position, COLLATE returns consecutive \ncharacters from that position to the end of the collating sequence or up to \n255 characters, whichever comes first. \n\nValid data types: NCHAR","Parameter2":"end-position ]","Description2":"Specifies the numeric position in the collating sequence of the last character \nto be returned.\n\nThe maximum end-position for the EBCDIC collating sequence is 255. For ASCII \ncollating sequences, the characters that correspond to end-position values \nbetween 0 and 127 represent the standard character set. Other ASCII characters \nthat correspond to end-position values between 128 and 255 are available on \ncertain ASCII operating environments, but the information that those characters \nrepresent varies with the operating environment.\n\nRequirement: end-position must be larger than start-position  \nValid data types: NCHAR \nTip: If you specify end-position, COLLATE returns all character values in the \ncollating sequence between start-position and end-position, inclusive."},{"Name":"COLLATE*2","Definition":"Returns a character string in ASCII or EBCDIC collating sequence.","Parameter1":"start-position&lt;","Description1":"Specifies the numeric position in the collating sequence of the first character to be returned.","Parameter2":"length&gt;","Description2":"Specifies the number of characters in the collating sequence. Default value: 200."},{"Name":"COMB","Definition":"Computes the number of combinations of n elements taken r at a time.","Parameter1":"n","Description1":"Is a non-negative integer that represents the total number of elements from which the sample is chosen.","Parameter2":"r","Description2":"Is a non-negative integer that represents the number of chosen elements. Range: r \u2264 n."},{"Name":"COMPARE","Definition":"Returns the position of the leftmost character by which two strings differ, or returns 0 if there is no difference.","Parameter1":"string-1","Description1":"Specifies a character constant, variable, or expression.","Parameter2":"string-2&lt;","Description2":"Specifies a character constant, variable, or expression.","Parameter3":"modifier(s)&gt;","Description3":"Specifies a character string that can modify the action of the COMPARE function. You can use one or more of the following characters as a valid modifier: i or I (to ignore case), l or L (to remove leading blanks), n or N (to remove quotation marks), : (to truncate the longer of string-1 or string-2 to the length of the shorter string, or to one, whichever is greater."},{"Name":"COMPBL","Definition":"Removes multiple blanks from a character string. \n    \nReturn value data types: NCHAR","Parameter1":"character-expression","Description1":"Specifies any valid expression that evaluates to a character string and that specifies \nthe character string to compress.\n\nValid data types: NCHAR \n"},{"Name":"COMPGED","Definition":"Returns the generalized edit distance between two strings.","Parameter1":"string-1","Description1":"Specifies a character constant, variable, or expression.","Parameter2":"string-2&lt;","Description2":"Specifies a character constant, variable, or expression.","Parameter3":"cutoff&gt;&lt;","Description3":"Is a numeric constant, variable, or expression. If the actual generalized edit distance is greater than the value of cutoff, the value that is returned is equal to the value of cutoff.","Parameter4":"modifiers&gt;","Description4":"Specifies a character string that can modify the action of the COMPGED function. You can use one or more of the following characters as a valid modifier:  i or I (to ignore case), l or L (to remove leading blanks), n or N (to remove quotation marks), : (to truncate the longer of string-1 or string-2 to the length of the shorter string, or to one, whichever is greater."},{"Name":"COMPLEV","Definition":"Returns the Levenshtein edit distance between two strings.","Parameter1":"string-1","Description1":"Specifies a character constant, variable, or expression.","Parameter2":"string-2&lt;","Description2":"Specifies a character constant, variable, or expression.","Parameter3":"cutoff&gt;&lt;","Description3":"Specifies a numeric constant, variable, or expression. If the actual Levenshtein edit distance is greater than the value of cutoff, the value that is returned is equal to the value of cutoff.","Parameter4":"modifiers&gt;","Description4":"Specifies a character string that can modify the action of the COMPLEV function. You can use one or more of the following characters as a valid modifier: i or I (to ignore case), l or L (to remove leading blanks), n or N (to remove quotation marks), : (to truncate the longer of string-1 or string-2 to the length of the shorter string, or to one, whichever is greater."},{"Name":"COMPOUND","Definition":"Returns compound interest parameters.","Parameter1":"a","Description1":"Is numeric, and specifies the initial amount. Range: a \u2265 0.","Parameter2":"f","Description2":"Is numeric, and specifies the future amount (at the end of n periods). Range: f \u2265 0.","Parameter3":"r","Description3":"Is numeric, and specifies the periodic interest rate expressed as a fraction. Range: r \u2265 0.","Parameter4":"n","Description4":"Is an integer, and specifies the number of compounding periods. Range: n \u2265 0."},{"Name":"COMPRESS","Definition":"Returns a character string with specified characters removed from the original string. \n    \nReturn value data type: CHAR, NCHAR","Parameter1":"character-expression [","Description1":"Specifies any valid expression that evaluates to a character expression and from which \nspecified characters will be removed. \n\nRequirement: Enclose a literal string of characters in single quotation marks. \nValid data types: CHAR, NCHAR","Parameter2":"character-list-expression ]","Description2":"Specifies a variable or any valid expression that initializes a list of characters.\n\nBy default, the characters in this list are removed from character-expression. \n\nRequirement: Enclose a literal string of characters in single quotation marks. \nValid data types: CHAR, NCHAR"},{"Name":"CONSTANT","Definition":"Computes machine and mathematical constants.","Parameter1":"constant&lt;","Description1":"Is a character constant, variable, or expression that identifies the constant to be returned. Valid constants are as follows: 'E', 'EULER', 'PI', 'EXACTINT', 'BIG', 'LOGBIG', 'SQRTBIG', 'SMALL', 'LOGSMALL', 'SQRTSMALL', 'MACEPS', 'LOGMACEPS', 'SQRTMACEPS'.","Parameter2":"parameter&gt;","Description2":"Is an optional numeric parameter. Some of the constants specified in constant have an optional argument that alters the functionality of the CONSTANT function."},{"Name":"CONVX","Definition":"Returns the convexity for an enumerated cash flow.","Parameter1":"y","Description1":"Specifies the effective per-period yield-to-maturity, expressed as a fraction. Range: 0 &lt; y &lt; 1.","Parameter2":"f","Description2":"Specifies the frequency of cash flows per period. Range: f &gt; 0.","Parameter3":"c(1), ..., c(k)","Description3":"Specifies a list of cash flows."},{"Name":"CONVXP","Definition":"Returns the convexity for a periodic cash flow stream, such as a bond.","Parameter1":"A","Description1":"Specifies the par value. Range: A &gt; 0","Parameter2":"c","Description2":"Specifies the nominal per-period coupon rate, expressed as a fraction. Range: 0 \u2264 c &lt; 1.","Parameter3":"n","Description3":"Specifies the number of coupons per period. n &gt; 0 and is an integer.","Parameter4":"K","Description4":"Specifies the number of remaining coupons. Range: K &gt; 0","Parameter5":"ko","Description5":"Specifies the time from the present date to the first coupon date, expressed in terms of the number of periods. Range: 0 &lt; ko \u2264 1/n.","Parameter6":"y","Description6":"Specifies the nominal per-period yield-to-maturity, expressed as a fraction. Range: y &gt; 0."},{"Name":"COS","Definition":"Returns the cosine in radians. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"COSH","Definition":"Returns the hyperbolic cosine in radians. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"COUNT","Definition":"Counts the number of times that a specified substring appears within a character string.","Parameter1":"string","Description1":"Specifies a character constant, variable, or expression in which substrings are to be counted. Enclose a literal string of characters in quotation marks.","Parameter2":"substring&lt;","Description2":"Is a character constant, variable, or expression that specifies the substring of characters to count in string. Enclose a literal string of characters in quotation marks.","Parameter3":"modifiers&gt;","Description3":"Is a character constant, variable, or expression that specifies one or more modifiers. The following modifiers can be in uppercase or lowercase: i (ignores character case), t (trims trailing blanks)."},{"Name":"COUNTC","Definition":"Counts the number of characters in a string that appear or do not appear in a list of characters.","Parameter1":"string","Description1":"Specifies a character constant, variable, or expression in which characters are counted. Enclose a literal string of characters in quotation marks.","Parameter2":"charlist&lt;","Description2":"Specifies a character constant, variable, or expression that initializes a list of characters. COUNTC counts characters in this list, provided that you do not specify the V modifier in the modifier argument.","Parameter3":"modifier(s)&gt;","Description3":"Specifies a character constant, variable, or expression in which each non-blank character modifies the action of the COUNTC function. Blanks are ignored."},{"Name":"COUNTW","Definition":"Counts the number of words in a character string.","Parameter1":"&lt;string&gt;&lt;","Description1":"Specifies a character constant, variable, or expression in which words are counted.","Parameter2":"&lt;chars&gt;&lt;","Description2":"Specifies an optional character constant, variable, or expression that initializes a list of characters. The characters in this list are the delimiters that separate words, provided that you do not use the K modifier in the modifier argument. If you specify the K modifier, then all characters that are not in this list are delimiters.","Parameter3":"modifier(s)&gt;","Description3":"Specifies a character constant, variable, or expression in which each non-blank character modifies the action of the COUNTW function."},{"Name":"CSS","Definition":"Returns the corrected sum of squares. \n    \nReturn value data type: DOUBLE","Parameter1":"expression [, ...expression ]","Description1":"Specifies any valid expression that evaluates to a numeric value. \n\nRequirement: At least one non-null or non-missing expression is required. \nValid data types: DOUBLE"},{"Name":"CUROBS","Definition":"Returns the observation number of the current observation.","Parameter1":"data-set-id","Description1":"Is a numeric value that specifies the data set identifier that the OPEN function returns."},{"Name":"CV","Definition":"Returns the coefficient of variation. \n \nRequirement: At least two arguments are required. \nReturn value data type: DOUBLE","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE","Parameter2":"expression-2 [, ...expression-n ]","Description2":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE"},{"Name":"DACCDB","Definition":"Returns the accumulated declining balance depreciation.","Parameter1":"p","Description1":"Is numeric, the period for which the calculation is to be done. For noninteger p arguments, the depreciation is prorated between the two consecutive time periods that precede and follow the fractional period.","Parameter2":"v","Description2":"Is numeric, the depreciable initial value of the asset.","Parameter3":"y","Description3":"Is numeric, the lifetime of the asset. Range: y &gt; 0.","Parameter4":"r","Description4":"Is numeric, the rate of depreciation expressed as a decimal. Range: r &gt; 0."},{"Name":"DACCDBSL","Definition":"Returns the accumulated declining balance with conversion to a straight-line depreciation.","Parameter1":"p","Description1":"Is numeric, the period for which the calculation is to be done.","Parameter2":"v","Description2":"Is numeric, the depreciable initial value of the asset.","Parameter3":"y","Description3":"Is an integer, the lifetime of the asset. Range y &gt; 0.","Parameter4":"r","Description4":"Is numeric, the rate of depreciation that is expressed as a fraction. Range r &gt; 0."},{"Name":"DACCSL","Definition":"Returns the accumulated straight-line depreciation.","Parameter1":"p","Description1":"Is numeric, the period for which the calculation is to be done. For fractional p, the depreciation is prorated between the two consecutive time periods that precede and follow the fractional period.","Parameter2":"v","Description2":"Is numeric, the depreciable initial value of the asset.","Parameter3":"y","Description3":"Is numeric, the lifetime of the asset. Range y &gt; 0."},{"Name":"DACCSYD","Definition":"Returns the accumulated sum-of-years-digits depreciation.","Parameter1":"p","Description1":"Is numeric, the period for which the calculation is to be done. For noninteger p arguments, the depreciation is prorated between the two consecutive time periods that precede and follow the fractional period.","Parameter2":"v","Description2":"Is numeric, the depreciable initial value of the asset.","Parameter3":"y","Description3":"Is numeric, the lifetime of the asset. Range y &gt; 0."},{"Name":"DACCTAB","Definition":"Returns the accumulated depreciation from specified tables.","Parameter1":"p","Description1":"Is numeric, the period for which the calculation is to be done. For noninteger p arguments, the depreciation is prorated between the two consecutive time periods that precede and follow the fractional period.","Parameter2":"v","Description2":"Is numeric, the depreciable initial value of the asset.","Parameter3":"t1, t2, ..., tn","Description3":"Are numeric, the fractions of depreciation for each time period with t1+t2+...tn\u22641."},{"Name":"DAIRY","Definition":"Returns the derivative of the AIRY function.","Parameter1":"x","Description1":"Specifies a numeric constant, variable, or expression."},{"Name":"DATDIF","Definition":"Returns the number of days between two dates.","Parameter1":"sdate","Description1":"Specifies a SAS date value that identifies the starting date. If sdate falls at the end of a month, then SAS treats the date as if it were the last day of a 30-day month.","Parameter2":"edate","Description2":"Specifies a SAS date value that identifies the ending date. If sdate falls at the end of a month, then SAS treats the date as if it were the last day of a 30-day month.","Parameter3":"basis","Description3":"Identifies a character constant or variable that describes how SAS calculates the date difference in the securities industry. The following character strings are valid: '30/360' (30-day month and a 360-day year), 'ACT/ACT' (uses actual number of days between dates), 'ACT/360' (uses actual number of calendar days in a month, and 360 days for the year), 'ACT/365' (uses actual number of calendar days for each month, and 365 days for the year)."},{"Name":"DATE","Definition":"Returns the current date as a SAS date value.\n    \nReturn value data type: DOUBLE"},{"Name":"DATEJUL","Definition":"Converts a Julian date to a SAS date value. \n    \nReturn value data type: DOUBLE","Parameter1":"julian-date","Description1":"Specifies a SAS numeric expression that represents a Julian date. A Julian date in SAS is a date in the form yyddd or yyyyddd, where yy or yyyy is a two-digit or four-digit integer that represents the year and ddd is the number of the day of the year. The value of ddd must be between 1 and 365 (or 366 for a leap year)."},{"Name":"DATEPART","Definition":"Extracts the date from a SAS datetime value.","Parameter1":"datetime","Description1":"Specifies any valid expression that represents a SAS datetime value.\n\nValid data types: DOUBLE"},{"Name":"DATETIME","Definition":"Returns the current date and time of day as a SAS datetime value. \n    \nReturn value data type: DOUBLE"},{"Name":"DAY","Definition":"Returns the day of the month from a SAS date value. \n    \nReturn value data type: DOUBLE","Parameter1":"date","Description1":"Specifies any valid expression that represents a SAS date value.\n\nValid data types: DOUBLE"},{"Name":"DCLOSE","Definition":"Closes a directory that was opened by the DOPEN function.","Parameter1":"directory-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the directory was opened by the DOPEN function."},{"Name":"DCREATE","Definition":"Returns the complete pathname of a new, external directory.","Parameter1":"directory-name&lt;","Description1":"Is a character constant, variable, or expression that specifies the name of the directory to create. This value cannot include a pathname.","Parameter2":"parent-directory&gt;","Description2":"Is a character constant, variable, or expression that contains the complete pathname of the directory in which to create the new directory. If you do not supply a value for parent-directory, then the current directory is the parent directory."},{"Name":"DEPDB","Definition":"Returns the declining balance depreciation.","Parameter1":"p","Description1":"Is numeric, the period for which the calculation is to be done. For noninteger p arguments, the depreciation is prorated between the two consecutive time periods that precede and follow the fractional period.","Parameter2":"v","Description2":"Is numeric, the depreciable initial value of the asset.","Parameter3":"y","Description3":"Is numeric, the lifetime of the asset. Range: y &gt; 0.","Parameter4":"r","Description4":"Is numeric, the rate of depreciation that is expressed as a fraction. Range: r &gt; 0."},{"Name":"DEPDBSL","Definition":"Returns the declining balance with conversion to a straight-line depreciation.","Parameter1":"p","Description1":"Is an integer, the period for which the calculation is to be done.","Parameter2":"v","Description2":"Is numeric, the depreciable initial value of the asset.","Parameter3":"y","Description3":"Is an integer, the lifetime of the asset. Range: y&gt;0.","Parameter4":"r","Description4":"Is numeric, the rate of depreciation that is expressed as a fraction. Range: r &gt; 0."},{"Name":"DEPSL","Definition":"Returns the straight-line depreciation.","Parameter1":"p","Description1":"Is numeric, the period for which the calculation is to be done. For fractional p, the depreciation is prorated between the two consecutive time periods that precede and follow the fractional period.","Parameter2":"v","Description2":"Is numeric, the depreciable initial value of the asset.","Parameter3":"y","Description3":"Is numeric, the lifetime of the asset. Range: y &gt; 0."},{"Name":"DEPSYD","Definition":"Returns the sum-of-years-digits depreciation.","Parameter1":"p","Description1":"Is numeric, the period for which the calculation is to be done. For noninteger p arguments, the depreciation is prorated between the two consecutive time periods that precede and follow the fractional period.","Parameter2":"v","Description2":"Is numeric, the depreciable initial value of the asset.","Parameter3":"y","Description3":"Is numeric, the lifetime of the asset in number of depreciation periods. Range: y &gt; 0."},{"Name":"DEPTAB","Definition":"Returns the depreciation from specified tables.","Parameter1":"p","Description1":"Is numeric, the period for which the calculation is to be done. For noninteger p arguments, the depreciation is prorated between the two consecutive time periods that precede and follow the fractional period.","Parameter2":"v","Description2":"Is numeric, the depreciable initial value of the asset.","Parameter3":"t1, t2, ..., tn","Description3":"are numeric, the fractions of depreciation for each time period with t1+t2+...tn\u22641."},{"Name":"DEQUOTE","Definition":"Removes matching quotation marks from a character string that begins with a quotation \nmark, and deletes all characters to the right of the closing quotation mark.","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: NCHAR"},{"Name":"DEVIANCE","Definition":"Returns the deviance based on a probability distribution.","Parameter1":"distribution","Description1":"Is a character constant, variable, or expression that identifies the distribution. Valid distributions are: 'BERNOULLI' | 'BERN', 'BINOMIAL' | 'BINO', 'GAMMA', 'IGAUSS' | 'WALD', 'NORMAL' | 'GAUSSIAN', 'NORMAL' | 'GAUSSIAN'.","Parameter2":"variable","Description2":"Is a numeric constant, variable, or expression.","Parameter3":"shape-parameter(s)&lt;","Description3":"Are one or more distribution-specific numeric parameters that characterize the shape of the distribution.","Parameter4":"epsilon&gt;","Description4":"Is an optional numeric small value used for all of the distributions, except for the normal distribution."},{"Name":"DHMS","Definition":"Returns a SAS datetime value from date, hour, minute, and second values. \n    \nReturn value data type: DOUBLE","Parameter1":"date","Description1":"Specifies any valid expression that represents a SAS date value.\n\nValid data types: DOUBLE","Parameter2":"hour","Description2":"Specifies a numeric expression that represents an integer from 1 through 12.\n\nValid data types: DOUBLE","Parameter3":"minute","Description3":"Specifies a numeric expression that represents an integer from 1 through 59. \n\nValid data types: DOUBLE","Parameter4":"second","Description4":"Specifies a numeric expression that represents an integer from 1 through 59.\n\nValid data types: DOUBLE"},{"Name":"DIF","Definition":"Returns differences between an argument and its nth lag. n specifies the number of lags.","Parameter1":"argument","Description1":"Specifies a numeric constant, variable, or expression."},{"Name":"DIGAMMA","Definition":"Returns the value of the digamma function. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value. \n\nRestriction: Zero and negative integers are not valid. \nValid data types: DOUBLE"},{"Name":"DIM*1","Definition":"Returns the number of elements in an array. n specifies the dimension, in a multidimensional array, for which you want to know the number of elements.","Parameter1":"array-name","Description1":"Specifies the name of an array that was previously defined in the same DATA step. This argument cannot be a constant, variable, or expression."},{"Name":"DIM*2","Definition":"Returns the number of elements in an array.","Parameter1":"array-name","Description1":"Specifies the name of an array that was previously defined in the same DATA step. This argument cannot be a constant, variable, or expression.","Parameter2":"bound-n","Description2":"Is a numeric constant, variable, or expression that specifies the dimension, in a multidimensional array, for which you want to know the number of elements. Use bound-n only when n is not specified."},{"Name":"DINFO","Definition":"Returns information about a directory.","Parameter1":"directory-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the directory was opened by the DOPEN function.","Parameter2":"info-item","Description2":"Is a character constant, variable, or expression that specifies the information item to be retrieved. DINFO returns a blank if the value of the info-item argument is invalid. The information available varies according to the operating environment."},{"Name":"DIVIDE","Definition":"Returns the result of a division that handles special missing values for ODS output.","Parameter1":"x","Description1":"Is a numeric constant, variable, or expression.","Parameter2":"y","Description2":"Is a numeric constant, variable, or expression."},{"Name":"DNUM","Definition":"Returns the number of members in a directory.","Parameter1":"directory-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the directory was opened by the DOPEN function."},{"Name":"DOPEN","Definition":"Opens a directory, and returns a directory identifier value.","Parameter1":"fileref","Description1":"Is a character constant, variable, or expression that specifies the fileref assigned to the directory."},{"Name":"DOPTNAME","Definition":"Returns directory attribute information.","Parameter1":"directory-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the directory was opened by the DOPEN function.","Parameter2":"nval","Description2":"Is a numeric constant, variable, or expression that specifies the sequence number of the option."},{"Name":"DOPTNUM","Definition":"Returns the number of information items that are available for a directory.","Parameter1":"directory-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the directory was opened by the DOPEN function."},{"Name":"DREAD","Definition":"Returns the name of a directory member.","Parameter1":"directory-id","Description1":"Is a numeric value that specifies the identifier that was assigned when the directory was opened by the DOPEN function.","Parameter2":"nval","Description2":"Is a numeric constant, variable, or expression that specifies the sequence number of the member within the directory."},{"Name":"DROPNOTE","Definition":"Deletes a note marker from a SAS data set or an external file.","Parameter1":"data-set-id|file-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the data set or external file was opened, generally by the OPEN function or the FOPEN function.","Parameter2":"note-id","Description2":"Is a numeric value that specifies the identifier that was assigned by the NOTE or FNOTE function."},{"Name":"DSNAME","Definition":"Returns the SAS data set name that is associated with a data set identifier.","Parameter1":"data-set-id","Description1":"Is a numeric variable that specifies the data set identifier that is returned by the OPEN function."},{"Name":"DUR","Definition":"Returns the modified duration for an enumerated cash flow.","Parameter1":"y","Description1":"Specifies the effective per-period yield-to-maturity, expressed as a fraction. Range: y &gt; 0.","Parameter2":"f","Description2":"Specifies the frequency of cash flows per period. Range: f &gt; 0.","Parameter3":"c(1), ... ,c(k)","Description3":"Specifies a list of cash flows."},{"Name":"DURP","Definition":"Returns the modified duration for a periodic cash flow stream, such as a bond.","Parameter1":"A","Description1":"Specifies the par value. Range: A &gt; 0.","Parameter2":"c","Description2":"Specifies the nominal per-period coupon rate, expressed as a fraction. Range: 0 \u2264 c &lt; 1.","Parameter3":"n","Description3":"Specifies the number of coupons per period. Range: n &gt; 0 and is an integer.","Parameter4":"K","Description4":"Specifies the number of remaining coupons. Range: K &gt; 0 and is an integer.","Parameter5":"ko","Description5":"Specifies the time from the present date to the first coupon date, expressed in terms of the number of periods. Range: 0 &lt; c \u2264 1/n.","Parameter6":"y","Description6":"Specifies the nominal per-period yield-to-maturity, expressed as a fraction. Range: y &gt; 0."},{"Name":"ENVLEN","Definition":"Returns the length of an environment variable.","Parameter1":"argument","Description1":"Specifies a character variable that is the name of an operating system environment variable. Enclose argument in quotation marks."},{"Name":"ERF","Definition":"Returns the value of the (normal) error function.","Parameter1":"argument","Description1":"Specifies a numeric constant, variable, or expression."},{"Name":"ERFC","Definition":"Returns the value of the complementary (normal) error function.","Parameter1":"argument","Description1":"Specifies a numeric constant, variable, or expression.","Description4":null},{"Name":"EUCLID","Definition":"Returns the Euclidean norm of the non-missing arguments.","Parameter1":"value-1 &lt;,value-2 ...&gt;","Description1":"Specifies a numeric constant, variable, or expression."},{"Name":"EXIST","Definition":"Verifies the existence of a SAS library member.","Parameter1":"member-name&lt;","Description1":"Is a character constant, variable, or expression that specifies the SAS library member.","Parameter2":"member-type&lt;","Description2":"Is a character constant, variable, or expression that specifies the type of SAS library member.","Parameter3":"generation&gt;&gt;","Description3":"Is a numeric constant, variable, or expression that specifies the generation number of the SAS data set whose existence you are checking."},{"Name":"EXP","Definition":"Returns the value of the exponential function. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"FACT","Definition":"Computes a factorial.","Parameter1":"n","Description1":"Is a numeric constant, variable, or expression."},{"Name":"FAPPEND","Definition":"Appends the current record to the end of an external file.","Parameter1":"file-id&lt;","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function.","Parameter2":"cc&gt;","Description2":"Is a character constant, variable, or expression that specifies a carriage-control character: blank (start record on a new line), 0 (skip one blank line), - (skip two blanks), 1 (start a new page), + (overstrike a previous line), P (computer prompt), = (contains carriage control info), all else (start a new line)."},{"Name":"FCLOSE","Definition":"Closes an external file, directory, or directory member.","Parameter1":"file-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function."},{"Name":"FCOL","Definition":"Returns the current column position in the File Data Buffer (FDB).","Parameter1":"file-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function."},{"Name":"FDELETE","Definition":"Deletes an external file or an empty directory.","Parameter1":"fileref | directory","Description1":"Is a character constant, variable, or expression that specifies the fileref that you assigned to the external file, or an empty directory that you want to delete."},{"Name":"FETCH","Definition":"Reads the next non-deleted observation from a SAS data set into the Data Set Data Vector (DDV).","Parameter1":"data-set-id&lt;","Description1":"Is a numeric variable that specifies the data set identifier that is returned by the OPEN function.","Parameter2":"'NOSET'&gt;","Description2":"Prevents the automatic passing of SAS data set variable values to macro or DATA step variables even if the SET routine has been called."},{"Name":"FETCHOBS","Definition":"Reads a specified observation from a SAS data set into the Data Set Data Vector (DDV).","Parameter1":"data-set-id","Description1":"Is a numeric variable that specifies the data set identifier that is returned by the OPEN function.","Parameter2":"obs-number&lt;","Description2":"Is a numeric constant, variable, or expression that specifies the number of the observation to read.","Parameter3":"options&gt;","Description3":"Is a character constant, variable, or expression that names one or more options, separated by blanks: ABS (obs-number is absolute), NOSET (prevents automatic passing of SAS data set variable values even if the SET routine has been called)."},{"Name":"FEXIST","Definition":"Verifies the existence of an external file that is associated with a fileref.","Parameter1":"fileref","Description1":"Is a character constant, variable, or expression that specifies the fileref that is assigned to an external file."},{"Name":"FGET","Definition":"Copies data from the File Data Buffer (FDB) into a variable.","Parameter1":"file-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function.","Parameter2":"variable&lt;","Description2":"In a DATA step, specifies a character variable to hold the data. In a macro, specifies a macro variable to hold the data. If variable is a macro variable and it does not exist, it is created.","Parameter3":"length&gt;","Description3":"Specifies the number of characters to retrieve from the FDB. If length is omitted, all characters in the FDB from the current column position to the next delimiter are returned."},{"Name":"FILEEXIST","Definition":"Verifies the existence of an external file by its physical name.","Parameter1":"file-name","Description1":"Is a character constant, variable, or expression that specifies a fully qualified physical filename of the external file in the operating environment."},{"Name":"FILENAME","Definition":"Assigns or deassigns a fileref to an external file, directory, or output device.","Parameter1":"fileref&lt;","Description1":"Specifies the fileref to assign to the external file.","Parameter2":"file-name&gt;&lt;","Description2":"Is a character constant, variable, or expression that specifies the external file.","Parameter3":"device-type&gt;&lt;","Description3":"Is a character constant, variable, or expression that specifies the type of device. Valid values: DISK, PRINTER, TEMP, DUMMY, PIPE, PLOTTER, TAPE, TERMINAL, GTERM, UPRINTER.","Parameter4":"host-options&gt;&lt;","Description4":"Specifies host-specific details such as file attributes and processing attributes.","Parameter5":"dir-ref&gt;","Description5":"Specifies the fileref that was assigned to the directory or partitioned data set in which the external file resides."},{"Name":"FILEREF","Definition":"Verifies whether a fileref has been assigned for the current SAS session.","Parameter1":"fileref","Description1":"Is a character constant, variable, or expression that specifies the fileref to be validated. Range: 1 to 8 character."},{"Name":"FINANCE","Definition":"Computes financial calculations such as depreciation, maturation, accrued interest, net present value, periodic savings, and internal rates of return.","Parameter1":"string-identifier","Description1":"Specifies a character constant, variable, or expression. Refer to the SAS documentation for valid values of the string-identifier.","Parameter2":"parm1, parm2, ...","Description2":"Specifies a parameter that is associated with each string-identifier."},{"Name":"FIND*1","Definition":"Searches for a specific substring of characters within a character string.","Parameter1":"string","Description1":"Specifies a character constant, variable, or expression that will be searched for substrings. Enclose a literal string of characters in quotation marks.","Parameter2":"substring&lt;","Description2":"Is a character constant, variable, or expression that specifies the substring of characters to search for in string. Enclose a literal string of characters in quotation marks.","Parameter3":"modifiers&gt;&lt;","Description3":"Is a character constant, variable, or expression that specifies one or more modifiers. The following modifiers can be in uppercase or lowercase: i (ignore character case), t (trim trailing blanks from string and substring).","Parameter4":"startpos&gt;","Description4":"Is a numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction of the search."},{"Name":"FIND*2","Definition":"Searches for a specific substring of characters within a character string.","Parameter1":"string","Description1":"Specifies a character constant, variable, or expression that will be searched for substrings. Enclose a literal string of characters in quotation marks.","Parameter2":"substring&lt;","Description2":"Is a character constant, variable, or expression that specifies the substring of characters to search for in string. Enclose a literal string of characters in quotation marks.","Parameter3":"startpos&gt;&lt;","Description3":"Is a numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction of the search.","Parameter4":"modifiers&gt;","Description4":"Is a character constant, variable, or expression that specifies one or more modifiers. The following modifiers can be in uppercase or lowercase: i (ignore character case), t (trim trailing blanks from string and substring)."},{"Name":"FINDC*1","Definition":"Searches a string for any character in a list of characters.","Parameter1":"string&lt;","Description1":"Is a character constant, variable, or expression that specifies the character string to be searched. Enclose a literal string of characters in quotation marks.","Parameter2":"charlist&gt;","Description2":"Is an optional constant, variable, or character expression that initializes a list of characters. FINDC searches for the characters in this list provided that you do not specify the K modifier in the modifier argument."},{"Name":"FINDC*2","Definition":"Searches a string for any character in a list of characters.","Parameter1":"string","Description1":"Is a character constant, variable, or expression that specifies the character string to be searched. Enclose a literal string of characters in quotation marks.","Parameter2":"charlist&lt;","Description2":"Is an optional constant, variable, or character expression that initializes a list of characters. FINDC searches for the characters in this list provided that you do not specify the K modifier in the modifier argument.","Parameter3":"modifier(s)&gt;","Description3":"Is an optional character constant, variable, or expression in which each character modifies the action of the FINDC function. Refer to SAS documentation for list of valid modifiers."},{"Name":"FINDC*3","Definition":"Searches a string for any character in a list of characters.","Parameter1":"string","Description1":"Is a character constant, variable, or expression that specifies the character string to be searched. Enclose a literal string of characters in quotation marks.","Parameter2":"charlist","Description2":"Is an optional constant, variable, or character expression that initializes a list of characters. FINDC searches for the characters in this list provided that you do not specify the K modifier in the modifier argument.","Parameter3":"modifier(s)&lt;","Description3":"Is an optional character constant, variable, or expression in which each character modifies the action of the FINDC function. Refer to SAS documentation for list of valid modifiers.","Parameter4":"startpos&gt;","Description4":"Is an optional numeric constant, variable, or expression having an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"FINDC*4","Definition":"Searches a string for any character in a list of characters.","Parameter1":"string","Description1":"Is a character constant, variable, or expression that specifies the character string to be searched. Enclose a literal string of characters in quotation marks.","Parameter2":"charlist","Description2":"Is an optional constant, variable, or character expression that initializes a list of characters. FINDC searches for the characters in this list provided that you do not specify the K modifier in the modifier argument.","Parameter3":"&lt;startpos&gt;","Description3":"Is an optional numeric constant, variable, or expression having an integer value that specifies the position at which the search should start and the direction in which to search.","Parameter4":"modifier(s)&gt;","Description4":"Is an optional character constant, variable, or expression in which each character modifies the action of the FINDC function. Refer to SAS documentation for list of valid modifiers."},{"Name":"FINDW*1","Definition":"Returns the character position of a word in a string, or returns the number of the word in a string.","Parameter1":"string","Description1":"Is a character constant, variable, or expression that specifies the character string to be searched.","Parameter2":"word&lt;","Description2":"Is a character constant, variable, or expression that specifies the word to be searched.","Parameter3":"chars&gt;","Description3":"Is an optional character constant, variable, or expression that initializes a list of characters. The characters in this list are the delimiters that separate words, provided that you do not specify the K modifier in the modifier argument."},{"Name":"FINDW*2","Definition":"Returns the character position of a word in a string, or returns the number of the word in a string.","Parameter1":"string","Description1":"Is a character constant, variable, or expression that specifies the character string to be searched.","Parameter2":"word","Description2":"Is a character constant, variable, or expression that specifies the word to be searched.","Parameter3":"chars","Description3":"Is an optional character constant, variable, or expression that initializes a list of characters. The characters in this list are the delimiters that separate words, provided that you do not specify the K modifier in the modifier argument.","Parameter4":"modifier(s)&lt;","Description4":"Specifies a character constant, variable, or expression in which each non-blank character modifies the action of the FINDW function. Refer to SAS documentation for list of valid modifiers.","Parameter5":"startpos&gt;","Description5":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should begin and the direction in which to search."},{"Name":"FINDW*3","Definition":"Returns the character position of a word in a string, or returns the number of the word in a string.","Parameter1":"string","Description1":"Is a character constant, variable, or expression that specifies the character string to be searched.","Parameter2":"word","Description2":"Is a character constant, variable, or expression that specifies the word to be searched.","Parameter3":"chars","Description3":"Is an optional character constant, variable, or expression that initializes a list of characters. The characters in this list are the delimiters that separate words, provided that you do not specify the K modifier in the modifier argument.","Parameter4":"startpos&lt;","Description4":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should begin and the direction in which to search.","Parameter5":"modifier(s)&gt;","Description5":"Specifies a character constant, variable, or expression in which each non-blank character modifies the action of the FINDW function. Refer to SAS documentation for list of valid modifiers."},{"Name":"FINDW*4","Definition":"Returns the character position of a word in a string, or returns the number of the word in a string.","Parameter1":"string","Description1":"Is a character constant, variable, or expression that specifies the character string to be searched.","Parameter2":"word","Description2":"Is a character constant, variable, or expression that specifies the word to be searched.","Parameter3":"startpos&lt;","Description3":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should begin and the direction in which to search.","Parameter4":"chars&lt;","Description4":"Is an optional character constant, variable, or expression that initializes a list of characters. The characters in this list are the delimiters that separate words, provided that you do not specify the K modifier in the modifier argument.","Parameter5":"modifier(s)&gt;&gt;","Description5":"Specifies a character constant, variable, or expression in which each non-blank character modifies the action of the FINDW function. Refer to SAS documentation for list of valid modifiers."},{"Name":"FINFO","Definition":"Returns the value of a file information item.","Parameter1":"file-id","Description1":"Is a numeric constant, variable, or expression that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function.","Parameter2":"info-item","Description2":"Is a character constant, variable, or expression that specifies the name of the file information item to be retrieved."},{"Name":"FINV","Definition":"Returns a quantile from the F distribution.","Parameter1":"p","Description1":"Is a numeric probability. Range: 0 \u2264 p &lt; 1.","Parameter2":"ndf","Description2":"Is a numeric numerator degrees of freedom parameter. Range: ndf &gt; 0.","Parameter3":"ddf&lt;","Description3":"Is a numeric denominator degrees of freedom parameter. Range: ddf &gt; 0.","Parameter4":"nc&gt;","Description4":"Is an optional numeric noncentrality parameter. Range: nc \u2265 0."},{"Name":"FIPNAME","Definition":"Converts two-digit FIPS codes to uppercase state names.","Parameter1":"expression","Description1":"Specifies a numeric constant, variable, or expression that represents a U.S. FIPS code."},{"Name":"FIPNAMEL","Definition":"Converts two-digit FIPS codes to mixed case state names.","Parameter1":"expression","Description1":"Specifies a numeric constant, variable, or expression that represents a U.S. FIPS code."},{"Name":"FIPSTATE","Definition":"Converts two-digit FIPS codes to two-character state postal codes.","Parameter1":"expression","Description1":"Specifies a numeric constant, variable, or expression that represents a U.S. FIPS code."},{"Name":"FIRST","Definition":"Returns the first character in a character string.","Parameter1":"string","Description1":"Specifies a character string."},{"Name":"FLOOR","Definition":"Returns the largest integer less than or equal to a numeric value expression. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"FLOORZ","Definition":"Returns the largest integer that is less than or equal to the argument, using zero fuzzing. \n    \nCategory: Truncation  \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"FNONCT","Definition":"Returns the value of the noncentrality parameter of an F distribution.","Parameter1":"x","Description1":"Is a numeric random variable. Range: x \u2265 0.","Parameter2":"ndf","Description2":"Is a numeric numerator degree of freedom parameter. Range: ndf &gt; 0.","Parameter3":"ddf","Description3":"Is a numeric denominator degree of freedom parameter. Range: ddf &gt; 0.","Parameter4":"prob","Description4":"Is a probability. Range: 0 &lt; prob &lt; 1."},{"Name":"FNOTE","Definition":"Identifies the last record that was read, and returns a value that the FPOINT function can use.","Parameter1":"file-id","Description1":"Is a numeric constant, variable, or expression that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function."},{"Name":"FOPEN","Definition":"Opens an external file and returns a file identifier value.","Parameter1":"fileref&lt;","Description1":"Is a character constant, variable, or expression that specifies the fileref assigned to the external file.","Parameter2":"open-mode","Description2":"Is a character constant, variable, or expression that specifies the type of access to the file: A (APPEND mode writes new records at end of file), I (INPUT mode allows reading only), O (OUTPUT mode allows writing new records at beginning of file), S (SEQUENTIAL input mode for pipes or ports), U (UPDATE mode allows both reading and writing).","Parameter3":"record-length","Description3":"Is a numeric constant, variable, or expression that specifies the logical record length of the file.","Parameter4":"record-format","Description4":"Is a character constant, variable, or expression that specifies the record format of the file. Valid values: B (binary), D (default format), E (editable), F(fixed-length records), P (contains printer carriage control), V (variable-length records)."},{"Name":"FOPTNAME","Definition":"Returns the name of an item of information about a file.","Parameter1":"file-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function.","Parameter2":"nval","Description2":"Is a numeric constant, variable, or expression that specifies the number of the information item."},{"Name":"FOPTNUM","Definition":"Returns the number of information items that are available for an external file.","Parameter1":"file-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function."},{"Name":"FPOINT","Definition":"Positions the read pointer on the next record to be read.","Parameter1":"file-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function.","Parameter2":"note-id","Description2":"Specifies the identifier that was assigned by the FNOTE function."},{"Name":"FPOS","Definition":"Sets the position of the column pointer in the File Data Buffer (FDB).","Parameter1":"file-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function.","Parameter2":"nval","Description2":"Is a numeric constant, variable, or expression that specifies the column at which to set the pointer."},{"Name":"FPUT","Definition":"Moves data to the File Data Buffer (FDB) of an external file, starting at the FDB's current column position.","Parameter1":"file-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function.","Parameter2":"cval","Description2":"Is a character constant, variable, or expression that specifies the file data."},{"Name":"FREAD","Definition":"Reads a record from an external file into the File Data Buffer (FDB).","Parameter1":"file-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function."},{"Name":"FREWIND","Definition":"Positions the file pointer to the start of the file.","Parameter1":"file-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function."},{"Name":"FRLEN","Definition":"Returns the size of the last record that was read, or, if the file is opened for output, returns the current record size.","Parameter1":"file-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function."},{"Name":"FSEP","Definition":"Sets the token delimiters for the FGET function.","Parameter1":"file-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function.","Parameter2":"character(s)&lt;","Description2":"Is a character constant, variable, or expression that specifies one or more delimiters that separate items in the File Data Buffer (FDB).","Parameter3":"'x' | 'X'&gt;","Description3":"Specifies that the character delimiter is a hexadecimal value."},{"Name":"FUZZ","Definition":"Returns the nearest integer if the argument is within 1E-12 of that integer. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"FWRITE","Definition":"Writes a record to an external file.","Parameter1":"file-id&lt;","Description1":"Is a numeric variable that specifies the identifier that was assigned when the file was opened, generally by the FOPEN function.","Parameter2":"cc&gt;","Description2":"Is a character constant, variable, or expression that specifies a carriage-control character: blank (start record on a new line), 0 (skip one blank line), - (skip two blanks), 1 (start a new page), + (overstrike a previous line), P (computer prompt), = (contains carriage control info), all else (start a new line)."},{"Name":"GAMINV","Definition":"Returns a quantile from the gamma distribution.","Parameter1":"p","Description1":"Is a numeric probability. Range: 0 \u2264 p &lt; 1.","Parameter2":"a","Description2":"Is a numeric shape parameter. Range: a &gt; 0."},{"Name":"GAMMA","Definition":"Returns the value of the gamma function. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value. \n\nRestriction: Nonpositive integers are invalid. \nValid data types: DOUBLE"},{"Name":"GARKHCLPRC","Definition":"Calculates call prices for European options on stocks, based on the Garman-Kohlhagen model.","Parameter1":"E","Description1":"Is a non-missing, positive value that specifies the exercise price. Specify E and S in the same units.","Parameter2":"t","Description2":"Is a non-missing value that specifies the time to maturity.","Parameter3":"S","Description3":"Is a non-missing, positive value that specifies the spot currency price. Specify S and E in the same units.","Parameter4":"Rd","Description4":"Is a non-missing, positive fraction that specifies the risk-free domestic interest rate for period t. Specify a value for Rd for the same time period as the unit of t.","Parameter5":"Rf","Description5":"Is a non-missing, positive fraction that specifies the risk-free foreign interest rate for period t. Specify a value for Rf for the same time period as the unit of t.","Parameter6":"sigma","Description6":"Is a non-missing, positive fraction that specifies the volatility of the currency rate. Specify a value for sigma for the same time period as the unit of t."},{"Name":"GARKHPTPRC","Definition":"Calculates put prices for European options on stocks, based on the Garman-Kohlhagen model.","Parameter1":"E","Description1":"Is a non-missing, positive value that specifies the exercise price. Specify E and S in the same units.","Parameter2":"t","Description2":"Is a non-missing value that specifies the time to maturity.","Parameter3":"S","Description3":"Is a non-missing, positive value that specifies the spot currency price. Specify S and E in the same units.","Parameter4":"Rd","Description4":"Is a non-missing, positive fraction that specifies the risk-free domestic interest rate for period t. Specify a value for Rd for the same time period as the unit of t.","Parameter5":"Rf","Description5":"Is a non-missing, positive fraction that specifies the risk-free foreign interest rate for period t. Specify a value for Rf for the same time period as the unit of t.","Parameter6":"sigma","Description6":"Is a non-missing, positive fraction that specifies the volatility of the currency rate. Specify a value for sigma for the same time period as the unit of t."},{"Name":"GCD","Definition":"Returns the greatest common divisor for one or more integers. \n    \nRequirements: At least two arguments are required.   \nReturn value data type: DOUBLE","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value.\n    \nValid data types: DOUBLE","Parameter2":"expression-2 [, ... expression-n ]","Description2":"Specifies any valid expression that evaluates to a numeric value.\n    \nValid data types: DOUBLE"},{"Name":"GEODIST","Definition":"Returns the geodetic distance between two latitude and longitude coordinates.","Parameter1":"latitude-1","Description1":"Is a numeric constant, variable, or expression that specifies the coordinate of a given position north or south of the equator.","Parameter2":"longitude-1","Description2":"Is a numeric constant, variable, or expression that specifies the coordinate of a given position east or west of the prime meridian, which runs through Greenwich, England.","Parameter3":"latitude-2","Description3":"Is a numeric constant, variable, or expression that specifies the coordinate of a given position north or south of the equator.","Parameter4":"longitude-2&lt;","Description4":"Is a numeric constant, variable, or expression that specifies the coordinate of a given position east or west of the prime meridian, which runs through Greenwich, England.","Parameter5":"option(s)&gt;","Description5":"Specifies a character constant, variable, or expression that contains any of the following characters: M (distance in miles), K (distance in kilometers), D (input values in degrees), R (input values in radians)."},{"Name":"GEOMEAN","Definition":"Returns the geometric mean. \n    \nReturn value data type: DOUBLE","Parameter1":"expression [, ....expression ]","Description1":"Specifies any valid expression that evaluates to a non-negative numeric value.\n\nValid data types: DOUBLE"},{"Name":"GEOMEANZ","Definition":"Returns the geometric mean, using zero fuzzing. \n    \nReturn value data type: DOUBLE","Parameter1":"expression [, ... expression ]","Description1":"Specifies any valid expression that evaluates to a non-negative numeric value.\n\nValid data types: DOUBLE"},{"Name":"GETOPTION","Definition":"Returns the value of a SAS system or graphics option.","Parameter1":"option-name&lt;","Description1":"Is a character constant, variable, or expression that specifies the name of the system option (without the equal sign).","Parameter2":"reporting-options&lt;, ...&gt;&gt;","Description2":"Is a character constant, variable, or expression that specifies the reporting options. Refer to SAS documentation for the list of valid reporting options."},{"Name":"GETVARC","Definition":"Returns the value of a SAS data set character variable.","Parameter1":"data-set-id","Description1":"Is a numeric constant, variable, or expression that specifies the data set identifier that the OPEN function returns.","Parameter2":"var-num","Description2":"Is a numeric constant, variable, or expression that specifies the number of the variable in the Data Set Data Vector (DDV). You can obtain this value by using the VARNUM function."},{"Name":"GETVARN","Definition":"Returns the value of a SAS data set numeric variable.","Parameter1":"data-set-id","Description1":"Is a numeric constant, variable, or expression that specifies the data set identifier that the OPEN function returns.","Parameter2":"var-num","Description2":"Is a numeric constant, variable, or expression that specifies the number of the variable in the Data Set Data Vector (DDV). You can obtain this value by using the VARNUM function."},{"Name":"HARMEAN","Definition":"Returns the harmonic mean. \n    \nReturn value data type: DOUBLE","Parameter1":"expression [, ...expression ]","Description1":"Specifies any valid expression that evaluates to a non-negative numeric value.\n\nValid data types: DOUBLE"},{"Name":"HARMEANZ","Definition":"Returns the harmonic mean, using zero fuzzing. \n    \nReturn value data type: DOUBLE","Parameter1":"expression [, ...expression ]","Description1":"Specifies any valid expression that evaluates to a non-negative numeric value.\n\nValid data types: DOUBLE"},{"Name":"HBOUND*1","Definition":"Returns the upper bound of an array. n is an optional integer constant that specifies the dimension for which you want to know the upper bound. If no n value is specified, the HBOUND function returns the upper bound of the first dimension of the array.","Parameter1":"array-name","Description1":"Is the name of an array that was defined previously in the same DATA step."},{"Name":"HBOUND*2","Definition":"Returns the upper bound of an array. n is an optional integer constant that specifies the dimension for which you want to know the upper bound. If no n value is specified, the HBOUND function returns the upper bound of the first dimension of the array.","Parameter1":"array-name","Description1":"Is the name of an array that was defined previously in the same DATA step.","Parameter2":"bound-n","Description2":"Is a numeric constant, variable, or expression that specifies the dimension for which you want to know the upper bound. Use bound-n only if n is not specified."},{"Name":"HMS","Definition":"Returns a SAS time value from hour, minute, and second values. \n    \nReturn value data type: DOUBLE","Parameter1":"hour","Description1":"Specifies a numeric expression that represents an integer from 1 through 12.\n\nValid data types: DOUBLE","Parameter2":"minute","Description2":"Specifies a numeric expression that represents an integer from 1 through 59. \n\nValid data types: DOUBLE","Parameter3":"second","Description3":"Specifies a numeric expression that represents an integer from 1 through 59.\n\nValid data types: DOUBLE"},{"Name":"HOLIDAY","Definition":"Returns a SAS date value of a specified holiday for a specified year.","Parameter1":"'holiday'","Description1":"Is a character constant, variable, or expression that specifies one of the holiday values recognized by SAS (refer to SAS documentation for the list).","Parameter2":"year","Description2":"Is a numeric constant, variable, or expression that specifies a four-digit year. If you use a two-digit year, then you must specify the YEARCUTOFF= system option."},{"Name":"HOUR","Definition":"Returns the hour from a SAS time or datetime value. \n    \nReturn value data type: DOUBLE","Parameter1":"[ time | datetime ]","Description1":"time\nspecifies any valid expression that represents a SAS time value.\n\nValid data types: DOUBLE \n\ndatetime \nspecifies any valid expression that represents a SAS datetime value.\n\nValid data types: DOUBLE"},{"Name":"HTMLDECODE","Definition":"Decodes a string that contains HTML numeric character references or HTML character entity references, and returns the decoded string.","Parameter1":"expression","Description1":"Specifies a character constant, variable, or expression."},{"Name":"HTMLENCODE","Definition":"Encodes characters using HTML character entity references, and returns the encoded string.","Parameter1":"expression&lt;","Description1":"Specifies a character constant, variable, or expression.","Parameter2":"options&gt;","Description2":"Is a character constant, variable, or expression that specifies the type of characters to encode. If you use more than one option, separate the options by spaces (eg. 'amp gt lt apos quot')."},{"Name":"IBESSEL","Definition":"Returns the value of the modified Bessel function.","Parameter1":"nu","Description1":"Specifies a numeric constant, variable, or expression. Range: V \u2265 0.","Parameter2":"x","Description2":"Specifies a numeric constant, variable, or expression. Range: x \u2265 0.","Parameter3":"kode","Description3":"Is a numeric constant, variable, or expression that specifies a nonnegative integer."},{"Name":"IFC","Definition":"Returns a character value based on whether an expression is true, false, or missing.","Parameter1":"logical-expression","Description1":"Specifies a numeric constant, variable, or expression.","Parameter2":"value-returned-when-true","Description2":"Specifies a character constant, variable, or expression that is returned when the value of logical-expression is true.","Parameter3":"value-returned-when-false&lt;","Description3":"Specifies a character constant, variable, or expression that is returned when the value of logical-expression is false.","Parameter4":"value-returned-when-missing&gt;","Description4":"Specifies a character constant, variable, or expression that is returned when the value of logical-expression is missing."},{"Name":"IFN","Definition":"Returns a numeric value based on whether an expression is true, false, or missing.","Parameter1":"logical-expression","Description1":"Specifies a numeric constant, variable, or expression.","Parameter2":"value-returned-when-true","Description2":"Specifies a numeric constant, variable, or expression that is returned when the value of logical-expression is true.","Parameter3":"value-returned-when-false&lt;","Description3":"Specifies a numeric constant, variable, or expression that is returned when the value of logical-expression is false.","Parameter4":"value-returned-when-missing&gt;","Description4":"Specifies a numeric constant, variable or expression that is returned when the value of logical-expression is missing."},{"Name":"INDEX","Definition":"Searches a character expression for a string of characters, and returns the position \nof the string's first character for the first occurrence of the string. \n\nReturn value data type: DOUBLE","Parameter1":"target-expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: NCHAR","Parameter2":"search-expression","Description2":"Specifies any valid expression that evaluates to a character string to search for \nin target-expression.\n\nValid data types: NCHAR \nTip: Enclose a literal string of characters in single quotation marks."},{"Name":"INDEXC","Definition":"Searches a character expression for specified characters and returns the position of the \nfirst occurrence of any of the characters. \n\nReturn value data type: DOUBLE","Parameter1":"target-expression","Description1":"Specifies any valid expression that evaluates to a character string that is searched.\n\nValid data types: NCHAR","Parameter2":"search-expression [, ...search-expression ]","Description2":"Specifies the characters to search for in target-expression.\n\nValid data types: NCHAR"},{"Name":"INDEXW","Definition":"Searches a character expression for a string that is specified as a word, and returns the position of the first character in the word.","Parameter1":"target-expression","Description1":"Specifies any valid expression that evaluates to a character string that is searched.\n\nValid data types: NCHAR","Parameter2":"search-expression [","Description2":"Specifies any valid expression that evaluates to a character string and that is searched for \nin target-expression. SAS removes the leading and trailing delimiters from search-expression.\n\nValid data types: NCHAR \n\nTip: INDEXW has the following behavior when search-expression contains blank spaces or \nhas a length of 0: \nIf both target-expression and search-expression contain only blank spaces or have a length \nof 0, then INDEXW returns a value of 1. \n\nIf search-expression contains only blank spaces or has a length of 0, and target-expression \ncontains character or numeric data, then INDEXW returns a value of 0.\n \n","Parameter3":"delimiter ]","Description3":"Specifies a character expression that you want INDEXW to use as a word separator in the \ncharacter strings. The default delimiter is the blank character. \n\nTip: If the blank character is a delimiter, order it so that it is not the last character \nin delimiter. Trailing blanks are ignored because delimiter is trimmed of trailing blanks. \n\nValid data types: NCHAR"},{"Name":"INPUT","Definition":"Returns the value that is produced when SAS converts an expression using the specified informat.","Parameter1":"source","Description1":"Specifies a character constant, variable, or expression to which you want to apply a specific informat.","Parameter2":"&lt;? | ??&gt;informat.","Description2":"The SAS informat you want to apply to the source. The optional ? and ?? modifiers suppress error messages and input lines when invalid data are read."},{"Name":"INPUTC","Definition":"Enables you to specify a character informat at run time.","Parameter1":"source","Description1":"Specifies a character constant, variable, or expression to which you want to apply the informat.","Parameter2":"informat&lt;","Description2":"Is a character constant, variable, or expression that contains the character informat you want to apply to source.","Parameter3":"w&gt;","Description3":"Is a numeric constant, variable, or expression that specifies a width to apply to the informat."},{"Name":"INPUTN","Definition":"Enables you to specify a numeric informat at run time.","Parameter1":"source","Description1":"Specifies a character constant, variable, or expression to which you want to apply the informat.","Parameter2":"informat&lt;","Description2":"Is a character constant, variable or expression that contains the numeric informat you want to apply to source.","Parameter3":"w&lt;","Description3":"Is a numeric constant, variable, or expression that specifies a width to apply to the informat.","Parameter4":"d&gt;&gt;","Description4":"Is a numeric constant, variable, or expression that specifies the number of decimal places to use."},{"Name":"INT","Definition":"Returns the integer value, fuzzed to avoid unexpected floating-point results. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"INTCINDEX","Definition":"Returns the cycle index when a date, time, or datetime interval and value are specified.","Parameter1":"interval&lt;&lt;multiple.&lt;shift-index&gt;&gt;&gt;","Description1":"A three-part interval name (WEEK3.2, MONTH2.2, YEAR2.4, or QTR). For example, the interval name MONTH2.2 specifies bimonthly periods starting on the first day of even-numbered months.","Parameter2":"date-time-value","Description2":"Specifies a date, time, or datetime value that represents a time period of a specified interval."},{"Name":"INTCK","Definition":"Returns the count of the number of interval boundaries between two dates, two times, or two datetime values.","Parameter1":"interval&lt;multiple&gt;&lt;.shift-index&gt;","Description1":"A three-part interval name (WEEK3.2, MONTH2.2, YEAR2.4, or QTR.3). For example, the interval name MONTH2.2 specifies bimonthly periods starting on the first day of even-numbered months.","Parameter2":"from","Description2":"Specifies a SAS expression that represents the starting SAS date, time, or datetime value.","Parameter3":"to","Description3":"Specifies a SAS expression that represents the ending SAS date, time, or datetime value."},{"Name":"INTCYCLE","Definition":"Returns the date, time, or datetime interval at the next higher seasonal cycle when a date, time, or datetime interval is specified.","Parameter1":"interval&lt;&lt;multiple.&lt;shift-index&gt;&gt;&gt;","Description1":"A three-part interval name (WEEK3.2, MONTH2.2, YEAR2.4, or QTR.3). For example, the interval name MONTH2.2 specifies bimonthly periods starting on the first day of even-numbered months."},{"Name":"INTFIT","Definition":"Returns a time interval that is aligned between two dates.","Parameter1":"expression-1","Description1":"Specifies a SAS expression that represents a SAS date or datetime value, or an observation.","Parameter2":"expression-2","Description2":"Specifies a SAS expression that represents a SAS date or datetime value, or an observation.","Parameter3":"'type'","Description3":"Specifies whether the arguments are SAS date values, datetime values, or observations. Valid values: d (date), dt (datetime), obs (observations)."},{"Name":"INTFMT","Definition":"Returns a recommended SAS format when a date, time, or datetime interval is specified.","Parameter1":"interval&lt;&lt;multiple.&lt;shift-index&gt;&gt;&gt;","Description1":"A three-part interval name (WEEK3.2, MONTH2.2, YEAR2.4, or QTR.3). For example, the interval name MONTH2.2 specifies bimonthly periods starting on the first day of even-numbered months.","Parameter2":"'size'","Description2":"Specifies either LONG or SHORT. When a format includes a year value, LONG or L specifies a format that uses a four-digit year. SHORT or S specifies a format that uses a two-digit year."},{"Name":"INTGET","Definition":"Returns a time interval based on three date or datetime values.","Parameter1":"date-1","Description1":"Specifies a SAS date or datetime value.","Parameter2":"date-2","Description2":"Specifies a SAS date or datetime value.","Parameter3":"date-3","Description3":"Specifies a SAS date or datetime value."},{"Name":"INTINDEX","Definition":"Returns the seasonal index when a date, time, or datetime interval and value are specified.","Parameter1":"interval&lt;&lt;multiple.&lt;shift-index&gt;&gt;&gt;","Description1":"A three-part interval name (WEEK3.2, MONTH2.2, YEAR2.4, or QTR.3). For example, the interval name MONTH2.2 specifies bimonthly periods starting on the first day of even-numbered months.","Parameter2":"date-value","Description2":"Specifies a date, time, or datetime value that represents a time period of the given interval."},{"Name":"INTNX","Definition":"Increments a date, time, or datetime value by a given time interval, and returns a date, time, or datetime value.","Parameter1":"interval&lt;multiple&gt;&lt;.shift-index&gt;","Description1":"A three-part interval name (WEEK3.2, MONTH2.2, YEAR2.4, or QTR.3). For example, the interval name MONTH2.2 specifies bimonthly periods starting on the first day of even-numbered months.","Parameter2":"start-from","Description2":"Specifies a SAS expression that represents a SAS date, time, or datetime value that identifies a starting point.","Parameter3":"increment&lt;","Description3":"Specifies a negative, positive, or zero integer that represents the number of date, time, or datetime intervals. Increment is the number of intervals to shift the value of start-from.","Parameter4":"alignment&gt;","Description4":"Controls the position of SAS dates within the interval. Alignment can be one of these values: BEGINNING|B, MIDDLE|M, END|E, SAME (as the input date)."},{"Name":"INTRR","Definition":"Returns the internal rate of return as a fraction.","Parameter1":"freq","Description1":"Is numeric, the number of payments over a specified base period of time that is associated with the desired internal rate of return. Range: freq &gt; 0.","Parameter2":"c0, c1, ..., cn","Description2":"Are numeric, the optional cash payments."},{"Name":"INTSEAS","Definition":"Returns the length of the seasonal cycle when a date, time, or datetime interval is specified.","Parameter1":"interval&lt;&lt;multiple.&lt;shift-index&gt;&gt;&gt;","Description1":"A three-part interval name (WEEK3.2, MONTH2.2, YEAR2.4, or QTR.3). For example, the interval name MONTH2.2 specifies bimonthly periods starting on the first day of even-numbered months."},{"Name":"INTSHIFT","Definition":"Returns the shift interval that corresponds to the base interval.","Parameter1":"interval&lt;&lt;multiple.&lt;shift-index&gt;&gt;&gt;","Description1":"A three-part interval name (WEEK3.2, MONTH2.2, YEAR2.4, or QTR.3). For example, the interval name MONTH2.2 specifies bimonthly periods starting on the first day of even-numbered months."},{"Name":"INTTEST","Definition":"Returns 1 if a time interval is valid, and returns 0 if a time interval is invalid.","Parameter1":"interval&lt;&lt;multiple.&lt;shift-index&gt;&gt;&gt;","Description1":"A three-part interval name (WEEK3.2, MONTH2.2, YEAR2.4, or QTR.3). For example, the interval name MONTH2.2 specifies bimonthly periods starting on the first day of even-numbered months."},{"Name":"INTZ","Definition":"Returns the integer portion of the argument, using zero fuzzing. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"IQR","Definition":"Returns the interquartile range. \n    \nReturn value data type: DOUBLE","Parameter1":["expression [","...expression ]"],"Description1":["Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE","Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"]},{"Name":"IORCMSG","Definition":"Returns a formatted error message for _IORC_."},{"Name":"IRR","Definition":"Returns the internal rate of return as a percentage.","Parameter1":"freq","Description1":"Is numeric, the number of payments over a specified base period of time that is associated with the desired internal rate of return.","Parameter2":"c0,c1, ...,cn","Description2":"Are numeric, the optional cash payments."},{"Name":"JBESSEL","Definition":"Returns the value of the Bessel function.","Parameter1":"nu","Description1":"Specifies a numeric constant, variable, or expression. Range: V &gt; 0.","Parameter2":"x","Description2":"Specifies a numeric constant, variable, or expression. Range: x &gt; 0."},{"Name":"JULDATE","Definition":"Returns the Julian date from a SAS date value. \n    \nReturn value data type: DOUBLE","Parameter1":"date","Description1":"Specifies any valid expression that represents a SAS date value. \n\nValid data types: DOUBLE"},{"Name":"JULDATE7","Definition":"Returns a seven-digit Julian date from a SAS date value. \n    \nReturn value data type: DOUBLE","Parameter1":"date","Description1":"Specifies any valid expression that represents a SAS date value.\n\nValid data types: DOUBLE"},{"Name":"KURTOSIS","Definition":"Returns the kurtosis. \n    \nRequirement: At least four non-null or non-missing arguments are required. \nOtherwise, the function returns a null or missing value.\n\nReturn value data type: DOUBLE","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE","Parameter2":"expression-2","Description2":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE","Parameter3":"expression-3","Description3":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE","Parameter4":"expression-4 [","Description4":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE","Parameter5":"expression-n ]","Description5":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"LAG","Definition":"Returns values from a queue. n specifies the number of lagged values.","Parameter1":"argument","Description1":"Specifies a numeric or character constant, variable, or expression.","Parameter2":null,"Description2":null,"Parameter3":null,"Description3":null,"Parameter4":null,"Description4":null},{"Name":"LARGEST","Definition":"Returns the kth largest non-missing value. \n    \nReturn value data type: DOUBLE","Parameter1":"k","Description1":"Specifies any valid expression that evaluates to a numeric value that represents \nthe largest value to return. For example, if k is 2, the LARGEST function returns \nthe second largest value from the list of expressions.\n\nValid data types: DOUBLE","Parameter2":["expression [","...expression ]"],"Description2":["Specifies any valid expression that evaluates to a numeric value and that is to be searched. \n\nValid data types: DOUBLE","Specifies any valid expression that evaluates to a numeric value and that is to be searched.\n\nValid data types: DOUBLE\n    "]},{"Name":"LBOUND*1","Definition":"Returns the lower bound of an array. n is an optional integer constant that specifies the dimension for which you want to know the lower bound. If no n value is specified, the LBOUND function returns the lower bound of the first dimension of the array.","Parameter1":"array-name","Description1":"Is the name of an array that was defined previously in the same DATA step."},{"Name":"LBOUND*2","Definition":"Returns the lower bound of an array. n is an optional integer constant that specifies the dimension for which you want to know the lower bound. If no n value is specified, the LBOUND function returns the lower bound of the first dimension of the array.","Parameter1":"array-name","Description1":"Is the name of an array that was defined previously in the same DATA step.","Parameter2":"bound-n","Description2":"Is a numeric constant, variable, or expression that specifies the dimension for which you want to know the upper bound. Use bound-n only if n is not specified."},{"Name":"LCM","Definition":"Returns the least common multiple. \n    \nReturn value data type: DOUBLE\n\nRequirements: At least two arguments are required.","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to an integer.\n\nValid data types: DOUBLE","Parameter2":"expression-2 [, ...expression-n ]","Description2":"Specifies any valid expression that evaluates to an integer.\n\nValid data types: DOUBLE"},{"Name":"LCOMB","Definition":"Computes the logarithm of the COMB function; that is, the logarithm of the number of combinations of n objects taken r at a time.","Parameter1":"n","Description1":"Is a non-negative integer that represents the total number of elements from which the sample is chosen.","Parameter2":"r","Description2":"Is a non-negative integer that represents the number of chosen elements. Restriction: r \u2264 n."},{"Name":"LEFT","Definition":"Left-aligns a character string by removing leading blanks. \n    \nReturn value data type: VARCHAR, NVARCHAR","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: CHAR, NCHAR"},{"Name":"QLEFT","Definition":"Left-aligns a character string by removing leading blanks.","Parameter1":"argument","Description1":"Specifies a character constant, variable, or expression that might contain the following special characters and mnemonic operators: ."},{"Name":"LENGTH","Definition":"Returns the length of a non-blank character string, excluding trailing blanks, and returns \na 0 for a blank character string. \n\nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: CHAR, NCHAR"},{"Name":"LENGTHC","Definition":"Returns the length of a character string, including trailing blanks. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: NCHAR"},{"Name":"LENGTHM","Definition":"Returns the amount of memory, in characters, that is allocated for a character string. \n    \nReturn value data type: DOUBLE","Parameter1":"character-expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: NCHAR"},{"Name":"LENGTHN","Definition":"Returns the length of a non-blank character string, excluding trailing blanks, and returns \na 0 for a blank character string. \n\nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: CHAR, NCHAR"},{"Name":"LFACT","Definition":"Computes the logarithm of the FACT (factorial) function.","Parameter1":"n","Description1":"Is an integer that represents the total number of elements from which the sample is chosen."},{"Name":"LGAMMA","Definition":"Returns the natural logarithm of the Gamma function. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nRequirement: Must be a positive number. \nValid data types: DOUBLE"},{"Name":"LIBNAME","Definition":"Assigns or deassigns a libref for a SAS library.","Parameter1":"&lt;libref&gt;&lt;","Description1":"Is a character constant, variable, or expression that specifies the libref that is assigned to a SAS library. The maximum length of libref is eight characters.","Parameter2":"SAS-library&lt;","Description2":"Is a character constant, variable, or expression that specifies the physical name of the SAS library that is associated with the libref. is a character constant, variable, or expression that specifies one or more valid options for the specified engine, delimited with blanks. This argument can be null.","Parameter3":"engine&lt;","Description3":"Is a character constant, variable, or expression that specifies the engine that is used to access SAS files opened in the data library. is a character constant, variable, or expression that specifies one or more valid options for the specified engine, delimited with blanks. This argument can be null.","Parameter4":"options&gt;&gt;&gt;","Description4":"Is a character constant, variable, or expression that specifies one or more valid options for the specified engine, delimited with blanks. This argument can be null."},{"Name":"LIBREF","Definition":"Verifies that a libref has been assigned.","Parameter1":"libref","Description1":"Specifies the libref to be verified."},{"Name":"LOG","Definition":"Returns the natural logarithm (base e) of a numeric value expression. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"LOG1PX","Definition":"Returns the log of 1 plus the argument.","Parameter1":"x","Description1":"Specifies a numeric variable, constant, or expression."},{"Name":"LOG10","Definition":"Returns the base-10 logarithm of a numeric value expression. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nRequirement: Must be a positive number. \nValid data types: DOUBLE"},{"Name":"LOG2","Definition":"Returns the base-2 logarithm of a numeric value expression.","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nRequirement: Must be a positive number. \nValid data types: DOUBLE"},{"Name":"LOGBETA","Definition":"Returns the logarithm of the beta function.","Parameter1":"a","Description1":"Is the first shape parameter, where a &gt; 0.","Parameter2":"b","Description2":"Is the second shape parameter, where b &gt; 0."},{"Name":"LOGCDF","Definition":"Returns the logarithm of a left cumulative distribution function.","Parameter1":"'dist'","Description1":"Is a character constant, variable, or expression that identifies the distribution. Refer to SAS documentation for valid distributions (eg. 'NORMAL', 'CHISQUARE', 'F', 'T', etc.).","Parameter2":"quantile&lt;","Description2":"Is a numeric variable, constant, or expression that specifies the value of a random variable.","Parameter3":"parm-1, ...,parm-k&gt;","Description3":"Are optional shape, location, or scale parameters appropriate for the specific distribution."},{"Name":"LOGPDF","Definition":"Returns the logarithm of a probability density (mass) function.","Parameter1":"'dist'","Description1":"Is a character constant, variable, or expression that identifies the distribution. Refer to SAS documentation for valid distributions (eg. 'NORMAL', 'CHISQUARE', 'F', 'T', etc.).","Parameter2":"quantile&lt;","Description2":"Is a numeric variable, constant, or expression that specifies the value of a random variable.","Parameter3":"parm-1, ...,parm-k&gt;","Description3":"Are optional shape, location, or scale parameters appropriate for the specific distribution."},{"Name":"LOGSDF","Definition":"Returns the logarithm of a survival function.","Parameter1":"'dist'","Description1":"Is a character constant, variable, or expression that identifies the distribution. Refer to SAS documentation for valid distributions (eg. 'NORMAL', 'CHISQUARE', 'F', 'T', etc.).","Parameter2":"quantile&lt;","Description2":"Is a numeric variable, constant, or expression that specifies the value of a random variable.","Parameter3":"parm-1, ...,parm-k&gt;","Description3":"Are optional shape, location, or scale parameters appropriate for the specific distribution."},{"Name":"LOWCASE","Definition":"Converts all letters in a character expression to lowercase. \n    \nReturn value data type: VARCHAR, NVARCHAR","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nRequirement: Literal character expressions must be enclosed in single quotation marks. \nValid data types: CHAR, NCHAR"},{"Name":"QLOWCASE","Definition":"Converts all letters in an argument to lowercase. QLOWCASE produces a result with special characters and mnemonic operators masked.","Parameter1":"argument","Description1":"Specifies a character constant, variable, or expression that might contain the following special characters and mnemonic operators masked: &amp; % ' \" ( ) + - * / &lt; &gt; = \u00ac ^ ~ ; , # blank AND OR NOT EQ NE LE LT GE GT IN."},{"Name":"LPERM","Definition":"Computes the logarithm of the PERM function; that is, the logarithm of the number of permutations of n objects, with the option of including r number of elements.","Parameter1":"n&lt;","Description1":"Is an integer that represents the total number of elements from which the sample is chosen.","Parameter2":"r","Description2":"Is an optional integer value that represents the number of chosen elements. If r is omitted, the function returns the factorial of n. Restriction: r \u2264 n."},{"Name":"LPNORM","Definition":"Returns the Lp norm of the second argument and subsequent non-missing arguments.","Parameter1":"p","Description1":"Specifies a numeric constant, variable, or expression that is greater than or equal to 1, which is used as the power for computing the Lp norm.","Parameter2":"value-1&lt;","Description2":"Specifies a numeric constant, variable, or expression.","Parameter3":"value-2...&gt;","Description3":"Specifies a numeric constant, variable, or expression."},{"Name":"MAD","Definition":"Returns the median absolute deviation from the median.","Parameter1":"value-1&lt;","Description1":"Specifies a numeric constant, variable, or expression of which the median absolute deviation from the median is to be computed.","Parameter2":"value-2...&gt;","Description2":"Specifies a numeric constant, variable, or expression of which the median absolute deviation from the median is to be computed."},{"Name":"MARGRCLPRC","Definition":"Calculates call prices for European options on stocks, based on the Margrabe model.","Parameter1":"X1","Description1":"Is a non-missing, positive value that specifies the price of the first asset. Specify X1 and X2 in the same units.","Parameter2":"t","Description2":"Is a non-missing value that specifies the time to expiration.","Parameter3":"X2","Description3":"Is a non-missing, positive value that specifies the price of the second asset. Specify X2 and X1 in the same units.","Parameter4":"sigma1","Description4":"Is a non-missing, positive fraction that specifies the volatility of the first asset. Specify a value for sigma1 for the same time period as the unit of t.","Parameter5":"sigma2","Description5":"Is a non-missing, positive fraction that specifies the volatility of the second asset. Specify a value for sigma2 for the same time period as the unit of t.","Parameter6":"rho12","Description6":"Specifies the correlation between the first and second assets. Range: between -1 and 1."},{"Name":"MARGRPTPRC","Definition":"Calculates put prices for European options on stocks, based on the Margrabe model.","Parameter1":"X1","Description1":"Is a non-missing, positive value that specifies the price of the first asset. Specify X1 and X2 in the same units.","Parameter2":"t","Description2":"Is a non-missing value that specifies the time to expiration.","Parameter3":"X2","Description3":"Is a non-missing, positive value that specifies the price of the second asset. Specify X2 and X1 in the same units.","Parameter4":"sigma1","Description4":"Is a non-missing, positive fraction that specifies the volatility of the first asset. Specify a value for sigma1 for the same time period as the unit of t.","Parameter5":"sigma2","Description5":"Is a non-missing, positive fraction that specifies the volatility of the second asset. Specify a value for sigma2 for the same time period as the unit of t.","Parameter6":"rho12","Description6":"Specifies the correlation between the first and second assets. Range: between -1 and 1."},{"Name":"MAX","Definition":"Returns the largest value from a list of arguments. \n    \nAt least two arguments are required.","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE, BIGINT","Parameter2":"expression-2 [","Description2":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE, BIGINT","Parameter3":"...expression-n ]","Description3":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE, BIGINT"},{"Name":"MD5","Definition":"Returns the result of the message digest of a specified string.","Parameter1":"string","Description1":"Specifies a character constant, variable, or expression. Enclose a literal string of characters in quotation marks."},{"Name":"MDY","Definition":"Returns a SAS date value from month, day, and year values. \n    \nReturn value data type: DOUBLE","Parameter1":"month","Description1":"Specifies a numeric expression that represents an integer from 1 through 12.\n\nValid data types: DOUBLE","Parameter2":"day","Description2":"Specifies a numeric expression that represents an integer from 1 through 31.\n\nValid data types: DOUBLE","Parameter3":"year","Description3":"Specifies a numeric expression that represents a two-digit or four-digit year. \nThe YEARCUTOFF= system option defines the year value for two-digit dates.\n\nValid data types: DOUBLE"},{"Name":"MEAN","Definition":"Returns the arithmetic mean (average) of the non-null or non-missing arguments. \n    \nAt least one non-missing argument is required. Otherwise, the function returns a missing value. \n\nReturn value data type: DOUBLE","Parameter1":"expression-1 [","Description1":"Specifies any valid expression that evaluates to a numeric value. \n    \nValid data types: DOUBLE","Parameter2":"...expression-n ]","Description2":"Specifies any valid expression that evaluates to a numeric value. \n    \nValid data types: DOUBLE"},{"Name":"MEDIAN","Definition":"Returns the median value.","Parameter1":"value1&lt;","Description1":"Is a numeric constant, variable, or expression.","Parameter2":"value2, ...&gt;","Description2":"Is a numeric constant, variable, or expression."},{"Name":"MIN","Definition":"Returns the smallest value. \n    \nAt least two arguments are required.","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value. \n    \nValid data types: DOUBLE, BIGINT","Parameter2":"expression-2 [","Description2":"Specifies a numeric constant, variable, or expression.","Parameter3":"...expression-n ]","Description3":"Specifies any valid expression that evaluates to a numeric value. \n    \nValid data types: DOUBLE, BIGINT"},{"Name":"MINUTE","Definition":"Returns the minute from a SAS time or datetime value. \n    \nReturn value data type: DOUBLE","Parameter1":"time | datetime","Description1":"time \nspecifies any valid expression that represents a SAS time value.\n\nValid data types: DOUBLE \n\ndatetime \nspecifies any valid expression that represents a SAS datetime value.\n\nValid data types: DOUBLE"},{"Name":"MISSING","Definition":"Returns a number that indicates whether the argument contains a missing value. \n    \nReturn value data type INTEGER","Parameter1":"numeric-expression | character-expression","Description1":"numeric-expression \nspecifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE \n\ncharacter-expression \nspecifies any valid expression that evaluates to a character value. \n\nValid data types: CHAR, NCHAR"},{"Name":"MOD","Definition":"Returns the remainder from the division of the first argument by the second argument, \nfuzzed to avoid most unexpected floating-point results. \n\nReturn value data type: DOUBLE","Parameter1":"dividend-expression","Description1":"Specifies a dividend that is any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE","Parameter2":"divisor-expression","Description2":"Specifies a divisor that is any valid expression that evaluates to a numeric value. \n\nRestriction: divisor-expression cannot be 0 \nValid data types: DOUBLE"},{"Name":"MODZ","Definition":"Returns the remainder from the division of the first argument by the second argument, \nusing zero fuzzing.\n\nReturn value data type: DOUBLE","Parameter1":"dividend-expression","Description1":"Specifies a dividend that is any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE","Parameter2":"divisor-expression","Description2":"Specifies a divisor that is any valid expression that evaluates to a numeric value. \n\nRestriction: divisor-expression cannot be 0 \nValid data types: DOUBLE"},{"Name":"MODULEIC","Definition":"Calls an external routine or module that resides in an image that can be shared. Returns a character value.","Parameter1":"&lt;cntl-string","Description1":"Is an optional control string whose first character must be an asterisk (*), followed by any combination of the following characters: I (detects incorrect arguments or attribute tables), E (prints error messages), Sx (uses x as a separator character to separate field definitions), H (provides help on CALL MODULE routine syntax).","Parameter2":"&gt;module-name&lt;","Description2":"Is the name of the external module to use.","Parameter3":"expression-1","Description3":"Is one or more arguments to pass to the requested routine.","Parameter4":"..., expression-n&gt;","Description4":"Is one or more arguments to pass to the requested routine."},{"Name":"MODULEIN","Definition":"Calls an external routine or module that resides in an image that can be shared. Returns a numeric value.","Parameter1":"&lt;cntl-string","Description1":"Is an optional control string whose first character must be an asterisk (*), followed by any combination of the following characters: I (detects incorrect arguments or attribute tables), E (prints error messages), Sx (uses x as a separator character to separate field definitions), H (provides help on CALL MODULE routine syntax).","Parameter2":"&gt;module-name&lt;","Description2":"Is the name of the external module to use.","Parameter3":"expression-1","Description3":"Is one or more arguments to pass to the requested routine.","Parameter4":"..., expression-n&gt;","Description4":"Is one or more arguments to pass to the requested routine."},{"Name":"MODULEC","Definition":"Calls an external routine and returns a character value.","Parameter1":"&lt;cntl-string","Description1":"Is an optional control string whose first character must be an asterisk (*), followed by any combination of the following characters: I (detects incorrect arguments or attribute tables), E (prints error messages), Sx (uses x as a separator character to separate field definitions), H (provides help on CALL MODULE routine syntax).","Parameter2":"&gt;module-name&lt;","Description2":"Is the name of the external module to use.","Parameter3":"expression-1","Description3":"Is one or more arguments to pass to the requested routine.","Parameter4":"..., expression-n&gt;","Description4":"Is one or more arguments to pass to the requested routine."},{"Name":"MODULEN","Definition":"Calls an external routine and returns a numeric value.","Parameter1":"&lt;cntl-string","Description1":"Is an optional control string whose first character must be an asterisk (*), followed by any combination of the following characters: I (detects incorrect arguments or attribute tables), E (prints error messages), Sx (uses x as a separator character to separate field definitions), H (provides help on CALL MODULE routine syntax).","Parameter2":"&gt;module-name&lt;","Description2":"Is the name of the external module to use.","Parameter3":"expression-1","Description3":"Is one or more arguments to pass to the requested routine.","Parameter4":"..., expression-n&gt;","Description4":"Is one or more arguments to pass to the requested routine."},{"Name":"MONTH","Definition":"Returns the month from a SAS date value. \n    \nReturn value data type: DOUBLE","Parameter1":"date","Description1":"Specifies any valid expression that represents a SAS date value.\n\nRange: 1 - 12 \nValid data types: DOUBLE"},{"Name":"MOPEN","Definition":"Opens a file by directory ID and member name, and returns either the file identifier or a 0.","Parameter1":"directory-id","Description1":"Is a numeric variable that specifies the identifier that was assigned when the directory was opened, generally by the DOPEN function.","Parameter2":"member-name","Description2":"Is a character constant, variable, or expression that specifies the member name in the directory.","Parameter3":"open-mode","Description3":"Is a character constant, variable, or expression that specifies the type of access to the file: A (APPEND mode writes new records at end of file), I (INPUT mode allows reading only), O (OUTPUT mode allows writing new records at beginning of file), S (SEQUENTIAL input mode for pipes or ports), U (UPDATE mode allows both reading and writing), W (SEQUENTIAL update mode for pipes or ports)","Parameter4":"record-length","Description4":"Is a numeric constant, variable, or expression that specifies the logical record length of the file. To use the existing record length for the file, specify a length of 0, or do not provide a value here.","Parameter5":"record-format","Description5":"Is a character constant, variable, or expression that specifies the record format of the file. Valid values: B (binary), D (default format), E (editable), F(fixed-length records), P (contains printer carriage control), V (variable-length records)."},{"Name":"MORT","Definition":"Returns amortization parameters.","Parameter1":"a","Description1":"Is numeric, and specifies the initial amount.","Parameter2":"p","Description2":"Is numeric, and specifies the periodic payment.","Parameter3":"r","Description3":"Is numeric, and specifies the periodic interest rate that is expressed as a fraction.","Parameter4":"n","Description4":"Is an integer, and specifies the number of compounding periods. Range: n \u2265 0."},{"Name":"MSPLINT","Definition":"Returns the ordinate of a monotonicity-preserving interpolating spline.","Parameter1":"X","Description1":"Is a numeric constant, variable, or expression that specifies the abscissa for which the ordinate of the spline is to be computed.","Parameter2":"n","Description2":"Is a numeric constant, variable, or expression that specifies the number of knots. N must be a positive integer.","Parameter3":"X1 &lt;, X2, ..., Xn&gt;","Description3":"Are numeric constants, variables, or expressions that specify the abscissas of the knots. These values must be non-missing and listed in nondecreasing order.","Parameter4":"Y1 &lt;,Y2, ..., Yn&gt;&lt;","Description4":"Are numeric constants, variables, or expressions that specify the ordinates of the knots. The number of Y1 through Yn arguments must be the same as the number of X1 through Xn arguments.","Parameter5":"D1, Dn&gt;","Description5":"Are optional numeric constants, variables, or expressions that specify the derivatives of the spline at X1 and Xn."},{"Name":"N","Definition":"Returns the number of non-missing numeric values. \n    \nAt least one argument is required. \n\nReturn value data type: DOUBLE","Parameter1":"expression-1 [","Description1":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE","Parameter2":"...expression-n ]","Description2":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE"},{"Name":"NETPV","Definition":"Returns the net present value as a fraction.","Parameter1":"r","Description1":"Is numeric, the interest rate over a specified base period of time expressed as a fraction. Range: r \u2265 0.","Parameter2":"freq","Description2":"Is numeric, the number of payments during the base period of time that is specified with the rate r. Range: freq &gt; 0. Exception: The case freq=0 is a flag to allow continuous discounting.","Parameter3":"c0,c1, ...,cn","Description3":"Are numeric cash flows that represent cash outlays (payments) or cash inflows (income) occurring at times 0, 1, ...n."},{"Name":"NLITERAL","Definition":"Converts a character string that you specify to a SAS name literal.","Parameter1":"string","Description1":"Specifies a character constant, variable, or expression that is to be converted to a SAS name literal. Enclose a literal string of characters in quotation marks."},{"Name":"NMISS","Definition":"Returns the number of null and SAS missing numeric values. \n    \nAt least one argument is required.\n\nReturn value data type: INTEGER","Parameter1":"expression-1 [","Description1":"Specifies any valid expression that evaluates to a numeric value. \n    \nValid data types: DOUBLE","Parameter2":"...expression-n ]","Description2":"Specifies any valid expression that evaluates to a numeric value. \n    \nValid data types: DOUBLE"},{"Name":"NOTALNUM","Definition":"Searches a character string for a non-alphanumeric character, and returns the first position at which the character is found.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"NOTALPHA","Definition":"Searches a character string for a nonalphabetic character, and returns the first position at which the character is found.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"NOTCNTRL","Definition":"Searches a character string for a character that is not a control character, and returns the first position at which that character is found.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"NOTDIGIT","Definition":"Searches a character string for any character that is not a digit, and returns the first position at which that character is found.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"NOTE","Definition":"Returns an observation ID for the current observation of a SAS data set.","Parameter1":"data-set-id","Description1":"Is a numeric variable that specifies the data set identifier that the OPEN function returns."},{"Name":"NOTFIRST","Definition":"Searches a character string for an invalid first character in a SAS variable name under VALIDVARNAME=V7, and returns the first position at which that character is found.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"NOTGRAPH","Definition":"Searches a character string for a non-graphical character, and returns the first position at which that character is found.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"NOTLOWER","Definition":"Searches a character string for a character that is not a lowercase letter, and returns the first position at which that character is found.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"NOTNAME","Definition":"Searches a character string for an invalid character in a SAS variable name under VALIDVARNAME=V7, and returns the first position at which that character is found.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"NOTPRINT","Definition":"Searches a character string for a nonprintable character, and returns the first position at which that character is found.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"NOTPUNCT","Definition":"Searches a character string for a character that is not a punctuation character, and returns the first position at which that character is found.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"NOTSPACE","Definition":"Searches a character string for a character that is not a white-space character (blank, horizontal and vertical tab, carriage return, line feed, and form feed), and returns the first position at which that character is found.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"NOTUPPER","Definition":"Searches a character string for a character that is not an uppercase letter, and returns the first position at which that character is found.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"NOTXDIGIT","Definition":"Searches a character string for a character that is not a hexadecimal character, and returns the first position at which that character is found.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression to search.","Parameter2":"start&gt;","Description2":"Is an optional numeric constant, variable, or expression with an integer value that specifies the position at which the search should start and the direction in which to search."},{"Name":"NPV","Definition":"Returns the net present value with the rate expressed as a percentage.","Parameter1":"r","Description1":"Is numeric, the interest rate over a specified base period of time expressed as a percentage.","Parameter2":"freq","Description2":"Is numeric, the number of payments during the base period of time specified with the rate r. Range: freq &gt; 0. Exception: The case freq=0 is a flag to allow continuous discounting.","Parameter3":"c0,c1, ...,cn","Description3":"Are numeric cash flows that represent cash outlays (payments) or cash inflows (income) occurring at times 0, 1, ...n."},{"Name":"NULL","Definition":"Returns a 1 if the argument is null and a 0 if the argument is not null. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression.\n\nValid data types: CHAR, DOUBLE"},{"Name":"NVALID","Definition":"Checks the validity of a character string for use as a SAS variable name.","Parameter1":"string&lt;","Description1":"Specifies a character constant, variable, or expression which will be checked to determine whether its value can be used as a SAS variable name. Trailing blanks are ignored.","Parameter2":"validvarname&gt;","Description2":"Is a character constant, variable, or expression that specifies one of the following values: V7, ANY, NLITERAL"},{"Name":"NWKDOM","Definition":"Returns the date for the nth occurrence of a weekday for the specified month and year.","Parameter1":"n","Description1":"Specifies the numeric week of the month that contains the specified day. Range: 1-5.","Parameter2":"weekday","Description2":"Specifies the number that corresponds to the day of the week. Range: 1-7. Tip: Sunday is considered the first day of the week and has a weekday value of 1.","Parameter3":"month","Description3":"Specifies the number that corresponds to the month of the year. Range: 1-12.","Parameter4":"year","Description4":"Specifies a four-digit calendar year."},{"Name":"OPEN","Definition":"Opens a SAS data set.","Parameter1":"&lt;data-set-name&lt;","Description1":"Is a character constant, variable, or expression that specifies the name of the SAS data set or SAS SQL view to be opened. The value of this character string should be of the form &lt;libref.&gt;member-name&lt;(data-set-options)&gt;","Parameter2":"mode&gt;&gt;","Description2":"Is a character constant, variable, or expression that specifies the type of access to the data set: I (INPUT mode, for read only), IN (sequential INPUT mode, with revisit of observations allowed), IS (sequential INPUT mode, with revisit of observations not allowed)."},{"Name":"ORDINAL","Definition":"Returns the kth smallest of the missing and nonmissing values. \n    \nAt least two arguments are required.\n\nReturn value data type: DOUBLE","Parameter1":"position","Description1":"an integer that is less than or equal to the number of elements in the list of arguments.\n\nRequirements: position must be a positive number. \nValid data types: DOUBLE","Parameter2":"expression-1","Description2":"Specifies any valid expression that evaluates to a numeric value.\n    \nValid data types: DOUBLE","Parameter3":"expression-2 [","Description3":"Specifies any valid expression that evaluates to a numeric value.\n    \nValid data types: DOUBLE","Parameter4":"...expression-n ]","Description4":"Specifies any valid expression that evaluates to a numeric value.\n    \nValid data types: DOUBLE"},{"Name":"PATHNAME","Definition":"Returns the physical name of an external file or a SAS library, or returns a blank.","Parameter1":"(fileref | libref)&lt;","Description1":"Is a character constant, variable, or expression that specifies either the fileref that is assigned to an external file or the libref that is assigned to a SAS library.","Parameter2":"search-ref&gt;","Description2":"Is a character constant, variable, or expression that specifies whether to search for a fileref or a libref. Values: F (to search for a fileref) or L (to search for a libref)."},{"Name":"PCTL","Definition":"Returns the percentile that corresponds to the percentage. \n    \nReturn value data type: DOUBLE","Parameter1":"[ n ]","Description1":"\n      Is a digit from 1 to 5 which specifies the definition of the percentile to be computed.\n\n      Default: definition 5\n      Valid data types: DOUBLE","Parameter2":"percentage","Description2":"Specifies the percentile to be computed.\n\nRequirement: is numeric where 0 \u2264 percentage \u2264 100.","Parameter3":["expression [","...expression ]"],"Description3":["Specifies any valid expression that evaluates to a numeric value, whose value is computed \nin the percentile calculation.\n\nValid data types: DOUBLE","Specifies any valid expression that evaluates to a numeric value, whose value is computed\nin the percentile calculation.\n\nValid data types: DOUBLE"]},{"Name":"PDF*1","Definition":"Returns a value from a probability density (mass) distribution.","Parameter1":"dist","Description1":"Is a character constant, variable, or expression that identifies the distribution. Refer to SAS documentation for valid distributions (eg. 'NORMAL', 'CHISQUARE', 'F', 'T', etc.).","Parameter2":"quantile&lt;","Description2":"Is a numeric constant, variable, or expression that specifies the value of the random variable.","Parameter3":"parm-1, ...,parm-k&gt;","Description3":"Are optional numeric constants, variables, or expressions that specify the values of shape, location, or scale parameters that are appropriate for the specific distribution."},{"Name":"PDF*2","Definition":"Returns a value from a Bernoulli probability density (mass) distribution.","Parameter1":"'BERNOULLI'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x","Description2":"Is a numeric random variable.","Parameter3":"p","Description3":"Is a numeric probability of success. Range: 0 \u2264 p \u2264 1."},{"Name":"PDF*3","Definition":"Returns a value from a \u03b2 probability density (mass) distribution.","Parameter1":"'BETA'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x","Description2":"Is a numeric random variable.","Parameter3":"a","Description3":"Is a numeric shape parameter. Range: a &gt; 0.","Parameter4":"b&lt;","Description4":"Is a numeric shape parameter. Range: b &gt; 0.","Parameter5":"l","Description5":"Is the numeric left location parameter. Default: 0.","Parameter6":"r&gt;","Description6":"Is the right location parameter. Default: 0.  Range: r&gt;l."},{"Name":"PDF*4","Definition":"Returns a value from a binomial probability density (mass) distribution.","Parameter1":"'BINOMIAL'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"m","Description2":"Is an integer random variable that counts the number of successes.","Parameter3":"p","Description3":"Is a numeric probability of success. Range: 0 \u2264 p \u2264 1.","Parameter4":"n","Description4":"Is an integer parameter that counts the number of independent Bernoulli trials."},{"Name":"PDF*5","Definition":"Returns a value from a Cauchy probability density (mass) distribution.","Parameter1":"'CAUCHY'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x&lt;","Description2":"Is a numeric random variable.","Parameter3":"theta","Description3":"Is a numeric location parameter. Default: 0.","Parameter4":"lambda&gt;","Description4":"Is a numeric scale parameter. Default: 1. Range: lambda &gt; 0."},{"Name":"PDF*6","Definition":"Returns a value from a chi-square probability density (mass) distribution.","Parameter1":"'CHISQUARE'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x","Description2":"Is a numeric random variable.","Parameter3":"df&lt;","Description3":"Is a numeric degrees of freedom parameter. Range: df &gt; 0.","Parameter4":"nc&gt;","Description4":"Is an optional numeric non-centrality parameter. Range: nc \u2265 0."},{"Name":"PDF*7","Definition":"Returns a value from a probability density (mass) distribution.","Parameter1":"'EXPONENTIAL'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x&lt;","Description2":"Is a numeric random variable.","Parameter4":"lambda&gt;","Description4":"Is a numeric scale parameter. Default: 1. Range: lambda &gt; 0."},{"Name":"PDF*8","Definition":"Returns a value from an F probability density (mass) distribution.","Parameter1":"'F'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x","Description2":"Is a numeric random variable.","Parameter3":"ndf","Description3":"Is a numeric numerator degrees of freedom parameter. Range: ndf &gt; 0.","Parameter4":"ddf&lt;","Description4":"Is a numeric denominator degrees of freedom parameter. Range: ddf &gt; 0.","Parameter5":"nc&gt;","Description5":"Is a numeric non-centrality parameter. Range: nc &gt; =0."},{"Name":"PDF*9","Definition":"Returns a value from a Gamma probability density (mass) distribution.","Parameter1":"'GAMMA'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x","Description2":"Is a numeric random variable.","Parameter3":"a&lt;","Description3":"Is a numeric shape parameter. Range: a &gt; 0.","Parameter4":"lambda&gt;","Description4":"Is a numeric scale parameter. Default: 1. Range: lambda &gt; 0."},{"Name":"PDF*10","Definition":"Returns a value from a Geometric probability density (mass) distribution.","Parameter1":"'GEOMETRIC'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"m","Description2":"Is a numeric random variable that denotes the number of failures before the first success. Range: m \u2265 0.","Parameter3":"p","Description3":"Is a numeric probability of success. Range: 0 \u2264 p \u2264 1."},{"Name":"PDF*11","Definition":"Returns a value from a Hypergeometric probability density (mass) distribution.","Parameter1":"'HYPER'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x","Description2":"Is an integer random variable.","Parameter3":"N","Description3":"Is an integer population size parameter. Range: N = 1, 2, ...","Parameter4":"R","Description4":"Is an integer number of items in the category of interest. Range: R = 0, 1, ..., N","Parameter5":"n&lt;","Description5":"Is an integer sample size parameter. Range: n = 1, 2, ..., N","Parameter6":"o&gt;","Description6":"Is an optional numeric odds ratio parameter. Range: o &gt; 0."},{"Name":"PDF*12","Definition":"Returns a value from a Laplace probability density (mass) distribution.","Parameter1":"'LAPLACE'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x&lt;","Description2":"Is a numeric random variable.","Parameter3":"theta","Description3":"Is a numeric location parameter. Default: 0","Parameter4":"lambda&gt;","Description4":"Is a numeric scale parameter. Default: 1. Range: lambda &gt; 0."},{"Name":"PDF*13","Definition":"Returns a value from a Logistic probability density (mass) distribution.","Parameter1":"'LOGISTIC'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x&lt;","Description2":"Is a numeric random variable.","Parameter3":"theta","Description3":"Is a numeric location parameter. Default: 0","Parameter4":"lambda&gt;","Description4":"Is a numeric scale parameter. Default: 1. Range: lambda &gt; 0."},{"Name":"PDF*14","Definition":"Returns a value from a Lognormal probability density (mass) distribution.","Parameter1":"'LOGNORMAL'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x&lt;","Description2":"Is a numeric random variable.","Parameter3":"theta","Description3":"Is a numeric location parameter. Default: 0","Parameter4":"lambda&gt;","Description4":"Is a numeric scale parameter. Default: 1. Range: lambda &gt; 0."},{"Name":"PDF*15","Definition":"Returns a value from a Negative Binomial probability density (mass) distribution.","Parameter1":"'NEGBINOMIAL'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"m","Description2":"Is a positive integer random variable that counts the number of failures. Range: m= 0, 1, ...","Parameter3":"p","Description3":"Is a numeric probability of success. Range: 0 \u2264 p \u2264 1.","Parameter4":"n","Description4":"Is a numeric value that counts the number of successes. Range: n &gt; 0."},{"Name":"PDF*16","Definition":"Returns a value from a Normal probability density (mass) distribution.","Parameter1":"'NORMAL'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x&lt;","Description2":"Is a numeric random variable.","Parameter3":"theta","Description3":"Is a numeric location parameter. Default: 0","Parameter4":"lambda&gt;","Description4":"Is a numeric scale parameter. Default: 1. Range: lambda &gt; 0."},{"Name":"PDF*17","Definition":"Returns a value from a Normal Mixture probability density (mass) distribution.","Parameter1":"'NORMALMIX'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x","Description2":"Is a numeric random variable.","Parameter3":"n","Description3":"Is the integer number of mixtures. Range: n = 1, 2, ...","Parameter4":"p","Description4":"Is the n proportions, p1, p2, ..., pn, where sum of p1 to pn is equal to 1. Range: p = 0, 1, ...","Parameter5":"m","Description5":"Is the n means, m1, m2, ...,mn.","Parameter6":"s","Description6":"Is the n standard deviations, s1, s2, ..., sn. Range: s &gt; 0."},{"Name":"PDF*18","Definition":"Returns a value from a Pareto probability density (mass) distribution.","Parameter1":"'PARETO'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x","Description2":"Is a numeric random variable.","Parameter3":"a&lt;","Description3":"Is a numeric shape parameter. Range: a &gt; 0.","Parameter4":"k&gt;","Description4":"Is a numeric scale parameter. Default: 1. Range: k &gt; 0."},{"Name":"PDF*19","Definition":"Returns a value from a Poisson probability density (mass) distribution.","Parameter1":"'POISSON'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"n","Description2":"Is an integer random variable. Range: n= 0, 1, ...","Parameter3":"m","Description3":"Is a numeric mean parameter. Range: m &gt; 0."},{"Name":"PDF*20","Definition":"Returns a value from a T probability density (mass) distribution.","Parameter1":"'T'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"t","Description2":"Is a numeric random variable.","Parameter3":"df&lt;","Description3":"Is a numeric degrees of freedom parameter. Range: df &gt; 0.","Parameter4":"nc&gt;","Description4":"Is an optional numeric non-centrality parameter."},{"Name":"PDF*21","Definition":"Returns a value from a Uniform probability density (mass) distribution.","Parameter1":"'UNIFORM'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x","Description2":"Is a numeric random variable.","Parameter3":"l","Description3":"Is the numeric left location parameter. Default: 0.","Parameter4":"r","Description4":"Is the numeric right location parameter. Default: 1. Range: r&gt;l."},{"Name":"PDF*22","Definition":"Returns a value from a Wald (Inverse Gaussian) probability density (mass) distribution.","Parameter1":"'WALD'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x","Description2":"Is a numeric random variable.","Parameter3":"d","Description3":"Is a numeric shape parameter. Range: d&gt;l."},{"Name":"PDF*23","Definition":"Returns a value from a Weibull probability density (mass) distribution.","Parameter1":"'WEIBULL'","Description1":"Is a character constant, variable, or expression that identifies the distribution.","Parameter2":"x","Description2":"Is a numeric random variable.","Parameter3":"a&lt;","Description3":"Is a numeric shape parameter. Range: a &gt; 0.","Parameter4":"lambda&gt;","Description4":"Is a numeric scale parameter. Default: 1. Range: lambda &gt; 0."},{"Name":"PEEK","Definition":"Stores the contents of a memory address in a numeric variable on a 32-bit platform.","Parameter1":"address&lt;","Description1":"Is a numeric constant, variable, or expression that specifies the memory address.","Parameter2":"length&gt;","Description2":"Is a numeric constant, variable, or expression that specifies the data length. Range: 2 to 8."},{"Name":"PEEKC","Definition":"Stores the contents of a memory address in a character variable on a 32-bit platform.","Parameter1":"address&lt;","Description1":"Is a numeric constant, variable, or expression that specifies the memory address.","Parameter2":"length&gt;","Description2":"Is a numeric constant, variable, or expression that specifies the data length. Default: 8. Range: 1 to 32,767."},{"Name":"PEEKCLONG","Definition":"Stores the contents of a memory address in a character variable on 32-bit and 64-bit platforms.","Parameter1":"address&lt;","Description1":"Specifies a character constant, variable, or expression that contains the binary pointer address.","Parameter2":"length&gt;","Description2":"Is a numeric constant, variable, or expression that specifies the length of the character data. Default: 8. Range: 1 to 32,767."},{"Name":"PEEKLONG","Definition":"Stores the contents of a memory address in a numeric variable on 32-bit and 64-bit platforms.","Parameter1":"address&lt;","Description1":"Specifies a character constant, variable, or expression that contains the binary pointer address.","Parameter2":"length&gt;","Description2":"Is a numeric constant, variable, or expression that specifies the length of the character data. Default: 4 on 32-bit computers; 8 on 64-bit computers. Range: 1 -4 on 32-bit computers; 1-8 on 64-bit computers."},{"Name":"PERM","Definition":"Computes the number of permutations of n items that are taken r at a time.","Parameter1":"n&lt;","Description1":"Is an integer that represents the total number of elements from which the sample is chosen.","Parameter2":"r&gt;","Description2":"Is an integer value that represents the number of chosen elements. If r is omitted, the function returns the factorial of n. Restriction: r \u2264 n."},{"Name":"POINT","Definition":"Locates an observation that is identified by the NOTE function.","Parameter1":"data-set-id","Description1":"Is a numeric variable that specifies the data set identifier that the OPEN function returns.","Parameter2":"note-id","Description2":"Is a numeric variable that specifies the identifier assigned to the observation by the NOTE function."},{"Name":"POISSON","Definition":"Returns the probability from a Poisson distribution.","Parameter1":"m","Description1":"Is a numeric mean parameter. Range: m \u2265 0.","Parameter2":"n","Description2":"Is an integer random variable. Range: n \u2265 0."},{"Name":"POWER","Definition":"Returns the value of a numeric value expression raised to a specified power. \n    \nReturn value data type: DOUBLE","Parameter1":"numeric-expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE","Parameter2":"integer-expression","Description2":"Specifies any valid expression that evaluates to an integer value.\n\nValid data types: INTEGER, DOUBLE"},{"Name":"PROBBETA","Definition":"Returns the probability from a beta distribution.","Parameter1":"x","Description1":"Is a numeric random variable. Range: 0 \u2264 x \u2264 1.","Parameter2":"a","Description2":"Is a numeric shape parameter. Range: a &gt; 0.","Parameter3":"b","Description3":"Is a numeric shape parameter. Range: b &gt; 0."},{"Name":"PROBBNML","Definition":"Returns the probability from a binomial distribution.","Parameter1":"p","Description1":"Is a numeric probability of success parameter. Range: 0 \u2264 p \u2264 1.","Parameter2":"n","Description2":"Is an integer number of independent Bernoulli trials parameter. Range: n &gt; 0.","Parameter3":"m","Description3":"Is an integer number of successes random variable. Range: 0 \u2264 m \u2264 n."},{"Name":"PROBBNRM","Definition":"Returns a probability from a bivariate normal distribution.","Parameter1":"x","Description1":"Specifies a numeric constant, variable, or expression.","Parameter2":"y","Description2":"Specifies a numeric constant, variable, or expression.","Parameter3":"r","Description3":"Is a numeric correlation coefficient. Range: -1 \u2264 r \u2264 1."},{"Name":"PROBCHI","Definition":"Returns the probability from a chi-square distribution.","Parameter1":"x","Description1":"Is a numeric random variable. Range: x \u2265 0.","Parameter2":"df","Description2":"Is a numeric degrees of freedom parameter. Range: df \u2265 0.","Parameter3":"nc","Description3":"Is an optional numeric noncentrality parameter. Range: nc \u2265 0."},{"Name":"PROBF","Definition":"Returns the probability from an F distribution.","Parameter1":"x","Description1":"Is a numeric random variable. Range: x \u2265 0.","Parameter2":"ndf","Description2":"Is a numeric numerator degrees of freedom parameter. Range: ndf \u2265 0.","Parameter3":"ddf&lt;","Description3":"Is a numeric denominator degrees of freedom parameter. Range: ddf \u2265 0.","Parameter4":"nc","Description4":"Is an optional numeric noncentrality parameter. Range: nc \u2265 0."},{"Name":"PROBGAM","Definition":"Returns the probability from a gamma distribution.","Parameter1":"x","Description1":"Is a numeric random variable. Range: x \u2265 0.","Parameter2":"a","Description2":"Is a numeric shape parameter. Range: a \u2265 0."},{"Name":"PROBHYPR","Definition":"Returns the probability from a hypergeometric distribution.","Parameter1":"N","Description1":"Is an integer population size parameter. Range: N \u2265 1.","Parameter2":"K","Description2":"Is an integer number of items in the category of interest parameter.  Range: 0 \u2264 K \u2264 N.","Parameter3":"n","Description3":"Is an integer sample size parameter.  Range: 0 \u2264 n \u2264 N.","Parameter4":"x&lt;","Description4":"Is an integer random variable.  Range: max(0, K + n-N) \u2264 n \u2264 min(K,n).","Parameter5":"r&gt;","Description5":"Is an optional numeric odds ratio parameter. Range: r \u2265 0."},{"Name":"PROBIT","Definition":"Returns a quantile from the standard normal distribution.","Parameter1":"p","Description1":"Is a numeric probability.  Range: 0 &lt; p &lt; 1."},{"Name":"PROBMC","Definition":"Returns a probability or a quantile from various distributions for multiple comparisons of means.","Parameter1":"distribution","Description1":"Is a character constant, variable, or expression that identifies the distribution. Valid distributions: ANOM (Analysis of Means), DUNNETT1 (One-sided Dunnett), DUNNETT2 (Two-sided Dunnett), MAXMOD (Maximum Modulus), PARTRANGE (Partitioned Range), RANGE (Studentized Range), WILLIAMS.","Parameter2":"q","Description2":"Is the quantile from the distribution.","Parameter3":"prob","Description3":"Is the left probability from the distribution. Restriction: Either prob or q can be specified, but not both.","Parameter4":"df","Description4":"Is the degrees of freedom.","Parameter5":"nparms&lt;","Description5":"Is the number of treatments. For DUNNETT1 and DUNNETT2, the control group is not counted.","Parameter6":"parameters&gt;","Description6":"Is an optional set of nparms parameters that must be specified to handle the case of unequal sample sizes. The meaning of parameters depends on the value of distribution. If parameters is not specified, equal sample sizes are assumed, which is usually the case for a null hypothesis."},{"Name":"PROBNEGB","Definition":"Returns the probability from a negative binomial distribution.","Parameter1":"p","Description1":"Is a numeric probability of success parameter.  Range: 0 \u2264 p \u2264 1.","Parameter2":"n","Description2":"Is an integer number of successes parameter. Range: n \u2265 0.","Parameter3":"m","Description3":"Is a positive integer random variable, the number of failures. Range: m \u2265 0."},{"Name":"PROBNORM","Definition":"Returns the probability from the standard normal distribution.","Parameter1":"x","Description1":"Is a numeric random variable."},{"Name":"PROBT","Definition":"Returns the probability from a t distribution.","Parameter1":"x","Description1":"Is a numeric random variable.","Parameter2":"df&lt;","Description2":"Is a numeric degrees of freedom parameter. Range: df \u2265 0.","Parameter3":"nc&gt;","Description3":"Is an optional numeric noncentrality parameter."},{"Name":"PROPCASE","Definition":"Converts all words in an argument to proper case.","Parameter1":"argument&lt;","Description1":"Specifies a character constant, variable, or expression.","Parameter2":"delimiter(s)&gt;","Description2":"Specifies one or more delimiters that are enclosed in quotation marks. The default delimiters are blank, forward slash, hyphen, open parenthesis, period, and tab."},{"Name":"PRXMATCH","Definition":"Searches for a pattern match and returns the position at which the pattern is found.","Parameter1":"regular-expression-id | perl-regular-expression","Description1":"Specifies either a numeric variable with a value that is a pattern identifier that is returned from the PRXPARSE function, or a character constant, variable, or expression with a value that is a Perl regular expression.","Parameter2":"source","Description2":"Specifies a character constant, variable, or expression that you want to search."},{"Name":"PRXPAREN","Definition":"Returns the last bracket match for which there is a match in a pattern.","Parameter1":"regular-expression-id","Description1":"Specifies a numeric variable with a value that is an identification number that is returned by the PRXPARSE function."},{"Name":"PRXPARSE","Definition":"Compiles a Perl regular expression (PRX) that can be used for pattern matching of a character value.","Parameter1":"perl-regular-expression","Description1":"Specifies a character value that is a Perl regular expression."},{"Name":"PRXPOSN","Definition":"Returns a character string that contains the value for a capture buffer.","Parameter1":"regular-expression-id","Description1":"Specifies a numeric variable with a value that is a pattern identifier that is returned by the PRXPARSE function.","Parameter2":"capture-buffer","Description2":"Is a numeric constant, variable, or expression that identifies the capture buffer for which to retrieve a value: 0 returns the entire match; between 1 and the number of open parentheses returns the value for that capture buffer; greater than the number of open parentheses returns a missing value.","Parameter3":"source","Description3":"Specifies the text from which to extract capture buffers."},{"Name":"PTRLONGADD","Definition":"Returns the pointer address as a character variable on 32-bit and 64-bit platforms.","Parameter1":"pointer&lt;","Description1":"Is a character constant, variable, or expression that specifies the pointer address.","Parameter2":"amount&gt;","Description2":"Is a numeric constant, variable, or expression that specifies the amount to add to the address."},{"Name":"PUT","Definition":"Returns a value using a specified format. \n    \nReturn value data type: NVARCHAR","Parameter1":"expression","Description1":"Specifies any valid expression. \n\nValid data types: DOUBLE, DATE, TIME, TIMESTAMP, CHAR, NCHAR","Parameter2":"format.","Description2":"Specifies either a TSPL format or a user-defined format that you want applied to expression. \n\nTo override the default alignment, you can add an alignment specification to a format: \n\n  -L left aligns the value\n \n  -C centers the value\n \n  -R right aligns the value"},{"Name":"PUTC","Definition":"Enables you to specify a character format at run time.","Parameter1":"source","Description1":"Specifies a character constant, variable, or expression to which you want to apply the format.","Parameter2":"format.&lt;","Description2":"Is a character constant, variable, or expression with a value that is the character format you want to apply to source.","Parameter3":"w&gt;","Description3":"Is a numeric constant, variable, or expression that specifies a width to apply to the format. It overrides any width specification in the format. argument."},{"Name":"PUTN","Definition":"Enables you to specify a numeric format at run time.","Parameter1":"source","Description1":"Specifies a character constant, variable, or expression to which you want to apply the format.","Parameter2":"format.&lt;","Description2":"Is a character constant, variable, or expression with a value that is the numeric format you want to apply to source.","Parameter3":"w&lt;","Description3":"Is a numeric constant, variable, or expression that specifies a width to apply to the format. It overrides any width specification in the format. argument.","Parameter4":"d&gt;&gt;","Description4":"Is a numeric constant, variable, or expression that specifies the number of decimal places to use."},{"Name":"PVP","Definition":"Returns the present value for a periodic cash flow stream (such as a bond), with repayment of principal at maturity.","Parameter1":"A","Description1":"Specifies the par value. Range: A &gt; 0.","Parameter2":"c","Description2":"Specifies the nominal per-year coupon rate, expressed as a fraction. Range: 0 \u2264 c \u2264 1.","Parameter3":"n","Description3":"Specifies the number of coupons per year. Range: n &gt; 0 and is an integer.","Parameter4":"K","Description4":"Specifies the number of remaining coupons. Range: K &gt; 0 and is an integer.","Parameter5":"ko","Description5":"Specifies the time from the present date to the first coupon date, expressed in terms of the number of years. Range: 0 \u2264 ko \u2264 1/n.","Parameter6":"y","Description6":"Specifies the nominal per-year yield-to-maturity, expressed as a fraction. Range: y &gt; 0."},{"Name":"QTR","Definition":"Returns the quarter of the year from a SAS date value. \n    \nReturn value data type: DOUBLE","Parameter1":"date","Description1":"Specifies any valid expression that represents a SAS date value.\n\nValid data types: DOUBLE"},{"Name":"QUANTILE","Definition":"Returns the quantile from a distribution that you specify.","Parameter1":"dist","Description1":"Is a character constant, variable, or expression that identifies the distribution. Refer to SAS documentation for valid distributions (eg. 'NORMAL', 'CHISQUARE', 'F', 'T', etc.).","Parameter2":"probability","Description2":"Is a numeric constant, variable, or expression that specifies the value of a random variable.","Parameter3":"parm-1, ...,parm-k","Description3":"Are optional shape, location, or scale parameters appropriate for the specific distribution."},{"Name":"QUOTE","Definition":"Adds double quotation marks to a character value. \n    \nReturn value data type: NCHAR","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: NCHAR"},{"Name":"RANBIN","Definition":"Returns a random variate from a binomial distribution.","Parameter1":"seed","Description1":"Is a numeric constant, variable, or expression with an integer value. If seed \u2264 0, the time of day is used to initialize the seed stream. Range: seed&lt;(2\u00b3\u00b9)-1.","Parameter2":"n","Description2":"Is a numeric constant, variable, or expression with an integer value that specifies the number of independent Bernoulli trials parameter. Range: n &gt; 0.","Parameter3":"p","Description3":"Is a numeric constant, variable, or expression that specifies the probability of success. Range: 0 &lt; p &lt; 1."},{"Name":"RANCAU","Definition":"Returns a random variate from a Cauchy distribution.","Parameter1":"seed","Description1":"Is a numeric constant, variable, or expression with an integer value. If seed \u2264 0, the time of day is used to initialize the seed stream. Range: seed&lt;(2\u00b3\u00b9)-1."},{"Name":"RAND","Definition":"Generates random numbers from a distribution that you specify.","Parameter1":"dist","Description1":"Is a character constant, variable, or expression that identifies the distribution. Refer to SAS documentation for valid distributions (eg. 'NORMAL', 'CHISQUARE', 'F', 'T', etc.).","Parameter2":"parm-1, ...,parm-k","Description2":"Are shape, location, or scale parameters appropriate for the specific distribution."},{"Name":"RANEXP","Definition":"Returns a random variate from an exponential distribution.","Parameter1":"seed","Description1":"Is a numeric constant, variable, or expression with an integer value. If seed \u2264 0, the time of day is used to initialize the seed stream. Range: seed&lt;(2\u00b3\u00b9)-1."},{"Name":"RANGAM","Definition":"Returns a random variate from a gamma distribution.","Parameter1":"seed","Description1":"Is a numeric constant, variable, or expression with an integer value. If seed \u2264 0, the time of day is used to initialize the seed stream. Range: seed&lt;(2\u00b3\u00b9)-1.","Parameter2":"a","Description2":"Is a numeric constant, variable, or expression that specifies the shape parameter. Range: a &gt; 0 "},{"Name":"RANGE","Definition":"Returns the range of the nonmissing values. \n    \nAt least one non-null or nonmissing argument is required. Otherwise, \nthe function returns a null or missing value. \n\nReturn value data type: DOUBLE","Parameter1":"expression-1 [","Description1":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE","Parameter2":"...expression-n ]","Description2":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE"},{"Name":"RANK","Definition":"Returns the position of a character in the ASCII or EBCDIC collating sequence. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: NCHAR"},{"Name":"RANUNI","Definition":"Returns a random variate from a uniform distribution.","Parameter1":"seed","Description1":"Is a numeric constant, variable, or expression with an integer value. If seed \u2264 0, the time of day is used to initialize the seed stream. Range: seed&lt;(2\u00b3\u00b9)-1."},{"Name":"RENAME","Definition":"Renames a member of a SAS library, an entry in a SAS catalog, an external file, or a directory.","Parameter1":"old-name","Description1":"Specifies a character constant, variable, or expression that is the current name of a member of a SAS library, an entry in a SAS catalog, an external file, or an external directory.","Parameter2":"new-name&lt;","Description2":"Specifies a character constant, variable, or expression that is the new one-level name for the library member, catalog entry, external file, or directory.","Parameter3":"type","Description3":"Is a character constant, variable, or expression that specifies the type of element to rename. Values: 'ACCESS' (SAS/ACCESS), 'CATALOG', 'DATA', 'VIEW', 'FILE'. Default: 'DATA'","Parameter4":"description&lt;","Description4":"Specifies a character constant, variable, or expression that is the description of a catalog entry. You can specify description only when the value of type is CATALOG. Description can be a null argument.","Parameter5":"password&lt;","Description5":"Is a character constant, variable, or expression that specifies the password for the data set that is being renamed. Password can be a null argument.","Parameter6":"generation&gt;&gt;&gt;&gt;","Description6":"Is a numeric constant, variable, or expression that specifies the generation number of the data set that is being renamed. Generation can be a null argument."},{"Name":"REPEAT","Definition":"Repeats a character expression. \n    \nReturn value data type: VARCHAR, NVARCHAR","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: CHAR, NCHAR","Parameter2":"n","Description2":"Specifies the number of times to repeat expression.\n\nRestriction: n must be greater than or equal to 0. \n\nValid data types: INTEGER"},{"Name":"RESOLVE","Definition":"Returns the resolved value of the argument after it has been processed by the macro facility.","Parameter1":"argument","Description1":"Is a character constant, variable, or expression with a value that is a macro expression."},{"Name":"REVERSE","Definition":"Reverses a character expression.","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: NCHAR"},{"Name":"REWIND","Definition":"Positions the data set pointer at the beginning of a SAS data set.","Parameter1":"data-set-id","Description1":"Is a numeric variable that specifies the data set identifier that the OPEN function returns."},{"Name":"RIGHT","Definition":"Right aligns a character expression. \n    \nReturn value data type: NCHAR","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: NCHAR"},{"Name":"RMS","Definition":"Returns the root mean square. \n    \nReturn value data type: DOUBLE","Parameter1":"expression-1 [","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE","Parameter2":"... expression-n ]","Description2":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"ROUND","Definition":"Rounds the first argument to the nearest multiple of the second argument, \nor to the nearest integer when the second argument is omitted. \n\nReturn value data type: DOUBLE","Parameter1":"expression [","Description1":"Specifies any valid expression that evaluates to a numeric value, to be rounded.\n\nValid data types: DOUBLE","Parameter2":"rounding-unit ]","Description2":"Specifies a positive numeric expression that specifies the rounding unit.\n\nValid data types: DOUBLE"},{"Name":"ROUNDE","Definition":"Rounds the first argument to the nearest multiple of the second argument, and returns an \neven multiple when the first argument is halfway between the two nearest multiples. \n\nReturn value data type: DOUBLE","Parameter1":"expression [","Description1":"Specifies any valid expression that evaluates to a numeric value and that is to be rounded.\n\nValid data types: DOUBLE","Parameter2":"rounding-unit ]","Description2":"Specifies a positive numeric expression that specifies the rounding unit.\n\nDefault: 1 \n\nValid data types: DOUBLE"},{"Name":"ROUNDZ","Definition":"Rounds the first argument to the nearest multiple of the second argument, \nusing zero fuzzing.\n\nReturn value data type: DOUBLE","Parameter1":"expression [","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE","Parameter2":"rounding-unit ]","Description2":"Specifies any valid expression that evaluates to a numeric expression and that specifies \nthe rounding unit. \n\nRequirements: Only positive values are valid. \nValid data types: DOUBLE \nDefault value: 1"},{"Name":"SAVING","Definition":"Returns the future value of a periodic saving.","Parameter1":"f","Description1":"Is numeric, the future amount (at the end of n periods). Range: f \u2265 0.","Parameter2":"p","Description2":"Is numeric, the fixed periodic payment. Range: p \u2265 0.","Parameter3":"r","Description3":"Is numeric, the periodic interest rate expressed as a decimal. Range: r \u2265 0.","Parameter4":"n","Description4":"Is an integer, the number of compounding periods. Range: n \u2265 0."},{"Name":"SCAN*1","Definition":"Returns the nth word from a character expression. \n    \nReturn value data type: NCHAR","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: NCHAR","Parameter2":"n [","Description2":"Is a non-zero numeric expression that specifies the number of the word in the character \nexpression that you want SCAN to select. The following rules apply: \n\nIf n is positive, SCAN counts words from left to right in the character string.\n\nIf n is negative, SCAN counts words from right to left in the character string.\n\nIf n is greater than the number of words in expression, SCAN returns a blank value.","Parameter3":"delimiters ]","Description3":"Specifies any valid expression that evaluates to a character string and that SCAN uses as word separators in the expression.\n\nRequirement: If delimiter is a constant, enclose delimiter in single quotation marks. \nASCII default delimiters: blank . , ( + &amp; ! $ * ) ; ^ -- / % | \nIn environments without the ^ character, SCAN uses the ~ character instead.\n \nEBCDIC default delimiters: blank . &lt; ( + | &amp; ! $ * ) ; \u00ac -- / , % \u00a2 \nValid data types: NCHAR"},{"Name":"SCAN*2","Definition":"This CALL SCAN routine returns the position and length of the nth word from a character string.","Parameter1":"&lt;string&gt;","Description1":"Specifies a character constant, variable, or expression.","Parameter2":"count","Description2":"Is a non-zero numeric constant, variable, or expression that has an integer value that specifies the number of the word in the character string that you want the CALL SCAN routine to select.","Parameter3":"position","Description3":"Specifies a numeric variable in which the position of the word is returned. If count exceeds the number of words in the string, then the value that is returned in position is zero. If count is zero or missing, then the value that is returned in position is missing.","Parameter4":"length &lt;","Description4":"Specifies a numeric variable in which the length of the word is returned. If count exceeds the number of words in the string, then the value that is returned in length is zero. If count is zero or missing, then the value that is returned in length is missing.","Parameter5":"&lt;charlist&gt; &lt;","Description5":"Specifies an optional character constant, variable, or expression that initializes a list of characters. This list determines which characters are used as the delimiters that separate words.","Parameter6":"&lt;modifier&gt;&gt;&gt;","Description6":"Specifies a character constant, variable, or expression in which each non-blank character modifies the action of the CALL SCAN routine. Blanks are ignored."},{"Name":"SCAN*3","Definition":"Searches for a word and masks special characters and mnemonic operators.","Parameter1":"argument","Description1":"Is a character string or a text expression. If argument contains a special character or mnemonic operator, use %QSCAN.","Parameter2":"n&lt;","Description2":"Is an integer or a text expression that yields an integer, which specifies the position of the word to return.","Parameter3":"delimiters&gt;","Description3":"Specifies an optional list of one or more characters that separate \"words\" or text expressions that yield one or more characters. Possible delimiters: blank . &lt; ( + &amp; ! $ * ) ; ^ - / , % |."},{"Name":"SCANQ*1","Definition":"Returns the nth word from a character expression, ignoring delimiters that are enclosed in quotation marks.","Parameter1":"string","Description1":"Specifies a character constant, variable, or expression.","Parameter2":"n&lt;","Description2":"Is a numeric constant, variable, or expression that has an integer value that specifies the number of the word in the character string that you want QSCAN to select. If n is positive, CALL SCANQ counts words from left to right. If n is negative, SCANQ counts words from right to left. If n is zero, or |n| is greater than the number of words in the character string, CALL SCANQ returns a position and length of zero.","Parameter3":"delimiter(s)&lt;","Description3":"Specifies an optional character constant, variable, or expression that specifies the characters that you want SCANQ to use to separate words in the character string. Restriction: You cannot use single or double quotation marks as delimiters. Default: If you omit delimiter, SCANQ uses white space characters (blank, horizontal and vertical tab, carriage return, line feed, and form feed) as delimiters."},{"Name":"SCANQ*2","Definition":"Returns the position and length of a given word from a character expression, and ignores delimiters that are enclosed in quotation marks.","Parameter1":"string","Description1":"Specifies a character constant, variable, or expression.","Parameter2":"n","Description2":"Is a numeric constant, variable, or expression that has an integer value that specifies the number of the word in the character string that you want QSCAN to select. If n is positive, CALL SCANQ counts words from left to right. If n is negative, SCANQ counts words from right to left. If n is zero, or |n| is greater than the number of words in the character string, CALL SCANQ returns a position and length of zero.","Parameter3":"position","Description3":"Specifies a numeric variable in which the position of the word is returned.","Parameter4":"length&lt;","Description4":"Specifies a numeric variable in which the length of the word is returned.","Parameter5":"delimiter(s)&lt;","Description5":"Specifies an optional character constant, variable, or expression that specifies the characters that you want SCANQ to use to separate words in the character string. Restriction: You cannot use single or double quotation marks as delimiters. Default: If you omit delimiter, SCANQ uses white space characters (blank, horizontal and vertical tab, carriage return, line feed, and form feed) as delimiters."},{"Name":"SDF","Definition":"Returns a survival function.","Parameter1":"dist","Description1":"Is a character string that identifies the distribution. Refer to SAS documentation for valid distributions (eg. 'NORMAL', 'CHISQUARE', 'F', 'T', etc.).","Parameter2":"quantile","Description2":"Is a numeric constant, variable or expression that specifies the value of a random variable.","Parameter3":"parm-1, ...,parm-k","Description3":"Are optional shape, location, or scale parameters appropriate for the specific distribution."},{"Name":"SECOND","Definition":"Returns the second from a SAS time or datetime value. \n    \nReturn value data type: DOUBLE","Parameter1":"time | datetime","Description1":"time \nspecifies any valid expression that represents a SAS time value.\n\nValid data types: DOUBLE \n\ndatetime \nspecifies any valid expression that represents a SAS datetime value.\n\nValid data types: DOUBLE"},{"Name":"SIGN","Definition":"Returns a number that indicates the sign of a numeric value expression. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"SIN","Definition":"Returns the trigonometric sine. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"SINH","Definition":"Returns the hyperbolic sine. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE"},{"Name":"SKEWNESS","Definition":"Returns the skewness. \n    \nRequirements: At least three non-null or non-missing arguments are required. \nOtherwise, the function returns a null or missing value. \n\nReturn value data type: DOUBLE","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE","Parameter2":"expression-2","Description2":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE","Parameter3":"expression-3 [","Description3":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE","Parameter4":"...expression-n ]","Description4":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE"},{"Name":"SLEEP","Definition":"For a specified period of time, suspends the execution of a program that invokes this function.\n    \nReturn value data type: DOUBLE","Parameter1":"number-of-time-units [","Description1":"Specifies any valid expression that evaluates to a numeric value and that specifies \nthe number of units of time for which you want to suspend execution of a program.\n\nRange: n \u2265 0","Parameter2":"time-unit ]","Description2":"Specifies  the unit of time, as a power of 10, which is applied to number-of-time-units. \nFor example, 1 corresponds to a second, and .001 to a millisecond. \n\nDefault: 1 in a Windows PC environment, .001 in other environments"},{"Name":"SMALLEST","Definition":"Returns the kth smallest non-null or non-missing value. \n    \nReturn value data type: DOUBLE","Parameter1":"k","Description1":"Specifies any valid expression that evaluates to a numeric value to return.\n\nValid data types: DOUBLE","Parameter2":"expression [","Description2":"Specifies any valid expression that evaluates to a numeric value to be processed. \n\nValid data types: DOUBLE","Parameter3":"... expression ]","Description3":"Specifies any valid expression that evaluates to a numeric value to be processed. \n\nValid data types: DOUBLE"},{"Name":"SOUNDEX","Definition":"Encodes a string to facilitate searching.","Parameter1":"argument","Description1":"Specifies a character constant, variable, or expression."},{"Name":"SPEDIS","Definition":"Determines the likelihood of two words matching, expressed as the asymmetric spelling distance between the two words.","Parameter1":"query","Description1":"Identifies the word to query for the likelihood of a match. SPEDIS removes trailing blanks before comparing the value.","Parameter2":"keyword","Description2":"Specifies a target word for the query. SPEDIS removes trailing blanks before comparing the value."},{"Name":"SQRT","Definition":"Returns the square root of a value. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a nonnegative numeric value.\n\nValid data types: DOUBLE"},{"Name":"STD","Definition":"Returns the standard deviation.\n    \nRequirements: At least two non-null or non-missing arguments are required. \nOtherwise, the function returns a null or missing value. \n\nReturn value data type: DOUBLE","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE","Parameter2":"expression-2 [","Description2":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE","Parameter3":"...expression-n ]","Description3":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE"},{"Name":"STDERR","Definition":"Returns the standard error of the mean.\n    \nRequirements: At least two non-null or non-missing arguments are required. \nOtherwise, the function returns a null or missing value. \n\nReturn value data type: DOUBLE","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE","Parameter2":"expression-2 [","Description2":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE","Parameter3":"...expression-n ]","Description3":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE"},{"Name":"STFIPS","Definition":"Converts state postal codes to FIPS state codes.","Parameter1":"postal-code","Description1":"Specifies a character expression that contains the two-character standard state postal code. Characters can be mixed case. The function ignores trailing blanks, but generates an error if the expression contains leading blanks."},{"Name":"STNAME","Definition":"Converts state postal codes to uppercase state names.","Parameter1":"postal-code","Description1":"Specifies a character expression that contains the two-character standard state postal code. Characters can be mixed case. The function ignores trailing blanks, but generates an error if the expression contains leading blanks."},{"Name":"STNAMEL","Definition":"Converts state postal codes to mixed case state names.","Parameter1":"postal-code","Description1":"Specifies a character expression that contains the two-character standard state postal code. Characters can be mixed case. The function ignores trailing blanks, but generates an error if the expression contains leading blanks."},{"Name":"STRIP","Definition":"Returns a character string with all leading and trailing blanks removed. \n    \nReturn value data type: NCHAR","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: NCHAR"},{"Name":"SUBPAD","Definition":"Returns a substring that has a length you specify, using blank padding if necessary.","Parameter1":"string","Description1":"Specifies a character constant, variable, or expression.","Parameter2":"position&lt;","Description2":"Is a positive integer that specifies the position of the first character in the substring.","Parameter3":"length&gt;","Description3":"Is a non-negative integer that specifies the length of the substring. If you do not specify length, the SUBPAD function returns the substring that extends from the position that you specify to the end of the string."},{"Name":"SUBSTR*1","Definition":"Returns a substring, allowing a result with a length of zero. \n    \nReturn value data type: VARCHAR, NVARCHAR","Parameter1":"character-expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: CHAR, NCHAR","Parameter2":"position-expression [","Description2":"Specifies any valid expression that evaluates to an integer and that specifies the \nposition of the first character in the substring. \n\nValid data types: INTEGER","Parameter3":"length-expression ]","Description3":"Specifies any valid expression that evaluates to an integer and that specifies the length \nof the substring. If you do not specify length-expression, the SUBSTR function returns \nthe substring that extends from the position that you specify to the end of the string.\n\nValid data types: INTEGER"},{"Name":"SUBSTR*2","Definition":"Replaces character value contents. Appropriate for a SUBSTR (left of =) function, of the form SUBSTR(variable, position&lt;,length&gt;)=characters-to-replace.","Parameter1":"variable","Description1":"Specifies a character variable.","Parameter2":"position [","Description2":"Specifies a numeric constant, variable, or expression that is the beginning character position.","Parameter3":"length ]","Description3":"Specifies a numeric constant, variable, or expression that is the length of the substring that will be replaced."},{"Name":"QSUBSTR","Definition":"%QSUBSTR produces a substring of a character string, masking special characters and mnemonic operators.","Parameter1":"argument","Description1":"Is a character string or a text expression that might contain special characters and mnemonic operators such as &amp; % ' \" ( ) + - * / &lt; &gt; = \u00ac ^ ~ ; , #  blank AND OR NOT EQ NE LE LT GE GT IN.","Parameter2":"position&lt;","Description2":"Is an integer or an expression (text, logical, or arithmetic) that yields an integer, which specifies the position of the first character in the substring.","Parameter3":"length&gt;","Description3":"Is an optional integer or an expression (text, logical, or arithmetic) that yields an integer that specifies the number of characters in the substring."},{"Name":"SUBSTRN","Definition":"Returns a substring, allowing a result with a length of zero.","Parameter1":"string","Description1":"Specifies a character constant, variable, or expression.","Parameter2":"position&lt;","Description2":"Is an integer that specifies the position of the first character in the substring.","Parameter3":"length","Description3":"Is an integer that specifies the length of the substring. If you do not specify length, the SUBSTRN function returns the substring that extends from the position that you specify to the end of the string."},{"Name":"SUM","Definition":"Returns the sum of the non-null or nonmissing arguments. \n    \nReturn value data type: BIGINT if all argument data types are BIGINT, otherwise, DOUBLE \n\nRequirements: At least two arguments are required.","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value.\n    \nValid data types: DOUBLE, BIGINT","Parameter2":"expression-2 [","Description2":"&gt;Specifies any valid expression that evaluates to a numeric value.\n    \nValid data types: DOUBLE, BIGINT","Parameter3":"... expression-n ]","Description3":"Specifies any valid expression that evaluates to a numeric value.\n    \nValid data types: DOUBLE, BIGINT"},{"Name":"SUMABS","Definition":"Returns the sum of the absolute values of the non-missing arguments.","Parameter1":"value-1&lt;","Description1":"Specifies a numeric expression.","Parameter2":"value-2 ...&gt;","Description2":"Specifies a numeric expression."},{"Name":"SYMEXIST","Definition":"Returns an indication of the existence of a macro variable.","Parameter1":"argument","Description1":"Can be one of the following items: (1) the name of a macro variable within double quotation marks but without an ampersand; (2) the name of a DATA step character variable, specified with no quotation marks, which contains a macro variable name; (3) a character expression that constructs a macro variable name."},{"Name":"SYMGET","Definition":"Returns the value of a macro variable during DATA step execution.","Parameter1":"argument","Description1":"Can be one of the following items: (1) the name of a macro variable within double quotation marks but without an ampersand; (2) the name of a DATA step character variable, specified with no quotation marks, which contains a macro variable name; (3) a character expression that constructs a macro variable name."},{"Name":"SYMGLOBL","Definition":"Returns an indication of whether a macro variable is in global scope to the DATA step during DATA step execution.","Parameter1":"argument","Description1":"Can be one of the following items: (1) the name of a macro variable within double quotation marks but without an ampersand; (2) the name of a DATA step character variable, specified with no quotation marks, which contains a macro variable name; (3) a character expression that constructs a macro variable name."},{"Name":"SYMLOCAL","Definition":"Returns an indication of whether a macro variable is in local scope to the DATA step during DATA step execution.","Parameter1":"argument","Description1":"Can be one of the following items: (1) the name of a macro variable within double quotation marks but without an ampersand; (2) the name of a DATA step character variable, specified with no quotation marks, which contains a macro variable name; (3) a character expression that constructs a macro variable name."},{"Name":"SYSGET","Definition":"Returns the value of the specified operating environment variable.","Parameter1":"operating-environment-variable","Description1":"Is a character constant, variable, or expression with a value that is the name of an operating environment variable. The case of operating-environment-variable must agree with the case that is stored in the operating environment. Trailing blanks in the argument of SYSGET are significant. Use the TRIM function to remove them."},{"Name":"SYSMSG","Definition":"Returns error or warning message text from processing the last data set or external file function."},{"Name":"SYSPARM","Definition":"Returns the system parameter string."},{"Name":"SYSPROCESSID","Definition":"Returns the process ID of the current process."},{"Name":"SYSPROCESSNAME","Definition":"Returns the process name that is associated with a given process ID, or returns the name of the current process.","Parameter1":"&lt;process_id&gt;","Description1":"Specifies a 32-character hexadecimal process id."},{"Name":"SYSPROD","Definition":"Determines whether a product is licensed.","Parameter1":"product-name","Description1":"Specifies a character constant, variable, or expression with a value that is the name of a SAS product."},{"Name":"SYSRC","Definition":"Returns a system error number."},{"Name":"SYSTEM","Definition":"Issues an operating environment command during a SAS session, and returns the system return code.","Parameter1":"command","Description1":"Specifies any of the following: a system command that is enclosed in quotation marks (explicit character string), an expression whose value is a system command, or the name of a character variable whose value is a system command that is executed."},{"Name":"TAN","Definition":"Returns the tangent. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value in radians.\n\nRestriction: expression cannot be an odd multiple of \u03c0/2 \nValid data types: DOUBLE"},{"Name":"TANH*1","Definition":"Returns the hyperbolic tangent. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nRestriction: expression cannot be an odd multiple of \u03c0/2 \nValid data types: DOUBLE"},{"Name":"TANH*2","Definition":"This CALL TANH routine returns the hyperbolic tangent.","Parameter1":"expression-1&lt;","Description1":"Specifies a numeric variable. Do not use a constant or a SAS expression because the CALL routine is unable to update these arguments.","Parameter2":"..., expression-n&gt;","Description2":"Specifies a numeric variable. Do not use a constant or a SAS expression because the CALL routine is unable to update these arguments."},{"Name":"TIME","Definition":"Returns the current time of day as a numeric SAS time value."},{"Name":"TIMEPART","Definition":"Extracts a time value from a SAS datetime value. \n    \nReturn value data type: DOUBLE","Parameter1":"datetime","Description1":"Specifies any valid expression that represents a SAS datetime value.\n\nValid data types: DOUBLE"},{"Name":"TINV","Definition":"Returns a quantile from the t distribution.","Parameter1":"p","Description1":"Is a numeric probability. Range: 0 &lt; p &lt; 1","Parameter2":"df","Description2":"Is a numeric degrees of freedom parameter. Range: df &gt; 0.","Parameter3":"nc","Description3":"Is an optional numeric noncentrality parameter."},{"Name":"TNONCT","Definition":"Returns the value of the noncentrality parameter from the Student's t distribution.","Parameter1":"x","Description1":"Is a numeric random variable.","Parameter2":"df","Description2":"Is a numeric degrees of freedom parameter. Range: df &gt; 0.","Parameter3":"prob","Description3":"Is a probability. Range: 0 &lt; prob &lt; 1","Parameter4":null,"Description4":null},{"Name":"TODAY","Definition":"Returns the current date as a numeric SAS date value. \n    \nReturn value data type: DOUBLE"},{"Name":"TRANSLATE","Definition":"Replaces specific characters in a character expression. \n    \nReturn value data type: NCHAR","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string. expression contains the original character value.\n\nValid data types: CHAR","Parameter2":"to-characters","Description2":"Specifies the characters that you want TRANSLATE to use as substitutes.\n\nValid data types: NCHAR","Parameter3":"from-characters","Description3":"Specifies the characters that you want TRANSLATE to replace. \n\nValid data types: NCHAR"},{"Name":"TRANSTRN","Definition":"Replaces all occurrences of a substring found in a character string, allowing a zero-length replacement string.","Parameter1":"text","Description1":"Specifies the input string.","Parameter2":"from","Description2":"Specifies the string to be searched for.","Parameter3":"to","Description3":"Specifies what each occurrence of the from argument will be changed to."},{"Name":"TRANWRD","Definition":"Replaces or removes all occurrences of a substring in a character string. \n    \nReturn value data type: NCHAR","Parameter1":"source-expression","Description1":"Specifies any valid expression that evaluates to a character string, whose characters \nyou want to replace.\n\nValid data types: NCHAR","Parameter2":"target-expression","Description2":"Specifies any valid expression that evaluates to a character string and that is searched \nfor in source-expression.\n\nValid data types: NCHAR \n\nRequirement: The length of the target-expression must be greater than zero.","Parameter3":"replacement-expressiont","Description3":"Specifies any valid expression that evaluates to a character string and that replaces \ntarget-expression.\n\nValid data types: NCHAR"},{"Name":"TRIGAMMA","Definition":"Returns the value of the trigamma function. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value. \n\nRestriction: Nonpositive integers are invalid. \nValid data types: DOUBLE"},{"Name":"TRIM","Definition":"Removes trailing blanks from a character expression. \n    \nReturn value data type: VARCHAR, NVARCHAR","Parameter1":"expression","Description1":"Specifies  any valid expression that evaluates to a character string.\n\nValid data types: CHAR, NCHAR"},{"Name":"QTRIM","Definition":"Removes trailing blanks from a character string, and returns one blank if the string is missing. QTRIM produces a result with special characters and mnemonic operators masked.","Parameter1":"argument","Description1":"Specifies a character constant, variable, or text expression that might contain special characters and/or mnemonic operators such as &amp; % ' \" ( ) + - * / &lt; &gt; = \u00ac ^ ~ ; , # blank AND OR NOT EQ NE LE LT GE GT IN."},{"Name":"TRIMN","Definition":"Removes trailing blanks from a character expression. \n    \nReturn value data type: VARCHAR, NVARCHAR","Parameter1":"expression","Description1":"Specifies  any valid expression that evaluates to a character string.\n\nValid data types: CHAR, NCHAR"},{"Name":"TRUNC","Definition":"Truncates a numeric value to a specified length. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a numeric value.\n\nValid data types: DOUBLE","Parameter2":"length-expression","Description2":"Specifies  any valid expression that evaluates to a numeric value.\n\nRange: 3 - 8 \nValid data types: DOUBLE"},{"Name":"UNIFORM","Definition":"Returns a random variate from a uniform distribution.","Parameter1":"seed","Description1":"Is the seed value. A new value for seed is returned each time CALL RANUNI is executed. Range: seed &lt; 2\u00b3\u00b9 - 1.","Parameter2":"x","Description2":"Is a numeric variable. A new value for the random variate x is returned each time CALL RANUNI is executed."},{"Name":"UPCASE","Definition":"Converts all letters in an argument to uppercase. \n    \nReturn value data type: VARCHAR, NVARCHAR","Parameter1":"expression","Description1":"Specifies any valid expression that evaluates to a character string.\n\nValid data types: CHAR, NCHAR"},{"Name":"QUPCASE","Definition":"Converts all letters in an argument to uppercase. %QUPCASE masks special characters and mnemonic operators in its result.","Parameter1":"character string | text expression","Description1":"Specifies a character constant, variable, or text expression that might contain special characters and/or mnemonic operators such as &amp; % ' \" ( ) + - * / &lt; &gt; = \u00ac ^ ~ ; , # blank AND OR NOT EQ NE LE LT GE GT IN."},{"Name":"URLDECODE","Definition":"Returns a string that was decoded using the URL escape syntax.","Parameter1":"argument","Description1":"Specifies a character constant, variable, or expression."},{"Name":"URLENCODE","Definition":"Returns a string that was encoded using the URL escape syntax.","Parameter1":"argument","Description1":"Specifies a character constant, variable, or expression."},{"Name":"USS","Definition":"Returns the uncorrected sum of squares. \n    \nReturn value data type: DOUBLE \n\nRequirement: At least one non-null or non-missing argument is required. \nOtherwise, the function returns a null or missing value.","Parameter1":"expression-1 [","Description1":"Specifies any valid expression that evaluates to a numeric value. \n\nValid data types: DOUBLE \n","Parameter2":"... expression-n ]","Description2":"Specifies a numeric constant, variable, or expression."},{"Name":"UUIDGEN","Definition":"Returns the short or binary form of a Universal Unique Identifier (UUID).","Parameter1":"&lt;max-warnings&lt;","Description1":"Specifies an integer value that represents the maximum number of warnings that this function writes to the log. Default: 1.","Parameter2":"binary-result&gt;&gt;","Description2":"Specifies an integer value that indicates whether this function should return a binary result. Nonzero indicates a binary result should be returned. Zero indicates that a character result should be returned. Default: 0.","Parameter3":null,"Description3":null,"Parameter4":null,"Description4":null},{"Name":"VAR","Definition":"Returns the variance. \n    \nReturn value data type: DOUBLE \n\nRequirements: At least two non-null or non-missing arguments are required. \nOtherwise, the function returns a null or missing value. ","Parameter1":"expression-1","Description1":"Specifies any valid expression that evaluates to a numeric value. The argument \nlist can consist of a variable list. \n\nValid data types: DOUBLE","Parameter2":"expression-2 [","Description2":"Specifies any valid expression that evaluates to a numeric value. The argument \nlist can consist of a variable list. \n\nValid data types: DOUBLE","Parameter3":"... expression-n ]","Description3":"Specifies any valid expression that evaluates to a numeric value. The argument \nlist can consist of a variable list. \n\nValid data types: DOUBLE"},{"Name":"VARFMT","Definition":"Returns the format that is assigned to a SAS data set variable.","Parameter1":"data-set-id","Description1":"Specifies the data set identifier that the OPEN function returns.","Parameter2":"var-num","Description2":"Specifies the number of the variable's position in the SAS data set."},{"Name":"VARINFMT","Definition":"Returns the informat that is assigned to a SAS data set variable.","Parameter1":"data-set-id","Description1":"Specifies the data set identifier that the OPEN function returns.","Parameter2":"var-num","Description2":"Specifies the number of the variable's position in the SAS data set."},{"Name":"VARLABEL","Definition":"Returns the label that is assigned to a SAS data set variable.","Parameter1":"data-set-id","Description1":"Specifies the data set identifier that the OPEN function returns.","Parameter2":"var-num","Description2":"Specifies the number of the variable's position in the SAS data set."},{"Name":"VARLEN","Definition":"Returns the length of a SAS data set variable.","Parameter1":"data-set-id","Description1":"Specifies the data set identifier that the OPEN function returns.","Parameter2":"var-num","Description2":"Specifies the number of the variable's position in the SAS data set."},{"Name":"VARNAME","Definition":"Returns the name of a SAS data set variable.","Parameter1":"data-set-id","Description1":"Specifies the data set identifier that the OPEN function returns.","Parameter2":"var-num","Description2":"Specifies the number of the variable's position in the SAS data set."},{"Name":"VARNUM","Definition":"Returns the number of a variable's position in a SAS data set.","Parameter1":"data-set-id","Description1":["Specifies the data set identifier that the OPEN function returns.",null],"Parameter2":"var-name","Description2":"Specifies the variable's name."},{"Name":"VARRAY","Definition":"Returns a value that indicates whether the specified name is an array.","Parameter1":"name","Description1":"Specifies a name that is expressed as a scalar or as an array reference."},{"Name":"VARRAYX","Definition":"Returns a value that indicates whether the value of the specified argument is an array.","Parameter1":"expression","Description1":"Specifies a character constant, variable, or expression. The value of the specified expression cannot denote an array reference."},{"Name":"VARTYPE","Definition":"Returns the data type of a SAS data set variable.","Parameter1":"data-set-id","Description1":"Specifies the data set identifier that the OPEN function returns.","Parameter2":"var-num","Description2":"Specifies the number of the variable's position in the SAS data set."},{"Name":"VERIFY","Definition":"Returns the position of the first character that is unique to an expression. \n    \n Return value data type: DOUBLE","Parameter1":"target-expression","Description1":"Specifies any valid expression that evaluates to a character string that is to be searched. \n\nRequirements: Literal character strings must be enclosed in single quotation marks. \nValid data types: NCHAR","Parameter2":"search-expression","Description2":"Specifies any valid expression that evaluates to a character string.\n\nRequirements: Literal character strings must be enclosed in single quotation marks. \nValid data types: NCHAR"},{"Name":"VFORMAT","Definition":"Returns the format that is associated with the specified variable.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VFORMATD","Definition":"Returns the decimal value of the format that is associated with the specified variable.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VFORMATDX","Definition":"Returns the decimal value of the format that is associated with the value of the specified argument.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"VFORMATN","Definition":"Returns the format name that is associated with the specified variable.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VFORMATNX","Definition":"Returns the format name that is associated with the value of the specified argument.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"VFORMATW","Definition":"Returns the format width that is associated with the specified variable.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VFORMATWX","Definition":"Returns the format width that is associated with the value of the specified argument.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"VFORMATX","Definition":"Returns the format that is associated with the value of the specified argument.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"VINARRAY","Definition":"Returns a value that indicates whether the specified variable is a member of an array.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VINARRAYX","Definition":"Returns a value that indicates whether the value of the specified argument is a member of an array.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"VINFORMAT","Definition":"Returns the informat that is associated with the specified variable.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VINFORMATD","Definition":"Returns the decimal value of the informat that is associated with the specified variable.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VINFORMATDX","Definition":"Returns the decimal value of the informat that is associated with the value of the specified variable.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"VINFORMATN","Definition":"Returns the informat name that is associated with the specified variable.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VINFORMATNX","Definition":"Returns the informat name that is associated with the value of the specified argument.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"VINFORMATW","Definition":"Returns the informat width that is associated with the specified variable.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VINFORMATWX","Definition":"Returns the informat width that is associated with the value of the specified argument.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"VINFORMATX","Definition":"Returns the informat that is associated with the value of the specified argument.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"VLABEL","Definition":"Returns the label that is associated with the specified variable.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VLABELX","Definition":"Returns the label that is associated with the value of the specified argument.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"VLENGTH","Definition":"Returns the compile-time (allocated) size of the specified variable.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VLENGTHX","Definition":"Returns the compile-time (allocated) size for the variable that has a name that is the same as the value of the argument.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"VNAME*1","Definition":"Returns the name of the specified variable.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VNAME*2","Definition":"Assigns a variable name as the value of a specified variable (variable-2).","Parameter1":"variable-1","Description1":"Specifies any SAS variable.","Parameter2":"variable-2","Description2":"Specifies any SAS character variable. Because SAS variable names can contain up to 32 characters, the length of variable-2 should be at least 32."},{"Name":"VNAMEX","Definition":"Validates the value of the specified argument as a variable name.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"VTYPE","Definition":"Returns the type (character or numeric) of the specified variable.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VTYPEX","Definition":"Returns the type (character or numeric) for the value of the specified argument.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"VVALUE","Definition":"Returns the formatted value that is associated with the variable that you specify.","Parameter1":"var","Description1":"Specifies a variable that is expressed as a scalar or as an array reference. You cannot use an expression as an argument."},{"Name":"VVALUEX","Definition":"Returns the formatted value that is associated with the argument that you specify.","Parameter1":"expression","Description1":"Specifies a SAS character constant, variable, or expression that evaluates to a variable name. The value of the specified expression cannot denote an array reference."},{"Name":"WEEK","Definition":"Returns the week-number value.","Parameter1":"&lt;sas-date&gt;","Description1":"Specifies a SAS date value. If the SAS date argument is not specified, the WEEK function returns the week-number value of the current date.","Parameter2":"&lt;'descriptor'&gt;","Description2":"Specifies the value of the descriptor. The following descriptors can be specified in uppercase or lowercase characters: 'U' (Default; SAS date specified as number-of-week value in decimal number 0-53; Sunday first day of week); 'V' (SAS date specified as number-of-week value in decimal number 1-53; Monday first day of week); 'W' (SAS date specified as number-of-week value in decimal number 0-53; Monday first day of week);"},{"Name":"WEEKDAY","Definition":"From a SAS date value, returns an integer that corresponds to the day of the week. \n    \nReturn value data type: DOUBLE","Parameter1":"expression","Description1":"Specifies any valid expression that represents a SAS date value.\n\nValid data types: DOUBLE"},{"Name":"WHICHC","Definition":"Returns the first position of a character string from a list of character strings. \n    \nReturn value data type:  DOUBLE","Parameter1":"search-expression","Description1":"Specifies any valid expression that evaluates to a character string that is compared \nwith a list of character string expressions. \n\nRequirements: Literal character strings must be enclosed in single quotation marks. \n\nValid data types: NCHAR","Parameter2":"expression-list-item-1","Description2":"Specifies any valid expression that evaluates to a character string and that is a member \nof a list of character string expressions. \n\nRequirements: Literal character strings must be enclosed in single quotation marks. \nAt least two expressions are required in the list. \n\nValid data types: NCHAR","Parameter3":"expression-list-item-2 [","Description3":"Specifies any valid expression that evaluates to a character string and that is a member \nof a list of character string expressions. \n\nRequirements: Literal character strings must be enclosed in single quotation marks. \nAt least two expressions are required in the list. \n\nValid data types: NCHAR","Parameter4":"... expression-list-item-n ]","Description4":"Specifies any valid expression that evaluates to a character string and that is a member \nof a list of character string expressions. \n\nRequirements: Literal character strings must be enclosed in single quotation marks. \nAt least two expressions are required in the list. \n\nValid data types: NCHAR"},{"Name":"WHICHN","Definition":"Returns the first position of a number from a list of numbers. \n    \nReturn value data type: DOUBLE","Parameter1":"search-expression","Description1":"Specifies any valid expression that evaluates to a character string that is compared \nwith a list of numeric expressions. \n\nRequirements: Literal character strings must be enclosed in single quotation marks. \n\nValid data types: NCHAR","Parameter2":"expression-list-item-1","Description2":"Specifies any valid expression that evaluates to a number and is part of a list.\n\nRequirements: At least two expressions are required in the list. \nValid data types: DOUBLE","Parameter3":"expression-list-item-2 [","Description3":"Specifies any valid expression that evaluates to a number and is part of a list.\n\nRequirements: At least two expressions are required in the list. \nValid data types: DOUBLE","Parameter4":"... expression-list-item-n ]","Description4":"Specifies any valid expression that evaluates to a number and is part of a list.\n\nRequirements: At least two expressions are required in the list. \nValid data types: DOUBLE"},{"Name":"YEAR","Definition":"Returns the year from a SAS date value. \n    \nReturn value data type DOUBLE","Parameter1":"date","Description1":"Specifies any valid expression that represents a SAS date value.\n\nValid data types: DOUBLE"},{"Name":"YIELDP","Definition":"Returns the yield-to-maturity for a periodic cash flow stream, such as a bond.","Parameter1":"A","Description1":"Specifies the face value. Range: A &gt; 0.","Parameter2":"c","Description2":"Specifies the nominal annual coupon rate, expressed as a fraction. Range: 0 \u2264 c &lt; 1.","Parameter3":"n","Description3":"Specifies the number of coupons per year. Range: n &gt; 0.","Parameter4":"K","Description4":"Specifies the number of remaining coupons from settlement date to maturity. Range: K &gt; 0 and is an integer.","Parameter5":"ko","Description5":"Specifies the time from settlement date to the next coupon as a fraction of the annual basis.  Range: 0 &lt; c \u2264 1/n.","Parameter6":"p","Description6":"Specifies the price with accrued interest. Range: p &gt; 0."},{"Name":"YRDIF","Definition":"Returns the difference in years between two dates.","Parameter1":"sdate","Description1":"Specifies a SAS date value that identifies the starting date.","Parameter2":"edate","Description2":"Specifies a SAS date value that identifies the ending date.","Parameter3":"basis","Description3":"Identifies a character constant or variable that describes how SAS calculates the date difference in the securities industry. The following character strings are valid: '30/360' (30-day month and a 360-day year), 'ACT/ACT' (uses actual number of days between dates), 'ACT/360' (uses actual number of calendar days in a month, and 360 days for the year), 'ACT/365' (uses actual number of calendar days for each month, and 365 days for the year)."},{"Name":"YYQ","Definition":"Returns a SAS date value from year and quarter year values. \n    \nReturn value data type: DOUBLE","Parameter1":"year","Description1":"Specifies any valid expression that evaluates to a two-digit or four-digit integer \nthat represents the year. The YEARCUTOFF= system option defines the year value for \ntwo-digit dates.\n\nValid data types: DOUBLE","Parameter2":"quarter","Description2":"Specifies the quarter of the year (1, 2, 3, or 4)."},{"Name":"ZIPCITY","Definition":"Returns a city name and the two-character postal code that corresponds to a zip code.","Parameter1":"zip-code","Description1":"Specifies a numeric or character expression that contains a five-digit zip code."},{"Name":"ZIPCITYDISTANCE","Definition":"Returns the geodetic distance between two zip code locations.","Parameter1":["zip-code-1","zip-code-2"],"Description1":["Specifies a numeric or character expression that contains the zip code of a location in the United States of America.","Specifies a numeric or character expression that contains the zip code of a location in the United States of America."]},{"Name":"ZIPFIPS","Definition":"Converts zip codes to two-digit FIPS codes.","Parameter1":"zip-code","Description1":"Specifies a numeric or character expression that contains a five-digit zip code."},{"Name":"ZIPNAME","Definition":"Converts zip codes to uppercase state names.","Parameter1":"zip-code","Description1":"Specifies a numeric or character expression that contains a five-digit zip code."},{"Name":"ZIPNAMEL","Definition":"Converts zip codes to mixed case state names.","Parameter1":"zip-code","Description1":"Specifies a numeric or character expression that contains a five-digit zip code."},{"Name":"ZIPSTATE","Definition":"Converts zip codes to two-character state postal codes.","Parameter1":"zip-code","Description1":"Specifies a numeric or character expression that contains a five-digit zip code."},{"Name":"ASCEBC","Definition":"Converts an input character string from ASCII to EBCDIC.","Parameter1":"in-string","Description1":"Is any ASCII string, and can be a character variable, a character literal enclosed in double quotation marks, or another character expression. The value of in-string is limited to 200 characters."},{"Name":"EBCASC","Definition":"Converts an input character string from EBCDIC to ASCII.","Parameter1":"in-string","Description1":"Is any EBCDIC string, and can be a character variable, a character literal enclosed in double quotation marks, or another character expression. The value of in-string is limited to 200 characters."},{"Name":"FILEATTR","Definition":"Returns the attribute information for a specified file.","Parameter1":"file-specification","Description1":"Is the file for which you are requesting information. It can be a character variable, a character literal enclosed in double quotation marks, or another character expression.","Parameter2":"item","Description2":"Specifies which attribute of the file you are requesting. It can be a character variable, a character literal enclosed in double quotation marks, or another character expression."},{"Name":"FINDFILE","Definition":"Searches a directory for a file.","Parameter1":"file-specification","Description1":"Specifies the file specification of the file that you are searching for. It can contain any valid OpenVMS file specification, including wildcards. The value for file-specification can be a character variable, a character literal enclosed in double quotation marks, or another character expression.","Parameter2":"context","Description2":"Is a variable used internally by SAS to maintain the search context between executions of FINDFILE. It must be initialized to 0 before the first execution of FINDFILE for a given file-specification and must not be modified between executions."},{"Name":"GETDVI","Definition":"Returns a specified item of information from a device.","Parameter1":"device-name","Description1":"Specifies a physical device name or a logical name equated to a physical device name. Specify the device name as a character-string expression.","Parameter2":"item","Description2":"Is a character variable that contains any item accepted by the F$GETDVI lexical function (for example, the physical device name)."},{"Name":"GETJPI","Definition":"Retrieves job-process information.","Parameter1":"jpi-item&lt;","Description1":"Is a character variable that contains any item accepted by the F$GETJPI lexical function, for example, a user process name.","Parameter2":"pid","Description2":"Can be either character (process-name variable) or numeric (process-ID variable)."},{"Name":"GETLOG","Definition":"Returns information about a DCL logical name.","Parameter1":"logical-name&lt;","Description1":"Can be a character variable, character literal enclosed in double quotation marks, or another character expression.","Parameter2":"table&gt;","Description2":"Is an optional character parameter that is the name of a DCL logical name table. It can be a character variable, a character literal enclosed in double quotation marks, or another character expression.","Parameter3":"&lt;index&gt;","Description3":"Is an optional numeric parameter that indicates the number of the translation to return if a logical name has multiple translations. This argument can be either a numeric literal or numeric variable. The default value is 0.","Parameter4":"&lt;mode&gt;","Description4":"Is an optional character parameter that contains the access mode to be used for translation. It can be a character variable, a character literal enclosed in double quotation marks, or another character expression. The default is \"USER\".","Parameter5":"&lt;case&gt;","Description5":"Is an optional character parameter that determines the case to be used for translation. Values: \"CASE_BLIND\" | \"CASE_SENSITIVE\".","Parameter6":"item","Description6":"Is an optional character parameter that specifies what type of information is to be returned about a logical name. It can be a character variable, a character literal enclosed in double quotation marks, or another character expression. The default value is \"VALUE\"."},{"Name":"GETMSG","Definition":"Translates an OpenVMS error code into text.","Parameter1":"status","Description1":"Is an OpenVMS status code. It is usually returned from one of the other functions that return an OpenVMS status code on failure."},{"Name":"GETQUOTA","Definition":"Retrieves disk quota information.","Parameter1":"dev","Description1":"Is the device that you want to gather disk quota information for.","Parameter2":"user","Description2":"Receives your numeric user identification code (UIC) on the disk. The UICw. format can be used to format the numeric value. This variable must be initialized to 0 before the first execution.","Parameter3":"usage","Description3":"Receives your current disk usage in blocks. This variable must be initialized to 0 before the first execution.","Parameter4":"perm","Description4":"Receives your permanent quota. This variable must be initialized to 0 before the first execution.","Parameter5":"over","Description5":"Receives your allowed overdraft. This variable must be initialized to 0 before the first execution.","Parameter6":"context","Description6":"Is a numeric variable that must be initialized to 0 before the first execution and must not be modified between calls.","Parameter7":"chan","Description7":"Is a numeric variable that must be initialized to 0 before the first execution and must not be modified between calls."},{"Name":"GETSYM","Definition":"Returns the value of a DCL symbol.","Parameter1":"symbol-name","Description1":"Is the name of a DCL symbol defined in your process. It can be a character variable, character literal enclosed in double quotation marks, or another character expression. If symbol-name is more than 200 characters long, it is truncated."},{"Name":"GETTERM","Definition":"Returns the characteristics of your terminal device.","Parameter1":"characteristic-name","Description1":"Is the name of the terminal characteristic to be returned. The argument can be a character variable, character literal enclosed in double quotation marks, or another character expression. If characteristic-name is longer than 200 characters, it is truncated."},{"Name":"NODENAME","Definition":"Returns the name of the current node."},{"Name":"PUTLOG","Definition":"Creates an OpenVMS logical-name in your process-level logical name table.","Parameter1":"logical-name","Description1":"The name of the OpenVMS logical name that you want to create. It can be a character variable, a character literal enclosed in double quotation marks, or another character expression.","Parameter2":"value","Description2":"Is the string to be assigned to the symbol. It can be a character variable, a character literal enclosed in double quotation marks, or another character expression."},{"Name":"PUTSYM","Definition":"Creates a DCL symbol in the parent SAS process.","Parameter1":"symbol-name","Description1":"Is the name of the DCL symbol that you want to create. It can be a character variable value, a character literal enclosed in double quotation marks, or another character expression.","Parameter2":"value","Description2":"Is the string to be assigned to the symbol. It can be a character variable, a character literal enclosed in double quotation marks, or another character expression.","Parameter3":"scope","Description3":"Defines whether the symbol is a local or global symbol. If the value of scope is 1, the symbol is defined as a local symbol. If the value of scope is 2, the symbol is defined as a global symbol. The scope argument can be either a numeric literal or a numeric variable."},{"Name":"SETTERM","Definition":"Modifies a characteristic of your terminal device.","Parameter1":"characteristic-name","Description1":"Is the name of the terminal characteristic to be modified. The argument can be a character variable, a character literal enclosed in double quotation marks, or another character expression.","Parameter2":"new-value","Description2":"Is the new setting for the characteristic."},{"Name":"TERMIN","Definition":"Allows simple input from SYS$INPUT.","Parameter1":"prompt","Description1":"Is the prompt printed on the monitor. It can be a character variable, a character literal enclosed in double quotation marks, or another character expression."},{"Name":"TERMOUT","Definition":"Allows simple output to SYS$OUTPUT.","Parameter1":"output","Description1":"Is a character string to write to SYS$OUTPUT. It can be a character variable, character literal enclosed in double quotation marks, or another character expression."},{"Name":"TTCLOSE","Definition":"Closes a channel that was previously assigned by TTOPEN.","Parameter1":"channel","Description1":"Is the channel variable returned from the TTOPEN function."},{"Name":"TTCONTRL","Definition":"Modifies the characteristics of a channel that was previously assigned by TTOPEN.","Parameter1":"control-specification","Description1":"Is the control string as described for the TTOPEN function. The syntax for control-specification is the same as for TTOPEN, except that the DEVICE= attribute cannot be changed.","Parameter2":"channel","Description2":"Is the channel variable that was returned from the TTOPEN function."},{"Name":"TTOPEN","Definition":"Assigns an I/O channel to a terminal.","Parameter1":"control-specification","Description1":"Is the control string that specifies the terminal and processing options, separated from each other by blanks. It can be a character variable, a character literal enclosed in double quotation marks, or another character expression.","Parameter2":"channel","Description2":"Is a numeric variable into which the TTOPEN function places the channel number."},{"Name":"TTREAD","Definition":"Reads characters from the channel assigned by TTOPEN.","Parameter1":"channel","Description1":"Is the channel variable returned from the TTOPEN function.","Parameter2":"buffer","Description2":"Is the character variable where the returned characters are stored.","Parameter3":"&lt;size&gt;","Description3":"Is an optional numeric variable, numeric literal, or an expression which indicates the maximum number of characters to read and receives the number of characters read. If you do not specify size, the TTREAD function reads characters up to the size of buffer."},{"Name":"TTWRITE","Definition":"Writes characters to the channel assigned by TTOPEN.","Parameter1":"channel","Description1":"Is the channel variable returned from the TTOPEN function.","Parameter2":"buffer","Description2":"Is the character variable, character literal, or an expression that contains the data to be written.","Parameter3":"&lt;size&gt;","Description3":"Is an optional numeric variable, numeric literal, or expression that specifies how many characters to write from buffer. If you do not specify size, the entire buffer is sent, including any trailing blanks."},{"Name":"VMS","Definition":"Spawns a subprocess and executes a DCL command.","Parameter1":"DCL-command","Description1":"Is the DCL command that is passed to the subprocess. It can be a character variable, a character literal enclosed in double quotation marks, or another character expression."},{"Name":"BQUOTE","Definition":"Mask special characters and mnemonic operators in a resolved value at macro execution.","Parameter1":"character string | text expression","Description1":"Character string or text expression."},{"Name":"NRBQUOTE","Definition":"Mask special characters and mnemonic operators in a resolved value at macro execution.","Parameter1":"character string | text expression","Description1":"Character string or text expression."},{"Name":"EVAL","Definition":"Evaluates arithmetic and logical expressions using integer arithmetic.","Parameter1":"arithmetic or logical expression","Description1":"Integer arithmetic or logical expression."},{"Name":"NRQUOTE","Definition":"Masks special characters, including &amp; and %, and mnemonic operators in a resolved value at macro execution.","Parameter1":"character string | text expression","Description1":"Character string or text expression."},{"Name":"STR","Definition":"Masks special characters, excluding &amp; and %, and mnemonic operators in constant text during macro compilation.","Parameter1":"character-string","Description1":"A character string that may contain special characters and/or mnemonic operators such as + - * / &lt; &gt; = \u00ac ^ ~ ; ,  # blank AND OR NOT EQ NE LE LT GE GT IN."},{"Name":"NRSTR","Definition":"Masks special characters, including &amp; and %, and mnemonic operators in constant text during macro compilation.","Parameter1":"character-string","Description1":"A character string that may contain special characters and/or mnemonic operators such as + - * / &lt; &gt; = \u00ac ^ ~ ; ,  # blank AND OR NOT EQ NE LE LT GE GT IN &amp; %."},{"Name":"QSCAN","Definition":"Searches for a word and masks special characters and mnemonic operators.","Parameter1":"argument","Description1":"Is a character string or a text expression. If argument might contain a special character or mnemonic operator, listed below, use %QSCAN.","Parameter2":"n&lt;","Description2":"Is an integer or a text expression that yields an integer, which specifies the position of the word to return.","Parameter3":"delimiters&gt;","Description3":"Specifies an optional list of one or more characters that separate \"words\" or text expressions that yield one or more characters. Possible delimiters: blank . &lt; ( + &amp; ! $ * ) ; ^ - / , % |."},{"Name":"SUPERQ","Definition":"Masks all special characters and mnemonic operators at macro execution but prevents further resolution of the value.","Parameter1":"argument","Description1":"Is the name of a macro variable with no leading ampersand or a text expression that produces the name of a macro variable with no leading ampersand."},{"Name":"SYMEXIST","Definition":"Returns an indication of the existence of a macro variable.","Parameter1":"macro-variable-name","Description1":"Is the name of a macro variable or a text expression that yields the name of a macro variable."},{"Name":"SYSEVALF","Definition":"Evaluates arithmetic and logical expressions using floating-point arithmetic.","Parameter1":"expression&lt;","Description1":"Is an arithmetic or logical expression to evaluate.","Parameter2":"conversion-type&gt;","Description2":"Converts the value returned by %SYSEVALF to the type of value specified. Valid values: BOOLEAN (returns 0 if result is 0 or missing; 1 if any other value); CEIL (returns a character value representing the smallest integer that is greater than or equal to the result of the expression.); FLOOR (returns a character value representing the largest integer that is less than or equal to the result of the expression.); INTEGER (returns a character value representing the integer portion of the result, truncating the decimal portion.)"},{"Name":"SYSFUNC","Definition":"Execute SAS functions or user-written functions.","Parameter1":"function(expression-1 &lt;...expression-n&gt;)&lt;","Description1":"Is the function to execute, including one or more arguments used by the function. You cannot nest functions to be used with a single %SYSFUNC. However, you can nest %SYSFUNC calls.","Parameter2":"format&gt;","Description2":"Is an optional format to apply to the result of function. This format can be provided by SAS, generated by PROC FORMAT, or created with SAS/TOOLKIT."},{"Name":"QSYSFUNC","Definition":"Execute SAS functions or user-written functions. %QSYSFUNC masks special characters and mnemonic operators such as &amp; % ' \" ( ) + - * / &lt; &gt; = \u00ac ^ ~ ; , #  blank AND OR NOT EQ NE LE LT GE GT IN.","Parameter1":"function(expression-1 &lt;...expression-n&gt;)&lt;","Description1":"Is the function to execute, including one or more arguments used by the function. You cannot nest functions to be used with a single %SYSFUNC. However, you can nest %SYSFUNC calls.","Parameter2":"format&gt;","Description2":"Is an optional format to apply to the result of function. This format can be provided by SAS, generated by PROC FORMAT, or created with SAS/TOOLKIT."},{"Name":"SYSGET","Definition":"Returns the value of the specified operating environment variable.","Parameter1":"environment-variable","Description1":"Is the name of an environment variable. The case of environment-variable must agree with the case that is stored on the operating environment."},{"Name":"SYSPROD","Definition":"Reports whether a SAS software product is licensed at the site.","Parameter1":"product","Description1":"Can be a character string or text expression that yields a code for a SAS product: AF CPE GRAPH PH-CLINICAL ASSIST EIS IML QC BASE ETS INSIGHT  SHARE CALC FSP  LAB STAT CONNECT GIS OR TOOLKIT."},{"Name":"UNQUOTE","Definition":"During macro execution, unmasks all special characters and mnemonic operators for a value.","Parameter1":"character string | text expression","Description1":"Character string or text expression that might contain special characters and/or mnemonic operators."},{"Name":"CMPRES","Definition":"Compress multiple blanks and remove leading and trailing blanks.","Parameter1":"text | text expression","Description1":"A character constant or expression."},{"Name":"QCMPRES","Definition":"Compress multiple blanks and remove leading and trailing blanks.  QCMPRES produces a result with special characters and mnemonic operators masked.","Parameter1":"text | text expression","Description1":"A character constant or expression that might contain special characters and/or mnemonic operators such as &amp; % ' \" ( ) + - * / &lt; &gt; = \u00ac ^ ~ ; , # blank AND OR NOT EQ NE LE LT GE GT IN."},{"Name":"COMPSTOR","Definition":"Compiles macros and stores them in a catalog in a permanent SAS library.","Parameter1":"PATHNAME=SAS-data-library","Description1":"SAS-data-library is the physical name of a SAS library on your host system."},{"Name":"DATATYP","Definition":"Returns the data type of a value.","Parameter1":"text | text expression","Description1":"A character constant or expression."},{"Name":"VERIFY","Definition":"Returns the position of the first character unique to an expression. %VERIFY returns the position of the first character in source that is not also present in excerpt. If all characters in source are present in excerpt, %VERIFY returns 0.","Parameter1":"source","Description1":"Is text or a text expression that you want to examine for characters that do not exist in excerpt.","Parameter2":"excerpt ","Description2":"Is text or a text expression. This is the text that defines the set of characters that %VERIFY uses to examine source."},{"Name":"DQLOAD","Definition":"Sets system option values and loads locales into memory.","Parameter1":"DQLOCALE=(locale1 ...localeN)","Description1":"Specifies a value for the DQLOCALE= system option to load an ordered list of locales into memory.","Parameter2":"DQSETUPLOC=`file-specification' | `path-specification'","Description2":"Specifies a value for the system option DQSETUPLOC=.","Parameter3":"&lt;DQINFO=0 | 1&gt;","Description3":"Generates additional information in the SAS log about the status of the locale load operation. The default value is DQINFO=0."},{"Name":"DQPUTLOC","Definition":"Displays current information on a specified locale in the SAS log.","Parameter1":"locale","Description1":"Specifies the locale of interest. The value can be a locale name in quotation marks or the name of a variable whose value is a locale name or an expression that evaluates to a locale name.","Parameter2":"&lt;SHORT=0 | 1&gt;","Description2":"Shortens the length of the entry in the SAS log. Specify SHORT=1 to remove the descriptions of how the definitions are used. The default value is SHORT=0, which displays the descriptions of how the definitions are used.","Parameter3":"&lt;PARSEDEFN=0 | 1&gt;","Description3":"Lists with each gender analysis definition and each match definition the related parse definition, if such a parse definition exists. The default value PARSEDEFN=1 lists the related parse definition. PARSEDEFN=0 does not list the related parse definition."},{"Name":"DQCASE","Definition":"Returns a character value with standardized capitalization.","Parameter1":"char","Description1":"Is the value that is transformed, according to the specified case definition. The value can be the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"'case-definition'&lt;","Description2":"Specifies the name of the case definition that will be referenced during the transformation.","Parameter3":"'locale'&gt;","Description3":"Specifies the name of the locale that contains the specified case definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQGENDER","Definition":"Returns a gender determination from the name of an individual.","Parameter1":"char","Description1":"Is the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"'gender-analysis-definition'&lt;","Description2":"Specifies the name of the gender analysis definition, which must exist in the specified locale.","Parameter3":"'locale'&gt;","Description3":"Specifies the name of the locale that contains the specified gender analysis definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQGENDERINFOGET","Definition":"Returns the name of the parse definition that is associated with the specified gender definition.","Parameter1":"'gender-analysis-definition'&lt;","Description1":"Specifies the name of the gender analysis definition, which must exist in the specified locale.","Parameter2":"'locale'&gt;","Description2":"Specifies the name of the locale that contains the specified gender analysis definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQGENDERPARSED","Definition":"Returns a gender determination from the parsed name of an individual.","Parameter1":"parsed-char","Description1":"Is a parsed value that contains the name of an individual. The value can be expressed as the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"'gender-analysis-definition'&lt;","Description2":"Specifies the name of the gender analysis definition that will be referenced to determine gender. The specified gender analysis definition has a related parse definition. To return an accurate gender determination, the related parse definition must be the same parse definition that was used to parse the parsed-char.","Parameter3":"'locale'&gt;","Description3":"Specifies the name of the locale that contains the specified gender analysis definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQIDENTIFY","Definition":"Returns a category name from a character value.","Parameter1":"char","Description1":"Is the value that is transformed, according to the specified identification definition. The value can be the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"'identification-definition'&lt;","Description2":"Specifies the name of the identification definition, which must exist in the specified locale.","Parameter3":"'locale'&gt;","Description3":"Specifies the name of the locale that contains the specified identification definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQLOCALEGUESS","Definition":"Returns the name of the locale that is most likely represented by a character value.","Parameter1":"char","Description1":"Is the value that is analyzed to determine a locale, according to the specified guess definition. The value can be the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"'locale-guess-definition'","Description2":"Specifies the name of the guess definition."},{"Name":"DQLOCALEINFOGET","Definition":"Returns information about locales.","Parameter1":"&lt;'info-type'&gt;","Description1":"Specifies the type of locale information that is to be returned. The only valid value is LOADED. If no parameter is specified, LOADED is used by default."},{"Name":"DQLOCALEINFOLIST","Definition":"Displays the names of the definitions in a locale and returns a count of those definitions.","Parameter1":"'definition-type'&lt;","Description1":"Specifies the definitions that are displayed. Valid values are ALL CASE GENDER GUESS IDENTIFICATION MATCH PARSE PATTERN STANDARDIZATION.","Parameter2":"'locale'&gt;","Description2":"Specifies the name of the locale. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQMATCH","Definition":"Returns a match code from a character value.","Parameter1":"char","Description1":"Is the value for which a match code is created, according to the specified match definition. The value can be the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"`match-definition'&lt;","Description2":"Specifies the name of the match definition.","Parameter3":"sensitivity","Description3":"Specifies an integer value that determines the amount of information in the returned match code. Valid values range from 50 to 95. The default value is 85. A higher sensitivity value includes more information in the match code.","Parameter4":"'locale'&gt;","Description4":"Specifies the name of the locale that contains the specified match definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQMATCHINFOGET","Definition":"Returns the name of the parse definition that is associated with a match definition.","Parameter1":"`match-definition'&lt;","Description1":"Specifies the name of the match definition, which must exist in the specified locale.","Parameter2":"'locale'&gt;","Description2":"Specifies the name of the locale that contains the specified match definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQMATCHPARSED","Definition":"Returns a match code from a parsed character value.","Parameter1":"parsed-char","Description1":"Is a parsed character value for which a match code will be created. The value can be the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value. The value must have been parsed with the parse definition that is associated with the specified match definition.","Parameter2":"`match-definition'&lt;","Description2":"Specifies the name of the match definition.","Parameter3":"sensitivity","Description3":"Specifies an integer value that determines the amount of information in the returned match code. Valid values range from 50 to 95. The default value is 85. A higher sensitivity value includes more information in the match code.","Parameter4":"'locale'&gt;","Description4":"Specifies the name of the locale that contains the specified match definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQPARSE*1","Definition":"Returns a parsed character value and a status flag.","Parameter1":"parsed-string","Description1":"Is the input value that is parsed according to the specified parse definition. The value can be the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"`parse-definition'&lt;","Description2":"Specifies the name of the parse definition.","Parameter3":"'locale'&gt;","Description3":"Specifies the name of the locale that contains the specified parse definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQPARSE*2","Definition":"Returns a parsed character value and a status flag.","Parameter1":"parsed-string","Description1":"Is the input value that is parsed according to the specified parse definition. The value can be the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"`parse-definition'","Description2":"Specifies the name of the parse definition","Parameter3":"`parse-result'","Description3":"Is an output character variable that receives the result of the parse operation.","Parameter4":"`parse-return-code'&lt;","Description4":"Is an output numeric variable that returns 1.0 when the parse operation is successful. Otherwise, this variable receives a 0.","Parameter5":"'locale'&gt;","Description5":"Specifies the name of the locale that contains the specified match definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQPARSEINFOGET","Definition":"Returns the token names in a parse definition.","Parameter1":"`parse-definition'&lt;","Description1":"Specifies the name of the parse definition.","Parameter2":"'locale'&gt;","Description2":"Specifies the name of the locale that contains the specified parse definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQPARSETOKENGET","Definition":"Returns a token from a parsed character value.","Parameter1":"parsed-char","Description1":"Is the parsed character value from which the value of the specified token will be returned. The parsed-char can be the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"`token'","Description2":"Specifies the name of the token that is returned from the parsed value. The token must be enabled by the specified parse definition.","Parameter3":"'parse-definition'&lt;","Description3":"Specifies the name of the parse definition that will be used to obtain the value of the token. The parse definition must be the same as the parse definition that originally parsed the parsed-char value.","Parameter4":"'locale'&gt;","Description4":"Specifies the name of the locale that contains the specified match definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQPARSETOKENPUT","Definition":"Inserts a token into a parsed character value and returns the updated parsed character value.","Parameter1":"parsed-char","Description1":"Is the parsed character value that receives the new token value, according to the specified parse definition. The parsed-char value can be the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"token-value","Description2":"Specifies the value of the token that is to be inserted into the parsed value.","Parameter3":"`token-name'","Description3":"Specifies the name of the token that is to be inserted into the parsed value. The specified token must be enabled by the specified parse definition.","Parameter4":"`parse-definition'&lt;","Description4":"Specifies the name of the parse definition, which must exist in the specified locale. The specified parse definition must be the same definition that was used to parse the parsed-char value.","Parameter5":"'locale'&gt;","Description5":"Specifies the name of the parse definition, which must exist in the specified locale. The specified parse definition must be the same definition that was used to parse the parsed-char value."},{"Name":"DQPATTERN","Definition":"Returns a pattern analysis from an input character value.","Parameter1":"char","Description1":"Is the name of the value that will be analyzed. The value can be a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"`pattern-analysis-definition'&lt;","Description2":"Specifies the name of the definition that will be referenced during the creation of the pattern analysis. The definition must exist in the specified locale.","Parameter3":"'locale'&gt;","Description3":"Specifies the name of the locale that contains the specified pattern analysis definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQSCHEMEAPPLY*1","Definition":"Applies a scheme and returns a transformed value.","Parameter1":"char","Description1":"Is the value to which the specified scheme will be applied. The value can be the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"`scheme'","Description2":"Identifies the scheme that is applied to the input value. For schemes using SAS format, the scheme argument is a fully-qualified SAS data set name in quotation marks.","Parameter3":"`scheme-format'&lt;","Description3":"Identifies the file format of the scheme. Valid values are as follows:\n\n      BFD\n      indicates that the specified scheme is stored in Blue Fusion Data format. This is the default value.\n\n      NOBFD\n      indicates that the specified scheme is stored in SAS format.","Parameter4":"`mode'","Description4":"Specifies how the scheme is to be applied to the values of the input character variable. Valid values for the mode argument are defined as follows:\n\n      PHRASE\n      compares the entire input character value to the entirety of each of the DATA values in the scheme.\n\n      ELEMENT\n      compares each element in the input character value to each of the DATA values in the scheme.","Parameter5":"'scheme-lookup-method'","Description5":"Specifies one of three mutually-exclusive methods of applying the scheme. Valid values are as follows:\n\n      EXACT\n      this default value specifies that the input value is to be compared to the DATA values in the scheme without changing the input value in any way.\n\n      IGNORE_CASE\n      specifies that capitalization is to be ignored when the input value is compared to the DATA values in the scheme.\n\n      USE_MATCHDEF\n      specifies that the match code of the input value is to be compared to the match codes of the DATA values in the scheme.","Parameter6":"`match-definition'","Description6":"Specifies the name of the match definition in the specified locale that will be used to create match codes during the application of the scheme.","Parameter7":"sensitivity","Description7":"Specifies the amount of information in the match codes that are created during the application of the scheme. With higher sensitivity values, two values must be increasingly similar to create the same match code. At lower sensitivity values, values can receive the same match code despite their dissimilarities. Valid values range from 50 to 95.","Parameter8":"'locale'&gt;","Description8":"Specifies the locale that contains the specified match definition that will be referenced during the application of the scheme. The value can be a locale name in quotation marks, or the name of a variable whose value resolves to a locale name."},{"Name":"DQSCHEMEAPPLY*2","Definition":"Applies a scheme and returns a transformed value and a transformation flag.","Parameter1":"char","Description1":"Is the value to which the specified scheme will be applied. The value can be the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"output-variable","Description2":"Identifies the character variable that receives the transformed input value.","Parameter3":"'scheme'","Description3":"Identifies the scheme that is applied to the input value.","Parameter4":"`scheme-format'&lt;","Description4":"Identifies the file format of the scheme. Valid values are as follows:\n\n      BFD\n      indicates that the specified scheme is stored in Blue Fusion Data format. This is the default value.\n\n      NOBFD\n      indicates that the specified scheme is stored in SAS format.","Parameter5":"`mode'","Description5":"Specifies how the scheme is to be applied to the values of the input character variable. Valid values for the mode argument are defined as follows:\n\n      PHRASE\n      compares the entire input character value to the entirety of each of the DATA values in the scheme.\n\n      ELEMENT\n      compares each element in the input character value to each of the DATA values in the scheme.\n    ","Parameter6":"transform-count-variable","Description6":"Identifies the numeric variable that receives the returned number of transformations that were performed on the input value.","Parameter7":"'scheme-lookup-method'","Description7":"Specifies one of three mutually-exclusive methods of applying the scheme. Valid values are as follows:\n\n      EXACT\n      this default value specifies that the input value is to be compared to the DATA values in the scheme without changing the input value in any way.\n\n      IGNORE_CASE\n      specifies that capitalization is to be ignored when the input value is compared to the DATA values in the scheme.\n\n      USE_MATCHDEF\n      specifies that the match code of the input value is to be compared to the match codes of the DATA values in the scheme.\n    ","Parameter8":"'match-definition'","Description8":"Specifies the name of the match definition in the specified locale that will be used to create match codes during the application of the scheme.","Parameter9":"sensitivity","Description9":"Specifies the amount of information in the match codes that are created during the application of the scheme. With higher sensitivity values, two values must be increasingly similar to create the same match code. At lower sensitivity values, two values receive the same match code despite their dissimilarities. Valid values range from 50 to 95.","Parameter10":"'locale'&gt;","Description10":"Specifies the locale that contains the specified match definition that will be referenced during the application of the scheme. The value can be a locale name in quotation marks or the name of a variable whose value resolves to a locale name."},{"Name":"DQSRVARCHJOB","Definition":"Runs an dfPower Architect job on a DataFlux Integration Server and returns a job identifier.","Parameter1":"job-name","Description1":"Identifies the dfPower Architect job as it exists on the specified DataFlux Integration Server.","Parameter2":"&lt;host&gt;","Description2":"Identifies the host of the DataFlux Integration Server. If this value is not specified, then the local host is used by default.","Parameter3":"&lt;port&gt;","Description3":"Identifies the port through which the local host communicates with the DataFlux Integration Server. If this argument is not specified, or if the value is 0 or a negative number, then the default port number is used. The default port number is 21036.","Parameter4":"&lt;macro-name1","Description4":"Identifies an dfPower Architect macro that exists on the DataFlux Integration Server. The value of macro-nameX can be specified as text, or as the name of a character variable.","Parameter5":"macro-value1","Description5":"Specifies the character value that will be used by the associated dfPower Architect macro. Macro-value1 is used by macro-name1. The value of macro-valueX can be specified as text, or as the name of a character variable.","Parameter6":"macro-name2","Description6":"Identifies an dfPower Architect macro that exists on the DataFlux Integration Server. The value of macro-nameX can be specified as text, or as the name of a character variable.","Parameter7":"macro-value2...&gt;","Description7":"Specifies the character value that will be used by the associated dfPower Architect macro. Macro-value1 is used by macro-name1. The value of macro-valueX can be specified as text, or as the name of a character variable."},{"Name":"DQSRVCOPYLOG","Definition":"Copies a job's log file from a DataFlux Integration Server.","Parameter1":"job-id","Description1":"Identifies the job that was submitted to a DataFlux Integration Server. The identifier was previously returned by a function such as DQSRVARCHJOB or DQSRVPROFJOBFILE.","Parameter2":"&lt;host&gt;","Description2":"Identifies the host of the DataFlux Integration Server. If this value is not specified, then the local host is used by default.","Parameter3":"&lt;port&gt;","Description3":"Identifies the port through which the local host communicates with the DataFlux Integration Server. If this argument is not specified, or if the value is 0 or a negative number, then the default port number is used. The default port number is 21036.","Parameter4":"filename","Description4":"Identifies where the log file will be copied on the local host."},{"Name":"DQSRVDELETELOG","Definition":"Deletes a job's log file from a DataFlux Integration Server.","Parameter1":"job-id","Description1":"Identifies the job that was submitted to a DataFlux Integration Server. The identifier was previously returned by a function such as DQSRVARCHJOB or DQSRVPROFJOBFILE.","Parameter2":"&lt;host&gt;","Description2":"Identifies the host of the DataFlux Integration Server. If this value is not specified, then the local host is used by default.","Parameter3":"&lt;port&gt;","Description3":"Identifies the port through which the local host communicates with the DataFlux Integration Server. If this argument is not specified, or if the value is 0 or a negative number, then the default port number is used. The default port number is 21036."},{"Name":"DQSRVJOBSTATUS","Definition":"Returns the status of a job that was submitted to a DataFlux Integration Server.","Parameter1":"job-id","Description1":"Identifies the job that was submitted to a DataFlux Integration Server. The identifier was previously returned by a function such as DQSRVARCHJOB or DQSRVPROFJOBFILE.","Parameter2":"&lt;host&gt;","Description2":"Identifies the host of the DataFlux Integration Server. If this value is not specified, then the local host is used by default.","Parameter3":"port","Description3":"Identifies the port through which the local host communicates with the DataFlux Integration Server. If this argument is not specified, or if the value is 0 or a negative number, then the default port number is used. The default port number is 21036.","Parameter4":"timeout","Description4":"Specifies a time in seconds that determines when status information is returned from the host. Valid values are defined as follows:\n\n      -1 \n      returns status information only when the job is finished. Return values are 0 (job completed successfully) or 1 (job failed).\n\n      0 \n      returns status information immediately. Return values are 0 (job completed successfully), 1 (job failed), or 2 (job running).\n\n      greater-than-zero: \n      specifies a time limit for the interval argument. If the job is still running after the timeout value, another value is returned only when the job is finished.","Parameter5":"interval","Description5":"Specifies the repeat period for the return of status information, within the limit that is imposed by the timeout argument."},{"Name":"DQSRVKILLJOB","Definition":"Terminates a job that is running on a DataFlux Integration Server.","Parameter1":"job-id","Description1":"Identifies the job that was submitted to a DataFlux Integration Server. The identifier was previously returned by a function such as DQSRVARCHJOB or DQSRVPROFJOBFILE.","Parameter2":"&lt;host&gt;","Description2":"Identifies the host of the DataFlux Integration Server. If this value is not specified, then the local host is used by default.","Parameter3":"port","Description3":"Identifies the port through which the local host communicates with the DataFlux Integration Server. If this argument is not specified, or if the value is 0 or a negative number, then the default port number is used. The default port number is 21036."},{"Name":"DQSRVPROFJOBFILE","Definition":"Runs a file-type Profile job on a DataFlux Integration Server and returns a job identifier.","Parameter1":"job-name","Description1":"Identifies the dfPower Architect job as it exists on the specified DataFlux Integration Server.","Parameter2":"&lt;host&gt;","Description2":"Identifies the host of the DataFlux Integration Server. If this value is not specified, then the local host is used by default.","Parameter3":"port","Description3":"Identifies the port through which the local host communicates with the DataFlux Integration Server. If this argument is not specified, or if the value is 0 or a negative number, then the default port number is used. The default port number is 21036.","Parameter4":"results-filename","Description4":"Identifies the file that receives job results.","Parameter5":"append","Description5":"Valid values are defined as follows:\n\n      0 appends job results below any existing content in the results file.\n\n      1 overwrites any existing content in the results file.","Parameter6":"description&lt;","Description6":"Identifies a character variable whose value describes the current run of the job. The descriptive text is added either to the top of the results file or above the results that will be appended to the bottom of the results file.","Parameter7":"macro-name1","Description7":"Identifies an dfPower Architect macro that exists on the DataFlux Integration Server. The value of macro-nameX can be specified as text, or as the name of a character variable.","Parameter8":"macro-value1","Description8":"Specifies the character value that will be used by the associated dfPower Architect macro. Macro-value1 is used by macro-name1. The value of macro-valueX can be specified as text, or as the name of a character variable.","Parameter9":"macro-name2","Description9":"Identifies an dfPower Architect macro that exists on the DataFlux Integration Server. The value of macro-nameX can be specified as text, or as the name of a character variable.","Parameter10":"macro-value2...&gt;","Description10":"Specifies the character value that will be used by the associated dfPower Architect macro. Macro-value1 is used by macro-name1. The value of macro-valueX can be specified as text, or as the name of a character variable."},{"Name":"DQSRVPROFJOBREP","Definition":"Runs a repository-type Profile job on a DataFlux Integration Server and returns a job identifier.","Parameter1":"job-name","Description1":"Identifies the dfPower Architect job as it exists on the specified DataFlux Integration Server.","Parameter2":"&lt;host&gt;","Description2":"Identifies the host of the DataFlux Integration Server. If this value is not specified, then the local host is used by default.","Parameter3":"port","Description3":"Identifies the port through which the local host communicates with the DataFlux Integration Server. If this argument is not specified, or if the value is 0 or a negative number, then the default port number is used. The default port number is 21036.","Parameter4":"repository","Description4":"Identifies the repository on the DataFlux Integration Server that contains the dfPower Profile job.","Parameter5":"report","Description5":"Identifies the file that receives the report that is generated by the dfPower Profile job.","Parameter6":"description&lt;","Description6":"Identifies a character variable whose value describes the current run of the job. The descriptive text is added either to the top of the results file or above the results that will be appended to the bottom of the results file.","Parameter7":"macro-name1","Description7":"Identifies an dfPower Architect macro that exists on the DataFlux Integration Server. The value of macro-nameX can be specified as text, or as the name of a character variable.","Parameter8":"macro-value1","Description8":"Specifies the character value that will be used by the associated dfPower Architect macro. Macro-value1 is used by macro-name1. The value of macro-valueX can be specified as text, or as the name of a character variable.","Parameter9":"macro-name2","Description9":"Identifies an dfPower Architect macro that exists on the DataFlux Integration Server. The value of macro-nameX can be specified as text, or as the name of a character variable.","Parameter10":"macro-value2...&gt;","Description10":"Specifies the character value that will be used by the associated dfPower Architect macro. Macro-value1 is used by macro-name1. The value of macro-valueX can be specified as text, or as the name of a character variable."},{"Name":"DQSRVUSER","Definition":"Authenticates a user on a DataFlux Integration Server.","Parameter1":"userid","Description1":"Identifies the user according to the registry in a DataFlux Integration Server.","Parameter2":"password","Description2":"Authenticates the user according to the registry in the DataFlux Integration Server. The password can be plain text or SAS-encoded."},{"Name":"DQSTANDARDIZE","Definition":"Returns a character value after standardizing casing, spacing, and format, and applies a common representation to certain words and abbreviations.","Parameter1":"char","Description1":"Is the value that will be standardized according to the specified standardization definition. The value can be the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"'standardization-definition'&lt;","Description2":"Specifies the name of the standardization definition, which must exist in the specified locale.","Parameter3":"locale&gt;","Description3":"Specifies the name of the locale that contains the specified standardization definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"DQTOKEN","Definition":"Returns a token from a character value.","Parameter1":"char","Description1":"Is the value from which the specified token will be returned, according to the specified parse definition. The value can be the name of a character variable, a character value in quotation marks, or an expression that evaluates to a variable name or a quoted value.","Parameter2":"`token'","Description2":"Identifies the token that is returned.","Parameter3":"'parse-definition'&lt;","Description3":"Specifies the name of the parse definition, which must exist in the specified locale.","Parameter4":"locale&gt;","Description4":"Specifies the name of the locale that contains the specified parse definition. The value can be a name in quotation marks, the name of a variable whose value is a locale name, or an expression that evaluates to a variable name or to a quoted locale name."},{"Name":"TPLOT","Definition":"Creates a triangular plot that graphically displays genetic marker test results.","Parameter1":"SAS-data-set","Description1":"Specifies the name of the SAS data set that is the output data set from the ALLELE procedure, containing the linkage disequilibrium test and HWE test p-values.","Parameter2":"SAS-data-set","Description2":"Specifies the name of the SAS data set that contains the p-values for the marker-trait association tests. This data set can be the output data set from the CASECONTROL procedure, the FAMILY procedure, or the PSMOOTH procedure, or it can be created by the user.","Parameter3":"variable","Description3":"Names the variable that contains the marker-trait association p-values in the SAS data set that is specified in the second argument.","Parameter4":"&lt;ALPHA=number&gt;","Description4":"Specifies the significance level for the marker-trait association test. This level is used as a cut-off for the p-value range corresponding to the symbol shape on the plot. This number must be between 0 and 1. The default is ALPHA=0.05."},{"Name":"DEFINE","Definition":"Sets the value of an attribute for a particular column in the current row.","Parameter1":"column-id | _ROW_","Description1":"Specifies a column name or a column number (that is, the position of the column from the left edge of the report). _ROW_ is an automatic variable that indicates the entire current row.","Parameter2":"'attribute-name'","Description2":"Is the attribute to define. Valid attributes are: BLINK, COLOR, COMMAND, FORMAT, HIGHLIGHT, RVSVIDEO, URL, URLBP, and URLP.","Parameter3":"value","Description3":"Sets the value for the attribute."},{"Name":"FOREACH","Definition":"The FOREACH statement iteratively applies a constraint over an array of variables.","Parameter1":"array","Description1":"An array defined in the ARRAY statement.","Parameter2":"type","Description2":"The type of the constraint.","Parameter3":"&lt;offset&gt;","Description3":"The optional offset parameter is an integer and is interpreted in the context of the constraint type."},{"Name":"ContinueFor","Definition":"Sets the number of additional iterations for the genetic algorithm optimization","Parameter1":"niter","Description1":"Specifies that the optimization continue for niter more iterations. To stop at the current iteration, set niter to 0."},{"Name":"Cross","Definition":"Executes a genetic crossover operator from within a user subroutine.","Parameter1":"selected","Description1":"Is an array that specifies the solutions to be crossed.","Parameter2":"seg","Description2":"Is the desired segment of the solution to which the crossover operator should be applied.","Parameter3":"type&lt;","Description3":"Is the type of crossover operator to apply, which also determines the number and type of parameters expected. The accepted values for type are: 'arithmetic', cycle', heuristic', 'null', 'order', pmatch', 'simple', twopoint', and 'uniform'.","Parameter4":"parameter1","Description4":"Optional parameter applicable to some operators.","Parameter5":"parameter2, ...&gt;","Description5":"Optional parameter(s) applicable to some operators."},{"Name":"Dynamic_array","Definition":"Allocates a numeric array.","Parameter1":"arrayname","Description1":"Is a previously declared array, whose dimensions are to be re-allocated.","Parameter2":"dim1&lt;","Description2":"Is the size of the first dimension.","Parameter3":"dim2, ...dim6&gt;","Description3":"Are optional. Up to six dimensions can be specified."},{"Name":"EvaluateLC","Definition":"Evaluates linear constraints.","Parameter1":"lc","Description1":"Is a two-dimensional array representing the linear constraints.","Parameter2":"results","Description2":"Is a numeric array to receive the magnitude of the constraint violation for each linear constraint.","Parameter3":"sum","Description3":"Is a variable to receive the sum of the constraint violations over all the constraints.","Parameter4":"selected","Description4":"Is an array identifying the selected solution.","Parameter5":"seg&lt;","Description5":"Is the segment of the solution to which the linear constraints apply.","Parameter6":"child&gt;","Description6":"Is an optional parameter, and should be specified only when EvaluateLC is called from a user crossover operator."},{"Name":"GetDimensions","Definition":"Gets the dimensions of an array variable.","Parameter1":"source","Description1":"Is the array variable whose dimensions are desired.","Parameter2":"dest","Description2":"Is an array to receive the dimensions of source."},{"Name":"GetObjValues","Definition":"Retrieves objective function values from the current solution generation.","Parameter1":"dest","Description1":"Is an array to receive the objective values.","Parameter2":"n","Description2":"Is the number of objective values to get."},{"Name":"GetSolutions","Definition":"Retrieves solutions from the current generation.","Parameter1":"sol","Description1":"Is an array to receive the solution elements.","Parameter2":"n","Description2":"Is the number of solutions to get.","Parameter3":"seg","Description3":"Is the segment of the solution to retrieve."},{"Name":"Initialize","Definition":"Creates the initial solution generation.","Parameter1":"option","Description1":"Is a string that specifies an initialization option. The available options and their effect are as follows:\n\n      '_uniform_'     generate uniformly distributed solutions\n      _dataset_'      read solutions from the data set specified in a FIRSTGEN= option.\n      'default'       read solutions from the data set specified in a FIRSTGEN= option, if one was specified.\n      '_retain_'      bring forward the best solutions from the current generation.\n      'user-routine'  Any string not matching the preceding options is interpreted to be a user-defined initialization routine.\n    ","Parameter2":"size&lt;","Description2":"Is the number of solutions to create by using a given option.","Parameter3":"option, size&gt;...","Description3":"More option-size pairs (optional)."},{"Name":"MarkPareto","Definition":"Identifies the Pareto-optimal set from a population of solutions","Parameter1":"result","Description1":"Is a one-dimensional array to accept the results of the evaluation.","Parameter2":"n","Description2":"Is a variable to receive the number of Pareto-optimal solutions.","Parameter3":"objectives","Description3":"Is a two-dimensional array that contains the multiple objective values for each solution.","Parameter4":"minmax","Description4":"Is a one-dimensional array to specify how the objective values are to be used."},{"Name":"Mutate","Definition":"Executes a genetic mutation operator from within a user subroutine.","Parameter1":"selected","Description1":"Is an array that specifies the solution to be mutated.","Parameter2":"seg","Description2":"Is the desired segment of the solution to which the mutation should be applied.","Parameter3":"type&lt;","Description3":"Is the type of mutation operator to apply, which also determines the number and type of parameters expected. The accepted values for type are: 'delta', 'invert', swap', and 'uniform'.","Parameter4":"parameter1, parameter2, ...&gt;","Description4":"Are optional parameters applicable to some operators."},{"Name":"Objective","Definition":"Evaluates a standard objective function from within a user subroutine.","Parameter1":"selected","Description1":"Is an array that specifies the solution to be evaluated.","Parameter2":"seg","Description2":"Is the desired segment of the solution to be evaluated.","Parameter3":"type&lt;","Description3":"Is objective function name, which also determines the number and type of parameters expected. The accepted value for type is 'TSP'.","Parameter4":"parameter1, parameter2, ...&gt;","Description4":"Are optional parameters applicable to particular objective functions."},{"Name":"PackBits","Definition":"Writes bits to a packed integer array.","Parameter1":"array","Description1":"Is an array to which the value is to be assigned.","Parameter2":"start","Description2":"Is the starting position for the bit assignments.","Parameter3":"width","Description3":"Is the number of bits to assign.","Parameter4":"value","Description4":"Is the value to be assigned to the bits. For a single bit, this should be 0 or 1."},{"Name":"ReadChild","Definition":"Reads a segment from a selected child solution into an array, within a user crossover operator.","Parameter1":"selected","Description1":"Specifies the family (parents and children) obtained from the selection process.","Parameter2":"seg","Description2":"Specifies the solution segment to be read.","Parameter3":"n","Description3":"Specifies the child in the family from which to read the solution segment.","Parameter4":"values","Description4":"Specifies an array to receive the solution elements."},{"Name":"ReadCompare","Definition":"Reads a segment from a selected solution into an array, within a user fitness comparison subroutine.","Parameter1":"selected","Description1":"Specifies the pair of solutions to be compared, obtained from the selection process.","Parameter2":"seg","Description2":"Specifies the solution segment to be read.","Parameter3":"n","Description3":"Specifies the solution (1 or 2) from which to read the segment.","Parameter4":"values","Description4":"Specifies an array to receive the solution elements."},{"Name":"ReadMember","Definition":"Reads the selected solution into an array for a user objective function or mutation operator","Parameter1":"selected","Description1":"Is a parameter passed to the user subroutine by the GA procedure, which points to the selected solution.","Parameter2":"seg","Description2":"Specifies which segment of the solution to retrieve.","Parameter3":"destination","Description3":"Specifies an array in which to store the solution elements."},{"Name":"ReadParent","Definition":"Reads selected solution elements into an array in a user crossover subroutine.","Parameter1":"selected","Description1":"Is a parameter passed to the user subroutine by the GA procedure, which points to the selected solution family.","Parameter2":"seg","Description2":"Is the segment of the desired parent solution to be obtained ","Parameter3":"n","Description3":"Is the number of the parent, starting at 1.","Parameter4":"destination","Description4":"Is an array in which to store the solution elements."},{"Name":"ReEvaluate","Definition":"Reruns the evaluation phase of the genetic algorithm.","Parameter1":"&lt;index&gt;","Description1":"Is a numeric scalar or array that specifies the indices of the solutions to be updated. The indices correspond to the order of the solutions obtained from a GetSolutions call."},{"Name":"SetBounds","Definition":"The SetBounds subroutine is used to establish upper and lower bounds on the solution space.","Parameter1":"lower","Description1":"Is a lower bound for the solution components.","Parameter2":"upper&lt;","Description2":"Is an upper bound for the solution components.","Parameter3":"seg&gt;","Description3":"Is optional, and specifies a segment of the solution to which the bounds apply. If seg is not specified, then it defaults to a value of 1.","Parameter4":null,"Description4":null},{"Name":"SetCross","Definition":"The SetCross routine is used to assign a standard crossover operator.","Parameter1":"type&lt;","Description1":"Is the name of the crossover operator to be applied. The accepted values for type are: 'arithmetic', 'cycle', 'heuristic', order', 'pmatch', simple', twopoint', and 'uniform'.","Parameter2":"seg&gt;&lt;","Description2":"Is optional, and specifies a segment of the solution to which the operator should be applied. If seg is not specified, then it defaults to a value of 1.","Parameter3":"pname","Description3":"Is optional, and specifies the name of a particular property to be set for the crossover operator.","Parameter4":"pvalue&gt;&lt;","Description4":" specifies the value to be assigned to the corresponding property name.","Parameter5":"pname, pvalue&gt;...","Description5":"More optional pname-pvalue pairs."},{"Name":"SetCrossProb","Definition":"The SetCrossProb subroutine is used to set the crossover probability for the genetic algorithm optimization process.","Parameter1":"p","Description1":"Is the crossover probability."},{"Name":"SetCrossRoutine","Definition":"Installs a user subroutine for the crossover operator.","Parameter1":"'routine'&lt;","Description1":"Is the name of a subroutine you have defined, which is called when the mutation operator is applied. This parameter must be a string literal; a variable is not accepted.","Parameter2":"nparents","Description2":"Is optional, and specifies the number of parent solutions the operator requires. If not specified, 2 is assumed.","Parameter3":"nchildren&gt;","Description3":"Is optional, and specifies the number of children solutions the operator will generate. If not specified, 2 is assumed."},{"Name":"SetElite","Definition":"Sets the number of best solutions to pass to the next generation.","Parameter1":"elite","Description1":"Is the number of best solutions to be passed unmodified from the current solution generation to the next."},{"Name":"SetEncoding","Definition":"The SetEncoding subroutine is used to establish the type of problem solution encoding.","Parameter1":"encoding","Description1":"Is a string used to specify the form of the solution."},{"Name":"SetFinalize","Definition":"Designates a user subroutine to perform post processing at the end of the optimization process.","Parameter1":"'routine'","Description1":"Is the name of a subroutine you have defined, which is called when the optimization process ends. This parameter must be a string literal; a variable is not accepted."},{"Name":"SetMut","Definition":"The SetMut routine is used to assign a standard mutation operator.","Parameter1":"type&lt;","Description1":"Is the name of the mutation operator to be applied. The accepted values for type are: 'delta', 'invert', 'null', 'swap'. and 'uniform'.","Parameter2":"seg&gt;&lt;","Description2":"Is optional, and specifies a segment of the solution to which the operator should be applied.","Parameter3":"pname","Description3":"Is optional, and specifies the name of a particular property to be set for the mutation operator.","Parameter4":"pvalue&gt;&lt;","Description4":"Specifies the value to be assigned to the corresponding property name.","Parameter5":"pname, pvalue&gt;...","Description5":"More optional pname-pvalue pairs."},{"Name":"SetMutProb","Definition":"The SetMutProb subroutine is used to set the mutation probability for the genetic algorithm optimization.","Parameter1":"p","Description1":"Is the mutation probability."},{"Name":"SetMutRoutine","Definition":"The SetMutRoutine call enables you to designate a subroutine you have defined to be used for the mutation operator.","Parameter1":"'routine'","Description1":"Is the name of a subroutine you have defined, which is called when the mutation operator is applied. This parameter must be a string literal; a variable is not accepted."},{"Name":"SetObj","Definition":"The SetObj routine is used to assign a procedure-supplied objective function.","Parameter1":"type","Description1":"Is the name of the objective function to be used. The accepted value for type is 'TSP'.","Parameter2":"minmax&lt;","Description2":"Is an indicator to maximize or minimize the objective. A value of 0 is used to specify a minimization, and a value of 1 to specify maximizing the objective.","Parameter3":"seg&gt;&lt;","Description3":"Is optional, and specifies a segment of the solution to which the objective function should be applied.","Parameter4":"pname","Description4":"Is optional, and specifies the name of a particular property to be set for the objective function.","Parameter5":"pvalue&gt;&lt;","Description5":"Specifies the value to be assigned to the corresponding property name.","Parameter6":"pname, pvalue&gt;...","Description6":"More optional pname-pvalue pair(s)."},{"Name":"SetObjFunc","Definition":"The SetObjFunc subroutine is used to designate a user function to be the objective for the optimization process.","Parameter1":"'fname'","Description1":"Is the name of a user objective function. This parameter must be a literal string.","Parameter2":"minmax","Description2":"Is set to 0 to minimize the objective, 1 to maximize."},{"Name":"SetProperty","Definition":"The SetProperty call is used to set or modify properties of a genetic operator, objective function, or a selector.","Parameter1":"optype&lt;","Description1":"Is the type of operator. It should have a value of 'cross' for a crossover operator, 'mut' for a mutation operator, 'obj' for an objective function, or 'sel' for a selector.","Parameter2":"seg&gt;","Description2":"Is optional, used only for mutation and crossover operators, and specifies the segment in which the operator resides. It is necessary only for multisegment encoding. The default value if seg is not specified is 1.","Parameter3":"pname","Description3":"Specifies the name of a particular property to be set.","Parameter4":"pvalue&lt;","Description4":" specifies the value to be assigned to the corresponding property name.","Parameter5":"pname, pvalue&gt;...","Description5":"Additional pname-pvalue pair(s) (optional)."},{"Name":"SetSel","Definition":"The SetSel call is used to specify a selector for the regeneration process, which selects members of the current generation to be propagated to the next.","Parameter1":"selector&lt;","Description1":"Is the type of selection strategy to be used.","Parameter2":"pname","Description2":"Is optional, and specifies the name of a particular property to be set for the selector operator.","Parameter3":"pvalue&gt;&lt;","Description3":"Specifies the value to be assigned to the corresponding property name.","Parameter4":"pname, pvalue&gt;...","Description4":"Additional optional pname-pvalue pair(s)."},{"Name":"SetUpdateRoutine","Definition":"Designates a control subroutine to be called at each iteration.","Parameter1":"'routine'","Description1":"Is the name of a subroutine you have defined that is called once during each iteration of the optimization process. This parameter must be a string literal; a variable is not accepted."},{"Name":"ShellSort","Definition":"Sorts a numeric array.","Parameter1":"x&lt;","Description1":"Is a one or two dimensional array to be sorted.","Parameter2":"by&lt;","Description2":"Is an optional numeric scalar or array that specifies the columns by which the array is to be sorted. If not specified, column 1 is the default.","Parameter3":"descend&gt;&gt;","Description3":"Is an optional numeric scalar or array used to specify which columns in the by parameter are to be in descending order. Any columns not specified in a descend parameter will be in ascending order."},{"Name":"Shuffle","Definition":"The Shuffle subroutine randomly rearranges the elements of the x array.","Parameter1":"x","Description1":"Is a numeric array to be randomly shuffled."},{"Name":"UnpackBits","Definition":"The UnpackBits function facilitates the extraction of bit values from arbitrary locations in an integer array.","Parameter1":"source","Description1":"Is an array containing the packed bit values.","Parameter2":"start","Description2":"Is the starting bit, with the lowest bit starting at 1.","Parameter3":"width","Description3":"Is the number of bits to retrieve. A value of 1 retrieves a single bit."},{"Name":"UpdateSolutions","Definition":"The UpdateSolutions subroutine is used to replace the values of the selected solution segment with new values computed in an update routine.","Parameter1":"sol","Description1":"Is an array containing the replacement solution elements.","Parameter2":"n","Description2":"Is the number of solutions to update.","Parameter3":"seg","Description3":"Is the segment of the solution to replace."},{"Name":"WriteChild","Definition":"The WriteChild subroutine is called inside a user crossover operator subroutine to assign to the elements of a selected child solution.","Parameter1":"selected","Description1":"Is an array specifying the selected family of solutions.","Parameter2":"seg","Description2":"Is the segment to which the elements are to be written.","Parameter3":"n","Description3":"Is the child within the family to which the elements are to be written. A value of 1 is for the first child, 2 for the second, and so on.","Parameter4":"source","Description4":"Is an array containing the values to be written."},{"Name":"WriteMember","Definition":"Assigns values to a selected solution from within a user objective function or mutation operator.","Parameter1":"selected","Description1":"Is an array specifying the selected family of solutions.","Parameter2":"seg","Description2":"Is the segment to which the elements are to be written.","Parameter3":"source","Description3":"Is an array containing the values to be written."},{"Name":"INSERT_CATALOG","Definition":"Inserts a SAS catalog into a package.","Parameter1":"packageID","Description1":"Identifies the package into which the catalog will be inserted. \n    \nType: Numeric.","Parameter2":"libname","Description2":"Names the library that contains the catalog. \n    \nType: Numeric.","Parameter3":"memname","Description3":"Specifies the name of the catalog. \n    \nType: Character","Parameter4":"desc","Description4":"Describes the catalog. \n    \nType: Character","Parameter5":"nameValue","Description5":"Identifies a list of one or more space-separated name/value pairs, each in one of the following forms:\n\n      name\n      name=value\n      name=\"value\"\n      name=\"single value with spaces\"\n      name=(value)\n      name=(\"value\")\n      name=(value1, \"value 2\", ... valueN)\n\nName/value pairs are site-specific; they are used for the purpose of filtering.\n    ","Parameter6":"rc","Description6":"Receives a return code. \n    \nType: Numeric."},{"Name":"INSERT_DATASET","Definition":"Inserts a SAS data set into a package.","Parameter1":"packageId","Description1":"Identifies the package into which the data set will be inserted. \n    \nType: Numeric.","Parameter2":"libname","Description2":"Names the library that contains the data set. \n    \nType: Character.","Parameter3":"memname","Description3":"Specifies the name of the data set. \n    \nType: Character.","Parameter4":"desc","Description4":"Describes the data set. \n    \nType: Character.","Parameter5":"nameValue","Description5":"Identifies a list of one or more space-separated name/value pairs, each in one of the following forms:\n\n      name\n      name=value\n      name=\"value\"\n      name=\"single value with spaces\"\n      name=(value)\n      name=(\"value\")\n      name=(value1, \"value 2\", ... valueN)\n\nName/value pairs are site-specific; they are used for the purpose of filtering.\n    ","Parameter6":"rc&lt;","Description6":"Receives a return code. \n    \nType: Numeric.","Parameter7":"properties","Description7":"Identifies a comma-separated list of optional property names. Valid property names are as follows:\n\n      ALLOW_READ_PROTECTED_MEMBER\n      DATASET_OPTIONS\n      TRANSFORMATION_TYPE\n      CSV_SEPARATOR\n      CSV_FLAG\n\nType: Character\n    ","Parameter8":"propValue1, ...propValueN&gt;","Description8":"Specifies one value for each specified property. The order of the values matches the order of the property names in the properties parameter. Valid property values are defined as follows:\n\n      ALLOW_READ_PROTECTED_MEMBER\n      specifies a value of \"YES\". It is important to note that the password and encryption \n      attributes are not preserved in the intermediate published format (whether on a queue \n      or in an archive). Because of this exposure, take care when publishing data sets that \n      are password protected, encrypted or both. \n\n      DATASET_OPTIONS\n      specifies data set options. \n\n      TRANSFORMATION_TYPE\n      indicates that the data set should be transformed to the specified type when published. \n      At this time, the only supported value for this property is CSV, for Comma-Separated-Value.\n\n      CSV_SEPARATOR\n      indicates the separator to use when creating the CSV file. The default separator \n      is a comma (,).\n\n      CSV_FLAG\n      indicates a CSV override flag. Supported values include NO_VARIABLES, NO_LABELS, and \n      EXTENDED. By default, when writing numeric variable values into the CSV file, BEST is \n      used to format numerics that have no format associated with them. To override this \n      default, specify the property value EXTENDED on the CSV_FLAG property. This extends \n      the number of digits used as the precision level. By default, if the data set is \n      transformed into a CSV file, then the file's first line contains all of the specified \n      variables. The second line contains all of the specified labels. To override this \n      default behavior, specify flags with values \"NO_VARIABLES\" or \"NO_LABELS\". To \n      specify both values, a CSV_FLAG property must be specified for each.\n\nType: Character or Numeric\n    "},{"Name":"INSERT_FDB","Definition":["Inserts a financial database (FDB) into a package.","Inserts a SAS data set into a package."],"Parameter1":"packageID","Description1":"Identifies the package into which the FDB will be inserted. \n    \nType: Numeric.","Parameter2":"libname","Description2":"Names the library that contains the FDB. \n    \nType: Character.","Parameter3":"memname","Description3":"Specifies the name of the FDB. \n    \nType: Character.","Parameter4":"desc","Description4":"Describes the FDB. \n    \nType: Character.","Parameter5":"nameValue","Description5":"Identifies a list of one or more space-separated name/value pairs, each in one of the following forms:\n\n      name\n      name=value\n      name=\"value\"\n      name=\"single value with spaces\"\n      name=(value)\n      name=(\"value\")\n      name=(value1, \"value 2\", ... valueN)\n\nName/value pairs are site-specific; they are used for the purpose of filtering.\n    ","Parameter6":"rc&lt;","Description6":"Receives a return code. Type: Numeric."},{"Name":"INSERT_FILE","Definition":"Inserts a file into a package.","Parameter1":"packageID","Description1":"Identifies the package into which the file will be inserted. \n    \nType: Numeric.","Parameter2":"filename","Description2":"Names the file, using the following syntax:\n\n      FILENAME: external_filename\n      FILEREF: sas_fileref\n\nType: Character\n    ","Parameter3":"filetype","Description3":"Specifies the file type, which must be TEXT or BINARY. \n    \nType: Character.\n    ","Parameter4":"mimeType","Description4":"Specifies the MIME type, the value of which is determined by the user. Subscribers can filter packages based on MIME type.\n\n      Suggested MIME types include the following:\n\n      application/msword\n      application/octet-stream\n      application/pdf\n      application/postscript\n      application/zip\n      audio/basic\n      image/jpeg\n      image/gif\n      image/tiff\n      model/vrml\n      text/html\n      text/plain\n      text/richtext\n      video/mpeg\n      video/quicktime\n    ","Parameter5":["desc","nameValue"],"Description5":"Describes the file. Type: Character.","Parameter6":"nameValue","Description6":"Identifies a list of one or more space-separated name/value pairs, each in one of the following forms:\n\n      name\n      name=value\n      name=\"value\"\n      name=\"single value with spaces\"\n      name=(value)\n      name=(\"value\")\n      name=(value1, \"value 2\", ... valueN)\n\n      Name/value pairs are site-specific; they are used for the purpose of filtering.\n    ","Parameter7":"rc&lt;","Description7":"Receives a return code. \n    \nType: Numeric.","Parameter8":"properties","Description8":"Identifies a comma-separated list of optional property names. Valid property names are as follows:\n\n    PATH\n\nType: Character \n    ","Parameter9":"propValue1, ...propValueN&gt;","Description9":"Specifies one value for each specified property name. The order of the property values must match the order of the property names in the properties parameter. Valid property values are defined as follows:\n\n      PATH\n      indicates the relative path information for this file. The relative path is included \n      as the name of the file when defined in the ZIP file. The specified path should not \n      contain a drive or device letter, or a leading slash. All slashes should be forward \n      slashes '/' as opposed to backslashes '\\'. This property is recognized only by the \n      archive transport. It is ignored by all other transports.\n\nType: Character\n    "},{"Name":"INSERT_HTML","Definition":"Inserts HTML files into a package.","Parameter1":"packageId","Description1":"Identifies the package into which the HTML will be inserted. \n    \nType: Numeric.","Parameter2":"body","Description2":"Names the HTML body file, using the following syntax:\n\n    FILEREF: SAS_fileref\n    FILENAME: external_filename\n\nType: Character \n    ","Parameter3":"bodyURL","Description3":"Specifies the URL to be used for the body file.\n\nType: Character \n    ","Parameter4":"frame","Description4":"Names the HTML frame file, using the following syntax:\n\n    FILEREF: SAS_fileref\n    FILENAME: external_filename\n\nType: Character \n    ","Parameter5":"frameURL","Description5":"Specifies the URL to be used for the frame file. Type: Character","Parameter6":"contents","Description6":"Names the HTML contents file, using the following syntax:\n\n    FILEREF: SAS_fileref\n    FILENAME: external_filename\n\nType: Character \n    ","Parameter7":"contentsURL","Description7":"Specifies the URL to be used for the contents file. \n    \nType: Character.","Parameter8":"page","Description8":"Names the HTML page file, using the following syntax:\n\n    FILEREF: SAS_fileref \n    FILENAME: external_filename\n\nType: Character \n    ","Parameter9":"pageURL","Description9":"Specifies the URL to be used for the page file. \n    \nType: Character.","Parameter10":"desc","Description10":"Describes the inserted HTML package entry. \n    \nType: Character.","Parameter11":"nameValue","Description11":"Identifies a list of one or more space-separated name/value pairs, each in the form of name=value. Name/value pairs are site-specific; they are used for the purpose of filtering.\n    ","Parameter12":"rc&lt;","Description12":"Receives a return code. \n    \nType: Numeric.","Parameter13":"properties","Description13":"Identifies a comma-separated list of optional property names. Valid property names are as follows:\n\n      ENCODING\n      COMPANION_FILE\n      COMPANION_MIMETYPE\n      COMPANION_URL\n      GPATH\n      GPATH_URL\n      NESTED_NAME\n\nType: Character\n    ","Parameter14":"propValue1, ...propValueN&gt;","Description14":"Specifies one value for each specified property. The order of the values matches the order of the property names in the properties parameter. Valid property values are defined as follows:\n\n      ENCODING\n      indicates the character set of the HTML files, such as ISO-8859-1.\n\n      COMPANION_FILE\n      indicates the name of an additional HTML file that is to be added to this set of \n      HTML files. Multiple COMPANION_FILE properties and values can be specified. Name \n      the companion files, using the following syntax: FILEREF: SAS_fileref or\n      FILENAME: external_filename\n\n      COMPANION_MIMETYPE\n      indicates the MIME type of the companion file that is to be added to the inserted \n      HTML entry. If specified, then this property must be preceded by the COMPANION_FILE \n      property.\n\n      COMPANION_URL\n      indicates the URL of an HTML file that is to be added to the inserted HTML entry.\n      If specified, then this property must be preceded by the COMPANION_FILE property.\n\n      GPATH\n      indicates the name of a single directory that contains the ODS-generated graphical \n      files for inclusion as companion files to the HTML file set.\n      \n      GPATH_URL\n      indicates the URL of the directory that contains the ODS-generated graphical files. \n      An example of a URL might be ~ods-output/images. Alternatively, you can specify \n      \"NONE\" as the GPATH_URL property value. If the value of \"NONE\" is specified, then \n      only the filename is used as the URL.\n\n      NESTED_NAME\n      indicates the name of the nested directory to create for the storage of the set \n      of HTML files. If you do not specify a value for this property, then a name is \n      generated automatically.\n\nType: Character\n    "},{"Name":"INSERT_MDDB","Definition":"Inserts a SAS multidimensional database into a package.","Parameter1":"packageID","Description1":"Identifies the package into which the MDDB will be inserted. \n    \nType: Numeric.","Parameter2":"libname","Description2":"Names the library that contains the MDDB. \n    \nType: Character.","Parameter3":"memname","Description3":"Specifies the name of the MDDB. \n    \nType: Character.","Parameter4":"desc","Description4":"Describes the MDDB. \n    \nType: Character.","Parameter5":"nameValue","Description5":"\n      Identifies a list of one or more space-separated name/value pairs, each in one of the following forms:\n\n      name\n      name=value\n      name=\"value\"\n      name=\"single value with spaces\"\n      name=(value)\n      name=(\"value\")\n      name=(value1, \"value 2\", ... valueN)\n\nName/value pairs are site-specific; they are used for the purpose of filtering.\n    ","Parameter6":"rc","Description6":"Receives a return code. \n    \nType: Numeric."},{"Name":"INSERT_PACKAGE","Definition":"Inserts a package into another package.","Parameter1":"packageId","Description1":"Identifies the package. \n    \nType: Numeric.","Parameter2":"insertPackageId","Description2":"Identifies the package that will be nested in the package identified by packageID. \n    \nType: Numeric.","Parameter3":"rc&lt;","Description3":"Receives a return code. \n    \nType: Numeric.","Parameter4":"properties","Description4":"Identifies a comma-separated list of optional property names. At present, only one property is supported:\n\n    NESTED_NAME\n\n    Type: Character \n    ","Parameter5":"propValue1, ...propValueN&gt;","Description5":"Specifies one value for each specified property name. The order of the property values must match the order of the property names in the properties parameter. Valid property values are defined as follows:\n\n    NESTED_NAME \n    indicates the name of the nested directory to create for the storage of the nested package. \n    If you do not specify a value for this property, then a name is generated automatically. \n\n    Note: The NESTED_NAME property is valid only when publishing to the WebDAV-compliant \n    server transport.  \nType: Character \n    "},{"Name":"INSERT_REF","Definition":"Inserts a reference into a package.","Parameter1":"packageID","Description1":"Identifies the package into which the reference will be inserted. \n    \nType: Numeric.","Parameter2":"referenceType","Description2":"Specifies the type of the reference. Specify HTML or URL. \n    \nType: Character.","Parameter3":"reference","Description3":"Specifies the reference that is to be inserted. \n    \nType: Character.","Parameter4":"desc","Description4":"Describes the reference. \n    \nType: Character.","Parameter5":"nameValue","Description5":"Identifies a list of one or more space-separated name/value pairs, each in one of the following forms:\n\n      name\n      name=value\n      name=\"value\"\n      name=\"single value with spaces\"\n      name=(value)\n      name=(\"value\")\n      name=(value1, \"value 2\", ... valueN)\n\nName/value pairs are site-specific; they are used for the purpose of filtering.\n    ","Parameter6":"rc","Description6":"Receives a return code. Type: Numeric."},{"Name":"INSERT_SQLVIEW","Definition":"Inserts a PROC SQL view into a package.","Parameter1":"packageId","Description1":"Identifies the package into which the PROC SQL view will be inserted. \n    \nType: Numeric.","Parameter2":"libname","Description2":"Names the library that contains the PROC SQL view. \n    \nType: Character.","Parameter3":"memname","Description3":"Specifies the name of the PROC SQL view. \n    \nType: Character.","Parameter4":"desc","Description4":"Describes the PROC SQL view. \n    \nType: Character.","Parameter5":"nameValue","Description5":"\n      Identifies a list of one or more space-separated name/value pairs, each in one of the following forms:\n\n      name\n      name=value\n      name=\"value\"\n      name=\"single value with spaces\"\n      name=(value)\n      name=(\"value\")\n      name=(value1, \"value 2\", ... valueN)\n\nName/value pairs are site-specific; they are used for the purpose of filtering.\n    ","Parameter6":"rc","Description6":"Receives a return code. \n    \nType: Numeric."},{"Name":"INSERT_VIEWER","Definition":"Inserts a viewer into a package.","Parameter1":"packageId","Description1":"Identifies the package into which the viewer will be inserted. \n    \nType: Numeric.","Parameter2":"filename","Description2":"Names the viewer, using the following syntax:\n\n      FILENAME: external_filename\n      FILEREF: sas_fileref\n\nType: Character\n    ","Parameter3":"mimeType","Description3":"Specifies the MIME type, the value of which is determined by the user. Subscribers can filter packages based on MIME type.","Parameter4":"desc","Description4":"Describes the file. \n    \nType: Character.","Parameter5":"nameValue","Description5":"Identifies a list of one or more space-separated name/value pairs, each in one of the following forms:\n\n      name\n      name=value\n      name=\"value\"\n      name=\"single value with spaces\"\n      name=(value)\n      name=(\"value\")\n      name=(value1, \"value 2\", ... valueN)\n\n      Name/value pairs are site-specific; they are used for the purpose of filtering.\n    ","Parameter6":"rc&lt;","Description6":"Receives a return code. \n    \nType: Numeric.","Parameter7":"properties","Description7":"Identifies a comma-separated list of optional property names. Valid property names are as follows:\n\n    ENCODING\n    VIEWER_TYPE\n\nType: Character \n    ","Parameter8":"propValue1, ...propValueN&gt;","Description8":"Specifies one value for each specified property. The order of the values must match the order of the property names in the properties parameter. Valid property values are defined as follows:\n\n      ENCODING \n      indicates the character set of the viewer file, such as ISO-8859-1. \n\n      VIEWER_TYPE \n      indicates the type of the viewer. Valid values are HTML and TEXT. \n      The default value is HTML.\n\nType: Character\n    "},{"Name":"PACKAGE_BEGIN","Definition":"Initializes a package and returns a unique package identifier.","Parameter1":"packageId","Description1":"Identifies the new package. \n    \nType: Numeric.","Parameter2":"desc","Description2":"Describes the package. \n    \nType: Character.","Parameter3":"nameValue","Description3":"Identifies a list of one or more space-separated name/value pairs, each in one of the following forms:\n\n      name\n      name=value\n      name=\"value\"\n      name=\"single value with spaces\"\n      name=(value)\n      name=(\"value\")\n      name=(value1, \"value 2\", ... valueN)\n\n      Name/value pairs are site-specific; they are used for the purpose of filtering.\n    ","Parameter6":"rc&lt;","Description6":"Receives a return code. \n    \nType: Numeric.","Parameter7":"properties","Description7":"Identifies a comma-separated list of optional property names. Valid property names are as follows:\n\n    ABSTRACT\n    EXPIRATION_DATETIME\n    NAMESPACES\n    \nType: Character \n    ","Parameter8":"propValue1, ...propValueN&gt;","Description8":"Specifies one value for each specified property name. The order of the values must match the order of the property names in the properties parameter. Valid property values are defined as follows:\n\n      ABSTRACT \n      provides an abstract (short summary) of the inserted package.\n\n      EXPIRATION_DATETIME \n      numeric SAS datetime value. This value should be specified in GMT format. \n\n      NAMESPACES \n      specifies unique names that associate published packages with specific contexts \n      on a WebDAV-compliant server. The association of a namespace with a package \n      organizes package data on a server according to meaningful criteria or contexts.\n\nType: Character or Numeric\n    "},{"Name":"PACKAGE_END","Definition":"Frees the resources that are associated with a package.","Parameter1":"packageID","Description1":"Identifies the package. \n    \nType: Numeric.","Parameter2":"rc","Description2":"Receives a return code. \n    \nType: Numeric."},{"Name":"PACKAGE_PUBLISH*1","Definition":"Publishes a package to an archive.","Parameter1":"packageID","Description1":"Identifies the package that is to be published. \n    \nType: Numeric.","Parameter2":"publishType","Description2":"Indicates how to publish the package. To publish the package by using the archive transport, specify TO_ARCHIVE. \n    \nType: Character.","Parameter3":"rc&lt;","Description3":"Receives a return code. \n    \nType: Numeric","Parameter4":"properties","Description4":"Identifies a comma-separated list of optional property names. Specify any of the following property names, or specify '' to indicate that no properties are to be applied: \n\n    ARCHIVE_NAME\n    ARCHIVE_PATH\n    FTP_PASSWORD\n    FTP_USER\n    HTTP_PASSWORD\n    HTTP_PROXY_URL\n    HTTP_USER\n\nType: Character \n    ","Parameter5":"propValue1, ...propValueN&gt;","Description5":"Specifies a value for each specified property name. The order of the property values must match the order of the property names in the properties parameter.\n\nType: Character \n    "},{"Name":"PACKAGE_PUBLISH*2","Definition":"Publishes a package using the e-mail transport.","Parameter1":"packageID","Description1":"Identifies the package that is to be published. \n    \nType: Numeric.","Parameter2":"publishType","Description2":"Indicates how to publish the package. To publish the package by using the e-mail transport, specify TO_EMAIL. Type: Character.","Parameter3":"rc&lt;","Description3":"Receives a return code. \n    \nType: Numeric.","Parameter4":"properties","Description4":"Identifies a comma-separated list of optional property names. Specify any of the following property names, or specify '' to indicate that no properties are to be applied: \n\n    ADDRESSLIST_DATASET_LIBNAME, ADDRESSLIST_DATASET_MEMNAME, \n    ADDRESSLIST_VARIABLE_NAME, APPLIED_TEXT_VIEWER_NAME, \n    APPLIED_VIEWER_NAME, ARCHIVE_NAME, ARCHIVE_PATH, \n    COLLECTION_URL, DATASET_OPTIONS, ENCODING, FROM, \n    FTP_PASSWORD, FTP_USER,     HTTP_PASSWORD, HTTP_PROXY_URL,\n    HTTP_USER, IF_EXISTS, PARENT_URL, PROCESS_VIEWER, REPLYTO, \n    SUBJECT, TARGET_VIEW_NAME, TARGET_VIEW_MIMETYPE, \n    TEXT_VIEWER_NAME, VIEWER_NAME \n\nType: Character \n    ","Parameter5":"propValue1, ...propValueN&gt;","Description5":"Specifies a value for each specified property name. The order of the property values must match the order of the property names in the properties parameter.\n\nType: Character or Numeric.\n    ","Parameter6":"address1 &lt;, ...addressN&gt;","Description6":null},{"Name":"PACKAGE_PUBLISH*3","Definition":"Publishes a package to one or more message queues.","Parameter1":"packageID","Description1":"Identifies the package that is to be published. \n    \nType: Numeric.","Parameter2":"publishType","Description2":"Indicates how to publish the package. To publish the package by using the queue transport, specify a publishType of TO_QUEUE. Type: Character.","Parameter3":"rc&lt;","Description3":"Receives a return code. \n    \nType: Numeric.","Parameter4":"properties&lt;","Description4":"Identifies a comma-separated list of optional property names. Specify any of the following property names, or specify '' to indicate that no properties are to be applied: \n\nType: Character \n    ","Parameter5":"propValue1, ...propValueN&gt;","Description5":"Specifies a value for each specified property name. The order of the property values must match the order of the property names in the properties parameter.\n    \n    ARCHIVE_NAME\n    ARCHIVE_PATH\n    CORRELATIONID\n    FTP_PASSWORD\n    FTP_USER\n    HTTP_PASSWORD\n    HTTP_PROXY_URL\n    HTTP_USER\n    \nType: Character or Numeric.\n    ","Parameter6":"queue1 &lt;, ...queueN&gt;","Description6":"Character string that specifies the queue(s) that will be used to publish the package. When publishing to MSMQ queues, use the following syntax: \n\n    MSMQ://queueHostMachineName\\queueName\n    \n    When publishing to MQSeries queues, use the following syntax: \n        MQSERIES://queueManager:queueName\n    or \n        MQSERIES-C://queueManager:queueName\n\nType: Character \n  "},{"Name":"PACKAGE_PUBLISH*4","Definition":"Publishes a package to subscribers who are associated with specified channel.","Parameter1":"packageID","Description1":"Identifies the package that is to be published. \n    \nType: Numeric.","Parameter2":"publishType","Description2":"Indicates how to publish the package. To publish a package to the subscribers of a channel, specify a publishType value of TO_SUBSCRIBERS. Type: Character.","Parameter3":"rc&lt;","Description3":"Receives a return code. \n    \nType: Numeric.","Parameter4":"properties&lt;","Description4":"Identifies a comma-separated list of optional property names. Specify any of the following property names, or specify '' to indicate that no properties are to be applied: \n\n    APPLIED_TEXT_VIEWER_NAME, APPLIED_VIEWER_NAME, ARCHIVE_NAME, \n    ARCHIVE_PATH, CHANNEL_STORE, COLLECTION_URL, CORRELATIONID, \n    ENCODING, FOLDER_PATH, FROM, FTP_PASSWORD, FTP_USER, \n    GENERATED_NAME, HTTP_PASSWORD, HTTP_PROXY_URL, HTTP_USER, \n    IF_EXISTS, METAPASS, METAUSER, PARENT_URL, PROCESS_VIEWER,\n    REPLYTO, SUBJECT, TARGET_VIEW_NAME, TARGET_VIEW_MIMETYPE, \n    TEXT_VIEWER_NAME, VIEWER_NAME\n\nType: Character \n    ","Parameter5":"propValue1, ...propValueN&gt;","Description5":"Specifies a value for each specified property name. The order of the property values must match the order of the property names in the properties parameter.\n\nType: Character or Numeric.\n    ","Parameter6":"channel","Description6":"Specifies the name of the channel as it is defined in the SAS Metadata Repository. The channel contains a list of subscribers to whom the package will be published. \n\nType: Character \n  "},{"Name":"PACKAGE_PUBLISH*5","Definition":"Publishes a package to a WebDAV-compliant server.","Parameter1":"packageID","Description1":"Identifies the package that is to be published. \n    \nType: Numeric.","Parameter2":"publishType","Description2":"Indicates how to publish the package. To publish the package using the WebDAV transport, specify a publishType of TO_WEBDAV. Type: Character.","Parameter3":"rc&lt;","Description3":"Receives a return code. \n    \nType: Numeric.","Parameter4":"properties&lt;","Description4":"Identifies a comma-separated list of optional property names. Specify any of the following property names, or specify '' to indicate that no properties are to be applied:\n\n      ARCHIVE_NAME\n      ARCHIVE_PATH\n      COLLECTION_URL\n      HTTP_PASSWORD\n      HTTP_PROXY_URL\n      HTTP_USER\n      IF_EXISTS\n      PARENT_URL\n      TARGET_VIEW_MIMETYPE\n      TARGET_VIEW_NAME\n      TEXT_VIEWER_NAME\n      VIEWER_NAME\n      \nType: Character\n    ","Parameter5":"propValue1, ...propValueN&gt;","Description5":"Specifies a value for each specified property name. The order of the property values must match the order of the property names in the properties parameter.\n\nType: Character or Numeric.\n    "},{"Name":"COMPANION_NEXT","Definition":"Retrieves the next companion HTML file in the ODS HTML set.","Parameter1":"entryIdx","Description1":"Identifies the companion HTML file entry.","Parameter2":"path","Description2":"Specifies the full path of the location that will receive the retrieved file.\n\nType: Character \n","Parameter3":"filename","Description3":"Returns the name of the new file. \n    \nType: Character.","Parameter4":"url","Description4":"Returns the URL of the companion file. \n    \nType: Character.","Parameter5":"rc&lt;","Description5":"Receives a return code. \n    \nType: Numeric.","Parameter6":"properties","Description6":"Identifies a comma-separated list of optional property names. Valid property names are as follows:\n\n    ENCODING\n    MIMETYPE\n\nType: Character \n","Parameter7":"propValue1, ...propValueN&gt;","Description7":"Specifies one value for each specified property name. The order of the property values must match the order of the property names in the properties parameter. Valid property values are defined as follows: \n\n    ENCODING \n    input character string that specifies the target encoding for the companion \n    file. The companion file is translated into the specified encoding. An example \n    of a target encoding value is ISO-8859-1.\n\n    MIMETYPE \n    character output parameter that identifies the MIME type of the companion \n    file. The MIME type is returned in the MIMETYPE variable. The publisher of \n    the companion file can set the user-specified MIME type after the companion \n    file is published. If the publisher does not specify the MIME type, then the \n    returned value is blank.\n\nType: Character \n"},{"Name":"ENTRY_FIRST","Definition":"Returns header information for the first entry in a package.","Parameter1":"packageId","Description1":"identifies the package. \n    \nType: Numeric.","Parameter2":"entryId","Description2":"Returns the identifier of the entry. \n    \nType: Numeric","Parameter3":"entryType","Description3":"Returns the type of the entry. Available types include the following:\n\n    BINARY\n    CATALOG\n    DATASET\n    FDB\n    HTML\n    MDDB\n    NESTED_PACKAGE\n    REFERENCE\n    SQLVIEW\n    TEXT\n    VIEWER\n\nType: Character \n","Parameter4":"userSpecString","Description4":"Returns a string from the specified entry. \n    \nType: Character.","Parameter5":"desc","Description5":"Returns the entry description from the specified entry. \n    \nType: Character.","Parameter6":"nameValue","Description6":"Returns the name/value pairs assigned to the specified entry. Name/value pairs are site-specific; they are used for the purpose of filtering. \n\nType: Character \n    ","Parameter7":"rc&lt;","Description7":"Receives a return code. \n    \nType: Numeric.","Parameter8":"properties","Description8":"Identifies a comma-separated list of optional property names. Valid property names are as follows:\n\n    FILENAME\n\nType: Character \n    ","Parameter9":"propValue1, ...propValueN&gt;","Description9":"Returns one value for each specified property name. Valid property names are supported as follows: \n\n    FILENAME \n    output character string variable that returns the name of the file \n    (as it exists in the package).\n\nType: Character \n  "},{"Name":"ENTRY_NEXT","Definition":"Returns header information for the next entry in a package.","Parameter1":"packageId","Description1":"identifies the package. \n    \nType: Numeric.","Parameter2":"entryId","Description2":"Returns the identifier of the entry. \n    \nType: Numeric","Parameter3":"entryType","Description3":"Returns the type of the entry. Available types include the following:\n\n    BINARY\n    CATALOG\n    DATASET\n    FDB\n    HTML\n    MDDB\n    NESTED_PACKAGE\n    REFERENCE\n    SQLVIEW\n    TEXT\n    VIEWER\n\nType: Character \n    ","Parameter4":"userSpecString","Description4":"Returns a string from the specified entry. \n    \nType: Character.","Parameter5":"desc","Description5":"Returns the entry description from the specified entry. \n    \nType: Character.","Parameter6":"nameValue","Description6":"Returns the name/value pairs assigned to the specified entry. Name/value pairs are site-specific; they are used for the purpose of filtering. \n\nType: Character \n","Parameter7":"rc&lt;","Description7":"Receives a return code. Type: Numeric.","Parameter8":"properties","Description8":"Identifies a comma-separated list of optional property names. Valid property names are as follows:\n\n    FILENAME\n\nType: Character \n","Parameter9":"propValue1, ...propValueN&gt;","Description9":"Returns one value for each specified property name. Valid property names are supported as follows: \n\n    FILENAME \n    output character string variable that returns the name of the file \n    (as it exists in the package).\n\nType: Character \n  "},{"Name":"PACKAGE_DESTROY","Definition":"Deletes a package.","Parameter1":"packageID","Description1":"Identifies the package to be deleted. \n    \nType: Numeric.","Parameter2":"rc","Description2":"Receives a return code. \n    \nType: Numeric."},{"Name":"PACKAGE_FIRST","Definition":"Returns the header information for the first package in the package list.","Parameter1":"pkgListId","Description1":"Identifies the list of retrieved packages. \n    \nType: Numeric.","Parameter2":"packageId","Description2":"Identifies the retrieved package. \n    \nType: Numeric.","Parameter3":"numEntries","Description3":"Returns the number of entries in the package. \n    \nType: Numeric.","Parameter4":"desc","Description4":"Returns a description of the package. \n    \nType: Character.","Parameter5":"dateTime","Description5":"Returns the date and time that the package was published, in GMT format.\n\nType: Numeric\n    ","Parameter6":"nameValue","Description6":"Returns the name/value pairs assigned to the package. Name/value pairs are site-specific; they are used for the purpose of filtering. \n\nType: Character \n    ","Parameter7":"channel","Description7":"Returns the name of a channel to which the package was published.\n\nType: Character \n    ","Parameter8":"rc&lt;","Description8":"Receives a return code.\n\nType: Numeric \n    ","Parameter9":"properties","Description9":"Identifies a comma-separated list of optional property names to be returned from the package. Valid property names are as follows:\n\n    ABSTRACT\n    EXPIRATION_DATETIME\n\nType: Character \n    ","Parameter10":"propValue1, ...propValueN&gt;","Description10":"Returns one value for each specified property. The order of the values matches the order of the property names in the properties parameter. Valid property values are defined as follows: \n\n    ABSTRACT \n    character string variable, if specified, is returned to the ABSTRACT \n    variable.\n\n    EXPIRATION_DATETIME \n    numeric variable, if specified, is returned as the package expiration\n    date-and-time stamp to the EXPIRATION_DATETIME variable. The date-and-\n    time stamp is in GMT format.\n\nType: Character or Numeric \n  "},{"Name":"PACKAGE_NEXT","Definition":"Returns the header information for the next package in the package list.","Parameter1":"pkgListId","Description1":"Identifies the list of retrieved packages. \n    \nType: Numeric.","Parameter2":"packageId","Description2":"Returns the name of the retrieved package. \n    \nType: Numeric.","Parameter3":"numEntries","Description3":"Returns the total number of entries in the package. \n    \nType: Numeric.","Parameter4":"desc","Description4":"Describes the package. \n    \nType: Character.","Parameter5":"dateTime","Description5":"Returns the date and time value that the package was published, in GMT format.\n\nType: Numeric\n    ","Parameter6":"nameValue","Description6":"Returns the name/value pairs assigned to the package. Name/value pairs are site-specific; they are used for the purpose of filtering. \n\nType: Character \n    ","Parameter7":"channel","Description7":"Returns the name of a channel to which the package was published.\n\nType: Character \n    ","Parameter8":"rc&lt;","Description8":"Receives a return code.\n\nType: Numeric \n    ","Parameter9":"properties","Description9":"Identifies a comma-separated list of optional property names to be returned from the package. Valid property names are as follows:\n\n    ABSTRACT\n    EXPIRATION_DATETIME\n\nType: Character \n    ","Parameter10":"propValue1, ...propValueN&gt;","Description10":"Returns one value for each specified property. The order of the values matches the order of the property names in the properties parameter. Valid property values are defined as follows: \n\n    ABSTRACT \n    character string variable, if specified, is returned to the ABSTRACT \n    variable.\n\n    EXPIRATION_DATETIME \n    numeric variable, if specified, is returned as the package expiration\n    date-and-time stamp to the EXPIRATION_DATETIME variable. The date-and-\n    time stamp is in GMT format.\n\nType: Character or Numeric \n  "},{"Name":"PACKAGE_TERM","Definition":"Frees all resources associated with the package list identifier.","Parameter1":"pkgListId","Description1":"Identifies the list of packages. \n    \nType: Numeric.","Parameter2":"rc","Description2":"Receives a return code. \n    \nType: Numeric."},{"Name":"RETRIEVE_CATALOG","Definition":"Retrieves a catalog from a package.","Parameter1":"entryId","Description1":"Identifies the catalog entry.\n\nType: Numeric \n    ","Parameter2":"libname","Description2":"Specifies the SAS library that will contain the retrieved catalog.\n\nType: Character \n    ","Parameter3":"memname","Description3":"Names the retrieved catalog.\n\nType: Character \n    ","Parameter4":"rc","Description4":"Receives a return code.\n\nType: Numeric \n    "},{"Name":"RETRIEVE_DATASET","Definition":"This CALL routine retrieves a data set entry from a package.","Parameter1":"entryId","Description1":"Identifies the data set entry. \n    \nType: Numeric.","Parameter2":"libname","Description2":"Specifies the SAS library that will contain the retrieved data set. \n    \nType: Character.","Parameter3":"memname","Description3":"Names the retrieved data set. \n    \nType: Character.","Parameter4":"rc&lt;","Description4":"Receives a return code. \n    \nType: Numeric.","Parameter7":"properties","Description7":"\n      Identifies a comma-separated list of optional property names. Valid property names are as follows:\n\n      DATASET_OPTIONS\n      CSV_SEPARATOR\n      CSV_FLAG\n\n      Type: Character\n    ","Parameter8":"propValue1, ...propValueN&gt;","Description8":"\n      Specifies one value for each specified property. The order of the values matches the order of the property names in the properties parameter. Valid property values are defined as follows:\n\n      DATASET_OPTIONS\n      character parameter SAS data set options that are to be applied to the\n      retrieved data set.\n\n      CSV_SEPARATOR\n      character property that applies only when the RETRIEVE_DATASET CALL routine\n      is called on a CSV file entry. When this occurs, the CSV file is transformed\n      into a SAS data set. A binary CSV file is identified by a MIME type of\n      application/x-comma-separated-values. Use the CSV_SEPARATOR property to\n      indicate the separator to be used when creating the CSV file. The default\n      separator is a comma.\n\n      CSV_FLAG\n      character property that only applies when calling the RETRIEVE_DATASET \n      CALL routine for a binary file entry. A binary CSV file is identified \n      by a MIME type of application/x-comma-separated-values. This property \n      is a CSV override flag. By default when converting this binary CSV file \n      into a SAS data set, the first line will be processed as variable names. \n      The second line will be processed as variable label names.\n\nType: Character \n    "},{"Name":"RETRIEVE_FDB","Definition":"Retrieves a financial database entry from a package.","Parameter1":"entryId","Description1":"Identifies the FDB entry. \n    \nType: Numeric.","Parameter2":"libname","Description2":"Specifies the SAS library that will contain the retrieved FDB. \n    \nType: Character.","Parameter3":"memname","Description3":"Specifies the member name of the retrieved FDB. \n    \nType: Character.","Parameter4":"rc","Description4":"Receives a return code. \n    \nType: Numeric."},{"Name":"RETRIEVE_FILE","Definition":"Retrieves an external binary or text file from a package.","Parameter1":"entryId","Description1":"Identifies the file entry. \n    \nType: Numeric.","Parameter2":"filename","Description2":"Specifies the name of the file or fileref, using the following syntax:\n\n    FILENAME: external_filename\n    FILEREF: SAS_fileref\n\nType: Character \n    ","Parameter3":"rc","Description3":"Receives a return code. \n    \nType: Numeric."},{"Name":"RETRIEVE_HTML","Definition":"Retrieves an HTML entry from a package.","Parameter1":"entryId","Description1":"Identifies the HTML entry. \n    \nType: Numeric.","Parameter2":"path","Description2":"Specifies the full designation of the location that will receive the retrieved files.\n\nType: Character \n    ","Parameter3":"body","Description3":"Returns the name of the HTML body file. \n\nType: Character \n    ","Parameter4":"bodyURL","Description4":"Returns the URL of the HTML body file. \n\nType: Character \n    ","Parameter5":"frame","Description5":"Returns the name of the HTML frame file.\n\nType: Character \n    ","Parameter6":"frameURL","Description6":"returns the URL of the HTML frame file.\n\nType: Character \n    ","Parameter7":"contents","Description7":"Returns the name of the HTML contents file. \n    \nType: Character.","Parameter8":"contentsURL","Description8":"Returns the URL of the HTML contents file. \n    \nType: Character.","Parameter9":"pages","Description9":"Returns the name of the HTML page file.\n\nType: Character \n    ","Parameter10":["pagesURL","desc"],"Description10":["Returns the URL of the HTML page file. \n    \nType: Character.","Describes the inserted HTML package entry. \n    \nType: Character."],"Parameter11":"rc&lt;","Description11":"Receives a return code. \n    \nType: Numeric.","Parameter12":"properties","Description12":"\n      Identifies a comma-separated list of optional property names. Valid property names are as follows:\n\n      ENCODING\n      BODY_TOTAL\n      FILE_TOTAL\n      COMPANION_TOTAL\n      \nType: Character\n    ","Parameter13":"propValue1, ...propValueN&gt;","Description13":"Specifies one value for each specified property. The order of the values matches the order of the property names in the properties parameter. Valid property values are defined as follows:\n\n      ENCODING\n      input character string that indicates the target encoding for the retrieved \n      HTML file. An example of a target encoding value is ISO-8859-1. Refer to \n      Publish and Retrieve Encoding Behavior for further information.\n\n      BODY_TOTAL\n      numeric output parameter that returns the total number of HTML body files \n      published as part of this set.\n\n      FILE_TOTAL\n      numeric output parameter that returns the total number of all HTML files \n      published as part of this set. This includes all body, page, contents, \n      frame, and additional HTML files and companion files.\n\n      COMPANION_TOTAL\n      numeric output parameter that returns the total number of extraneous \n      HTML files that were published as part of this set.\n\nType: Character or Numeric\n\n    "},{"Name":"RETRIEVE_MDDB","Definition":"Retrieves an MDDB entry from a package. An MDDB is a multidimensional database (not a data set) offered by SAS.","Parameter1":"entryId","Description1":"Identifies the MDDB entry. \n    \nType: Numeric.","Parameter2":"libname","Description2":"Specifies the SAS library that will contain the retrieved MDDB. \n    \nType: Character.","Parameter3":"memname","Description3":"Specifies the name of the retrieved MDDB. \n    \nType: Character.","Parameter4":"rc","Description4":"Receives a return code. \n    \nType: Numeric."},{"Name":"RETRIEVE_NESTED","Definition":"Retrieves the descriptive header information for a nested package entry ","Parameter1":"entryId","Description1":"Identifies the nested package entry. \n    \nType: Numeric.","Parameter2":"packageId","Description2":"Returns the identifier of the nested package. \n    \nType: Numeric.","Parameter3":"numEntries","Description3":"Returns the number of entries in the nested package. \n    \nType: Numeric.","Parameter4":"desc","Description4":"Returns a description of the nested package entry. \n    \nType: Character.","Parameter5":"dateTime","Description5":"Returns the date and time that the nested package was published, in GMT format.\n\nType: Numeric\n    ","Parameter6":"nameValue","Description6":"Returns the name/value pairs assigned to the package. Name/value pairs are site-specific; they are used for the purpose of filtering. \n\nType: Character \n    ","Parameter7":"rc","Description7":"Receives a return code.\n\nType: Numeric \n    "},{"Name":"RETRIEVE_PACKAGE","Definition":"This CALL routine retrieves descriptive header information for all packages.","Parameter1":"pkgListId","Description1":"Identifies the list of packages. \n    \nType: Numeric.","Parameter2":"retrievalType","Description2":"Specifies the transport to use when retrieving a package. Valid values include the following:\n\n      FROM_QUEUE\n      FROM_ARCHIVE\n      FROM_WEBDAV\n\nType: Character\n    ","Parameter3":"retrievalInfo","Description3":"Specifies transport-specific information that determines the package to retrieve. When retrieving from an archive, specify the physical path and name of the archive, excluding the extension. When retrieving from a WebDAV-compliant server, specify the URL that identifies the package to retrieve. When retrieving from MSMQ queues, use the following syntax:\n\n      MSMQ://queueHostMachineName\\queueName\n      \n      When retrieving from MQSeries queues, use the following syntax:\n        MQSERIES://queueManager:queueName \n      or\n        MQSERIES-C://queueManager:queueName \n        \nType: Character\n    ","Parameter4":"totalPackages","Description4":"Provides the total number of packages found.\n\nType: Numeric \n    ","Parameter5":"rc&lt;","Description5":"Receives a return code.\n\nType: Numeric \n    ","Parameter6":"properties","Description6":"Identifies a comma-separated list of optional property names to be returned from the package. Valid property names are as follows:\n\n      CORRELATIONID\n      FTP_PASSWORD\n      FTP_USER\n      HTTP_PASSWORD\n      HTTP_PROXY_URL\n      HTTP_USER\n      NAMESPACES\n      QUEUE_TIMEOUT\n      \nType: Character\n    ","Parameter7":"propValue1, ...propValueN&gt;","Description7":"Returns one value for each specified property. The order of the values matches the order of the property names in the properties parameter. Valid property values are defined as follows:\n\n      CORRELATIONID\n      This character string specifies retrieval of only those packages that have the\n      specified correlation identifier. (Applies only to the message queue transport.)\n\n      FTP_PASSWORD\n      When retrieving with the archive transport (FROM_ARCHIVE), this character string \n      indicates the password that is used to connect to the remote host. Specify this \n      property only when the host does not accept anonymous access. (Applies to the \n      FROM_ARCHIVE property when the FTP protocol is used.)\n\n      FTP_USER\n      When retrieving with the archive transport, this character string indicates the \n      name of the user to connect to the remote host. (Applies to the FROM_ARCHIVE \n      property when the FTP protocol is used.)\n\n      HTTP_PASSWORD\n      When retrieving with the WebDAV transport (FROM_WEBDAV), this character string \n      indicates the password used to bind to the Web server. Specify this property only \n      when the Web server does not accept anonymous access. (Applies to the FROM_ARCHIVE \n      property when the HTTP protocol is used.)\n\n      HTTP_PROXY_URL\n      When retrieving with the WebDAV transport, this character string indicates the \n      URL of the proxy server. (Applies to the archive transport when the HTTP protocol \n      is used with archive specifications.)\n\n      HTTP_USER\n      When retrieving with the WebDAV transport, this character string indicates the \n      name of the user to bind to the Web server. (Applies to the FROM_ARCHIVE property \n      when the HTTP protocol is used.)\n\n      NAMESPACES\n      When retrieving with the WebDav transport, this character string lists one or \n      more namespaces that you are interested in, using the syntax shown in the \n      following example:\n\n      a=\"http://www.host.com/myNamespace\"\n      A=\"http://www.host.com/myNamespace1\"\n      B=\"http://www.host.com/myNamespace2\"\n      \n      QUEUE_TIMEOUT      \n      This numeric value identifies the number of seconds for the poll timeout. \n      By default, if this property is not specified, the RETRIEVE_PACKAGE CALL \n      routine polls and returns immediately with the number of packages found, \n      if any. To override this default, specify the QUEUE_TIMEOUT property so \n      that the RETRIEVE_PACKAGE CALL routine will continue to poll for packages \n      until at least one package is found on the queue or until the timeout \n      occurs, whichever occurs first.\n\nType: Character or Numeric\n    "},{"Name":"RETRIEVE_REF","Definition":"Retrieves a reference from a package.","Parameter1":"entryId","Description1":"Identifies the reference entry to be retrieved. \n    \nType: Numeric.","Parameter2":"referenceType","Description2":"Returns the type of the reference, the value of which can be HTML or URL. \n    \nType: Character","Parameter3":"reference","Description3":"Returns the value of the reference. \n    \nType: Character","Parameter4":"rc","Description4":"Receives a return code. \n    \nType: Numeric."},{"Name":"RETRIEVE_SQLVIEW","Definition":"Retrieves a PROC SQL view from a package.","Parameter1":"entryId","Description1":"identifies the PROC SQL view entry. \n    \nType: Numeric","Parameter2":"libname","Description2":"Specifies the SAS library that will contain the retrieved PROC SQL view. \n    \nType: Character","Parameter3":"memname","Description3":"Specifies the name of the PROC SQL view. \n    \nType: Character","Parameter4":"rc","Description4":"Receives a return code. \n    \nType: Numeric"},{"Name":"RETRIEVE_VIEWER","Definition":"Retrieves a viewer entry from a package.","Parameter1":"entryId","Description1":"Identifies the file entry. \n    \nType: Numeric.","Parameter2":"filename","Description2":"Specifies the name of the file or fileref, using the following syntax:\n\n      FILENAME: external_filename\n      FILEREF: sas_fileref\n\nType: Character\n    ","Parameter3":"rc&lt;","Description3":"Receives a return code. \n    \nType: Numeric.","Parameter4":"properties","Description4":"Identifies a comma-separated list of optional property names. Valid property names are as follows:\n\n    ENCODING\n    \nType: Character \n    ","Parameter5":"propValue1, ...propValueN&gt;","Description5":"Specifies one value for each specified property. The order of the values must match the order of the property names in the properties parameter. Valid property values are defined as follows:\n\n      ENCODING \n      input character string that indicates the target encoding for the retrieved \n      viewer file. An example of a target encoding value is ISO-8859-1.\n\nType: Character\n    "},{"Name":"PRXCHANGE","Definition":"Performs a pattern-matching replacement.","Parameter1":"perl-regular-expression | CHARregular-expression-id","Description1":"perl-regular-expression\n  specifies a character constant, variable, or expression with a value that is a Perl regular expression.\n  Data type: CHAR\n\nregular-expression-id\n  specifies a numeric variable with a value that is a pattern identifier that is returned from the PRXPARSE function.\n  Restriction: If you use this argument, you must also use the PRXPARSE function.\n  Data type: INTEGER\n    ","Parameter2":"times","Description2":"Is a numeric constant, variable, or expression that specifies the number of times to search for a match and replace a matching pattern.\n\nData type: INTEGER\n\nTip: If the value of times is \u20131, then matching patterns continue to be replaced until the end of source is reached.","Parameter3":"source","Description3":"Specifies a character constant, variable, or expression that you want to search.\n\nData type: CHAR"},{"Name":"PRXPAREN","Definition":"Returns the last bracket match for which there is a match in a pattern.","Parameter1":"regular-expression-id","Description1":"Specifies a numeric variable with a value that is an identification number that is returned by the PRXPARSE function."},{"Name":"PRXPARSE","Definition":"Compiles a Perl regular expression (PRX) that can be used for pattern matching of a character value. \n    \nSyntax: regular-expression-id=PRXPARSE(perl-regular-expression) \n\nregular-expression-id\n  is a numeric pattern identifier that is returned by the PRXPARSE function.\n  Data type: INTEGER","Parameter1":"perl-regular-expression","Description1":"specifies a character, constant, variable, or expression with a value that is a Perl regular expression.\n\nData type: CHAR"},{"Name":"PRXPOSN","Definition":"Returns a character string that contains the value for a capture buffer. \n    \n Returned data type: CHAR","Parameter1":"regular-expression-id","Description1":"Specifies a numeric variable with a value that is a pattern identifier that is returned by the PRXPARSE function.\n\nData type: INTEGER","Parameter2":"capture-buffer","Description2":"Is a numeric constant, variable, or expression that identifies the capture buffer for which to retrieve a value:\n  \u2022If the value of capture-buffer is zero, PRXPOSN returns the entire match.\n  \u2022If the value of capture-buffer is between 1 and the number of open parentheses in the regular expression, then PRXPOSN returns the value for that capture buffer.\n  \u2022If the value of capture-buffer is greater than the number of open parentheses, then PRXPOSN returns a missing value.\n  \n  Data type: INTEGER","Parameter3":"source","Description3":"Specifies the text from which to extract capture buffers.\n\nData type: CHAR"},{"Name":"KSTRCAT","Definition":"Concatenates two or more character expressions.","Parameter1":"expression-1","Description1":"Specifies the first single-byte or double-byte character expression.\n\nRequirement: At least two expressions are required.\nData type: NCHAR","Parameter2":"expression-2[, \u2026 expression-n]","Description2":"Specifies more single-byte or double-byte character expression. \n    \nRequirement: At least one more expression is required.\nData type: NCHAR"},{"Name":"KCOUNT","Definition":"Returns the number of double-byte characters in an expression.","Parameter1":"[']source[']","Description1":"Specifies any valid expression that evaluates to a character string.\n\nData type: NCHAR\nTip: Enclose a literal string of characters in quotation marks."},{"Name":"KSTRIP","Definition":"Returns a character string with all leading and trailing blanks removed.","Parameter1":"[']string[']","Description1":"Specifies any valid expression that evaluates to a character string.\n  \nData type: NCHAR\nTip: Enclose a literal string of characters in quotation marks."},{"Name":"KUPDATE","Definition":"Inserts, deletes, and replaces character value contents.","Parameter1":"[']expression[']","Description1":"Specifies any valid expression that evaluates to a character string.\n\nData type: NCHAR\nTip: Enclose a literal string of characters in quotation marks.","Parameter2":"position","Description2":"Specifies a numeric expression that is the beginning character position.\n\nData type: INTEGER\n    ","Parameter3":"n[","Description3":"Specifies a numeric expression that is the length of the substring to be replaced.\n\nRestrictions: n cannot be larger than the length of the expression that remains in expression after position. \n  n is optional, but you cannot omit both n and characters-to-replace from the function.\n\nData type: INTEGER\nTip: If you omit n, SAS uses all of the characters in characters-to-replace to replace the values of expression.","Parameter4":"[']characters-to-replace[']]","Description4":"Specifies an expression which evaluates to a character string that replaces the contents of expression. \n    \nRestriction: characters-to-replace is optional, but you cannot omit both characters-to-replace and n from the function.\nData type: NCHAR\nTip: Enclose a literal string of characters in quotation marks."},{"Name":"KUPDATES","Definition":"Inserts, deletes, and replaces the contents of the character value according to the byte position of the character value in the argument.","Parameter1":"[']expression[']","Description1":"Specifies any valid expression that evaluates to a character string.\n\nData type: NCHAR\nTip: Enclose a literal string of characters in quotation marks.","Parameter2":"position","Description2":"Specifies a numeric expression that is the beginning character position in bytes.\n\nData type: INTEGER\n    ","Parameter3":"n[","Description3":"Specifies a numeric expression that is the length of the substring to be replaced.\n\nRestrictions: n cannot be larger than the length of the expression that remains in expression after position. \n  n is optional, but you cannot omit both n and characters-to-replace from the function.\n\nData type: INTEGER\nTip: If you omit n, SAS uses all of the characters in characters-to-replace to replace the values of expression.","Parameter4":"[']characters-to-replace[']]","Description4":"Specifies an expression which evaluates to a character string that replaces the contents of expression. \n    \nRestriction: characters-to-replace is optional, but you cannot omit both characters-to-replace and n from the function.\nData type: NCHAR\nTip: Enclose a literal string of characters in quotation marks."},{"Name":"UUIDGEN","Definition":"Returns the short form of a Universal Unique Identifier (UUID)."}],"#comment":[{},{},{},{}]}}