{"Keywords":{"Keyword":[{"Name":"ABS","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the absolute value of a numeric value expression.\n    \nReturn value data type: BIGINT if all argument data types are BIGINT, otherwise, DOUBLE  \n    \nSyntax: ABS (expression)  \n\nArguments:\nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE, BIGINT \n \nDetails:\nIf the result is a number that does not fit into the range of the argument's data type, \nthe ABS function fails."}},{"Name":"ARCOS","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the arccosine in radians. \n   \nReturn value data type: DOUBLE \n\nSyntax: ARCOS (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Range: -1 to 1 \n  Valid data types: DOUBLE \n \nDetails:\nThe ARCOS function returns the arccosine (inverse cosine) of the argument. The value \nthat is returned is specified in radians."}},{"Name":"ARSIN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the arcsine in radians. \n    \nReturn value data type: DOUBLE  \n\nSyntax: ARSIN (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Range: -1 to 1 \n  Valid data types: DOUBLE \n \nDetails:\nThe ARSIN function returns the arcsine (inverse sine) of the argument. The value that \nis returned is specified in radians."}},{"Name":"ATAN|ARTAN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the arctangent in radians. \n    \nReturn value data type: DOUBLE  \n\nSyntax: ATAN (expression)  \n\nArguments:\nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n \nDetails: \nThe ATAN function returns the 2-quadrant arctangent (inverse tangent) of the argument. \nThe value that is returned is the angle (in radians) whose tangent is x and whose value \nranges from -\u03c0/2 to \u03c0/2. \n\nComparisons:\nThe ATAN function is similar to the ATAN2 function except that ATAN2 calculates the \narctangent of the angle from the ratio of two arguments rather than from one argument."}},{"Name":"ATAN2","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the arctangent of the x and y coordinates of a right triangle, in radians. \n    \nReturn value data type: DOUBLE  \n\nATAN2 (expression-1, expression-2,)  \n\nArguments: \nexpression-1 \n  specifies any valid expression that evaluates to a numeric value. expression-1 specifies \n  the x coordinate of the end of the hypotenuse of a right triangle. \n  Valid data types: DOUBLE \n\nexpression-2 \n  specifies any valid expression that evaluates to a numeric value. expression-2 specifies \n  the y coordinate of the end of the hypotenuse of a right triangle.\n  Valid data types: DOUBLE \n \nDetails:\nThe ATAN2 function returns the arctangent (inverse tangent) of two numeric variables. \nThe result of this function is similar to the result of calculating the arc tangent \nof expression-1 / expression-2, except that the signs of both arguments are used to \ndetermine the quadrant of the result. \n \nComparisons:\nThe ATAN2 function is similar to the ATAN function except that ATAN calculates the \narctangent of the angle from the value of one argument rather than from two arguments."}},{"Name":"BAND","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the bitwise logical AND of two arguments.\n    \nReturn value data type: DOUBLE  \n\nSyntax: BAND(expression-1, expression-2)  \n\nArguments: \nexpression-1, expression-2 \n  specifies any valid expression that evaluates to a numeric value. \n\n  Range: between 0 and (2\u00b3\u00b2)-1 inclusive \u00b3\u00b2\n  Valid data types: DOUBLE"}},{"Name":"BLSHIFT","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the bitwise logical left shift of two arguments. \n    \nReturn value data type: DOUBLE  \n\nSyntax: BLSHIFT(expression-1, expression-2)  \n\nArguments: \nexpression-1 \n  specifies any valid expression that evaluates to a numeric value.\n\n  Range: between 0 and (2\u00b3\u00b2)-1 inclusive \n  Valid data types: DOUBLE \n\nexpression-2 \n  specifies any valid expression that evaluates to a numeric value.\n\n  Range: 0 to 31, inclusive \n  Valid data types: DOUBLE"}},{"Name":"BNOT","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the bitwise logical NOT of an argument. \n    \nReturn value data type: DOUBLE  \n\nSyntax: BNOT(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n\n  Range: between 0 and (2\u00b3\u00b2)-1 inclusive \n  Valid data types: DOUBLE"}},{"Name":"BOR","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the bitwise logical OR of two arguments. \n    \nReturn value data type: DOUBLE  \n\nSyntax: BOR(expression-1, expression-2)  \n\nArguments:\nexpression-1, expression-2 \n  specifies any valid expression that evaluates to a numeric value.\n\n  Range: between 0 and (2\u00b3\u00b2)-1 inclusive \n  Valid data types: DOUBLE"}},{"Name":"BRSHIFT","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the bitwise logical right shift of two arguments. \n    \nReturn value data type: DOUBLE  \n\nSyntax: BRSHIFT(expression-1, expression-2)  \n\nArguments: \nexpression-1 \n  specifies any valid expression that evaluates to a numeric value.\n\n  Range: between 0 and (2\u00b3\u00b2)-1 inclusive \n  Valid data types: DOUBLE \n\nexpression-2 \n  specifies any valid expression that evaluates to a numeric value. \n\n  Range: 0 to 31, inclusive \n  Valid data types: DOUBLE"}},{"Name":"BXOR","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the bitwise logical EXCLUSIVE OR of two arguments. \n    \nReturn value data type: DOUBLE  \n\nSyntax: BXOR(expression-1, expression-2)  \n\nArguments: \nexpression-1, expression-2 \n  specifies any valid expression that evaluates to a numeric value.\n\n  Range: between 0 and (2\u00b3\u00b2)-1 inclusive \n  Valid data types: DOUBLE"}},{"Name":"BYTE","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns one character in the ASCII or the EBCDIC collating sequence. \n    \nReturn value data type: VARCHAR  \n\nSyntax: BYTE (n)  \n\nArguments: \nn \n  specifies an integer that represents a specific ASCII or EBCDIC character. \n\n  Range: 0-255 \n  Valid data types: NCHAR \n \nDetails: \nFor EBCDIC collating sequences, n is between 0 and 255. For ASCII collating sequences, \nthe characters that correspond to values between 0 and 127 represent the standard character \nset. Other ASCII characters that correspond to values between 128 and 255 are available on \ncertain ASCII operating environments, but the information those characters represent varies \nwith the operating environment."}},{"Name":"CEIL","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the smallest integer greater than or equal to a numeric value expression. \n    \nReturn value data type: DOUBLE  \n\nSyntax: CEIL (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n   \nDetails:\nIf the result is a number that does not fit into the range of the argument's data type, \nthe CEIL function fails.\n \nComparisons: \nUnlike the CEILZ function, the CEIL function fuzzes the result. If the argument is within \n1E-12 of an integer, the CEIL function fuzzes the result to be equal to that integer. The \nCEILZ function does not fuzz the result. Therefore, with the CEILZ function you might get \nunexpected results."}},{"Name":"CEILZ","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the smallest integer that is greater than or equal to the argument, \nusing zero fuzzing.   \n\nReturn value data type: DOUBLE  \n\nSyntax: CEILZ (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n \nComparisons:\nUnlike the CEIL function, the CEILZ function uses zero fuzzing. If the argument \nis within 1E-12 of an integer, the CEIL function fuzzes the result to be equal \nto that integer. The CEILZ function does not fuzz the result. Therefore, with \nthe CEILZ function you might get unexpected results."}},{"Name":"COALESCE","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the first non-null or non-missing value from a list of numeric arguments. \n    \nReturn value data type: DOUBLE  \n\nSyntax: COALESCE(expression [ ,...expression ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n \nDetails:\nCOALESCE accepts one or more numeric expressions. The COALESCE function checks the value \nof each expression in the order in which they are listed and returns the first non-null \nor non-missing value. If only one value is listed, then the COALESCE function returns the \nvalue of that argument. If all the values of all expressions are null or missing, then the \nCOALESCE function returns a null or a missing value depending on whether you are in ANSI \nmode or SAS mode."}},{"Name":"COALESCEC","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the first non-null or non-missing value from a list of character arguments. \n    \nReturn value data type: NCHAR  \n\nSyntax: COALESCEC(expression [ ,...expression ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character value. \n\n  Valid data types: NCHAR \n \nDetails:\nCOALESCEC accepts one or more character expressions. The COALESCEC function checks the \nvalue of each expression in the order in which they are listed and returns the first \nnon-null or non-missing value. If only one value is listed, then the COALESCEC function \nreturns the value of that expression. If all the values of all expressions are null or \nmissing, then the COALESCEC function returns a null or missing value depending on whether \nyou are in ANSI mode or SAS mode."}},{"Name":"COLLATE","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a character string in ASCII or EBCDIC collating sequence. \n    \nValid for Data Types: NCHAR \n\nSyntax: COLLATE (start-position [, end-position ] )  \n\nArguments: \nstart-position \n  specifies the numeric position in the collating sequence of the first character to be returned. \n\n  Interaction: If you specify only start-position, COLLATE returns consecutive characters from \n  that position to the end of the collating sequence or up to 255 characters, whichever comes first. \n  Valid data types: NCHAR \n\nend-position \n  specifies the numeric position in the collating sequence of the last character to be returned.\n\n  The maximum end-position for the EBCDIC collating sequence is 255. For ASCII collating sequences, \n  the characters that correspond to end-position values between 0 and 127 represent the standard \n  character set. Other ASCII characters that correspond to end-position values between 128 and 255 \n  are available on certain ASCII operating environments, but the information that those characters \n  represent varies with the operating environment.\n\n  Requirement: end-position must be larger than start-position  \n  Valid data types: NCHAR \n  Tip: If you specify end-position, COLLATE returns all character values in the collating sequence \n  between start-position and end-position, inclusive. \n \nDetails: \nIf you request a string longer than the remainder of the sequence, COLLATE returns a \nstring through the end of the sequence."}},{"Name":"COMPBL","Type":"SAS_FUNCTION","Help":{"#cdata":"Removes multiple blanks from a character string. \n    \nReturn value data types: NCHAR  \n\nDetails: \nThe COMPBL function removes multiple blanks in a character string by translating each \noccurrence of two or more consecutive blanks into a single blank.\n \nComparisons: \nThe COMPRESS function removes every occurrence of the specific character from a string. \nIf you specify a blank as the character to remove from the source string, the COMPRESS \nfunction is similar to the COMPBL function. However, the COMPRESS function removes all \nblanks from the source string, while the COMPBL function compresses multiple blanks to \na single blank and has no effect on a single blank."}},{"Name":"COMPRESS","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a character string with specified characters removed from the original string. \n    \nReturn value data type: CHAR, NCHAR  \n\nSyntax: COMPRESS(character-expression [ , character-list-expression ] )  \n\nArguments: \ncharacter-expression \n  specifies any valid expression that evaluates to a character expression and \n  from which specified characters will be removed. \n\n  Requirement: Enclose a literal string of characters in single quotation marks. \n  Valid data types: CHAR, NCHAR \n\ncharacter-list-expression \n  specifies a variable or any valid expression that initializes a list of characters.\n\n  By default, the characters in this list are removed from character-expression. \n\n  Requirement: Enclose a literal string of characters in single quotation marks. \n  Valid data types: CHAR, NCHAR \n \nDetails: \nThe COMPRESS function allows null arguments. A null argument is treated as a string \nthat has a length of zero."}},{"Name":"COS","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the cosine in radians. \n    \nReturn value data type: DOUBLE \n\nSyntax: COS (expression)  \n\nArguments: \nexpression \n  is any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE"}},{"Name":"COSH","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the hyperbolic cosine in radians. \n    \nReturn value data type: DOUBLE  \n \nSyntax: COSH (expression)  \n\nArguments: \nexpression \n  is any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n \nDetails: \nThe COSH function returns the hyperbolic cosine of the argument, given by\n\n(\u03f5^argument + \u03f5^-argument)/2"}},{"Name":"CSS","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the corrected sum of squares. \n    \nReturn value data type: DOUBLE  \n\nSyntax: CSS(expression [, ...expression] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n\n  Requirement: At least one non-null or non-missing expression is required. \n  Valid data types: DOUBLE"}},{"Name":"CV","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the coefficient of variation. \n    \nReturn value data type: DOUBLE \n\nSyntax: CV(expression [, ...expression ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n\n  Requirement: At least two arguments are required. \n  Valid data types: DOUBLE"}},{"Name":"DATE|TODAY","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the current date as a SAS date value. \n\nReturn value data type: DOUBLE  \n\nSyntax: DATE()  \n \nDetails: \nThe DATE function does not take any arguments. The SAS date value returned is the number \nof days from January 1, 1960 to the current date."}},{"Name":"DATEJUL","Type":"SAS_FUNCTION","Help":{"#cdata":"Converts a Julian date to a SAS date value. \n    \nReturn value data type: DOUBLE  \n \nSyntax: DATEJUL(julian-date)  \n\nArguments:\n  julian-date \n  specifies any valid expression that evaluates to a numeric value and that represents a Julian date. A Julian date is a date in the form yyddd or yyyyddd, where yy or yyyy is a two-digit or four-digit integer that represents the year and ddd is the number of the day of the year. The value of ddd must be between 1 and 365 (or 366 for a leap year).\n\n  Valid data types: DOUBLE \n \nDetails: \nA SAS date value is the number of days from January 1, 1960 to a specified date. The \nDATEJUL function returns the number of days from January 1, 1960 to the Julian date \nspecified in julian-date."}},{"Name":"DATEPART","Type":"SAS_FUNCTION","Help":{"#cdata":"Extracts the date from a SAS datetime value. \n    \nReturn value data type: DOUBLE  \n\nSyntax: DATEPART(datetime)  \n\nArguments: \ndatetime \n  specifies any valid expression that represents a SAS datetime value.\n\n  Valid data types: DOUBLE \n \nDetails:\nA SAS datetime value is the number of seconds between January 1, 1960 and the hour, \nminute, and seconds within a specific date. The DATEPART function determines the date \nportion of the SAS datetime value and returns the date as a SAS date value, which is \nthe number of days from January 1, 1960."}},{"Name":"DATETIME","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the current date and time of day as a SAS datetime value. \n    \nReturn value data type: DOUBLE  \n\nSyntax: DATETIME()  \n\nDetails: \nThe DATETIME function does not take any arguments. The SAS datetime value returned \nis the number of seconds from January 1, 1960 to the current date and time."}},{"Name":"DAY","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the day of the month from a SAS date value. \n    \nReturn value data type: DOUBLE  \n\nSyntax: DAY(date)  \n\nArguments: \ndate \n  specifies any valid expression that represents a SAS date value.\n\n  Valid data types: DOUBLE \n \nDetails: \nThe DAY function produces an integer from 1 to 31 that represents the day of the month.\n\nA SAS date value is the number of days from January 1, 1960 to a specific date."}},{"Name":"DEQUOTE","Type":"SAS_FUNCTION","Help":{"#cdata":"Removes matching single quotation marks from a character string that begins with \na single quotation mark, and deletes all characters to the right of the closing \nquotation mark.  \n\nReturn value data types: NCHAR  \nSyntax: DEQUOTE(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string. \n  Valid data types: NCHAR \n \nDetails:\nThe value that is returned by the DEQUOTE function depends on the first character or the \nfirst two characters in expression:\n\n  o If the first character of expression is not a quotation mark, DEQUOTE returns a syntax error.\n  o If the first character of expression is a single quotation mark, the DEQUOTE function removes \n    that single quotation mark from the result. DEQUOTE then scans expression from left to right, \n    looking for more single quotation marks or double quotation marks . \n\n    All paired single quotation marks are reduced to a single quotation mark. \n    All paired double quotation marks are retained.\n\n    If a double quotation mark is the second character, DEQUOTE removes the double quotation mark \n    from the result. DEQUOTE then scans expression from left to right. If a matching double quotation \n    mark is found, the text between the double quotation marks is returned. Any text to the right of \n    the closing double quotation mark, to the end of expression is removed from the result.\n\n    The first non-paired single quotation mark in expression is the closing single quotation mark and \n    is removed. \n\n    If a close parentheses follows the close single quotation mark, the function returns the dequoted \n    string. If characters exist to the right of the close single quotation mark, the function results \n    in a syntax error and the error is printed in the SAS log.\n\n  o If expression is enclosed in double quotation marks, the DEQUOTE function returns a null or missing value.\n\nNote: If expression is a constant enclosed by quotation marks, those quotation marks are not part \nof the value of expression. Therefore, you do not need to use DEQUOTE to remove the quotation marks \nthat denote a constant."}},{"Name":"DHMS","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a SAS datetime value from date, hour, minute, and second values. \n    \nReturn value data type: DOUBLE  \n\nSyntax: DHMS(date,hour,minute,second)  \n\nArguments:\n\n  date \n    specifies any valid expression that represents a SAS date value.\n    Valid data types: DOUBLE \n  \n  hour \n    specifies a numeric expression that represents an integer from 1 through 12.\n    Valid data types: DOUBLE \n\n  minute \n    specifies a numeric expression that represents an integer from 1 through 59. \n    Valid data types: DOUBLE \n\n  second \n    specifies a numeric expression that represents an integer from 1 through 59. \n    Valid data types: DOUBLE \n \nDetails: \nThe DHMS function returns a numeric value that represents a SAS datetime value. \nThis numeric value can be either positive or negative."}},{"Name":"DIGAMMA","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the value of the digamma function. \n    \nReturn value data type: DOUBLE  \n\nSyntax: DIGAMMA(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n\n  Restriction: Zero and negative integers are not valid. \n  Valid data types: DOUBLE \n\nDetails:\nThe DIGAMMA function returns the ratio that is given by\n\n\u03a8(x) = \u0393\u0384(x)/ \u0393(x)\n\nwhere \u0393() and \u0393\u0384() denote the Gamma function and its derivative, respectively. For expression > 0, \nthe DIGAMMA function is the derivative of the LGAMMA function."}},{"Name":"EXP","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the value of the e constant raised to a specified power. \n    \nReturn value data type: DOUBLE  \n\nSyntax: EXP (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n \nDetails:\nThe EXP function raises the constant e, which is approximately given by 2.71828, \nto the power that is supplied by the argument. The result is limited by the maximum \nvalue of a double decimal value on the computer."}},{"Name":"FLOOR","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the largest integer less than or equal to a numeric value expression. \n    \nReturn value data type: DOUBLE  \n\nSyntax: FLOOR (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n \nDetails:\nIf expression is within 1E-12 of an integer, the function returns that integer. If the \nresult is a number that does not fit into the range of a DOUBLE, the FLOOR function fails.\n\nComparisons: \nThe FLOOR function fuzzes the results so that if the results are within 1E-12 of an integer, \nthe FLOOR function returns that integer. The FLOORZ function uses zero fuzzing. Therefore, \nwith the FLOORZ function you might get unexpected results."}},{"Name":"FLOORZ","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the largest integer that is less than or equal to the argument, using zero fuzzing. \n    \nReturn value data type: DOUBLE  \n\nSyntax: FLOORZ (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n \nComparisons: \nUnlike the FLOOR function, the FLOORZ function uses zero fuzzing. If the argument is within \n1E-12 of an integer, the FLOOR function fuzzes the result to be equal to that integer. The \nFLOORZ function does not fuzz the result. Therefore, with the FLOORZ function you might get \nunexpected results."}},{"Name":"FUZZ","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the nearest integer if the argument is within 1E-12 of that integer. \n    \nReturn value data type: DOUBLE  \n\nSyntax: FUZZ(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n \nDetails: \nThe FUZZ function returns the nearest integer value if the expression is within 1E-12 of the \ninteger (that is, if the absolute difference between the integer and argument is less than \n1E-12). Otherwise, the expression is returned."}},{"Name":"GAMMA","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the value of the gamma function. \n    \nReturn value data type: DOUBLE  \n\nSyntax: GAMMA(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n\n  Restriction: Nonpositive integers are invalid. \n  Valid data types: DOUBLE \n \nDetails:\nThe GAMMA function returns the integral, which is given by\n\nGAMMA(x)=\u222bt^(x-1) \u03f5^(-t) dt\n\nFor positive integers, GAMMA(x) is (x - 1)!. This function is commonly denoted by \u0393(x).\n\n"}},{"Name":"GCD","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the greatest common divisor for a set of integers. \n    \nReturn value data type: DOUBLE  \n\nSyntax: GCD (expression-1, expression-2 [, ... expression-n ] )  \n\nArguments:\nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Requirements: At least two arguments are required. \n  Valid data types: DOUBLE \n \nDetails:\nThe GCD (greatest common divisor) function returns the greatest common divisor of one \nor more integers. For example, the greatest common divisor for 30 and 42 is 6. The \ngreatest common divisor is also called the highest common factor."}},{"Name":"GEOMEAN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the geometric mean. \n    \nReturn value data type: DOUBLE  \n\nSyntax: GEOMEAN(expression [, ....expression ] )  \n\nArguments: \nexpression \n  is any valid expression that evaluates to a non-negative numeric value.\n\n  Valid data types: DOUBLE \n \nDetails:\nIf any argument is negative, then the result is a null or missing value. A message \nappears in the log that the negative argument is invalid. If any argument is zero, \nthen the geometric mean is zero. If all the arguments are null or missing values, \nthen the result is a null or missing value. Otherwise, the result is the geometric \nmean of the non-null or non-missing values."}},{"Name":"GEOMEANZ","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the geometric mean, using zero fuzzing. \n    \nReturn value data type: DOUBLE \n\nSyntax: GEOMEANZ(expression [, ... expression ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a non-negative numeric value.\n\n  Valid data types: DOUBLE \n \nDetails: \nIf any argument is negative, then the result is a null or missing value. A message \nappears in the log that the negative argument is invalid. If any argument is zero, \nthen the geometric mean is zero. If all the arguments are null or missing values, \nthen the result is a null or missing value. Otherwise, the result is the geometric \nmean of the non-null or non-missing values."}},{"Name":"HARMEAN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the harmonic mean. \n    \nReturn value data type: DOUBLE  \n\nSyntax: HARMEAN(expression [, ...expression ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a non-negative numeric value.\n\n  Valid data types: DOUBLE \n \nDetails:\nIf any argument is negative, then the result is a null or missing value. A message \nappears in the log that the negative argument is invalid. If all the arguments are \nnull or missing values, then the result is a null or missing value. Otherwise, the \nresult is the harmonic mean of the non-null or non-missing values. \n\nIf any argument is zero, then the harmonic mean is zero. Otherwise, the harmonic \nmean is the reciprocal of the arithmetic mean of the reciprocals of the values."}},{"Name":"HARMEANZ","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the harmonic mean, using zero fuzzing. \n    \nReturn value data type: DOUBLE  \n\nSyntax: HARMEANZ(expression [, ...expression ] ) \n\nArguments: \n  expression \n  specifies any valid expression that evaluates to a non-negative numeric value.\n\n  Valid data types: DOUBLE \n \nDetails:\nIf any argument is negative, then the result is a null or value. A message appears \nin the log that the negative argument is invalid. If all the arguments are null or \nvalues, then the result is a null or value. Otherwise, the result is the harmonic \nmean of the non-null or non-missing values. \n\nIf any argument is zero, then the harmonic mean is zero. Otherwise, the harmonic \nmean is the reciprocal of the arithmetic mean of the reciprocals of the values."}},{"Name":"HMS","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a SAS time value from hour, minute, and second values. \n    \nReturn value data type: DOUBLE  \n\nSyntax: HMS (hour, minute, second)  \n\nArguments: \nhour \n  specifies a numeric expression that represents an integer from 1 through 12.\n\n  Valid data types: DOUBLE \n  \nminute \n  specifies a numeric expression that represents an integer from 1 through 59. \n\n  Valid data types: DOUBLE \n\nsecond \n  specifies a numeric expression that represents an integer from 1 through 59.\n\n  Valid data types: DOUBLE \n \nDetails:\nThe HMS function returns a numeric value that represents a SAS time value. A SAS time \nvalue is a number that represents the number of seconds since midnight of the current day."}},{"Name":"HOUR","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the hour from a SAS time or datetime value. \n    \nReturn value data type: DOUBLE  \n\nSyntax: HOUR( [time | datetime ] )  \n\nArguments: \ntime \n  specifies any valid expression that represents a SAS time value.\n\n  Valid data types: DOUBLE \n\ndatetime\n  specifies any valid expression that represents a SAS datetime value.\n\n  Valid data types: DOUBLE \n  \nDetails:\nThe HOUR function returns a numeric value that represents the hour from a SAS time \nor datetime value. Numeric values can range from 0 through 23. HOUR always returns \na positive number."}},{"Name":"INDEX","Type":"SAS_FUNCTION","Help":{"#cdata":"Searches a character expression for a string of characters, and returns the \nposition of the string's first character for the first occurrence of the string.   \n\nReturn value data type: DOUBLE  \n\nSyntax: INDEX(target-expression, search-expression)  \n\nArguments: \ntarget-expression \n  specifies any valid expression that evaluates to a character string.\n\n  Valid data types: NCHAR \n  \nsearch-expression \n  specifies any valid expression that evaluates to a character string to search for in target-expression.\n\n  Valid data types: NCHAR \n  Tip: Enclose a literal string of characters in single quotation marks. \n \nDetails:\nThe INDEX function searches target-expression, from left to right, for the first \noccurrence of the string specified in search-expression, and returns the position \nin target-expression of the string's first character. If the string is not found \nin target-expression, INDEX returns a value of 0. If there are multiple occurrences \nof the string, INDEX returns only the position of the first occurrence. \n \nComparisons:\nThe VERIFY function returns the position of the first character in target-expression \nthat does not contain search-expression where the INDEX function returns the position \nof the first occurrence of search-expression that is present in target-expression."}},{"Name":"INDEXC","Type":"SAS_FUNCTION","Help":{"#cdata":"Searches a character expression for specified characters and returns the position \nof the first occurrence of any of the characters. \n\nReturn value data type: DOUBLE  \n\nSyntax: INDEXC(target-expression, search-expression [, ...search-expression ] )  \n\nArguments: \ntarget-expression \n  specifies any valid expression that evaluates to a character string that is searched.\n\n  Valid data types: NCHAR \n\nsearch-expression \n  specifies the characters to search for in target-expression.\n\n  Valid data types: NCHAR \n  Tip: Enclose a literal string of characters in single quotation marks. \n \nDetails:\nThe INDEXC function searches target-expression, from left to right, for the first \noccurrence of any character present in the search expressions and returns the position \nin target-expression of that character. If none of the characters in the search \nexpressions are found in target-expression, INDEXC returns a value of 0.\n \nComparisons:\nThe INDEXC function searches for the first occurrence of any individual character that \nis present within the search expression, whereas the INDEX function searches for the \nfirst occurrence of the search expression as a pattern."}},{"Name":"INDEXW","Type":"SAS_FUNCTION","Help":{"#cdata":"Searches a character expression for a string that is specified as a word, and \nreturns the position of the first character in the word. \n\nReturn value data type: DOUBLE  \nSyntax: INDEXW(target-expression, search-expression [, delimiter] )  \n\nArguments:\ntarget-expression \n  specifies any valid expression that evaluates to a character string that is searched. \n  Valid data types: NCHAR \n  \nsearch-expression \n  specifies any valid expression that evaluates to a character string and that is searched \n  for in target-expression. SAS removes the leading and trailing delimiters from search-expression.\n  Valid data types: NCHAR \n  Tip: INDEXW has the following behavior when search-expression contains blank spaces or \n  has a length of 0: \n  If both target-expression and search-expression contain only blank spaces or have a length \n  of 0, then INDEXW returns a value of 1. \n\n  If search-expression contains only blank spaces or has a length of 0, and target-expression \n  contains character or numeric data, then INDEXW returns a value of 0.  \n\ndelimiter \n  specifies a character expression that you want INDEXW to use as a word separator in the \n  character strings. The default delimiter is the blank character. \n  Tip: If the blank character is a delimiter, order it so that it is not the last character \n  in delimiter. Trailing blanks are ignored because delimiter is trimmed of trailing blanks. \n  Valid data types: NCHAR \n  \nDetails:\nThe INDEXW function searches target-expression, from left to right, for the first occurrence \nof search-expression and returns the position in target-expression of the substring's first \ncharacter. If the substring is not found in target-expression, then INDEXW returns a value \nof 0. If there are multiple occurrences of the string, then INDEXW returns only the position \nof the first occurrence.\n\nThe substring pattern must begin and end on a word boundary. For INDEXW, word boundaries are \ndelimiters, the beginning of target-expression, and the end of target-expression.\n \nComparisons: \nThe INDEXW function searches for strings that are words, whereas the INDEX function searches \nfor patterns as separate words or as parts of other words. INDEXC searches for any characters \nthat are present in the excerpts."}},{"Name":"INT","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the integer value, fuzzed to avoid unexpected floating-point results. \n    \nReturn value data type: DOUBLE  \n\nSyntax: INT(expression)  \n\nArguments: \nexpression \n  specifies any expression that evaluates to a numeric value. \n  Valid data types: DOUBLE \n \nDetails: \nThe INT function returns the integer portion of the argument (truncates the decimal portion). \nIf the argument's value is within 1E-12 of an integer, the function results in that integer. \nIf the value of expression is positive, the INT function has the same result as the FLOOR \nfunction. If the value of expression is negative, the INT function has the same result as \nthe CEILING function. \n \nComparisons:\nUnlike the INTZ function, the INT function fuzzes the result. If the argument is within \n1E-12 of an integer, the INT function fuzzes the result to be equal to that integer. The \nINTZ function does not fuzz the result. Therefore, with the INTZ function you might get \nunexpected results."}},{"Name":"INTZ","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the integer portion of the argument, using zero fuzzing. \n    \nReturn value data type: DOUBLE  \n\nSyntax: INTZ (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n \nDetails: \nThe following rules apply: \n\n  o If the value of the argument is an exact integer, INTZ returns that integer.\n\n  o If the argument is positive and not an integer, INTZ returns the largest integer that is less than the argument. \n\n  o If the argument is negative and not an integer, INTZ returns the smallest integer that is greater than the argument.\n \nComparisons: \nUnlike the INT function, the INTZ function uses zero fuzzing. If the argument is within 1E-12 \nof an integer, the INT function fuzzes the result to be equal to that integer. The INTZ function \ndoes not fuzz the result. Therefore, with the INTZ function you might get unexpected results."}},{"Name":"IQR","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the interquartile range. \n    \nReturn value data type: DOUBLE \n\nSyntax: IQR(expression [, ...expression ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n \nDetails: \nIf all arguments have null or missing values, the result is a null or missing value \ndepending on whether you are in ANSI mode or SAS mode.\n\nOtherwise, the result is the interquartile range of the non-null or non-missing values. \nThe formula for the interquartile range is the same as the one that is used in the\nBase SAS UNIVARIATE procedure."}},{"Name":"JULDATE","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the Julian date from a SAS date value. \n    \nReturn value data type: DOUBLE  \nSyntax: JULDATE(date)  \n\nArguments: \ndate \n  specifies any valid expression that represents a SAS date value. \n  Valid data types: DOUBLE \n \nDetails:\nA SAS date value is a number that represents the number of days from January 1, 1960 \nto a specific date. The JULDATE function converts a SAS date value to a Julian date. \nIf date falls within the 100-year span defined by the system option YEARCUTOFF=, the \nresult has three, four or five digits: In a five digit result, the first two digits \nrepresent the year, and the next three digits represent the day of the year (1 to 365, \nor 1 to 366 for leap years). As leading zeros are dropped from the result, the year \nportion of a Julian date can be omitted (for years ending in 00) or it can have only \none digit (for years ending 01 - 09). Otherwise, the result has seven digits: the \nfirst four digits represent the year, and the next three digits represent the day \nof the year.\n\nFor years that end between 00 - 09, you can format the five digit Julian date by \nusing the Z5. format. \n\nComparisons: \nThe function JULDATE7 is similar to JULDATE except that JULDATE7 always returns a \nfour digit year. Thus JULDATE7 is year 2000 compliant because it eliminates the need \nto consider the implications of a two digit year."}},{"Name":"JULDATE7","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a seven-digit Julian date from a SAS date value. \n    \nReturn value data type: DOUBLE  \n\nSyntax: JULDATE7(date)  \n\nArguments: \ndate \n  specifies any valid expression that represents a SAS date value. \n  Valid data types: DOUBLE \n \nDetails:\nA SAS date value is a number that represents the number of days from January 1, 1960 \nto a specific date. The JULDATE7 function returns a seven digit Julian date from a SAS \ndate value. The first four digits represent the year, and the next three digits represent \nthe day of the year. \n\nComparisons: \nThe function JULDATE7 is similar to JULDATE except that JULDATE7 always returns a four \ndigit year. Thus JULDATE7 is year 2000 compliant because it eliminates the need to consider \nthe implications of a two digit year."}},{"Name":"KURTOSIS","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the kurtosis. \n    \nReturn value data type: DOUBLE  \n\nSyntax \nKURTOSIS(expression-1, expression-2, expression-3, expression-4 [ ,...expression-n ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Requirement: At least four non-null or non-missing arguments are required. Otherwise, \n  the function returns a null or missing value.  \n  Valid data types: DOUBLE \n \nDetails: \nKurtosis is primarily a measure of the heaviness of the tails of a distribution. Large \nkurtosis values indicate that the distribution has heavy tails. \n\nNull values and missing values are ignored and are not included in the computation.\n\nIf all non-null or non-missing arguments have equal values, the kurtosis is mathematically \nundefined and the KURTOSIS function returns a null or missing value."}},{"Name":"LARGEST","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the kth largest non-null or non-missing value. \n    \nReturn value data type: DOUBLE  \nSyntax: LARGEST (k, expression [, ...expression] )  \n\nArguments: \nk \n  specifies any valid expression that evaluates to a numeric value that represents \n  the largest value to return. For example, if k is 2, the LARGEST function returns \n  the second largest value from the list of expressions.\n\n  Valid data types: DOUBLE \n  See: TSPL Expressions \n\nexpression \n  specifies any valid expression that evaluates to a numeric value and that is to be searched. \n  Valid data types: DOUBLE \n  See: TSPL Expressions \n \nDetails:\nIf k is null or missing, less than zero, or greater than the number of values, the result \nis a null or missing value. Otherwise, if k is greater than the number of non-null or \nnon-missing values, the result is a null or missing value."}},{"Name":"LCM","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the least common multiple for a set of integers. \n    \nReturn value data type: DOUBLE \n\nSyntax \nLCM (expression-1, expression-2 [ ,...expression-n ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to an integer.\n\n  Requirements: At least two arguments are required. \n  Valid data types: DOUBLE \n \nDetails: \nThe least common multiple is the smallest number that two or more numbers will \ndivide into evenly."}},{"Name":"LEFT","Type":"SAS_FUNCTION","Help":{"#cdata":"Left aligns a character expression. \n    \nReturn value data type: VARCHAR, NVARCHAR  \n\nSyntax: LEFT(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string. \n  Valid data types: CHAR, NCHAR \n \nDetails: \nLEFT returns a character string with leading blanks moved to the end of the value."}},{"Name":"LENGTH|LENGTHN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the length of a character string, excluding trailing blanks, and returns a 0 \nfor a blank character string. \n\nReturn value data type: DOUBLE  \n\nSyntax: LENGTH(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string. \n  Valid data types: CHAR, NCHAR \n \nDetails:\nThe LENGTH function returns an integer that represents the position of the rightmost \nnon-blank character or number in expression. If the value of expression is a blank \ncharacter, LENGTH returns a value of 0. If expression is a numeric expression, LENGTH \nconverts and processes the expression as a character expression. \n\nComparisons: \nThe LENGTH function returns the length of a character string, excluding trailing blanks, \nwhereas the LENGTHC function returns the length of a character string, including trailing blanks.\n\nThe LENGTH function returns the length of a character string, excluding trailing blanks,\nwhereas the LENGTHM function returns the amount of memory in bytes that is allocated for \na character string."}},{"Name":"LENGTHC","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the length of a character string, including trailing blanks. \n    \nReturn value data type: DOUBLE  \nSyntax: LENGTHC(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string. \n  Valid data types: NCHAR \n  \nDetails:\nThe LENGTHC function returns an integer that represents the position of the rightmost \nblank or non-blank character in expression. For fixed-length variables, LENGTHC returns \nthe declared length of the variable. If the value of expression is missing and contains \nblanks, LENGTHC returns the number of blanks in expression. If expression is a numeric \nexpression, LENGTHC converts and processes the numeric expression as a character expression. \n\nComparisons: \n  o The LENGTHC function returns the length of a character string, including trailing blanks, \n    whereas the LENGTH function returns the length of a character string, excluding trailing \n    blanks. LENGTHC always returns a value that is greater than or equal to the value returned \n    by LENGTH.\n\n  o The LENGTHC function returns the length of a character string, including trailing blanks, \n    whereas the LENGTHM function returns the amount of memory in bytes that is allocated for \n    a character string. For fixed-length character strings, LENGTHC and LENGTHM always return \n    the same value. For varying-length character strings, LENGTHC always returns a value that \n    is less than or equal to the value returned by LENGTHM."}},{"Name":"LENGTHM","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the amount of memory, in characters, that is allocated for a character string. \n    \nReturn value data type: DOUBLE  \nSyntax: LENGTHM(character-expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string. \n  Valid data types: NCHAR \n \nDetails: \nThe LENGTHM function returns an integer that represents the amount of memory in bytes \nthat is allocated for the expression. If expression is a numeric expression (either \ninitialized or uninitialized), SAS automatically converts the numeric value to a right-\njustified character string by using the BEST12. format. In this case, LENGTHM returns \na value of 12 and writes a note in the SAS log stating that the numeric values have \nbeen converted to character values.\n \nComparisons: \nThe LENGTHM function returns the amount of memory in characters that is allocated for \na character string, whereas the LENGTH and LENGTHC functions return the length of a \ncharacter string. LENGTHM always returns a value that is greater than or equal to the \nvalues returned by LENGTH and LENGTHC."}},{"Name":"LGAMMA","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the natural logarithm of the Gamma function. \n    \nReturn value data type: DOUBLE  \n\nSyntax: LGAMMA(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Requirement: Must be a positive number. \n  Valid data types: DOUBLE"}},{"Name":"LOG","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the natural logarithm (base e) of a numeric value expression. \n    \nReturn value data type: DOUBLE \n \nSyntax: LOG (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE"}},{"Name":"LOG10","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the base-10 logarithm of a numeric value expression. \n    \nReturn value data type: DOUBLE  \n\nSyntax: LOG10 (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Requirement: Must be a positive number. \n  Valid data types: DOUBLE"}},{"Name":"LOG2","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the base 2 logarithm of a numeric value expression. \n    \nReturn value data type: DOUBLE  \n\nSyntax: LOG2 (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Requirement: Must be a positive number. \n  Valid data types: DOUBLE"}},{"Name":"LOWCASE","Type":"SAS_FUNCTION","Help":{"#cdata":"Converts all letters in a character expression to lowercase. \n    \nReturn value data type: VARCHAR, NVARCHAR  \nSyntax: LOWCASE(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string. \n  Requirement: Literal character expressions must be enclosed in single quotation marks. \n  Valid data types: CHAR, NCHAR \n  \nDetails: \nThe LOWCASE function copies a character expression, converts all uppercase letters to \nlowercase letters, and returns the altered value as a result.\n \nComparisons: \nThe UPCASE function converts all letters in an argument to uppercase letters. The LOWCASE \nfunction converts all letters in an argument to lowercase letters."}},{"Name":"MAX","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the largest value from a list of arguments. \n    \nReturn value data type: BIGINT if all argument data types are BIGINT, otherwise, DOUBLE  \nSyntax: MAX(expression-1, expression-2 [ ,...expression-n ] )  \n\nArguments: \nexpression \n  is any valid expression that evaluates to a numeric value. \n  Requirement: At least two arguments are required. \n  Valid data types: DOUBLE, BIGINT \n  \nComparisons: \nThe MAX function returns the largest value from a list of arguments. The MAX operator (<>) \nreturns the largest of two operands. \n\nThe MAX function returns a null or missing value only if all arguments are null or missing. \nThe MAX operator (<>) returns a null or missing value only if both operands are null or \nmissing. In this case, it returns the value of the operand that is higher in the sort order \nfor null or missing values."}},{"Name":"MDY","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a SAS date value from month, day, and year values. \n    \nReturn value data type: DOUBLE  \n\nSyntax: MDY(month, day, year)  \n\nArguments: \nmonth \n  specifies a numeric expression that represents an integer from 1 through 12. \n  Valid data types: DOUBLE \n\nday \n  specifies a numeric expression that represents an integer from 1 through 31. \n  Valid data types: DOUBLE \n  \nyear \n  specifies a numeric expression that represents a two-digit or four-digit year. \n  The YEARCUTOFF= system option defines the year value for two-digit dates. \n  Valid data types: DOUBLE"}},{"Name":"MEAN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the arithmetic mean (average) of the non-null or non-missing arguments. \n    \nReturn value data type: DOUBLE  \n\nSyntax: MEAN(expression [, ...expression] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n\n  Requirement: At least one non-null or non-missing argument is required. Otherwise, \n  the function returns a null or missing value.  \n  Valid data types: DOUBLE \n \nComparisons:\nThe GEOMEAN function returns the geometric mean, the HARMEAN function returns the harmonic \nmean, and the MEDIAN function returns the median of the non-null or non-missing values, \nwhereas the MEAN function returns the arithmetic mean (average)."}},{"Name":"MIN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the smallest value. \n    \nReturn value data type: BIGINT if all argument data types are BIGINT, otherwise, DOUBLE  \n\nSyntax: MIN(expression-1, expression-2 [, ...expression-n ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n  Requirement: At least two arguments are required.  \n  Valid data types: DOUBLE, BIGINT \n  \nComparisons: \nThe MIN function returns the smallest value from a list of values. The MIN operator (><) \nreturns the smallest value of two operands. \n\nThe MIN function returns a null or missing value only if all arguments are null or missing. \nThe MIN operator returns a null or missing value only if either operand is null or missing. \nIn this case, it returns the value of the operand that is lower in the sort order for null \nor missing values."}},{"Name":"MINUTE","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the minute from a SAS time or datetime value. \n    \nReturn value data type: DOUBLE  \n\nSyntax: MINUTE(time | datetime)  \n\nArguments: \ntime \n  specifies any valid expression that represents a SAS time value.\n  Valid data types: DOUBLE \n\ndatetime \n  specifies any valid expression that represents a SAS datetime value.\n\n  Valid data types: DOUBLE \n \nDetails: \nThe MINUTE function returns an integer that represents a specific minute of the hour. \nMINUTE always returns a positive number in the range of 0 through 59. Null or missing \nvalues are ignored."}},{"Name":"MISSING","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a number that indicates whether the argument contains a missing value. \n    \nReturn value data type INTEGER  \n\nnumeric-expression \n  specifies any valid expression that evaluates to a numeric value. \n  Valid data types: DOUBLE \n\ncharacter-expression \n  specifies any valid expression that evaluates to a character value. \n  Valid data types: CHAR, NCHAR \n \nDetails:\nThe MISSING function checks a numeric or character expression for a null or missing value, \nand returns a numeric result. If the argument does not contain a null or missing value, SAS \nreturns a value of 0. If the argument contains a null or missing value, SAS returns a value of 1. \n\ncharacter-expression is defined as having a missing value if the result of the expression \ncontains all blank spaces.\n\nnumeric-expression is defined as having a missing value if the result of the expression is\nnull or missing ( . ), or if the expression contains special missing values that you used \nto differentiate among missing values. The special missing values are the letters A through \nZ and the underscore, preceded by a period.\n \nComparisons: \nThe MISSING function can have only one argument. The NMISS function requires numeric arguments \nand returns the number of missing values in the list of arguments."}},{"Name":"MOD","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the remainder from the division of the first argument by the second argument, \nfuzzed to avoid most unexpected floating-point results. \n\nReturn value data type: DOUBLE  \nSyntax: MOD (dividend-expression, divisor-expression)  \n\nArguments: \ndividend-expression \n  specifies a dividend that is any valid expression that evaluates to a numeric value. \n  Valid data types: DOUBLE \n\ndivisor-expression \n  specifies a divisor that is any valid expression that evaluates to a numeric value. \n  Restriction: divisor-expression cannot be 0 \n  Valid data types: DOUBLE \n  See: TSPL Expressions \n  \nDetails: \nThe MOD function returns the remainder from the division of dividend-expression by divisor-expression. \nWhen the result is non-zero, the result has the same sign as the first argument. The sign of the second \nargument is ignored.\n\nThe computation that is performed by the MOD function is exact if both of the following conditions are true: \n  o Both arguments are exact integers. \n  o All integers that are less than either argument have exact 8-byte floating-point representations.\n\nIf either of the above conditions is not true, a small amount of numerical error can occur in the \nfloating-point computation. In this case \n  o MOD returns zero if the remainder is very close to zero or very close to the value of the second argument. \n  o MOD returns a null or missing value if the remainder cannot be computed to a precision of approximately \n    three digits or more. In this case, SAS also writes an error message to the log."}},{"Name":"MODZ","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the remainder from the division of the first argument by the second argument, \nusing zero fuzzing.\n\nReturn value data type: DOUBLE  \nSyntax: MODZ (dividend-expression, divisor-expression)  \n\nArguments: \ndividend-expression \n  specifies a dividend that is any valid expression that evaluates to a numeric value. \n  Valid data types: DOUBLE \n\ndivisor-expression \n  specifies a divisor that is any valid expression that evaluates to a numeric value. \n  Restriction: divisor-expression cannot be 0 \n \nDetails: \nThe MODZ function returns the remainder from the division of dividend-expression by \ndivisor-expression. When the result is non-zero, the result has the same sign as the \nfirst argument. The sign of the second argument is ignored.\n\nThe computation that is performed by the MODZ function is exact if both of the following \nconditions are true: \n  o Both arguments are exact integers. \n  o All integers that are less than either argument have exact 8-byte floating-point representation. \n\nIf either of the above conditions is not true, a small amount of numerical error can occur in the \nfloating-point computation. For example, when you use exact arithmetic and the result is zero, \nMODZ might return a very small positive value or a value slightly less than the second argument."}},{"Name":"MONTH","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a number that represents the month from a SAS date value. \n    \nReturn value data type: DOUBLE \n\nSyntax: MONTH(date)  \n\nArguments:\ndate \n  specifies any valid expression that represents a SAS date value.\n\n  Range: 1 - 12 \n  Valid data types: DOUBLE"}},{"Name":"N","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the number of non-null or non-missing numeric values.   \n    \nReturn value data type: DOUBLE  \n\nSyntax: N(expression [, ...expression ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n\n  Requirements: At least one argument is required. \n  Valid data types: DOUBLE \n \nDetails:\nNull values are converted to missing values and are counted as missing values.\n\nComparisons: \nThe N function counts non-null and non-missing values, whereas the NMISS function \ncounts missing values. The N function requires numeric arguments."}},{"Name":"NMISS","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the number of null and SAS missing numeric values. \n    \nReturn value data type: INTEGER  \n\nSyntax: NMISS(expression [, ...expression ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n\n  Requirements: At least one argument is required. \n  Valid data types: DOUBLE \n \nDetails: \nNull values are converted to SAS missing values and are counted as missing values.\n \nComparisons: \nThe NMISS function returns the number of null or SAS missing values, whereas the N \nfunction returns the number of non-null and non-missing values. NMISS requires numeric \nvalues and works with multiple numeric values, whereas MISSING works with only one value \nthat can be either numeric or character."}},{"Name":"NULL","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a 1 if the argument is null and a 0 if the argument is not null. \n    \nReturn value data type: DOUBLE  \n\nSyntax: NULL (expression)  \n\nArguments: \nexpression \n  specifies any valid expression.\n\n  Valid data types: CHAR, DOUBLE. \n   \nDetails:\nThe NULL function returns a 1 only for a null value. It returns a 0 for a SAS missing value."}},{"Name":"ORDINAL","Type":"SAS_FUNCTION","Help":{"#cdata":"Orders a list of values, and returns a value that is based on a position in the list. \n    \nReturn value data type: DOUBLE  \n\nSyntax: ORDINAL(position, expression-1, expression-2 [ , ...expression-n ] )  \n\nArguments: \n  position \n  specifies an integer that is less than or equal to the number of elements in the list of arguments. \n  Requirements: position must be a positive number. \n  Valid data types: DOUBLE \n\nexpression\n  specifies any valid expression that evaluates to a numeric value. \n  Requirements: At least two arguments are required. \n  Valid data types: DOUBLE \n \nDetails: \nThe ORDINAL function sorts the list and returns the argument in the list that is specified \nby position. Missing values are sorted low and are placed before any numeric values.\n \nComparisons: \nThe ORDINAL function counts both null, missing, non-null, and non-missing values, whereas \nthe SMALLEST function counts only non-null and non-missing values."}},{"Name":"PCTL","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the percentile that corresponds to the percentage. \n    \nReturn value data type: DOUBLE \nSyntax: PCTL[ n ](percentage, expression[, ...expression ] )  \n\nArguments: \nn \n  is a digit from 1 to 5 which specifies the definition of the percentile to be computed. \n  Default: definition 5 \n  Valid data types: DOUBLE    \n\npercentage \n  specifies the percentile to be computed. \n  Requirement: is numeric where, 0 percentage 100. \n  Valid data types: DOUBLE \n\nexpression \n  specifies any valid expression that evaluates to a numeric value, whose value is computed \n  in the percentile calculation.\n\n  Valid data types: DOUBLE \n \nDetails: \nThe PCTL function returns the percentile of the non-null or non-missing values corresponding \nto the percentage. If percentage is null or missing, less than zero, or greater than 100, the \nPCTL function generates an error message."}},{"Name":"POWER","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the value of a numeric value expression raised to a specified power. \n    \nReturn value data type: DOUBLE  \n\nSyntax: POWER (numeric-expression, integer-expression) \n\nArguments: \nnumeric-expression \n  specifies any valid expression that evaluates to a numeric value. \n  Valid data types: DOUBLE \n\ninteger-expression \n  specifies any valid expression that evaluates to an integer value. \n  Valid data types: INTEGER, DOUBLE \n   \nDetails: \nIf numeric_expression is null, then the POWER function returns null. If the result \nis a number that does not fit into the range of the argument's data type, the POWER \nfunction fails."}},{"Name":"PUT","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a value using a specified format. \n    \nReturn value data type: NVARCHAR  \nSyntax: PUT(expression, format.)  \n\nArguments:\nexpression \n  specifies any valid expression. \n  Valid data types: DOUBLE, DATE, TIME, TIMESTAMP, CHAR, NCHAR \n\nformat. \n  specifies either a TSPL format or a user-defined format that you want applied to expression. \n  To override the default alignment, you can add an alignment specification to a format: \n\n  -L left aligns the value  \n  -C centers the value  \n  -R right aligns the value\n  \nDetails: \nIf a value is not specified for the format width or decimal specification, TSPL uses the default \nvalues for that format.\n\nIf expression is not a valid data type for the format type (either numeric or character), TSPL \nconverts expression to a valid data type for format., with these exceptions:\n\n  o date and time expressions are converted to a SAS date, time, or datetime DOUBLE value for \n    numeric formats, and converted to NCHAR for character string formats \n  o when the format is a binary character format such as $BINARY, $HEX or $OCTAL, expressions \n    with a data type of DOUBLE are converted to NCHAR \n  o an error is issued when an expression with a data type of VARBINARY is used with a numeric \n    format that does not produce a data type of VARBINARY\n\nWhen TSPL converts an expression's data type in an assignment statement, the result is left-aligned. \nYou can use the PUT function to convert a numeric value to a character value and to convert a date, \ntime, or timestamp value to a SAS date/time value."}},{"Name":"QTR","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the quarter of the year from a SAS date value. \n    \nReturn value data type: DOUBLE  \n\nSyntax: QTR(date)  \n\nArguments: \ndate \n  specifies any valid expression that represents a SAS date value.\n\n  Valid data types: DOUBLE \n  See: TSPL Expressions \n \nDetails: \nThe QTR function returns a value of 1, 2, 3, or 4 from a SAS date value to indicate \nthe quarter of the year in which a date value falls."}},{"Name":"QUOTE","Type":"SAS_FUNCTION","Help":{"#cdata":"Adds double quotation marks to a character value. \n    \nReturn value data type: NCHAR \nSyntax: QUOTE(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string. \n  Valid data types: NCHAR \n \nDetails: \nThe QUOTE function adds double quotation marks, the default character, to a character value. If \ndouble quotation marks are found within the argument, they are doubled in the output.\n\nThe length of the receiving variable must be long enough to contain the argument (including \ntrailing blanks), leading and trailing quotation marks, and any embedded quotation marks that \nare doubled. For example, if the argument is ABC followed by three trailing blanks, then the \nreceiving variable must have a length of at least eight to hold \"ABC###\". (The character # \nrepresents a blank space.) If the receiving field is not long enough, the QUOTE function \nreturns a blank string, and writes an invalid argument note to the SAS log.\n\nA string of characters enclosed in double quotation marks is a TSPL identifier and not a \ncharacter constant. The double quotation marks become part of the identifier. Quoted \nidentifiers cannot be used to create column names in an output table."}},{"Name":"RANGE","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the difference between the largest and the smallest values. \n    \nReturn value data type: DOUBLE  \n\nSyntax: RANGE(expression [, ...expression ) ] \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n\n  Requirements: At least one non-null or non-missing argument is required. Otherwise, \n  the function returns a null or missing value.  \n  Valid data types: DOUBLE \n \nDetails: \nThe RANGE function returns the difference between the largest and the smallest of the \nnon-null or non-missing arguments."}},{"Name":"RANK","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the position of a character in the ASCII or EBCDIC collating sequence. \n    \nReturn value data type: DOUBLE  \n\nSyntax: RANK(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string. \n  Valid data types: NCHAR \n \nDetails: \nThe RANK function returns an integer that represents the position of the first character \nin the character expression."}},{"Name":"REPEAT","Type":"SAS_FUNCTION","Help":{"#cdata":"Repeats a character expression. \n    \nReturn value data type: VARCHAR, NVARCHAR  \n\nSyntax: REPEAT(expression, n)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string.\n  Valid data types: CHAR, NCHAR \n\nn \n  specifies the number of times to repeat expression.\n  Restriction: n must be greater than or equal to 0. \n  Valid data types: INTEGER \n \nDetails: \nThe REPEAT function returns a character value consisting of the first argument repeated \nn times. Thus, the first argument appears n+1 times in the result."}},{"Name":"REVERSE","Type":"SAS_FUNCTION","Help":{"#cdata":"Reverses a character expression. \n    \nReturn value data type: NCHAR  \n\nSyntax: REVERSE(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string.\n\n  Valid data types: NCHAR \n  See: TSPL Expressions \n \nDetails: \nThe REVERSE function returns a character value with the last character in the expression \nis the first character in the result, the next-to-last character in the expression is the \nsecond character in the result, and so on. \n\nNote: Trailing blanks in the expression become leading blanks in the result."}},{"Name":"RIGHT","Type":"SAS_FUNCTION","Help":{"#cdata":"Right aligns a character expression. \n    \nReturn value data type: NCHAR  \n\nSyntax: RIGHT(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string.\n\n  Valid data types: NCHAR \n\nDetails: \nThe RIGHT function returns an argument with trailing blanks moved to the start of the \nvalue. The argument's length does not change."}},{"Name":"RMS","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the root mean square. \n    \nReturn value data type: DOUBLE  \n\nSyntax: RMS(expression [, ...expression ) ]  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n \nDetails: \nThe root mean square is the square root of the arithmetic mean of the squares of \nthe values. If all the arguments are null or missing values, then the result is \na null or missing value. Otherwise, the result is the root mean square of the \nnon-null or non-missing values."}},{"Name":"ROUND","Type":"SAS_FUNCTION","Help":{"#cdata":"Rounds the first argument to the nearest multiple of the second argument, or to \nthe nearest integer when the second argument is omitted. \n\nReturn value data type: DOUBLE  \n\nSyntax: ROUND (expression [, rounding-unit ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value, to be rounded.\n\n  Valid data types: DOUBLE \n  \nrounding-unit \n  specifies a positive numeric expression that specifies the rounding unit.\n\n  Valid data types: DOUBLE \n \nDetails: \nThe ROUND function rounds the first argument to a value that is very close to a multiple \nof the second argument. The results might not be an exact multiple of the second argument."}},{"Name":"ROUNDE","Type":"SAS_FUNCTION","Help":{"#cdata":"Rounds the first argument to the nearest multiple of the second argument, and returns \nan even multiple when the first argument is halfway between the two nearest multiples. \n\nReturn value data type: DOUBLE  \n\nSyntax: ROUNDE (expression [, rounding-unit] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value and that is to be rounded. \n  Valid data types: DOUBLE \n\nrounding-unit \n  is a positive, numeric expression that specifies the rounding unit. \n  Default: 1 \n  Valid data types: DOUBLE \n  \nDetails: \nThe ROUNDE function rounds the first argument to the nearest multiple of the second argument. \n \nComparisons: \nThe ROUNDE function is the same as the ROUND function except that when the first argument \nis halfway between the two nearest multiples of the second argument, ROUNDE returns an even\nmultiple. ROUND returns the multiple with the larger absolute value."}},{"Name":"ROUNDZ","Type":"SAS_FUNCTION","Help":{"#cdata":"Rounds the first argument to the nearest multiple of the second argument, using \nzero fuzzing. \n\nReturn value data type: DOUBLE  \n\nSyntax: ROUNDZ (expression [, rounding-unit ] ) \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n  Valid data types: DOUBLE \n\nrounding-unit \n  specifies any valid expression that evaluates to a numeric expression and that specifies \n  the rounding unit. \n\n  Requirements: Only positive values are valid. \n  Valid data types: DOUBLE \n  Default value: 1 \n \nDetails: \nThe ROUNDZ function rounds the first argument to the nearest multiple of the second argument."}},{"Name":"SCAN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the nth word from a character expression. \n    \nReturn value data type: NCHAR  \nSyntax: SCAN( expression, n [, delimiters ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string. \n  Valid data types: NCHAR \nn \n  is a non-zero numeric expression that specifies the number of the word in the character \n  expression that you want SCAN to select. The following rules apply: \n\n    o If n is positive, SCAN counts words from left to right in the character string. \n    o If n is negative, SCAN counts words from right to left in the character string. \n    o If n is greater than the number of words in expression, SCAN returns a blank value.\n\ndelimiters \n  specifies any valid expression that evaluates to a character string and that SCAN \n  uses as word separators in the expression.\n\n  Requirement: If delimiter is a constant, enclose delimiter in single quotation marks. \n  ASCII default delimiters: blank . , ( + & ! $ * ) ; ^ -- / % | \n  In environments without the ^ character, SCAN uses the ~ character instead.\n \n  EBCDIC default delimiters: blank . < ( + | & ! $ * ) ; \u00ac -- / , % \u00a2 \n  Valid data types: NCHAR \n \nDetails:\nLeading delimiters before the first word in the expression do not effect SCAN. If there \nare two or more contiguous delimiters, SCAN treats them as one."}},{"Name":"SECOND","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the second from a SAS time or datetime value. \n    \nReturn value data type: DOUBLE  \n\nSyntax: SECOND(time | datetime)  \n\nArguments: \ntime \n  specifies any valid expression that represents a SAS time value.\n  Valid data types: DOUBLE \n\ndatetime \n  specifies any valid expression that represents a SAS datetime value. \n  Valid data types: DOUBLE \n \nDetails: \nThe SECOND function produces a numeric value that represents a specific second of \nthe minute. The result can be any number that is >= 0 and < 60."}},{"Name":"SIGN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a number that indicates the sign of a numeric value expression. \n    \nReturn value data type: DOUBLE  \n\nSyntax: SIGN (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n \nDetails: \nThe SIGN function returns the following values: \n\n  -1 if expression < 0 \n \n  0 if expression = 0 \n \n  1  if expression > 0."}},{"Name":"SIN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the trigonometric sine. \n    \nReturn value data type: DOUBLE  \n\nSyntax: SIN (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE"}},{"Name":"SINH","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the hyperbolic sine. \n    \nReturn value data type: DOUBLE  \n\nSyntax: SINH (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Valid data types: DOUBLE \n \nDetails: \nThe SINH function returns the hyperbolic sine of the argument, which is given by\n\n(\u03f5^argument - \u03f5^-argument)/2"}},{"Name":"SKEWNESS","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the skewness. \n    \nReturn value data type: DOUBLE  \n\nSyntax: SKEWNESS(expression-1, expression-2, expression-3 [, ...expression-n ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n\n  Requirements: At least three non-null or non-missing arguments are required. \n  Otherwise, the function returns a null or missing value. \n  Valid data types: DOUBLE \n \nDetails: \nIf all non-null or non-missing arguments have equal values, the skewness is mathematically \nundefined and the SKEWNESS function returns a null or missing value."}},{"Name":"SLEEP","Type":"SAS_FUNCTION","Help":{"#cdata":"For a specified period of time, suspends the execution of a program that invokes \nthis function. \n\nReturn value data type: DOUBLE  \n\nSyntax: SLEEP(number-of-time-units [, time- unit ] )  \n\nArguments: \nnumber-of-time-units \n  specifies any valid expression that evaluates to a numeric value and that specifies the \n  number of units of time for which you want to suspend execution of a program.\n\n  Range: n \u2265 0 \n\ntime-unit \n  specifies the unit of time, as a power of 10, which is applied to number-of-time-units. \n  For example, 1 corresponds to a second, and .001 to a millisecond. \n\n  Default: 1 in a Windows PC environment, .001 in other environments \n \nDetails: \nThe SLEEP function suspends the execution of a program that invokes this function for \na period of time that you specify. The maximum sleep period for the SLEEP function is \n46 days."}},{"Name":"SMALLEST","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the kth smallest non-null or non-missing value. \n    \nReturn value data type: DOUBLE  \n\nSyntax: SMALLEST (k, expression [, ...expression ] )  \n\nArguments: \nk \n  specifies any valid expression that evaluates to a numeric value to return. \n  Valid data types: DOUBLE \n\nexpression \n  specifies any valid expression that evaluates to a numeric value to be processed. \n  Valid data types: DOUBLE \n \nDetails: \nIf k is null or missing, less than zero, or greater than the number of values, the result \nis a null or missing value. \n \nComparisons: \nThe SMALLEST function differs from the ORDINAL function in that SMALLEST ignores null \nand missing values, but ORDINAL counts null and missing values."}},{"Name":"SQRT","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the square root of a value. \n    \nReturn value data type: DOUBLE  \n\nSyntax: SQRT (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a nonnegative numeric value.\n\n  Valid data types: DOUBLE"}},{"Name":"STD","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the standard deviation. \n    \nReturn value data type: DOUBLE  \n\nSyntax: STD(expression-1, expression-2 [, ...expression-n ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n\n  Requirements: At least two non-null or non-missing arguments are required. Otherwise, \n  the function returns a null or missing value. \n  Valid data types: DOUBLE"}},{"Name":"STDERR","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the standard error of the mean. \n    \nReturn value data type: DOUBLE  \n\nSyntax: STDERR(expression-1, expression-2 [, ...expression-n ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Requirements: At least two non-null or non-missing arguments are required. Otherwise, \n  the function returns a null or missing value.  \n  Valid data types: DOUBLE"}},{"Name":"STRIP","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a character string with all leading and trailing blanks removed. \n    \nReturn value data type: NCHAR  \n\nSyntax: STRIP(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string. \n  Valid data types: NCHAR \n \nDetails: \nThe STRIP function returns the argument with all leading and trailing blanks removed. \nIf the argument is blank, STRIP returns a string with a length of zero. \n\nIf the value that is trimmed is shorter than the length of the receiving variable, \nSAS pads the value with new trailing blanks.\n\nNote: The STRIP function is useful for concatenation because the concatenation \noperator does not remove trailing blanks."}},{"Name":"SUBSTR","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a substring, allowing a result with a length of zero. \n    \nReturn value data type: VARCHAR, NVARCHAR  \nSyntax: SUBSTR(character-expression, position-expression [, length-expression ] )  \n\nArguments: \ncharacter-expression \n  specifies any valid expression that evaluates to a character string. \n  Valid data types: CHAR, NCHAR \n\nposition-expression \n  specifies any valid expression that evaluates to an integer and that specifies the \n  position of the first character in the substring. \n  Valid data types: INTEGER \n\nlength-expression \n  specifies any valid expression that evaluates to an integer and that specifies the length \n  of the substring. If you do not specify length-expression, the SUBSTR function returns  \n  the substring that extends from the position that you specify to the end of the string. \n  Valid data types: INTEGER \n \nDetails: \nThe following information applies to the SUBSTR function: \n\n  o The SUBSTR function returns a string with a length of zero if either position-expression or  \n    length-expression has a missing or null value, or if position-expression is a non-positive value. \n  o If the value for length-expression is non-positive, the SUBSTR function ignores length-expression. \n  o If the length that you specify extends beyond the end of the string, the result is truncated \n    at the end, so that the last character of the result is the last character of the string."}},{"Name":"SUM","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the sum of the non-null or non-missing arguments. \n    \nReturn value data type: BIGINT if all argument data types are BIGINT, otherwise, DOUBLE  \n\nSyntax: SUM(expression-1, expression-2 [, ...expression-n ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Requirements: At least two arguments are required. \n  Valid data types: DOUBLE, BIGINT \n \nDetails: \nNull and missing values are ignored and not included in the computation. If all of the \narguments have missing values, the result is a missing value. If all the arguments have \na null value, the result is a null value."}},{"Name":"TAN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the tangent. \n    \nReturn value data type: DOUBLE  \n\nSyntax: TAN (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value in radians.\n\n  Restriction: expression cannot be an odd multiple of \u03c0/2 \n  Valid data types: DOUBLE"}},{"Name":"TANH","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the hyperbolic tangent. \n    \nReturn value data type: DOUBLE  \n\nSyntax: TANH (expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Restriction: expression cannot be an odd multiple of \u03c0/2 \n  Valid data types: DOUBLE \n \nDetails: \nThe TANH function returns the hyperbolic tangent of the argument, which is given by\n\n(\u03f5^argument - \u03f5^-argument)/(\u03f5^argument + \u03f5^-argument)"}},{"Name":"TIME","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the current time of day as a numeric SAS time value. \n    \nReturn value data type: DOUBLE \n\nSyntax: TIME()  \n\nDetails: \nThe TIME function does not take any arguments. It produces the current time in the form \nof a SAS time value."}},{"Name":"TIMEPART","Type":"SAS_FUNCTION","Help":{"#cdata":"Extracts a time value from a SAS datetime value. \n    \nReturn value data type: DOUBLE  \n\nSyntax: TIMEPART(datetime)  \n\nArguments: \ndatetime \n  specifies any valid expression that represents a SAS datetime value.\n\n  Valid data types: DOUBLE"}},{"Name":"TODAY","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the current date as a numeric SAS date value. \n    \nReturn value data type: DOUBLE  \n\nSyntax: TODAY()  \n \nDetails: \nThe TODAY function does not take any arguments. It produces the current date in the \nform of a SAS date value, which is the number of days since January 1, 1960."}},{"Name":"TRANSLATE","Type":"SAS_FUNCTION","Help":{"#cdata":"Replaces specific characters in a character expression. \n    \nReturn value data type: NCHAR  \nSyntax: TRANSLATE(expression, to-characters, from-characters)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string. expression \n  contains the original character value. \n  Valid data types: CHAR \n\nto-characters \n  specifies the characters that you want TRANSLATE to use as substitutes. \n  Valid data types: NCHAR \n\nfrom-characters \n  specifies the characters that you want TRANSLATE to replace. \n  Valid data types: NCHAR \n \nDetails: \nValues of to-characters and from-characters correspond on a character-by-character basis; \nTRANSLATE changes the first character in from-characters to the first character in to-characters, \nand so on. If to-characters has fewer characters than from-characters, TRANSLATE changes the \nextra from-characters to blanks. If to-characters has more characters than \nfrom-characters, TRANSLATE ignores the extra to-characters."}},{"Name":"TRANWRD","Type":"SAS_FUNCTION","Help":{"#cdata":"Replaces or removes all occurrences of a word in a character string. \n    \nReturn value data type: NCHAR  \n\nSyntax: TRANWRD(source-expression, target-expression, replacement-expression)  \n\nArguments:\nsource-expression \n  specifies any valid expression that evaluates to a character string, whose characters \n  you want to replace. \n  Valid data types: NCHAR \n\ntarget-expression \n  specifies any valid expression that evaluates to a character string and that is searched \n  for in source-expression. \n  Valid data types: NCHAR \n  Requirement: The length of the target-expression must be greater than zero. \n\nreplacement-expression \n  specifies any valid expression that evaluates to a character string and that replaces \n  target-expression. \n  Valid data types: NCHAR \n \nDetails: \nThe TRANWRD function replaces or removes all occurrences of a given word (or a pattern of \ncharacters) within a character string. The TRANWRD function does not remove trailing blanks \nin the target-expression string and the replacement-expression string."}},{"Name":"TRIGAMMA","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the value of the trigamma function. \n    \nReturn value data type: DOUBLE  \n\nSyntax: TRIGAMMA( expression )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n\n  Restriction: Nonpositive integers are invalid. \n  Valid data types: DOUBLE \n  \nDetails: \nThe TRIGAMMA function returns the derivative of the DIGAMMA function. For expression > 0, \nthe TRIGAMMA function is the second derivative of the LGAMMA function."}},{"Name":"TRIM|TRIMN","Type":"SAS_FUNCTION","Help":{"#cdata":"Removes trailing blanks from a character expression. \n    \nReturn value data type: VARCHAR, NVARCHAR  \n\nSyntax: TRIM ( expression )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string.\n  Valid data types: CHAR, NCHAR \n \nDetails:\nThe TRIM function removes trailing blanks from expression and returns the trimmed value \nas a result. If the resulting string is blank, TRIM returns a zero length string. TRIM \nis useful for concatenating because concatenation does not remove trailing blanks."}},{"Name":"TRUNC","Type":"SAS_FUNCTION","Help":{"#cdata":"Truncates a numeric value to a specified length. \n    \nReturn value data type: DOUBLE \nSyntax: TRUNC(expression, length-expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. \n  Valid data types: DOUBLE \n\nlength-expression \n  specifies any valid expression that evaluates to a numeric value. \n  Range: 3 - 8 \n  Valid data types: DOUBLE \n \nDetails: \nThe TRUNC function truncates a full-length numeric expression (stored as a DOUBLE) \nto a smaller number of bytes, as specified in length-expression and pads the truncated \nbytes with 0s. The truncation and subsequent expansion duplicate the effect of storing \nnumbers in less than full length and then reading them."}},{"Name":"UPCASE","Type":"SAS_FUNCTION","Help":{"#cdata":"Converts all letters in an argument to uppercase. \n    \nReturn value data type: VARCHAR, NVARCHAR  \n\nSyntax: UPCASE(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a character string. \n  Valid data types: CHAR, NCHAR \n \nDetails: \nThe UPCASE function copies a character expression, converts all lowercase letters to \nuppercase letters, and returns the altered value as a result. \n \nComparisons: \nThe LOWCASE function converts all letters in an argument to lowercase letters. The \nUPCASE function converts all letters in an argument to uppercase letters."}},{"Name":"USS","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the uncorrected sum of squares. \n    \nReturn value data type: DOUBLE  \n\nSyntax: USS(expression [, ...expression ] )  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value.\n\n  Requirement: At least one non-null or non-missing argument is required. Otherwise, \n  the function returns a null or missing value.  \n  Valid data types: DOUBLE"}},{"Name":"VAR","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the variance. \n    \nReturn value data type: DOUBLE  \n\nSyntax: VAR(expression-1, expression-2 [ ,...expression-n])  \n\nArguments: \nexpression \n  specifies any valid expression that evaluates to a numeric value. The argument list \n  can consist of a variable list. \n\n  Requirements: At least two non-null or non-missing arguments are required. Otherwise, \n  the function returns a null or missing value.  \n  \n  Valid data types: DOUBLE"}},{"Name":"VERIFY","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the position of the first character that is unique to an expression. \n    \nReturn value data type: DOUBLE  \nSyntax: VERIFY(target-expression, search-expression)  \n\nArguments: \ntarget-expression \n  specifies any valid expression that evaluates to a character string that is to be searched. \n\n  Requirements: Literal character strings must be enclosed in single quotation marks. \n  Valid data types: NCHAR \n\nsearch-expression \n  specifies any valid expression that evaluates to a character string.\n\n  Requirements: Literal character strings must be enclosed in single quotation marks. \n  Valid data types: NCHAR \n \nDetails: \nThe VERIFY function returns the position of the first character in target-expression that \nis not present in search-expression. If there are no characters in target-expression that \nare unique from those in search-expression, VERIFY returns a 0."}},{"Name":"WEEKDAY","Type":"SAS_FUNCTION","Help":{"#cdata":"From a SAS date value, returns an integer that corresponds to the day of the week. \n    \nReturn value data type: DOUBLE \n\nSyntax: WEEKDAY(expression)  \n\nArguments: \nexpression \n  specifies any valid expression that represents a SAS date value.\n\n  Valid data types: DOUBLE \n \nDetails: \nThe WEEKDAY function produces an integer that represents the day of the week, where 1 = Sunday, \n2 = Monday, ..., 7 = Saturday."}},{"Name":"WHICHC","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the first position of a character string from a list of character strings. \n    \nReturn value data type:  DOUBLE  \nSyntax: WHICHC(search-expression, expression-list-item-1, expression-list-item-2 [, ...expression-list-item-n ] )  \n\nArguments: \nsearch-expression \n  specifies any valid expression that evaluates to a character string that is compared with \n  a list of character string expressions. \n\n  Requirements: Literal character strings must be enclosed in single quotation marks. \n  Valid data types: NCHAR \n  \nstring-expression-list-item \n  specifies any valid expression that evaluates to a character string and that is a member of a list of character string expressions. \n\n  Requirements: Literal character strings must be enclosed in single quotation marks. \n  At least two expressions are required in the list. \n  Valid data types: NCHAR \n \nDetails: \nThe WHICHC function searches the character expression list, from left to right, for the \nfirst expression that matches the search expression. If a match is found, WHICHC returns \nits position in the expression list. If none of the expressions match the search expression, \nWHICHC returns a value of 0."}},{"Name":"WHICHN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the first position of a number from a list of numbers. \n    \nReturn value data type: DOUBLE  \nSyntax: WHICHN(search-expression, expression-list-item-1, expression-list-item-2 \n  [, ...expression-list-item-n ] )  \n\nArguments: \nsearch-expression \n  specifies any valid expression that evaluates to a number and that is compared with \n  a list of numeric expressions. \n  Valid data types: DOUBLE \n\nexpression-list-item \n  specifies any valid expression that evaluates to a number and is part of a list. \n  Requirements: At least two expressions are required in the list. \n  Valid data types: DOUBLE \n \nDetails: \nThe WHICHN function searches the numeric expression list, from left to right, for the \nfirst expression that matches the search expression. If a match is found, WHICHN returns \nits position in the expression list. If none of the expressions match the search expression, \nWHICHN returns a value of 0. Arguments for the WHICHN functions can be any numeric data type."}},{"Name":"YEAR","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the year from a SAS date value. \n    \nReturn value data type DOUBLE  \n\nSyntax: YEAR(date)  \n\nArguments: \ndate \n  specifies any valid expression that represents a SAS date value.\n\n  Valid data types: DOUBLE \n \nDetails: \nThe YEAR function produces a four-digit numeric value that represents the year."}},{"Name":"YYQ","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a SAS date value from year and quarter year values. \n    \nReturn value data type: DOUBLE  \n\nSyntax: YYQ(year,quarter)  \n\nArguments: \nyear \n  specifies any valid expression that evaluates to a two-digit or four-digit integer \n  that represents the year. The YEARCUTOFF= system option defines the year value for \n  two-digit dates.\n\n  Valid data types: DOUBLE \n  \nquarter \n  specifies the quarter of the year (1, 2, 3, or 4). \n  Valid data types: DOUBLE \n \nDetails: \nThe YYQ function returns a SAS date value that corresponds to the first day of the \nspecified quarter. If either year or quarter is null or missing, or if the quarter \nvalue is not valid, the result is a null or missing value."}},{"Name":"PRXCHANGE","Type":"SAS_FUNCTION","Help":{"#cdata":"Performs a pattern-matching replacement. \n    \nReturned data type: CHAR\n\nSyntax: PRXCHANGE(perl-regular-expression | regular-expression-id, times, source)\n\nArguments:\nperl-regular-expression\n  specifies a character constant, variable, or expression with a value that is a Perl regular expression.\n  Data type: CHAR\nregular-expression-id\n  specifies a numeric variable with a value that is a pattern identifier that is returned from the PRXPARSE function.\n  Restriction: If you use this argument, you must also use the PRXPARSE function.\n  Data type: INTEGER\ntimes\n  is a numeric constant, variable, or expression that specifies the number of times to search for a match and \n  replace a matching pattern.\n  Data type: INTEGER\n  Tip: If the value of times is \u20131, then matching patterns continue to be replaced until the end of source is reached. \nsource\n  specifies a character constant, variable, or expression that you want to search.\n  Data type: CHAR"}},{"Name":"PRXPAREN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the last bracket match for which there is a match in a pattern. \n    \nSyntax: PRXPAREN(regular-expression-id) \n\nArguments:\nregular-expression-id\n  specifies a numeric variable with a value that is an identification number that is returned by the PRXPARSE function."}},{"Name":"PRXPARSE","Type":"SAS_FUNCTION","Help":{"#cdata":"Compiles a Perl regular expression (PRX) that can be used for pattern matching of a character value.\n\nReturned data type: INTEGER\n\nSyntax: regular-expression-id=PRXPARSE(perl-regular-expression)\n\nArguments:\nregular-expression-id\n  is a numeric pattern identifier that is returned by the PRXPARSE function.\n  Data type: INTEGER\nperl-regular-expression\n  specifies a character, constant, variable, or expression with a value that is a Perl regular expression.\n  Data type: CHAR"}},{"Name":"PRXPOSN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a character string that contains the value for a capture buffer.\n\nReturned data type: CHAR\n\nSyntax: PRXPOSN(regular-expression-id, capture-buffer, source)\n\nArguments:\nregular-expression-id\n  specifies a numeric variable with a value that is a pattern identifier that is returned by the PRXPARSE function.\n\n  Data type: INTEGER\ncapture-buffer\n  is a numeric constant, variable, or expression that identifies the capture buffer for which to retrieve a value:\n  \u2022If the value of capture-buffer is zero, PRXPOSN returns the entire match.\n  \u2022If the value of capture-buffer is between 1 and the number of open parentheses in the regular expression, then PRXPOSN returns the value for that capture buffer.\n  \u2022If the value of capture-buffer is greater than the number of open parentheses, then PRXPOSN returns a missing value.\n  Data type: INTEGER \n  \nsource\n  specifies the text from which to extract capture buffers.\n  Data type: CHAR"}},{"Name":"KCOUNT","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the number of double-byte characters in an expression. \n    \nSyntax: KCOUNT([']source['])\n\nArguments:\n'source'\n  specifies any valid expression that evaluates to a character string.\n  Data type: NCHAR\n  Tip: Enclose a literal string of characters in quotation marks."}},{"Name":"KSTRCAT","Type":"SAS_FUNCTION","Help":{"#cdata":"Concatenates two or more character expressions.\n\nReturned data type: NCHAR\n\nSyntax: KSTRCAT(expression-1, expression-2[, \u2026 expression-n] ) \n\nArguments: \nexpression\n  specifies any single-byte or double-byte character expression.\n\n  Requirement: At least two expressions are required.\n  Data type: NCHAR"}},{"Name":"KSTRIP","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns a character string with all leading and trailing blanks removed.\n\nReturned data type: NCHAR\nSyntax: KSTRIP([']string['])\n\nArguments:\n[']string[']\n  specifies any valid expression that evaluates to a character string.\n  Data type: NCHAR\n  Tip: Enclose a literal string of characters in quotation marks."}},{"Name":"KUDPATE","Type":"SAS_FUNCTION","Help":{"#cdata":"Inserts, deletes, and replaces character value contents.\n\nReturned data type: NCHAR \n\nSyntax: \nKUPDATE([']expression['], position, n [, [']characters-to-replace[']] ) \nKUPDATE([']expression['], position [, n], [']characters-to-replace['])\n\nArguments:\n[']expression[']\n  specifies any valid expression that evaluates to a character string.\n  Data type: NCHAR\n  Tip: Enclose a literal string of characters in quotation marks.\n\nposition\n  specifies a numeric expression that is the beginning character position.\n  Data type: INTEGER\nn\n  specifies a numeric expression that is the length of the substring to be replaced.\n  Restrictions: n cannot be larger than the length of the expression that remains in expression after \n  position.n is optional, but you cannot omit both n and characters-to-replace from the function.\n  Data type: INTEGER\n  Tip: If you omit n, SAS uses all of the characters in characters-to-replace to replace the values of expression.\n\n[']characters-to-replace[']\n  specifies an expression which evaluates to a character string that replaces the contents of expression.\n  Restriction: characters-to-replace is optional, but you cannot omit both characters-to-replace and n from the function.\n  Data type: NCHAR\n  Tip: Enclose a literal string of characters in quotation marks."}},{"Name":"KUPDATES","Type":"SAS_FUNCTION","Help":{"#cdata":"Inserts, deletes, and replaces the contents of the character value according to the byte position of the \ncharacter value in the argument. \n\nReturned data type: NCHAR\nSyntax:\nKUPDATES([']expression['], position, n [, [']characters-to-replace[']] ) \nKUPDATES([']expression['], position [, n], [']characters-to-replace['])\n\nArguments:\n[']expression[']\n  specifies any valid expression that evaluates to a character string.\n  Data type: NCHAR\n  Tip: Enclose a literal string of characters in quotation marks. \nposition\n  specifies a numeric expression that is the beginning character position in bytes.\n  Data type: INTEGER\nn\n  specifies the length of the substring to be replaced in bytes.\n  Restrictions: n cannot be larger than the length (in bytes) of the expression that remains in expression after position.\n  n is optional, but you cannot omit both n and characters-to-replace from the function.\n  Data type: INTEGER\n  Tip: If you omit n, SAS uses all of the characters in characters-to-replace to replace the values of expression.\n\n[']characters-to-replace[']\n  specifies an expression which evaluates to a character string that replaces the contents of expression.\n  Restriction: characters-to-replace is optional, but you cannot omit both characters-to-replace and n from the function.\n  Data type: NCHAR\n  Tip: Enclose a literal string of characters in quotation marks."}},{"Name":"UUIDGEN","Type":"SAS_FUNCTION","Help":{"#cdata":"Returns the short form of a Universal Unique Identifier (UUID).\n\nReturned data type: CHAR \n\nSyntax: UUIDGEN( )\n\nWithout Arguments\n  The UUIDGEN function has no arguments."}}],"#comment":{}}}