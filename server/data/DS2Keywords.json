{"Keywords":{"Keyword":[{"Name":"ALTER=","Help":{"#cdata":"Syntax: ALTER=alter-password \n    \nSyntax Description:\nalter-password \n  must be a valid SAS name.\n \nDetails \nThe ALTER= option applies only to a SAS data set. You can use this option to assign \na password or to access a read-protected, write-protected, or alter-protected file. \nWhen you replace a data set that is protected with an ALTER password, the new data \nset inherits the ALTER password. \n\nThe password is blotted out when the code is written in the SAS log. For example: \n\n  set a(alter=XXXXXXX);\n\nNote: A SAS password does not control access to a SAS file beyond the SAS system. \nYou should use the operating system-supplied utilities and file-system security \ncontrols in order to control access to SAS files outside of SAS."},"Type":"TABLE_OPTION"},{"Name":"BUFNO=","Help":{"#cdata":"Specifies the number of buffers to be allocated for processing a SAS data set. \n    \nSyntax: BUFNO= n | nK | hexX | MIN | MAX  \n\nSyntax Description:\n\nn | nK \n  specifies the number of buffers in multiples of 1 (bytes); 1,024 (kilobytes). For example, \n  a value of 8 specifies 8 buffers, and a value of 1k specifies 1024 buffers.\n\nhex \n  specifies the number of buffers as a hexadecimal value. You must specify the value beginning \n  with a number (0-9), followed by an X. For example, the value 2dx sets the number of buffers \n  to 45 buffers.\n\nMIN \n  sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value \n  for the operating environment. This is the default.\n\nMAX \n  sets the number of buffers to the maximum possible number in your operating environment, \n  up to the largest four-byte, signed integer, which is 2\u00b3\u00b9-1, or approximately 2 billion."},"Type":"TABLE_OPTION","Values":{"@Value1":"n","@Value2":"nK","@Value3":"hexX","@Value4":"MIN","@Value5":"MAX"},"ToolTips":{"@ToolTip1":"Specifies the number of buffers in multiples of 1 (bytes).  Replace n with an integer value.","@ToolTip2":"Specifies the number of buffers in multiples of 1,024 (kilobytes).  Replace n with an integer value.","@ToolTip3":"Specifies the number of buffers as a hexadecimal value.  Replace hex with an actual hexadecimal value.","@ToolTip4":"Sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value  for the operating environment. This is the default.","@ToolTip5":"Sets the number of buffers to the maximum possible number in your operating environment,  up to the largest four-byte, signed integer, which is 2\u00b3\u00b9-1, or approximately 2 billion."}},{"Name":"BUFSIZE=","Help":{"#cdata":"Specifies the size of a permanent buffer page for an output SAS data set. \n    \nSyntax: BUFSIZE= n | nK | nM | nG | hexX | MAX  \n\nSyntax Description:\n\nn | nK | nM | nG \nspecifies the page size in multiples of 1 (bytes); 1,024 (kilobytes); 1,048,576 (megabytes); \nor 1,073,741,824 (gigabytes). For example, a value of 8 specifies a page size of 8 bytes, and \na value of 4k specifies a page size of 4096 bytes. \n\nhexX \nspecifies the page size as a hexadecimal value. You must specify the value beginning with a \nnumber (0-9), followed by an X. For example, the value 2dx sets the page size to 45 bytes.\n\nMAX \nsets the page size to the maximum possible number in your operating environment, up to the \nlargest four-byte, signed integer, which is 231-1, or approximately 2 billion bytes."},"Type":"TABLE_OPTION","Values":{"@Value1":"n","@Value2":"nK","@Value3":"nM","@Value4":"nG","@Value5":"hexX","@Value6":"MAX"},"ToolTips":{"@ToolTip1":"Specifies the page size in multiples of 1 (bytes).  Replace n with an integer value.","@ToolTip2":"Specifies the page size in multiples of 1,024 (kilobytes).  Replace n with an integer value.","@ToolTip3":"Specifies the page size in multiples of 1,048,576 (megabytes).  Replace n with an integer value.","@ToolTip4":"Specifies the page size in multiples of 1,073,741,824 (gigabytes).  Replace n with an integer value.","@ToolTip5":"Specifies the page size as a hexadecimal value.  Replace hex with an actual hexadecimal value.","@ToolTip6":"Sets the page size to the maximum possible number in your operating environment,  up to the largest four-byte, signed integer, which is 2\u00b3\u00b9-1, or approximately 2 billion bytes."}},{"Name":"BULKLOAD=","Help":{"#cdata":"Loads rows of data as one unit. Default value: NO  \n    \nSyntax: BULKLOAD=YES | NO  \n\nSyntax Description:\n\nYES \ncalls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.\n\nNO \nuses the dynamic SAS/ACCESS engine to insert or append data to a DBMS table."},"Type":"TABLE_OPTION","Values":{"@Value1":"YES","@Value2":"NO"},"ToolTips":{"@ToolTip1":"Calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","@ToolTip2":"Uses the dynamic SAS/ACCESS engine to insert or append data to a DBMS table."}},{"Name":"COMPRESS=","Help":{"#cdata":"\n    \nSyntax: COMPRESS=NO | YES | CHAR | BINARY  \n\nSyntax Description:\nNO \nspecifies that the observations in a newly created SAS data set are uncompressed (fixed-length records).\n\nYES | CHAR \nspecifies that the observations in a newly created SAS data set are compressed (variable-length records) \nby SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive \ncharacters (including blanks) to two-byte or three-byte representations. \n\n  Alias: ON \n  Tip: Use this compression algorithm for character data. \n  Note:   COMPRESS=CHAR is accepted by Version 7 and later versions.  \n\nBINARY \n  specifies that the observations in a newly created SAS data set are compressed (variable-length records) \n  by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression \n  to compress the file.\n\n  Tip: This method is highly effective for compressing medium to large (several hundred bytes or larger) \n  blocks of binary data (numeric variables). Because the compression function operates on a single record \n  at a time, the record length needs to be several hundred bytes or larger for effective compression."},"Type":"TABLE_OPTION","Values":{"@Value1":"NO","@Value2":"YES|ON","@Value3":"CHAR","@Value4":"BINARY"},"ToolTips":{"@ToolTip1":"Specifies that the observations in a newly created SAS data set are uncompressed  (fixed-length records).","@ToolTip2":"Specifies that the observations in a newly created SAS data set are compressed  (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses  observations by reducing repeated consecutive characters (including blanks) to  two-byte or three-byte representations.","@ToolTip3":"Specifies that the observations in a newly created SAS data set are compressed  (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses  observations by reducing repeated consecutive characters (including blanks) to  two-byte or three-byte representations.   COMPRESS=CHAR is accepted by Version 7 and later versions.","@ToolTip4":"Specifies that the observations in a newly created SAS data set are compressed  (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines  run-length encoding and sliding-window compression to compress the file."}},{"Name":"DBCREATE_TABLE_OPTS=","Help":{"#cdata":"Syntax: DBCREATE_TABLE_OPTS= 'DBMS-option(s)' \n\nSpecifies DBMS-specific options to be added to the DATA statement.\n\nArguments:\nDBMS-option(s)\n  specifies one or more valid DBMS-specific options. If more than one option is specified, \n  the options should be separated in the same way as options are separated in the DBMS."},"Type":"TABLE_OPTION"},{"Name":"DBKEY=","Help":{"#cdata":"Specifies a key column to optimize DBMS retrieval. Can improve performance when you \nare processing a join that involves a large DBMS table and a small SAS data set \nor DBMS table.\n    \nSyntax: DBKEY=([ ' ] column [ ' ] [... [ ' ] column [ ' ] ])  \n\nSyntax Description: \n\ncolumn \n  used by SAS to build an internal WHERE clause to search for matches in the DBMS table \n  based on the key column. For example:\n\n    select * from sas.a, dbms.b(dbkey=x) where a.x=b.x;\n    \nIn this example, DBKEY= specifies column x , which matches the key column designated in \nthe WHERE clause. However, if the DBKEY= column does NOT match the key column in the \nWHERE clause, then DBKEY= is not used."},"Type":"TABLE_OPTION"},{"Name":"DBNULL=","Help":{"#cdata":"Indicates whether NULL is a valid value for the specified columns when a table is created. \n    \nSyntax: DBNULL={ _ALL=YES | NO } | ( [column=YES | NO [ ... column=YES | NO ] ] )  \n\nSyntax Description: \n_ALL_ \n  specifies that the YES or NO applies to all columns in the table. (This is valid in \n  the interfaces to Informix, Oracle, Sybase, and Teradata only.)\n\nYES \n  specifies that the NULL value is valid for the specified columns in the DBMS table.\n\nNO \n  specifies that the NULL value is not valid for the specified columns in the DBMS table.\n\ncolumn \n  specifies the name of a column. \n\nDetails: \nThis option is valid only for creating DBMS tables. If you specify more than one column name, \nthe names must be separated with spaces.\n\nThe DBNULL= option processes values from left to right, so if you specify a column name twice, \nor if you use the _ALL_ value, the last value overrides the first value that is specified for \nthe column."},"Type":"TABLE_OPTION","SubOptionsKeywords":"_ALL_"},{"Name":"DROP=","Help":{"#cdata":"For an input table, excludes the specified columns from processing; for an output table, excludes the specified columns from being written to the table.\n    \nSyntax: DROP= ( column-list );  \n\nArguments: \ncolumn-list \n  specifies the names of the columns to omit from the output table.\n\n  Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format \n  col: are not supported. \n \nDetails: \nThe DROP= table option specifies that all columns in the column-list should not be included \nin the creation of output rows. Normally, all columns in the program data vector are included \nin the output rows. If the drop attribute is specified, all columns not included in the drop \nstatement will be used to create columns in the output rows.\n\nIf the DROP= table option is associated with an input table, the columns are not available \nfor processing during program execution."},"Type":"TABLE_OPTION"},{"Name":"ENCRYPT=","Help":{"#cdata":"Specifies whether to encrypt an output SAS data set. \n    \nSyntax: ENCRYPT=YES | NO  \n\nSyntax Description:\nYES \n  encrypts the file. The encryption method uses passwords. At a minimum, you must specify \n  the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because \n  the encryption method uses passwords, you cannot change any password on an encrypted data \n  set without re-creating the data set.\n\nNO \n  does not encrypt the file.\n\nCAUTION:\nRecord all passwords. \nIf you forget the password, you cannot reset it without assistance from SAS. The process \nis time-consuming and resource-intensive."},"Type":"TABLE_OPTION","Values":{"@Value1":"YES","@Value2":"NO"},"ToolTips":{"@ToolTip1":"Encrypts the file. The encryption method uses passwords. At a minimum, you must specify  the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because  the encryption method uses passwords, you cannot change any password on an encrypted data  set without re-creating the data set.","@ToolTip2":"Does not encrypt the file."}},{"Name":"ENCRYPTKEY=","Help":{"#cdata":"Syntax: ENCRYPTKEY=[\" | ']key-value[\" | '] \n\nSpecifies a key value for AES encryption.\n\nArguments:\nkey-value\n  assigns an encrypt key value. The key value can be up to 64-bytes long. You are able to create \n  an ENCRYPTKEY= key value with or without quotation marks using the following rules:\n  \n  no quotation marks\n    \u2022alphanumeric characters and underscores only\n    \u2022up to 64-bytes\n    \u2022uppercase and lowercase letters\n    \u2022must start with a letter\n    \u2022no blank spaces\n    \u2022is not case-sensitive\n\n  single quotation marks\n    \u2022alphanumeric, special, and DBCS characters\n    \u2022up to 64-bytes\n    \u2022uppercase and lowercase letters\n    \u2022blank spaces, but not all blanks\n    \u2022is case-sensitive\n    \n  double quotation marks\n    \u2022alphanumeric, special, and DBCS characters\n    \u2022up to 64 bytes\n    \u2022uppercase and lowercase letters\n    \u2022enables macro resolution\n    \u2022blank spaces, but not all blanks\n    \u2022is case-sensitive"},"Type":"TABLE_OPTION"},{"Name":"IN=","Help":{"#cdata":"Syntax: IN=variable \n    \nArguments:\nvariable\n  names the new variable whose value indicates whether that input table contributed data to the \n  current row. Within a DS2 program, the value of the variable is 1 if the table contributed to \n  the current row, and 0 otherwise.\n\nInteraction:\n  If the variable is not explicitly declared, it is automatically declared in the local scope \n  of the SET or DATA statement as INTEGER.\nData type: BIGINT, INTEGER, SMALLINT, TINYINT"},"Type":"TABLE_OPTION"},{"Name":"KEEP=","Help":{"#cdata":"For an input table, specifies the columns to process; for an output table, specifies \nthe columns to write to the table. \n    \nSyntax: KEEP=( column-list );  \n\nArguments:\n\ncolumn-list \n  specifies the names of the columns to keep in the output table.\n\n  Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the \n  format col: are not supported. \n  \nDetails: \nThe KEEP= table option specifies that all columns in the column-list should be included in \nthe creation of output rows. Normally, all columns in the program data vector are included \nin the output rows. If the keep attribute is specified, all columns not included in the KEEP \nstatement will be dropped from the output rows.\n\nIf the KEEP= table option is associated with an input table, only the columns that are \nspecified by the KEEP= table option are available for processing during program execution."},"Type":"TABLE_OPTION"},{"Name":"LABEL=","Help":{"#cdata":" \n    \nSyntax: LABEL='label'  \n\nSyntax Description: \n\n'label' \n  specifies a text string of up to 256 characters. If the label text contains single \n  quotation marks, use double quotation marks around the label, or use two single \n  quotation marks in the label text and surround the string with single quotation \n  marks. To remove a label from a table, assign a label that is equal to a blank \n  that is enclosed in quotation marks.\n \nDetails: \nYou can use the LABEL= option on both input and output tables. When you use LABEL= \non input tables, it assigns a label for the table for the duration of the TSPL program. \nWhen it is specified for an output table, the label becomes a permanent part of that \ntable."},"Type":"TABLE_OPTION"},{"Name":"LOCKTABLE=","Help":{"#cdata":"Places shared or exclusive locks on tables. \n    \nSyntax: LOCKTABLE=SHARE | EXCLUSIVE  \n\nSyntax Description:\n\nSHARE \n  locks a table in shared mode, allowing other users or processes to read data from the \n  tables, but preventing users from updating data.\n\nEXCLUSIVE \n  locks a table exclusively, preventing other users from accessing any table that you open. \n\nDetails: \nYou can lock tables only if you are the owner or have been granted the necessary privilege. \n\nIf you access the BASE table driver through PROC TSPL, the default value for the LOCKTABLE \noption is EXCLUSIVE. However, if you access the BASE table driver through a table server, \nor if you run your program locally with the SAS Table Server LIBNAME engine, the default \nvalue for the LOCKTABLE option is SHARE."},"Type":"TABLE_OPTION","Values":{"@Value1":"SHARE","@Value2":"EXCLUSIVE"},"ToolTips":{"@ToolTip1":"Locks a table in shared mode, allowing other users or processes to read data from  the tables, but preventing users from updating data.","@ToolTip2":"Locks a table exclusively, preventing other users from accessing any table that you open."}},{"Name":"OVERWRITE=","Help":{"#cdata":"For a table, drops the output table before the replacement output table is populated \nwith rows; for packages and threads, drops the existing package or thread if a package \nor thread by the same name exists. \n    \nSyntax: OVERWRITE= YES | NO;  \n\nArguments: \n\nYES | NO \n  specifies whether the output table is deleted before a replacement output table \n  is created or whether a package or thread is dropped.\n\n  Default: NO \n\nCAUTION:\nFor tables, use the OVERWRITE=YES statement only with data that is backed up or \nwith data that you can reconstruct. Because the output table is deleted first, \ndata will be lost if a failure occurs while the output table is being written."},"Type":"TABLE_OPTION","Values":{"@Value1":"YES","@Value2":"NO"},"ToolTips":{"@ToolTip1":"Specifies that the output table is deleted before a replacement output table    is created or a package or thread is dropped.","@ToolTip2":"Specifies that the output table is not deleted before a replacement output table    is created or a package or thread is dropped."}},{"Name":"PW=","Help":{"#cdata":"Assigns a READ, WRITE, and ALTER password to a SAS file, and enables access to a password-protected SAS file. \n    \nSyntax: PW=password  \n\nSyntax Description:\npassword \n  must be a valid SAS name.\n\nDetails:\nThe PW= option applies to all types of SAS files. You can use this option to assign \na password to a SAS file or to access a password-protected SAS file.\n\nWhen replacing a SAS data set that is protected by an ALTER password, the new data \nset inherits the ALTER password. When the code is written to the SAS log the password \nis blotted out, for example: \n\n  drop thread job2 (pw=xxxxxxx);\n\nNote:   A SAS password does not control access to a SAS file beyond the SAS system. \nYou should use the operating system-supplied utilities and file-system security \ncontrols in order to control access to SAS files outside of SAS."},"Type":"TABLE_OPTION"},{"Name":"READ=","Help":{"#cdata":"\n    \nSyntax: READ=read-password  \n\nSyntax Description: \nread-password \n  must be a valid SAS name. \n \nDetails: \nThe READ= option applies to all types of SAS files except catalogs. You can use this \noption to assign a password to a SAS file or to access a read-protected SAS file. When \nthe code is written to the SAS log, the password is blotted out, for example: \n\n  declare package sales (read=XXXXXXX);\n\nNote: A SAS password does not control access to a SAS file beyond the SAS system. You  \nshould use the operating system-supplied utilities and file-system security controls \nin order to control access to SAS files outside of SAS."},"Type":"TABLE_OPTION"},{"Name":"RENAME=","Help":{"#cdata":"\n    \nSyntax: RENAME= (old-name { = | AS } new-name [... old-name { = | AS } new-name ] ) ;  \n\nArguments: \nold-name \n  the column you want to rename.\n\nnew-name \n  the new name of the column. It must be a valid name for the data source.\n \nDetails: \nThe RENAME= table option allows you to change the names of one or more columns.\n\nIf you use RENAME= when you create a table, the new column name is included in the output \ntable. If you use RENAME= on an input table, the new name is used in TSPL programming statements.\n\nIf you use RENAME= in the same TSPL program with either the DROP= or the KEEP= table option, \nthe DROP= and the KEEP= table options are applied before RENAME=. You must use the old name in \nthe DROP= and KEEP= table options. You cannot drop and rename the same column in the same statement.\n\nIn addition to changing the name of a column, RENAME= also changes the label for the column."},"Type":"TABLE_OPTION","SubOptionsKeywords":"AS"},{"Name":"TYPE=","Help":{"#cdata":"Specifies the data set type for a specially structured SAS data set. \n    \nSyntax: TYPE=data-set-type  \n\nSyntax Description: \ndata-set-type \n  specifies the special type of the data set.\n\nDetails: \nUse the TYPE= table option in a DATA step to create a special SAS data set in the proper \nformat, or to identify the special type of the SAS data set in a procedure statement. \n\nYou can use the CONTENTS procedure to determine the type of a data set."},"Type":"TABLE_OPTION"},{"Name":"WRITE=","Help":{"#cdata":"Assigns a WRITE password to a SAS file that prevents users from writing to a file, \nunless they enter the password. \n    \nSyntax: WRITE=write-password  \n\nSyntax Description: \nwrite-password \n  must be a valid SAS name. \n \nDetails: \nThe WRITE= option applies to all types of SAS files except catalogs. You can use this \noption to assign a password to a SAS file or to access a write-protected SAS file. When \nthe code is written to the SAS log, the password is blotted out, for example: \n\n  drop thread job2a (write=XXXXXXX);\n\nNote: A SAS password does not control access to a SAS file beyond the SAS system. You \nshould use the operating system-supplied utilities and file-system security controls \nin order to control access to SAS files outside of SAS."},"Type":"TABLE_OPTION"}],"#comment":{}}}