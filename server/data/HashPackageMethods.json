{"Keywords":{"Keyword":[{"Name":"ADD","Type":"HASH_PACKAGE","Help":{"#cdata":"Adds the specified data that is associated with the given key to the hash package.\n    \nSyntax: rc = package.ADD();  \n\nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. If you do \n  not supply a return code variable for the method call and the method fails, then an \n  appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash package."}},{"Name":"CHECK","Type":"HASH_PACKAGE","Help":{"#cdata":"Checks whether the specified key is stored in the hash package. \n    \nSyntax: rc = package.CHECK();  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. If you \n  do not supply a return code variable for the method call and the method fails, then \n  an appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash package.\n \nDetails: \nYou use the CHECK method to determine whether a key exists in the hash table but \nthe data variable is not updated. The CHECK method returns a zero value if the key \nis found in the hash table and a non-zero value if the key is not found."}},{"Name":"CLEAR","Type":"HASH_PACKAGE","Help":{"#cdata":"Removes all items from a hash package without deleting the hash package instance. \n    \nSyntax: rc = package.CLEAR();  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. If you \n  do not supply a return code variable for the method call and the method fails, then \n  an appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash package.\n \nDetails:\nThe CLEAR method removes the items from within the hash package but leaves the hash \npackage instance so that it can be re-used. To remove a hash package completely, use \nthe DELETE method.\n\nTo clear all items from the hash package MyHash, use the following code: \n\n  rc = myhash.clear();"}},{"Name":"defineData","Type":"HASH_PACKAGE","Help":{"#cdata":"Defines data, associated with the specified data variables, to be stored in the hash package. \n    \nSyntax: rc = package.DEFINEDATA('datavarname');  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed. \n  A return code of zero indicates success; a non-zero value indicates failure. If you \n  do not supply a return code variable for the method call and the method fails, then \n  an appropriate error message is written to the log.\npackage \n  specifies the name of the hash package.\n'datavarname' \n  specifies the name of the data variable.\n \nDetails: \nThe hash package works by storing and retrieving data based on unique lookup keys. The keys \nand data are variables, which you use to initialize the hash package by using dot notation \nmethod calls. You define a key by passing the key variable name to the DEFINEKEY method. You \ndefine data by passing the data variable name to the DEFINEDATA method. You call the DEFINEDATA \nmethod for each data variable you create. When you have defined all key and data variables, \nyou must call the DEFINEDONE method to complete initialization of the hash package. Keys and \ndata consist of any number of character or numeric variables."}},{"Name":"defineDone","Type":"HASH_PACKAGE","Help":{"#cdata":"Indicates that all key and data definitions are complete. \n    \nSyntax: rc = package.DEFINEDONE( );  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. If you do \n  not supply a return code variable for the method call and the method fails, then an \n  appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash package.\n \nDetails: \nThe hash package works by storing and retrieving data based on unique lookup keys. The keys \nand data are variables, which you use to initialize the hash package by using dot notation \nmethod calls. You define a key by passing the key variable name to the DEFINEKEY method. You \ndefine data by passing the data variable name to the DEFINEDATA method. When you have defined \nall key and data variables, you must call the DEFINEDONE method to complete initialization of \nthe hash package. Keys and data consist of any number of character or numeric variables."}},{"Name":"defineKey","Type":"HASH_PACKAGE","Help":{"#cdata":"Defines key variables for the hash package. \n    \nSyntax: rc = package.DEFINEKEY('keyvarname');  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. If you do \n  not supply a return code variable for the method call and the method fails, then an \n  appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash package.\n\n'keyvarname' \n  specifies the name of the key variable. \n  The key variable name can also be enclosed in double quotation marks.\n \nDetails: \nThe hash package works by storing and retrieving data based on unique lookup keys. The keys \nand data are variables, which you use to initialize the hash package by using dot notation \nmethod calls. You define a key by passing the key variable name to the DEFINEKEY method. \nYou call the DEFINEKEY method for each key variable you create. You define data by passing \nthe data variable name to the DEFINEDATA method. When you have defined all key and data \nvariables, you must call the DEFINEDONE method to complete initialization of the hash \npackage. Keys and data consist of any number of character or numeric variables."}},{"Name":"DELETE","Type":"HASHORHITER_PACKAGE","Help":{"#cdata":"Deletes the hash or hash iterator package. \n    \nSyntax: rc = package.DELETE( );  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. If you do \n  not supply a return code variable for the method call and the method fails, then an \n  appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash or hash iterator package.\n \nDetails: \nWhen you no longer need the hash or hash iterator package, delete it by using the DELETE \nmethod. If you attempt to use a hash or hash iterator package after you delete it, an error \nwill be written to the log. If you want to delete all the items from within a hash package \nand save the hash package to use again, use the CLEAR method."}},{"Name":"FIND","Type":"HASH_PACKAGE","Help":{"#cdata":"Determines whether the specified key is stored in the hash package. \n    \nSyntax: rc = package.FIND();  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. If you \n  do not supply a return code variable for the method call and the method fails, then \n  an appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash package.\n \nDetails: \nYou use the key variable values to determine whether a key exists in the hash table. \nIf the key exists, the data values are copied into the data variables. The FIND method \nreturns a zero value if the key is found in the hash table and a non-zero value if the \nkey is not found."}},{"Name":"FIRST","Type":"HASHITERATOR_PACKAGE","Help":{"#cdata":"Returns the first value in the underlying hash package. \n    \nSyntax: rc = package.FIRST( );  \n\nArguments: \nrc \n  specifies whether the method succeeded or failed. \n  A return code of zero indicates success; a non-zero value indicates failure. If you do \n  not supply a return code variable for the method call and the method fails, then an \n  appropriate error message will be written to the log.\n\npackage \n  specifies the name of the hash iterator package.\n \nDetails: \nThe FIRST method returns the first data item in the hash package. If you use the ordered: 'yes' \nor ordered: 'ascending' parameter in the DECLARE PACKAGE statement or the _NEW_ operator when \nyou instantiate the hash package, then the data item that is returned is the one with the 'least' \nkey (smallest numeric value or first alphabetic character), because the data items are sorted in \nascending key-value order in the hash package. Repeated calls to the NEXT method will iteratively \ntraverse the hash package and return the data items in ascending key order. Conversely, if you \nuse the ordered: 'descending' parameter in the DECLARE PACKAGE statement or the _NEW_ operator \nwhen you instantiate the hash package, then the data item that is returned is the one with the \n'highest' key (largest numeric value or last alphabetic character), because the data items are \nsorted in descending key-value order in the hash package. Repeated calls to the NEXT method will \niteratively traverse the hash package and return the data items in descending key order.\n\nUse the LAST method to return the last data item in the hash package. \nNote: The FIRST method sets the data variable to the value of the data item so that it is \navailable for use after the method call."}},{"Name":"ITEM_SIZE","Type":"HASH_PACKAGE","Help":{"#cdata":"Returns the size (in bytes) for an item in a hash package. \n    \nSyntax: variable-name=package.ITEM_SIZE;  \n\nArguments: \nvariable-name \n  specifies the name of the variable that contains the size of the item in the hash \n  package after the method is complete.\n\npackage \n  specifies the name of the hash package.\n \nDetails: \nThe ITEM_SIZE attribute returns the size (in bytes) of an item, which includes the key \nand data variables and some internal information. You can set an estimate of how much \nmemory the hash package is using with the ITEM_SIZE and NUM_ITEMS attributes. The \nITEM_SIZE attribute does not reflect the initial overhead that the hash package \nrequires, nor does it take into account any necessary internal alignments. Therefore, \nthe use of ITEM_SIZE does not provide exact memory usage, but it does return a good \napproximation."}},{"Name":"LAST","Type":"HASHITERATOR_PACKAGE","Help":{"#cdata":"Returns the last value in the underlying hash package. \n    \nSyntax: rc = package.LAST();  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed.\n  A return code of zero indicates success; a non-zero value indicates failure. If you do \n  not supply a return code variable for the method call and the method fails, then an \n  appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash iterator package.\n \nDetails: \nThe LAST method returns the last data item in the hash package. If you use the ordered: \n'yes' or ordered: 'ascending' parameter in the DECLARE PACKAGE statement or the _NEW_ \noperator when you instantiate the hash package, then the data item that is returned is \nthe one with the 'highest' key (largest numeric value or last alphabetic character), \nbecause the data items are sorted in ascending key-value order in the hash package. \nConversely, if you use the ordered: 'descending' parameter in the DECLARE PACKAGE \nstatement or the _NEW_ operator when you instantiate the hash package, then the data \nitem that is returned is the one with the 'least' key (smallest numeric value or \nfirst alphabetic character), because the data items are sorted in descending key-value \norder in the hash package.\n\nUse the FIRST method to return the first data item in the hash package."}},{"Name":"NEXT","Type":"HASHITERATOR_PACKAGE","Help":{"#cdata":"Returns the next value in the underlying hash package. \n    \nSyntax: rc = package.NEXT();  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. If you \n  do not supply a return code variable for the method call and the method fails, then \n  an appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash iterator package.\n \nDetails: \nUse the NEXT method iteratively to traverse the hash package and return the data items \nin key order. The FIRST method returns the first data item in the hash package. You can \nuse the PREV method to return the previous data item in the hash package."}},{"Name":"NUM_ITEMS","Type":"HASH_PACKAGE","Help":{"#cdata":"Returns the number of items in the hash package. \n    \nSyntax: variable-name=package.NUM_ITEMS;  \n \nArguments: \nvariable-name \n  specifies the number of items in the hash package after the method is complete.\n\npackage \n  specifies the name of the hash package.\n\nDetails: \nThe NUM_ITEMS attribute returns the number of key/data pairs stored in the hash table."}},{"Name":"OUTPUT","Type":"HASH_PACKAGE","Help":{"#cdata":"Creates a table that contains the data in the hash package. \n    \nSyntax: rc = package.OUTPUT ( 'datasource' );  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. \n  If you do not supply a return code variable for the method call and the method \n  fails, then an appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash iterator package.\n\n'datasource' \n  specifies the name of the output table.\n  The name of the hash table can be a literal or character variable.\n \nDetails: \nHash package keys are not automatically stored as part of the output table. The keys \nmust be defined as data items by using the DEFINEDATA method to be included in the \noutput table."}},{"Name":"PREV","Type":"HASHITERATOR_PACKAGE","Help":{"#cdata":"Returns the previous value in the underlying hash package. \n    \nSyntax \nrc = package.PREV( );  \n\nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. \n  If you do not supply a return code variable for the method call and the method \n  fails, then an appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash iterator package.\n  \nDetails: \nUse the PREV method iteratively to traverse the hash package and return the data \nitems in reverse key order. The FIRST method returns the first data item in the \nhash package. The LAST method returns the last data item in the hash package. You \ncan use the NEXT method to return the next data item in the hash package."}},{"Name":"REF","Type":"HASH_PACKAGE","Help":{"#cdata":"Consolidates a FIND and ADD methods into a single method call. \n    \nSyntax: rc = package.REF();  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. \n  If you do not supply a return code variable for the method call and the method \n  fails, then an appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash package.\n \nDetails: \nYou can consolidate FIND and ADD methods into a single REF method."}},{"Name":"REMOVE","Type":"HASH_PACKAGE","Help":{"#cdata":"Removes the data that is associated with the specified key from the hash package. \n    \nSyntax: rc = package.REMOVE();  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. If you \n  do not supply a return code variable for the method call and the method fails, then \n  an appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash package.\n \nDetails: \nThe REMOVE method uses the values in the key variables to find and remove an existing \nkey in a hash table.\n\nYou specify the key and then use the REMOVE method to remove the key and data in a \nhash object."}},{"Name":"REPLACE","Type":"HASH_PACKAGE","Help":{"#cdata":"Replaces the data that is associated with the specified key with new data. \n    \nSyntax: rc = package.REPLACE( );  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. If you \n  do not supply a return code variable for the method call and the method fails, then \n  an appropriate error message is written to the log.\n\npackage \n  specifies the name of the hash package.\n \nDetails: \nThe REPLACE method uses the values in the key variables to find a key/data pair in the \nhash table. If a pair is found, the data is replaced with the current value in the data \nvariables."}},{"Name":"SETCUR","Type":"HASHITERATOR_PACKAGE","Help":{"#cdata":"Specifies a starting key item for iteration. \n    \nSyntax \nrc=package.SETCUR( );  \n \nArguments: \nrc \n  specifies whether the method succeeded or failed.\n\n  A return code of zero indicates success; a non-zero value indicates failure. If you do \n  not supply a return code variable for the method call and the method fails, an appropriate \n  error message will be printed to the log.\n\npackage \n  specifies the name of the hash iterator package.\n \nDetails: \nThe hash iterator enables you to start iteration on any item in the hash package. The \nSETCUR method sets the starting key for iteration. You use the KEY option to specify \nthe starting item. You can use the FIRST or LAST methods to start iteration on the \nfirst or last item, respectively."}}]}}