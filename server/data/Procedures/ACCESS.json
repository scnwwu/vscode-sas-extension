{"Procedure":{"Name":"ACCESS","ProductGroup":"SAS/ACCESS","ProcedureHelp":{"#cdata":"Syntax: PROC ACCESS options;  \n\nCreate and Update Statements:  \n  CREATE libref.member-name.ACCESS|VIEW ; \n  UPDATE libref.member-name.ACCESS|VIEW ;  \n \nDatabase-Description Statements:\n  PATH= 'path-and-filename<.PC-filename-extension>' | <'>filename<'> | fileref;  \n \nEditing Statements:\n  ASSIGN <=>YES|NO|Y|N;  \n  DROP <'>column-identifier-1<'> <<'>...column-identifier-n<'>>;  \n  FORMAT <'>column-identifier-1<'><=>SAS-format-name-1<'> \n    <...<'>column-identifier-n<'><=>SAS-format-name-n>;  \n  LIST <ALL|VIEW|<'>column-identifier<'>>;  \n  MIXED <=> YES | NO | Y | N;  \n  (The MIXED statement is not available for DIF and DBF files.)  \n  QUIT;  \n  RENAME <'>column-identifier-1 <'><=>SAS-variable-name-1 \n    <...<'>column-identifier-n<'><=>SAS-variable-name-n>;  \n  RESET ALL | <'>column-identifier-1<'><...<'>column-identifier-n<'>>;  \n  SELECT ALL|<'>column-identifier-1<'> <...<'>column-identifier-n<'>>;  \n  SUBSET selection-criteria;  \n  TYPE <'>column-identifier-1<'><=> C | N <...column-identifier-n <=> C | N>;  \n  (The TYPE statement is not available for DBF files.)  \n  UNIQUE <=>YES|NO|Y|N ;  \n\nRUN;"},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"ACCDESC=|ACCESS=|AD=","ProcedureOptionHelp":{"#cdata":"[Syntax: ACCDESC=libref.access-descriptor <(READ|WRITE|ALTER=password)> ] \n      \nSpecifies an access descriptor. ACCDESC= is used with the DBMS= option to create or update a view \ndescriptor that is based on the specified access descriptor. You can use a SAS data set option on \nthe ACCDESC= option to specify any passwords that have been assigned to the access descriptor. \n\nUse this option when creating or updating a view descriptor based on an access descriptor that was \ncreated in a separate PROC ACCESS step. \n\nYou name the view descriptor in the CREATE statement. You can also use a SAS data set option on the \nACCDESC= option to specify a SAS password for the access descriptor.\n\nNote: The ODBC interface does not support this option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"DBMS=","ProcedureOptionHelp":{"#cdata":"Specifies which database management system, PC database product, or spreadsheet system you want to \nuse. This DBMS-specific option is required."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"S2K","@Value2":"ORACLE","@Value3":"SYBASE","@Value4":"DBF","@Value5":"DIF","@Value6":"WK1","@Value7":"WK3","@Value8":"WK4","@Value9":"XLS","@Value10":"DATACOM"},"ProcedureOptionToolTips":{"@ToolTip1":"System 2000* (S2K) DBMS","@ToolTip2":"Oracle database management system","@ToolTip3":"Sybase database management system","@ToolTip4":"dBase DBF files","@ToolTip5":"Data interchange format (DIF) files","@ToolTip6":"Lotus 1-2-3 spreadsheet files (Release 1)","@ToolTip7":"Lotus 1-2-3 spreadsheet files (Release 3)","@ToolTip8":"Lotus 1-2-3 spreadsheet files (Release 4)","@ToolTip9":"Excel spreadsheet","@ToolTip10":"SAS/ACCESS interface to CA-Datacom/DB"}},{"ProcedureOptionName":"OUT=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUT= <libref.>member-name] \n      \nSpecifies a SAS data file. When VIEWDESC= and OUT= are used together, you can write data that \nis accessed from the view descriptor to the SAS data set that is specified in OUT=."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"VIEWDESC=|VIEW=|VD=","ProcedureOptionHelp":{"#cdata":"[Syntax: VIEWDESC=libref.view-descriptor] \n      \nSpecifies a view descriptor as input for the OUT= option."},"ProcedureOptionType":"DV"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"ASSIGN=|AN=","StatementHelp":{"#cdata":"Syntax: ASSIGN <=> YES|NO|Y|N; \n      \nThe ASSIGN= statement indicates whether SAS variable names and formats are automatically generated. \nWhere long names must be shortened to the SAS length limit of eight characters, variable names are \nautomatically generated."},"StatementOptions":null},{"StatementName":"ASSIGN|AN","StatementHelp":{"#cdata":"Syntax: ASSIGN; | AN; \n      \nThe ASSIGN statement indicates that SAS variable names and formats are automatically generated. \nWhere long names must be shortened to the SAS length limit of eight characters, variable names are \nautomatically generated. \n\nEquivalent to ASSIGN=YES|Y."},"StatementOptions":null},{"StatementName":"BYKEY","StatementHelp":{"#cdata":"Syntax: BYKEY variable-identifier = YES|NO <...variable-identifier-n= YES|NO>;  \n      \nThe BYKEY statement designates one or more items as BY keys and, in a view descriptor, \nalso selects them for the view. \n\nThe BYKEY statement cannot be used to change the BYKEY value in a view descriptor if \nASSIGN= YES is specified in the access descriptor from which the view descriptor is derived. \n\nvariable-identifier can be one of the following: \n\n  o the current SAS name for the data item \n\n    Note:   Any name on the left side of the equal sign (=) must be a SAS name, not a SYSTEM 2000 \n    name. In an access descriptor, if the ASSIGN statement is omitted, you must enter the item \n    number or component number (C-number) on the left side of the equal sign (=).   \n\n  o a positional equivalent, which is the number that represents the item, as specified in the \n    LIST statement\n\n  o the SYSTEM 2000 C-number of the database item"},"StatementOptions":null},{"StatementName":"CREATE","StatementHelp":{"#cdata":"Syntax: CREATE libref.descriptor-name.ACCESS|VIEW; \n      \nUse CREATE to create an access or view descriptor for a file you want to access from SAS. \nTo access a particular file of a supported type, you must create first an access descriptor, \nand then one or more view descriptors based on the access descriptor.\n\nThe descriptor name has three parts, separated by periods. The libref identifies a SAS library, \nwhich is associated with a directory on the local system disk where the descriptor is created. \nThe libref must already have been created using the LIBNAME statement. The descriptor-name is \nthe name of the descriptor to be created. The third part is the descriptor type. Specify ACCESS \nfor an access descriptor or VIEW for a view descriptor."},"StatementOptions":null},{"StatementName":"DATABASE=|DB=|DBN=|SDKDB=","StatementHelp":{"#cdata":"Syntax: DATABASE=database-name; \n      \nThe DATABASE statement specifies the name of the SYSTEM 2000 database that you want \nto access. The DATABASE statement should immediately follow the CREATE statement for \nthe access descriptor being created. \n\ndatabase-name can be 1 to 16 characters in length. Names longer than 16 characters \nare truncated and no error message appears. If the database name contains blanks or \nspecial characters, enclose the name in single or double quotation marks."},"StatementOptions":null},{"StatementName":"TABLE=","StatementHelp":{"#cdata":"Syntax: TABLE= <'>table-name<'>; \n      \nIdentifies the DBMS table on which the access descriptor is based. \n\ntable-name \na valid DBMS table name. If it contains lowercase characters, special characters, or national \ncharacters, you must enclose it in quotation marks."},"StatementOptions":null},{"StatementName":"DROP","StatementHelp":{"#cdata":"Syntax: DROP <'>column-identifier-1<'> \n  <...<'>column-identifier-n<'>>; \n  \nThe DROP statement drops the specified column from an access descriptor. The column cannot be \nselected for a view descriptor that is based on the access descriptor. However, the specified \ncolumn in the PC file remains unaffected by this statement.\n\nYou can specify the DROP statement only when you create or update an access descriptor or when \nyou update a view descriptor. DROP is not allowed when you create a view descriptor. When you \nuse the UPDATE statement, you can specify DROP to remove a column from the view descriptor. \nHowever, the specified column in the PC file remains unaffected by the DROP statement."},"StatementOptions":null},{"StatementName":"FORMAT|FMT","StatementHelp":{"#cdata":"Syntax: FORMAT|FMT <'>column-identifier-1<'><=>SAS-format-name-1 \n  <...<'>column-identifier-n<'><=>SAS-format-name-n>; \n  \n  The FORMAT statement changes a SAS variable format from its default format. The default SAS \n  variable format is based on the data type and format of the PC file column."},"StatementOptions":null},{"StatementName":"LENGTH|LEN|S2KLEN","StatementHelp":{"#cdata":"Syntax: LENGTH variable-identifier = item-width <...variable-identifier-n= item-width-n>; \n      \nThe LENGTH statement changes the item width in characters from the default width; the \ndefault item width is based on the database item's picture specification. The LENGTH \nstatement enables SAS to handle S2K CHARACTER and TEXT items that overflow their widths \n(SAS does not permit variable-length character variables). \n\nitem-width can be a maximum of 200 characters. \n\nvariable-identifier can be one of the following: \n\n  o the current SAS name for the item \n\n    Note:   Any name on the left side of the equal sign (=) must be a SAS name, not a \n    SYSTEM 2000 name. In an access descriptor, if the ASSIGN statement is omitted, you \n    must enter the item number or component number (C-number) on the left side of the \n    equal sign (=).  \n\n  o a positional equivalent, which is the number that represents the item, as specified \n    in the LIST statement\n\n  o the SYSTEM 2000 C-number of the database item.\n\nYou can use only the LENGTH statement with a view descriptor if ASSIGN= NO in the access \ndescriptor from which the view descriptor is derived. When used for a view descriptor, the \nLENGTH statement automatically selects the re-formatted item. That is, if you change the \nlength associated with an item, you do not have to issue a SELECT statement for that item."},"StatementOptions":null},{"StatementName":"LIST","StatementHelp":{"#cdata":"Syntax: LIST <ALL|VIEW|<'>column-identifier<'>>; \n      \nThe LIST statement lists columns in the descriptor along with information about the columns. \nYou can use the LIST statement when creating an access descriptor or a view descriptor. The \nLIST information is written to your SAS log."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ALL","StatementOptionHelp":{"#cdata":"Lists all columns in the table, positional equivalents, SAS variable names, and SAS variable formats \n that are available for a descriptor."},"StatementOptionType":"S"},{"StatementOptionName":"VIEW","StatementOptionHelp":{"#cdata":"Lists all columns that are selected for a view descriptor, their positional equivalents, their SAS \nnames and formats, and any subsetting clauses."},"StatementOptionType":"S"}]}},{"StatementName":"QUIT|EXIT","StatementHelp":{"#cdata":"The QUIT statement tells the ACCESS procedure to terminate processing. This statement \nhas no options."},"StatementStates":"QUIT","StatementDisplayType":"EndSection","StatementOptions":null},{"StatementName":"UPDATE","StatementHelp":{"#cdata":"Syntax: UPDATE libref.descriptor-name.ACCESS|VIEW ; \n      \nUse the UPDATE statement to perform a quick, simple update of a descriptor. For example, if the \nPC database file for an existing access descriptor is relocated, you can use UPDATE with the PATH \noption to specify the new location.\n\nDescriptors modified by UPDATE are not checked for errors. Where validation is crucial, use CREATE \nto overwrite a descriptor rather than UPDATE. \n\nThe descriptor is a name in three parts separated by periods (.):\n\nlibref \nidentifies the library container, which is a location either on the local system's disk or that the \nlocal system can directly access. The libref must have been previously created by a LIBNAME statement. \n\ndescriptor-name \nis the descriptor you are updating. It must already exist in libref. (See CREATE Statement.)\n\nACCESS \nindicates that you are updating an access descriptor while VIEW indicates you are updating \na view descriptor."},"StatementOptions":null},{"StatementName":"RENAME","StatementHelp":{"#cdata":"Syntax: RENAME <'>column-identifier-1<'><=>SAS-variable-name-1 \n  <...<'>column-identifier-n<'><=>SAS-variable-name-n>; \n  \nThe RENAME statement enters or modifies the SAS variable name that is associated with a column \nin a PC file. Use the RENAME statement when creating an access descriptor or a view descriptor."},"StatementOptions":null},{"StatementName":"PATH=","StatementHelp":{"#cdata":"Syntax: PATH= 'path-and-filename<.PC-file-extension>' |<'>filename<'> | fileref ; \n      \nThe PATH= statement indicates the path and name of the file you want to access. The length of \nthe filename and its other conventions can vary with the operating system."},"StatementOptions":null},{"StatementName":"MIXED","StatementHelp":{"#cdata":"Syntax: MIXED <=> YES | NO | Y | N; \n      \nYou use the MIXED statement with WKn and XLS files if you have both numeric and character data in a \ncolumn. Specifying YES allows both numeric and character data to be displayed as SAS character data.\nNO, the default, treats any data in a column that does not match the specified type as missing values."},"StatementOptions":null},{"StatementName":"RESET","StatementHelp":{"#cdata":"Syntax: RESET ALL|<'>column-identifier-1<'><...<'>column-identifier-n<'>>; \n      \nThe RESET statement resets either the attributes of all columns or the attributes of the specified \ncolumns to their default values. The RESET statement can be used when you create an access descriptor \nor a view descriptor, but it is not allowed when you are updating a descriptor. RESET has different \neffects on access and view descriptors"},"StatementOptions":{"StatementOption":{"StatementOptionName":"ALL","StatementOptionHelp":{"#cdata":"For access descriptors, resets all PC file columns that are defined to their default names and \nformat settings and reselects any dropped columns."},"StatementOptionType":"S"}}},{"StatementName":"SELECT","StatementHelp":{"#cdata":"Syntax: SELECT ALL|<'>column-identifier-1<'><...<'>column-identifier-n<'>>; \n      \nThe SELECT statement specifies which PC file columns in the access descriptor to include in the view \ndescriptor. This is a required statement, and you can use it only when you create view descriptors. \nYou cannot use the SELECT statement when you update a view descriptor."},"StatementOptions":{"StatementOption":{"StatementOptionName":"ALL","StatementOptionHelp":{"#cdata":"Includes in the view descriptor all columns that were defined in the access descriptor and that \nwere not dropped."},"StatementOptionType":"S"}}},{"StatementName":"SUBSET","StatementHelp":{"#cdata":"Syntax: SUBSET selection-criteria; \n      \nYou use the SUBSET statement to specify selection criteria when you create a view descriptor. \nThis statement is optional. If you omit it, the view retrieves all data (rows) in the PC file."},"StatementOptions":null},{"StatementName":"TYPE","StatementHelp":{"#cdata":"Syntax: TYPE <'>column-identifier-1<'><=> C | N<...column-identifier-n <=> C | N>; \n      \nSAS data sets have two data types: character (C) and numeric (N). Spreadsheet files have the same \ntwo data types: character (for labels and formula strings) and numeric (for numbers and formulas). \nChanging the default data type of a SAS variable in a descriptor file also changes its associated \ndefault format in the loaded file.\n\nIf you omit the TYPE statement, the database field types are generated from the PC files data types. \nYou can change as many database field types as you want in one TYPE statement.\n\nThis statement is not available for use with DBF files."},"StatementOptions":null},{"StatementName":"S2KPW=|MD=|SDKMD=|S2KMODE=","StatementHelp":{"#cdata":"Stores the SYSTEM 2000 password and access mode for a view descriptor."},"StatementOptions":{"StatementOption":{"StatementOptionName":"MODE=","StatementOptionHelp":{"#cdata":"Specifies the mode in which you want to access SYSTEM 2000."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"SINGLE|SU|S","@Value2":"MULTI|MU|M"},"StatementOptionToolTips":{"@ToolTip1":"Means that the database in your SAS program environment is in single-user mode.","@ToolTip2":"Means that the database files are in Multi-User mode. The mode is also stored with the view."}}}},{"StatementName":"UNIQUE=|UN=","StatementHelp":{"#cdata":"Syntax: UNIQUE <=> YES|NO|Y|N ; \n      \nThe UNIQUE= statement specifies whether the SAS/ACCESS interface generates unique SAS variable \nnames for PC file columns for which SAS variable names have not been entered. You cannot use \nthe UNIQUE statement when you are updating a view descriptor."},"StatementOptions":null},{"StatementName":"UNIQUE|UN","StatementHelp":{"#cdata":"Syntax: UNIQUE ; | UN; \n      \nThe UNIQUE statement specifies that the SAS/ACCESS interface generates unique SAS variable \nnames for PC file columns for which SAS variable names have not been entered. You cannot use \nthe UNIQUE statement when you are updating a view descriptor. \n\nEquivalent to UNIQUE=YES|Y."},"StatementOptions":null},{"StatementName":"USER=","StatementHelp":{"#cdata":"Syntax: USER<=> <\">authorized-Datacom-userid<\">; \n      \nThe USER statement supplies a required CA-DATADICTIONARY user ID. The user ID is a 32-character \nentity-occurrence name of a PERSON entity in CA-DATADICTIONARY, which is not necessarily the same \nas the user's TSO ID.\n\nThe value entered in the USER statement is saved in the access descriptor and in any view \ndescriptor created from the access descriptor. The user name and optional password must have \nretrieval authority on six entity-types: DATABASE, FILE, RECORD, ELEMENT, KEY, and FIELD.\n\nIf the user ID contains special characters or national characters, enclose it in quotation marks."},"StatementOptions":null},{"StatementName":"URT=","StatementHelp":{"#cdata":"Syntax: URT<=> <\">User-Requirements-Table-name<\">; \n      \nThe URT statement identifies the user requirements table (URT) to be used by the interface \nview engine when it opens a view descriptor. CA-Datacom/DB requires a URT to open a table. \nHowever, this statement is optional. If you do not specify a URT when creating an access \ndescriptor or a view descriptor, the engine will create a default URT. A URT name can also \nbe provided with a data set option (see Data Set Options).\n\nIf you specify a URT when creating an access descriptor, the interface view engine will \nuse it when it opens any view descriptors created from this access descriptor.\n\nIf the URT name contains special characters or national characters, enclose the name in quotation marks."},"StatementOptions":null},{"StatementName":"CONTENT","StatementHelp":{"#cdata":"Syntax: CONTENT <\">column-identifier-1<\"> <=> SAS-date-format | length \n<...<\">column-identifier-n<\"> <=> SAS-date-format | length>; \n\nThe CONTENT statement enables you to specify a SAS date format or column length for a CA-Datacom/DB \nnondate field. A date format means that the CA-Datacom/DB data has the specified representation. The \ncolumn length determines the number of characters to be accessed. \n\nSAS stores datetime values as the number of days and seconds before and after January 1, 1960. \nEntering a SAS date format or column length automatically changes the default values for SAS formats \nand informats. However, if you have previously changed any format or informat values, specifying a \nCONTENT value does not change those values. Four date formats are used:\n\n  YYMMDDw. where w is 6 for two-digit years or 8 for four-digit years \n  MMDDYYw. where w is 6 for two-digit years or 8 for four-digit years \n  DDMMYYw. where w is 6 for two-digit years or 8 for four-digit years \n  JULIANw. where w is 5 for two-digit years or 7 for four-digit years.\n\nThe column-identifier argument can be either the CA-Datacom/DB field name or the positional \nequivalent from the LIST statement, which is the number that represents the column's place \nin the access descriptor. If the column contains special characters or national characters, \nenclose the name in quotation marks."},"StatementOptions":null},{"StatementName":"EXTEND","StatementHelp":{"#cdata":"Syntax: EXTEND ALL | VIEW | <\">column-identifier-1<\"> <...<\">column-identifier-n<\">>; \n      \nThe EXTEND statement lists information about the DBMS columns in a descriptor. The word *GROUP* \nis displayed to indicate the existence of a group. \n\nYou can use the EXTEND statement when creating an access or a view descriptor. The EXTEND information \nis written to your SAS log.\n\nYou can specify EXTEND as many times as you want while creating a descriptor; specify EXTEND last \nin your PROC ACCESS code to see the completed descriptor information. Or, if you are creating \nmultiple descriptors, specify EXTEND before the next CREATE statement to list all the information \nabout the descriptor you are creating. \n\ncolumn-identifier \nlists the specified DBMS column's SAS name, its positional equivalent, its SAS informat, the database \ncontent, number of occurrences, DBMS column type, and whether the column has been selected or dropped. \nIf the column name contains special characters or national characters, enclose the name in quotation marks."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ALL","StatementOptionHelp":{"#cdata":"Lists all of the DBMS columns in the file, the positional equivalents, the SAS names, the SAS \ninformats, the database contents, the number of occurrences, and the DBMS column types (Alpha \nor Zoned). When you are creating an access descriptor, *NON-DISPLAY* appears next to the column \ndescription for any column that has been dropped. When you are creating a view descriptor, \n*SELECTED* appears next to the column description for columns that you have selected for the view."},"StatementOptionType":"S"},{"StatementOptionName":"VIEW","StatementOptionHelp":{"#cdata":"Lists all the DBMS columns that are selected for the view descriptor, along with their positional \nequivalents, their SAS names and informats, the database contents, number of occurrences, DBMS \ncolumn types, any subsetting clauses, and the word *SELECTED* . Any DBMS columns that are dropped \nin the access descriptor are not displayed. The VIEW argument is valid only for a view descriptor."},"StatementOptionType":"S"}]}},{"StatementName":"KEY=","StatementHelp":{"#cdata":"Syntax: KEY<=> <\">Datacom-short-name<\">; \n      \nThe KEY statement specifies the CA-Datacom/DB short name for a Default Key in the CA-Datacom/DB \ntable. The Default Key value governs the order in which records are read. The Default Key is an \noptional key that defaults to the Native Key. The Native Key governs how records are stored and \nmaintained.\n\nYou can specify another key as the Default Key if you want the records processed in a certain \norder, but you do not want to specify a SORT clause to achieve that result. You can also specify \na Default Key with the DDBKEY= data set option when you execute a SAS procedure.\n\nIf the CA-Datacom/DB short name contains special characters or national characters, enclose the \nname in quotation marks."},"StatementOptions":null},{"StatementName":"LISTINFO","StatementHelp":{"#cdata":"Syntax: LISTINFO ALL | VIEW | <\">column-identifier-1<\"> <...<\">column-identifier-n<\">>; \n      \nThe LISTINFO statement shows additional data field information for one or more DBMS columns in \nthe descriptor. The LISTINFO statement can be used when creating an access or a view descriptor. \nThe LISTINFO information is written to your SAS log. \n\nThe LISTINFO statement is especially helpful for key fields. It shows the CA-Datacom/DB short \nname as well as all the columns and levels that make up the key.\n\ncolumn-identifier \nlists the field composition of the specified DBMS columns. If the column name contains special \ncharacters or national characters, enclose the name in quotation marks."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ALL","StatementOptionHelp":{"#cdata":"Lists the field composition of all the DBMS columns in the file."},"StatementOptionType":"S"},{"StatementOptionName":"VIEW","StatementOptionHelp":{"#cdata":"Lists the field composition of the DBMS columns selected for the view descriptor. Any columns \nthat are dropped in the access descriptor are not displayed. The VIEW argument is valid only \nfor a view descriptor."},"StatementOptionType":"S"}]}},{"StatementName":"LISTOCC","StatementHelp":{"#cdata":"Syntax: LISTOCC <\">column-identifier-1<\"> <... <\">column-identifier-n<\">>; \n      \nThe LISTOCC statement lists all the occurrences for the specified repeating fields along with \ninformation such as the CA-Datacom/DB level, the SAS column name, the occurrence number, the \nSAS column format and informat, the DB content, and whether the occurrence has been selected \nor dropped. The LISTOCC statement can be used when creating an access descriptor or a view \ndescriptor. The LISTOCC information is written to your SAS log.\n\nThe LISTOCC statement takes the following argument: \n\ncolumn-identifier \ncan be either the CA-Datacom/DB field name or the positional equivalent from the LIST statement, \nwhich is the number that represents the column's place in the descriptor. For example, to list \noccurrences for the fifth column in the descriptor, submit the following statement: \n\n  listocc 5;\n\nIf the DBMS column name contains special characters or national characters, enclose the name \nin quotation marks. The column-identifier must be a repeating field."},"StatementOptions":null},{"StatementName":"OCCURS","StatementHelp":{"#cdata":"Syntax: OCCURS <\">column-identifier<\"> \n      \nYou use the OCCURS statement to modify values for occurrences of a repeating data field. The OCCURS statement can be used when creating an access descriptor or a view descriptor. \n\nThe OCCURS statement enables you to complete the following tasks:\n\n  o select individual occurrences or a range of occurrences \n  o drop individual occurrences or a range of occurrences \n  o reset individual occurrences or a range of occurrences \n  o change the format value for one or more occurrences \n  o change the informat value for one or more occurrences \n  o change the database content value for one or more occurrences \n  o rename the SAS column name for one or more occurrences.\n\nYou can see the two-character numeric level of a CA-Datacom/DB field by using one of the LIST \nstatements. The LVL column displays the word KEY for keys, the number 01 for simple fields and \ntop-level compound fields, 02 for secondary fields, and so on. This listing is for information \nonly and cannot be edited."},"StatementOptions":null},{"StatementName":"PASSWORD=|PASS=|PW=","StatementHelp":{"#cdata":"Syntax: PASSWORD | PASS | PW<=> <\">Datacom-password<\">; \n      \nThe PASSWORD statement enables you to supply a CA-DATADICTIONARY password. Not every user \nID requires a password.\n\nThe value is the 12-character PASSWORD attribute of the PERSON entity-occurrence identified \nin User Name. If you enter a value, it is saved (in encrypted form) in the access descriptor \nand in any view descriptor created from it. \n\nIf the password contains any special characters or national characters, enclose it in \nquotation marks.\n\nPASS and PW are aliases for the PASSWORD statement."},"StatementOptions":null},{"StatementName":"TBLSTAT=","StatementHelp":{"#cdata":"Syntax: TBLSTAT<=> <\">PROD<\"> | <\">TEST<\"> | <\">test-version<\">; \n      \nThe TBLSTAT statement enables you to indicate the CA-DATADICTIONARY status and version of the \nCA-Datacom/DB table you want to access. The TBLSTAT statement is required only if the database \nyou want to use is not the one in production status.\n\nThe TBLSTAT statement can take one of the following arguments:\n\n  PROD indicates the table that is currently in production. This is the default.\n   \n  TEST indicates the table that is currently in test.\n   \n  test-version indicates a specific test version of the database. This argument must be in the \n  form of Txxx, where xxx is a 3-digit number. \n\nOther status values, such as HIST, are not used."},"StatementOptions":null},{"StatementName":"SSID=","StatementHelp":{"#cdata":"[Syntax: SSID=DB2-subsystem-id;] \n      \nSpecifies the DB2 subsystem ID to connect to at connection time. SSID= is\noptional. If you omit it, SAS connects to the DB2 subsystem that is specified\nin the SAS system option, DB2SSID=. The DB2 subsystem ID is limited to four\ncharacters."},"ProcedureOptionType":"V"},{"StatementName":"SERVER=","StatementHelp":{"#cdata":"[Syntax: SERVER=DRDA-server;] \n      \nSpecifies the DRDA server that you want to connect to. SERVER= enables you to\naccess DRDA resources stored at remote locations. Check with your system\nadministrator for system names. You can connect to only one server per LIBNAME\nstatement. \n\nSERVER= is optional. If you omit it, you access tables from your local DB2\ndatabase unless you have specified a value for the LOCATION= LIBNAME option.\nThere is no default value for this option.\n"},"ProcedureOptionType":"V"},{"StatementName":"LOCATION=","StatementHelp":{"#cdata":"[Syntax: LOCATION=location;] \n      \nEnables you to further qualify where a table is located.\n\nIn the DB2 z/OS engine, the location is converted to the first level of a\nthree-level table name: Location.Authid.Table. The connection to the remote DB2\nsubsystem is done implicitly by DB2 when DB2 receives a three-level table name\nin an SQL statement. \n\nLOCATION= is optional. If you omit it, SAS accesses the data from the local DB2\ndatabase.\n"},"ProcedureOptionType":"V"}],"#comment":{}}}}