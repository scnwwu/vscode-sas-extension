{"Procedure":{"Name":"BNET","ProductGroup":"CAS|VIYA|DATA MINING AND MACHINE LEARNING","ProcedureHelp":{"#cdata":"Syntax: PROC BNET <options>;\n  AUTOTUNE <options>;\n  CODE FILE=filename;\n  FREQ variable;\n  ID variables;\n  INPUT variables </LEVEL=INTERVAL | NOMINAL > ;\n  OUTPUT OUT=CAS-libref.data-table <option>;\n  PARTITION partition-option;\n  SAVESTATE RSTORE=CAS-libref.data-table;\n  TARGET variable;\n  \nThe BNET procedure learns a Bayesian network from an input data table in SAS Viya. \nA Bayesian network is a directed acyclic graphical model in which nodes represent \nrandom variables and the links between nodes represent conditional dependency of \nthe random variables. Because the Bayesian network provides conditional independence \nstructure and a conditional probability table at each node, the model has been used \nsuccessfully as a predictive model in supervised data mining."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"ALPHA=","ProcedureOptionHelp":{"#cdata":"Syntax: ALPHA=number\n      \nSpecifies the significance level for independence tests by using chi-square or G-square statistics. \nThe valid range is 0 to 1, inclusive. If you want to choose the best model among several, you can \nspecify up to five numbers, separated by spaces. If you specify multiple numbers but you do not \nspecify the BESTMODEL option, PROC BNET uses the first number and ignores the remaining numbers.\n\nBy default, ALPHA = 0.05."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"BESTMODEL","ProcedureOptionHelp":{"#cdata":"Requests that the best model be selected by using a validation data subset. You can specify the \nvalidation data subset by using the PARTITION statement. If you specify this option, you can \nspecify multiple values for the ALPHA=, PRESCREENING=, VARSELECT=, STRUCTURE=, and PARENTING= \noptions. PROC BNET uses the misclassification errors on the validation data to automatically \ndecide the best set of parameter values among these options.\n\nBy default, a best model is not selected.\n\nNote: If you specify BESTMODEL in PROC statement, then AUTOTUNE statement will be ignored."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=CAS-libref.data-table\n      \nNames the input data table for PROC BNET to use. CAS-libref.data-table is a two-level name,\nwhere\n\n  CAS-libref refers to a collection of information that is defined in the LIBNAME statement and\n    includes the caslib, which includes a path to the data, and a session identifier, which\n    defaults to the active session but which can be explicitly defined in the LIBNAME\n    statement.\n    \n  data-table specifies the name of the input data table."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"INDEPTEST=","ProcedureOptionHelp":{"#cdata":"Syntax: INDEPTEST=ALL | CHIGSQUARE | CHISQUARE | GSQUARE | MI\n        \nSpecifies the method for independence tests. \n\nBy default, INDEPTEST=CHIGSQUARE."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"ALL","@Value2":"CHIGSQUARE","@Value3":"CHISQUARE","@Value4":"GSQUARE","@Value5":"MI"},"ProcedureOptionToolTips":{"@ToolTip1":"Uses the chi-square, the G-square statistics, and the normalized mutual information for independence tests.","@ToolTip2":"Uses both the chi-square and the G-square statistics for independence tests.","@ToolTip3":"Uses the chi-square statistics for independence tests.","@ToolTip4":"Uses the G-square statistics for independence tests.","@ToolTip5":"Uses the normalized mutual information for independence tests."}},{"ProcedureOptionName":"MAXPARENTS=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXPARENTS=integer\n      \nSpecifies the maximum number of parents that is allowed for each node in the network structure. \nThe valid range is 1 to 16, inclusive. If you specify the BESTMODEL option, PROC BNET calculates \nfrom 1 to integer and decides the best number of parents.\n\nBy default, MAXPARENTS=5."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MIALPHA=","ProcedureOptionHelp":{"#cdata":"Syntax: MIALPHA=number\n      \nSpecifies the threshold for independence tests by using mutual information. The valid range is 0 to 1, inclusive.\n\nBy default, MIALPHA = 0.05."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MISSINGINT=","ProcedureOptionHelp":{"#cdata":"Syntax: MISSINGINT=IGNORE | IMPUTE\n      \nSpecifies how to handle missing values for all interval input variables. This option applies \nto training data, validation, testing data and any data used for scoring."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"IGNORE","@Value2":"IMPUTE"},"ProcedureOptionToolTips":{"@ToolTip1":"Ignores the observations that have missing values in any of the interval variables.","@ToolTip2":"Replaces the missing values in any interval variable by the mean of the variable."}},{"ProcedureOptionName":"MISSINGNOM=","ProcedureOptionHelp":{"#cdata":"Syntax: MISSINGNOM=IGNORE | IMPUTE | LEVEL\n      \nSpecifies how to handle the missing values for all nominal input variables.\n\nBy default, MISSINGNOM=IGNORE."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"IGNORE","@Value2":"IMPUTE","@Value3":"LEVEL"},"ProcedureOptionToolTips":{"@ToolTip1":"Ignores the observations that have missing values in any of the nominal variables.","@ToolTip2":"Replaces the missing values in any interval variable by the mode of the variable.","@ToolTip3":"Treats the missing values in any nominal variable as a separate level of the variable."}},{"ProcedureOptionName":"NTHREADS=","ProcedureOptionHelp":{"#cdata":"Syntax: NTHREADS=number-of-threads\n      \nSpecifies the number of threads to use. The default is the minimum CPU count of all the nodes."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NUMBIN=|NBIN=","ProcedureOptionHelp":{"#cdata":"Syntax: NUMBIN=integer | NBIN=integer\n      \nSpecifies the number of binning levels for all interval variables. PROC BNET bins each interval \nvariable into integer equal-width levels. The valid range of integer is 2 to 1024, inclusive.\n\nBy default, NUMBIN=5."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUTNETWORK=|OUTNET=","ProcedureOptionHelp":{"#cdata":"Syntax: OUTNETWORK=CAS-libref.data-table | OUTNET=CAS-libref.data-table\n      \nNames the CAS data table to contain the network structure and the probability distributions. \nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session \nidentifier, and data-table specifies the name of the output data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"PARENTING=","ProcedureOptionHelp":{"#cdata":"Syntax: PARENTING=BESTONE | BESTSET\n      \nSpecifies the algorithm for orienting the network structure. \n\nBy default, PARENTING=BESTSET."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"BESTONE","@Value2":"BESTSET"},"ProcedureOptionToolTips":{"@ToolTip1":"Uses a greedy approach to determine the parents of each node; that is, for each node, the best  candidate is added as a parent of the node in each iteration.","@ToolTip2":"Determines the best set of variables among possible candidate sets as the parents of each node;  that is, instead of adding one variable in an iteration, PROC BNET tests multiple sets of  variables together and chooses the best set as the parents of the node."}},{"ProcedureOptionName":"PRESCREENING=","ProcedureOptionHelp":{"#cdata":"Syntax: PRESCREENING=0 | 1\n      \nSpecifies the initial screening for the input variables.\n\nBy default, PRESCREENING=1."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"0","@Value2":"1"},"ProcedureOptionToolTips":{"@ToolTip1":"Uses all the input variables.","@ToolTip2":"Uses only the input variables that are dependent on the target."}},{"ProcedureOptionName":"PRINTTARGET","ProcedureOptionHelp":{"#cdata":"Generates the table, \"Predicted Probability Variables,\" which displays the target variable and the \npredicted probability variables and the table \"Predicted Target Variable\" which displays the \npredicted target variable.\n\nBy default, these two tables are not generated."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"STRUCTURE=","ProcedureOptionHelp":{"#cdata":"Syntax: STRUCTURE=MB | NAIVE | PC | TAN\n      \nSpecifies the network structure. Together with the MAXPARENTS= option, this option determines \nwhich network structure the procedure learns from the training data."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"MB","@Value2":"NAIVE","@Value3":"PC","@Value4":"TAN"},"ProcedureOptionToolTips":{"@ToolTip1":"Learns the Markov blanket of the target variable. The Markov blanket includes the parents, the children,  and the other parents of the children.","@ToolTip2":"Assumes a naive Bayesian network structure (that is, the target has a direct link to each input variable).","@ToolTip3":"Learns the parent-child Bayesian network structure (PC).","@ToolTip4":"Learns the tree-augmented naive Bayesian network structure. The TAN structure includes a direct  link from the target to each input variable plus a tree structure among the input variables."}},{"ProcedureOptionName":"VARSELECT=","ProcedureOptionHelp":{"#cdata":"Syntax: VARSELECT=0 | 1 | 2 | 3\n      \nSpecifies how input variables are selected beyond the prescreening. \n\nBy default, VARSELECT=1."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"0","@Value2":"1","@Value3":"2","@Value4":"3"},"ProcedureOptionToolTips":{"@ToolTip1":"Uses all input variables that remain after the initial screening is performed as specified in the PRESCREENING= option.","@ToolTip2":"Tests each input variable for conditional independence of the target variable given any other input variable.","@ToolTip3":"Tests each input variable further for conditional independence of the target variable given any subset of other input variables.","@ToolTip4":"Determines the Markov blanket of the target variable and uses only the variables in the Markov blanket."}}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"AUTOTUNE","StatementHelp":{"#cdata":"Syntax: AUTOTUNE < options > ;\n      \nThe AUTOTUNE statement searches for the best combination of values for the ALPHA, INDEPTEST, \nMAXPARENTS, MIALPHA, MISSINGINT, MISSINGNOM, NUMBIN, PARENTING, PRESCREENING, STRUCTURE, and \nVARSELECT options in the PROC BNET statement."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"EVALHISTORY=","StatementOptionHelp":{"#cdata":"Syntax: EVALHISTORY=ALL |LOG |NONE |TABLE \n          \nSpecifies how to report the evaluation history of the tuner."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ALL","@Value2":"LOG","@Value3":"NONE","@Value4":"TABLE"},"StatementOptionToolTips":{"@ToolTip1":"Reports each evaluation in the log and creates the EvaluationHistory ODS table.","@ToolTip2":"Prints the following information to the log for each evaluation: evaluation number, objective value, best objective value up to that point, evaluation time, and elapsed time since the beginning of the  tuning process.","@ToolTip3":"Suppresses reporting of evaluations in the log and does not create the EvaluationHistory ODS table.","@ToolTip4":"Creates the EvaluationHistory ODS table, which contains all evaluated points. The table contains columns  for the evaluation number, all tuning parameters, and the objective function value."}},{"StatementOptionName":"FRACTION=","StatementOptionHelp":{"#cdata":"Syntax: FRACTION=number\n          \nSpecifies the fraction of all data to be used for validation, where number must be between 0.01 and\n0.99, inclusive. If you specify this option, the tuner uses a single partition validation for finding the\nobjective value (validation error estimate). This option might not be advisable for small or unbalanced\ndata tables where the random assignment of the validation subset might not provide a good estimate of\nerror. For large, balanced data tables, a single validation partition is usually sufficient for estimating\nerror; a single partition is more efficient than cross validation in terms of the total execution time.\nBy default, FRACTION=0.3. You cannot specify this option in combination with the KFOLD= option."},"StatementOptionType":"V"},{"StatementOptionName":"INDEPTEST","StatementOptionHelp":{"#cdata":"Syntax: INDEPTEST (VALUES=value-list INIT=value EXCLUDE)\n          \nSpecifies information about the method to use for independence tests.\n\nYou can specify the following additional suboptions:\n\nVALUES=value-list\n  specifies a list of methods to use for independence tests, where value-list is a space-separated list \n  of CHIGSQUARE, CHISQUARE, MI, and GSQUARE.\n\nINIT=CHIGSQUARE | CHISQUARE | MI | GSQUARE\n  specifies the initial method to use for independence tests. By default, INIT=CHIGSQUARE.\n\nEXCLUDE\n  excludes the INDEPTEST suboption from the tuning process. If you specify EXCLUDE, any specified \n  VALUES= and INIT= suboptions are ignored."},"StatementOptionType":"S","SubOptionsKeywords":"VALUES=|INIT=|EXCLUDE"},{"StatementOptionName":"KFOLD=","StatementOptionHelp":{"#cdata":"Syntax: KFOLD=number\n          \nSpecifies the number of folds (partitions) in the cross validation process, where number must be between\n2 and 20, inclusive. If you specify this option, the tuner uses cross validation to find the objective value.\nIn cross validation, each model evaluation requires number of training executions (on number\u20131 data\nfolds) and number of scoring executions (on 1 hold-out fold). Thus, the evaluation time is increased by\napproximately number. For small to medium data tables or for unbalanced data tables, cross validation\nprovides on average a better representation of error across the entire data table (a better generalization\nerror).\nBy default, KFOLD=5. You cannot specify this option in combination with the FRACTION= option."},"StatementOptionType":"V"},{"StatementOptionName":"MAXBAYES=","StatementOptionHelp":{"#cdata":"Syntax: MAXBAYES=number\n          \nSpecifies the maximum number of points in the Kriging model. This option is only honored \nwhen SEARCHMETHOD=BAYESIAN, and has a minimum value of 10.\n\nBy default, MAXBAYES=100."},"StatementOptionType":"V"},{"StatementOptionName":"MAXEVALS=","StatementOptionHelp":{"#cdata":"Syntax: MAXEVALS=number \n          \nSpecifies the maximum number of configuration evaluations allowed for the tuner, where number\nmust be an integer greater than or equal to 3. When the number of evaluations is reached, the tuner\nterminates the search and returns the results. To produce a single objective function value (validation\nerror estimate), each configuration evaluation requires either a single model training and scoring\nexecution on a validation partition, or a number of training and scoring executions equal to the value of\nthe KFOLD= option for cross validation. The MAXEVALS= option might lead to termination before\nthe value of the MAXITER= option or the MAXTIME= option is reached.\nBy default, MAXEVALS=50."},"StatementOptionType":"V"},{"StatementOptionName":"MAXITER=","StatementOptionHelp":{"#cdata":"Syntax: MAXITER=number\n          \nSpecifies the maximum number of iterations of the optimization tuner, where number must be greater\nthan or equal to 1. Each iteration normally involves a number of objective evaluations up to the value\nof the POPSIZE= option. The MAXITER= option might lead to termination before the value of the\nMAXEVALS= option or the MAXTIME= option is reached.\nBy default, MAXITER=5."},"StatementOptionType":"V"},{"StatementOptionName":"MAXPARENTS","StatementOptionHelp":{"#cdata":"Syntax: MAXPARENTS (LB=number UB=number VALUES=value-list INIT=number EXCLUDE)\n          \nspecifies information about the maximum number of parents that are allowed for each node in the \nnetwork structure. The valid range is 1 to 16, inclusive.\n\nYou can specify the following additional suboptions:\n\nLB=number\n  specifies a lower bound on the maximum number of parents to consider during tuning. By default, LB=1.\n\nUB=number\n  specifies an upper bound on the maximum number of parents to consider during tuning. By default, UB=16.\n\nVALUES=value-list\n  specifies a list of values to consider for the maximum number of parents in the network structure, \n  where value-list is a space-separated list of numbers.\n\nINIT=number\n  specifies the initial maximum number of parents in the network structure. By default, INIT=5.\n\nEXCLUDE\n  excludes the maximum number of parents from the tuning process."},"StatementOptionType":"S","SubOptionsKeywords":"LB=|UB=|VALUES=|INIT=|EXCLUDE"},{"StatementOptionName":"MAXTIME=","StatementOptionHelp":{"#cdata":"Syntax: MAXTIME=number\n          \nSpecifies the maximum time (in seconds) allowed for the tuner, where number must be greater than or\nequal to 1. When this value is reached, the tuner terminates the search and returns results. The actual\nrun time for optimization might be longer because it includes the remaining time needed to finish\nthe current evaluation. For long-running model training (large data tables), the actual run time might\nsignificantly exceed number. The MAXTIME= option might lead to termination before the value of\nthe MAXEVALS= option or the MAXITER= option is reached.\nBy default, MAXTIME=36000."},"StatementOptionType":"V"},{"StatementOptionName":"MAXTRAINTIME=","StatementOptionHelp":{"#cdata":"Syntax: MAXTRAINTIME=number\n          \nSpecifies the maximum time allowed for a single model train. The model train is terminated \nif it exceeds this time, and the objective value is set to missing.\n\nBy default, there is no maximum time allowed for a single train."},"StatementOptionType":"V"},{"StatementOptionName":"MIALPHA","StatementOptionHelp":{"#cdata":"Syntax: MIALPHA (LB=number UB=number VALUES=value-list INIT=number EXCLUDE)\nSpecifies information about the threshold for independence tests by using mutual information.\n\nYou can specify the following additional suboptions:\n\nLB=number\n  specifies  the minimum threshold value to consider during tuning. By default, LB=0.\n\nUB=number\n  specifies the maximum threshold value to consider during tuning. By default, UB=1.\n\nVALUES=value-list\n  specifies a list of threshold values to consider during tuning, where value-list is a space-separated \n  list of numbers in the range 0 to 1.\n\nINIT=number\n  specifies the initial threshold value for the tuner to use. By default, INIT=0.05.\n\nEXCLUDE\n  excludes the threshold value from the tuning process."},"StatementOptionType":"S","SubOptionsKeywords":"LB=|UB=|VALUES=|INIT=|EXCLUDE"},{"StatementOptionName":"MISSINGINT","StatementOptionHelp":{"#cdata":"Syntax: MISSINGINT (VALUES=value-list INIT=value EXCLUDE)\n          \nSpecifies information about how to handle missing values for interval variables during the tuning process.\n\nYou can specify the following additional suboptions:\n\nVALUES=value-list\n  specifies a list of values for the tuner to try for the MISSINGINT suboption, where you can specify \n  IMPUTE or IGNORE (or both) in a space-separated value-list.\n\nINIT=IMPUTE | IGNORE\n  specifies whether to start tuning by imputing or ignoring missing values of interval variables. By default, INIT=IGNORE.\n\nEXCLUDE\n  excludes the MISSINGINT suboption from the tuning process. If you specify EXCLUDE, any specified VALUES= \n  and INIT= suboptions are ignored."},"StatementOptionType":"S","SubOptionsKeywords":"VALUES=|INIT=|EXCLUDE"},{"StatementOptionName":"MISSINGNOM","StatementOptionHelp":{"#cdata":"Syntax: MISSINGNOM (VALUES=value-list INIT=value EXCLUDE)\n          \nSpecifies information about how to handle missing values for nominal variables during the tuning process.\n\nYou can specify the following additional suboptions:\n\nVALUES=value-list\n  specifies a list of values for the tuner to handle missing values for nominal variables, \n  where value-list is a combination of one or more of the following values in a space-separated \n  list: IMPUTE, IGNORE, and LEVEL.\n\nINIT=IMPUTE | IGNORE\n  specifies the initial value to use in tuning the MISSINGNOM suboption. By default, INIT=IGNORE.\n\nEXCLUDE\n  excludes the MISSINGNOM suboption from the tuning process. If you specify EXCLUDE, any specified VALUES= \n  and INIT= suboptions are ignored."},"StatementOptionType":"S","SubOptionsKeywords":"VALUES=|INIT=|EXCLUDE"},{"StatementOptionName":"NPARALLEL=","StatementOptionHelp":{"#cdata":"Syntax: NPARALLEL=number \n          \nSpecifies the number of evaluations to be performed in parallel, where number must be greater than or \nequal to 0.\n\nBy default, NPARALLEL=0, which indicates that the value of number is determined as follows:\n\n  o If SEARCHMETHOD=GA or SEARCHMETHOD=BAYESIAN, then the number of parallel evaluations is equal \n    to the value of the POPSIZE= option minus 1.\n\n  o If SEARCHMETHOD=LHS or SEARCHMETHOD=RANDOM, then the number of parallel evaluations is equal \n    to the value of the SAMPLESIZE= option, with a maximum value of 32."},"StatementOptionType":"V"},{"StatementOptionName":"NSUBSESSIONWORKERS=","StatementOptionHelp":{"#cdata":"Syntax: NSUBSESSIONWORKERS=number \n          \nSpecifies the number of workers to use in parallel subsessions. When evaluating alternative configurations \nin parallel, a number of subsessions is created by the tuner, with each subsession potentially using multiple \nworkers. The number of workers used in a parallel subsession is determined by using either NSUBSESSIONWORKERS=number, \nif specified, or determined automatically based upon the size of the data."},"StatementOptionType":"V"},{"StatementOptionName":"NUMBIN","StatementOptionHelp":{"#cdata":"Syntax: NUMBIN (LB=number UB=number VALUES=value-list INIT=number EXCLUDE)\n          \nSpecifies information about the number of binning levels for all interval variables. The valid range is 2 to 20.\n\nYou can specify the following additional suboptions:\n\nLB=number\n  specifies a lower bound of binning levels to consider during tuning. By default, LB=2.\n\nUB=number\n  specifies an upper bound of binning levels to consider during tuning. By default, UB=20.\n\nVALUES=value-list\n  specifies a list of values of binning levels to consider, where value-list is a space-separated \n  list of numbers. If you specify this suboption, you cannot specify the LB= and UB= suboptions.\n\nINIT=number\n  specifies the initial number of binning levels. By default, INIT=5.\n\nEXCLUDE\n  excludes the number of binning levels from the tuning process."},"StatementOptionType":"S","SubOptionsKeywords":"LB=|UB=|VALUES=|INIT=|EXCLUDE"},{"StatementOptionName":"OBJECTIVE=","StatementOptionHelp":{"#cdata":"Syntax: OBJECTIVE=function \n          \nSpecifies which measure of model performance the tuner uses as the objective function.\n\nBy default, OBJECTIVE=MISC for nominal targets, and OBJECTIVE=MSE for interval targets."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ASE","@Value2":"AUC","@Value3":"F05","@Value4":"F1","@Value5":"GAMMA","@Value6":"GINI","@Value7":"KS","@Value8":"MAE","@Value9":"MCE","@Value10":"MCLL","@Value11":"MISC","@Value12":"MSE","@Value13":"MSLE","@Value14":"RASE","@Value15":"RMAE","@Value16":"RMSLE","@Value17":"TAU"},"StatementOptionToolTips":{"@ToolTip1":"Uses average squared error as the objective function.","@ToolTip2":"Uses area under the curve as the objective function (nominal type only).","@ToolTip3":"Uses the F0.5 coefficient as the objective function (nominal type only). ","@ToolTip4":"Uses the F1 coefficient as the objective function (nominal type only).","@ToolTip5":"Uses the gamma coefficient as the objective function (nominal type only).","@ToolTip6":"Uses the Gini coefficient as the objective function (nominal type only). ","@ToolTip7":"Uses the Kolmogorov-Smirnov coefficient as the objective function (nominal type only).","@ToolTip8":"Uses the mean absolute error as the objective function (interval type only).","@ToolTip9":"Uses the misclassification rate as the objective function (nominal type only).","@ToolTip10":"Uses the multiclass log loss as the objective function (nominal type only).","@ToolTip11":"Uses the misclassification error percentage as the objective function (nominal type only).","@ToolTip12":"Uses the mean squared error as the objective function (interval type only).","@ToolTip13":"Uses the mean squared logarithmic error as the objective function (interval type only).","@ToolTip14":"Uses the root average squared error as the objective function.","@ToolTip15":"Uses the root mean absolute error as the objective function (interval type only).","@ToolTip16":"Uses the root mean squared logarithmic error as the objective function (interval type only).","@ToolTip17":"Uses the tau coefficient as the objective function (nominal type only)."}},{"StatementOptionName":"PARENTING","StatementOptionHelp":{"#cdata":"Syntax: PARENTING (VALUES=value-list INIT=value EXCLUDE)\n          \nSpecifies information about the algorithm for orienting the network structure. \n\nYou can specify the following additional suboptions:\n\nVALUES=value-list\n  specifies a list of algorithms for orienting the network structure during tuning, where value-list \n  is a space-separated list of BESTONE and BESTSET.\n\nINIT=BESTONE | BESTSET\n  specifies the initial algorithm for orienting the network structure for the tuner to use. By default, INIT=BESTSET.\n\nEXCLUDE\n  excludes the algorithm selection for orienting the network structure from the tuning process. "},"StatementOptionType":"S","SubOptionsKeywords":"VALUES=|INIT=|EXCLUDE"},{"StatementOptionName":"POPSIZE=","StatementOptionHelp":{"#cdata":"Syntax: POPSIZE=number\n          \nSpecifies the maximum number of evaluations in one iteration (population), where number must\nbe greater than or equal to 1. In some cases, the tuner algorithm might generate a number of new\nconfigurations smaller than number.\nBy default, POPSIZE=10."},"StatementOptionType":"V"},{"StatementOptionName":"PRESCREENING","StatementOptionHelp":{"#cdata":"Syntax: PRESCREENING (VALUES=value-list INIT=value EXCLUDE)\n          \nSpecifies information about the initial screening for the input variables.\n\nYou can specify the following additional suboptions:\n\nVALUES=value-list\n  specifies a list of initial screening values for the input variables, where value-list \n  is a space-separated list of 0 and 1.\n\nINIT=number\n  specifies the initial screening for the input variables. By default, INIT=1.\n\nEXCLUDE\n  excludes the initial screening for the input variables from the tuning process."},"StatementOptionType":"S","SubOptionsKeywords":"VALUES=|INIT=|EXCLUDE"},{"StatementOptionName":"SAMPLESIZE=","StatementOptionHelp":{"#cdata":"Syntax: SAMPLESIZE=number \n          \nSpecifies the total number of evaluations, where number must be greater than or equal to 1. \nYou can specify this option when SEARCHMETHOD=RANDOM or SEARCHMETHOD=LHS. This option is \nignored when SEARCHMETHOD=GA. \n\nBy default, SAMPLESIZE=50."},"StatementOptionType":"V"},{"StatementOptionName":"SEARCHMETHOD=","StatementOptionHelp":{"#cdata":"Syntax: SEARCHMETHOD=BAYESIAN| GA |LHS |RANDOM \n          \nSpecifies the search method to use for tuning.\n\nBy default, SEARCHMETHOD=GA."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"BAYESIAN","@Value2":"GA","@Value3":"LHS","@Value4":"RANDOM"},"StatementOptionToolTips":{"@ToolTip1":"Builds a Kriging surrogate model to approximate the objective value, and uses this surrogate model  for generating new alternative configurations at each iteration.","@ToolTip2":"Uses an initial Latin hypercube sample that seeds a genetic algorithm to generate a new population  of alternative configurations at each iteration.","@ToolTip3":"Uses a Latin hypercube to generate a single sample of configurations that is uniform in each tuning  parameter, but random in combinations.","@ToolTip4":"Generates a single sample of purely random configurations. "}},{"StatementOptionName":"STRUCTURE","StatementOptionHelp":{"#cdata":"Syntax: STRUCTURE (VALUES=value-list INIT=value EXCLUDE)\n          \nSpecifies information about the network structure.\n\nYou can specify the following additional suboptions:\n\nVALUES=value-list\n  specifies a list of structures, where value-list is a space-separated list of MB, NAIVE, PC, and TAN.\n\nINIT=MB | NAIVE | PC | TAN\n  specifies the initial network structure. By default, INIT=PC.\n\nEXCLUDE\n  excludes the network structure from the tuning process."},"StatementOptionType":"S","SubOptionsKeywords":"VALUES=|INIT=|EXCLUDE"},{"StatementOptionName":"TARGETEVENT=","StatementOptionHelp":{"#cdata":"Syntax: TARGETEVENT=string \n          \nSpecifies the target event to use for calculating the selected objective function. This option \nis ignored when the value of the OBJECTIVE= option is not AUC, F1, F05, GINI, GAMMA, TAU, or KS."},"StatementOptionType":"V"},{"StatementOptionName":"TRAINFRACTION=","StatementOptionHelp":{"#cdata":"Syntax: TRAINFRACTION=number\n          \nSpecifies the fraction of all data to be used for training, where number must be between 0.01 and 0.99, \ninclusive. If you specify this option, the tuner uses a single-partition validation to find the objective \nvalue (validation error estimate). Using this option might not be advisable for small or unbalanced data \ntables, where the random assignment of the validation subset might not provide a good estimate of error. \nFor large, balanced data tables, a single-partition validation is usually sufficient for estimating error; \na single partition is more efficient than cross validation in terms of the total execution time."},"StatementOptionType":"V"},{"StatementOptionName":"TUNINGPARAMETERS=|TUNEPARMS=","StatementOptionHelp":{"#cdata":"Syntax: TUNINGPARAMETERS=(suboption |\u2026|<suboption>) | TUNEPARMS=(suboption |\u2026|<suboption>)\n          \nSpecifies which parameters to tune and which ranges to tune over. If you specify USEPARAMETERS=STANDARD, \nthis option is ignored.\n\nYou can specify one or more of the following suboptions:\n\nALPHA (LB=number UB=number VALUES=value-list INIT=number EXCLUDE)\n  specifies information about the significance level for independence tests by using chi-square \n  or G-square statistics. \n\nYou can specify the following additional suboptions:\n\nLB=number\n  specifies the minimum significance level to consider during tuning. By default, LB=0.01.\n\nUB=number\n  specifies the maximum significance level to consider during tuning. By default, UB=0.99.\n\nVALUES=value-list\n  specifies a list of significance levels to consider during tuning, where value-list is \n  a space-separated list of numbers in the range 0 to 1. \n\nINIT=number\n  specifies the initial significance level for the tuner to use. By default, INIT=0.05.\n\nEXCLUDE\n  excludes the significance level from the tuning process."},"StatementOptionType":"V","SubOptionsKeywords":"ALPHA=|LB=|UB=|VALUES=|INIT=|EXCLUDE"},{"StatementOptionName":"USEPARAMETERS=","StatementOptionHelp":{"#cdata":"Syntax: USEPARAMETERS=COMBINED |CUSTOM |STANDARD\n          \nSpecifies which set of parameters to tune."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"COMBINED","@Value2":"CUSTOM","@Value3":"STANDARD"},"StatementOptionToolTips":{"@ToolTip1":"Tunes the parameters that are specified in the TUNINGPARAMETERS= option and uses default bounds  and initial values to tune all other parameters.","@ToolTip2":"Tunes only the parameters that are specified in the TUNINGPARAMETERS= option.","@ToolTip3":"Tunes all parameters by using their default bounds and initial values."}},{"StatementOptionName":"VARSELECT","StatementOptionHelp":{"#cdata":"Syntax: VARSELECT (VALUES=value-list INIT=value EXCLUDE)\n          \nSpecifies information about how to select input variables during the tuning process after the prescreening.\n\nYou can specify the following additional suboptions:\n\nVALUES=value-list\n  specifies a list of input variables to consider for the tuning process after the prescreening, \n  where value-list is a space-separated list of 0, 1, 2, and 3.\n\nINIT=number\n  specifies the initial value to consider for the tuning process after the prescreening. By default, INIT=1.\n\nEXCLUDE\n  excludes the VARSELECT suboption from the tuning process."},"StatementOptionType":"S","SubOptionsKeywords":"VALUES=|INIT=|EXCLUDE"}]}},{"StatementName":"CODE","StatementHelp":{"#cdata":"Syntax: CODE FILE=filename; \n      \nThe CODE statement is optional in PROC BNET. If you use a CODE statement, SAS DATA step code \nis generated and stored in a file that can be used for scoring purposes."},"StatementOptions":{"StatementOption":{"StatementOptionName":"FILE=","StatementOptionHelp":{"#cdata":"Syntax: FILE=filename \n          \nSpecifies the filename of the file to write the SAS score code to."},"StatementOptionType":"V"}}},{"StatementName":"FREQ","StatementHelp":{"#cdata":"Syntax: FREQ variable;\n\nThe variable in the FREQ statement identifies a numeric variable in the data set that contains the frequency \nof occurrence for each observation. The BNET procedure treats each observation as if it appeared n times, \nwhere n is the value of the variable for the observation. If n is not an integer, it is truncated to an integer. \nIf n is less than 1 or is missing, the observation is ignored. When the FREQ statement is not specified, \neach observation is assigned a frequency of 1."},"StatementOptions":null},{"StatementName":"ID","StatementHelp":{"#cdata":"Syntax: ID variables;\n\nThe optional ID statement lists one or more variables from the input data set to be copied to the \nprediction output data set. The ID statement accepts both numeric and character variables. The \nvariables in an ID statement can also appear in any other statements."},"StatementOptions":null},{"StatementName":"INPUT","StatementHelp":{"#cdata":"Syntax: INPUT variables </LEVEL=INTERVAL | NOMINAL > ;\n\nThe INPUT statement specifies one or more variables as input variables. You can specify multiple \nINPUT statements. PROC BNET does not support duplicate input variables. If the INPUT statement \ncontains a duplicate variable, PROC BNET returns an error message and then exits."},"StatementOptions":{"StatementOption":{"StatementOptionName":"LEVEL=","StatementOptionHelp":{"#cdata":"Syntax: LEVEL=INTERVAL | NOMINAL\n          \nSpecifies the type of all the variables in the current INPUT statement.\n\nBy default, LEVEL=INTERVAL for numeric variables and LEVEL=NOMINAL for categorical variables."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"NOMINAL","@Value2":"INTERVAL"},"StatementOptionToolTips":{"@ToolTip1":"Treats all the variables in the current INPUT statement as nominal variables.","@ToolTip2":"Treats all the variables in the current INPUT statement as interval variables."}}}},{"StatementName":"OUTPUT","StatementHelp":{"#cdata":"Syntax: OUTPUT OUT=CAS-libref.data-table < options > ;\n      \nNames the output data table for PROC BNET to use. You must specify this option before any other options."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"Syntax: OUT=CAS-libref.data-table\n          \nNames the output data table for PROC BNET to use. You must specify this option before any other options. \n\nCAS-libref.data-table is a two-level name, where\n\n  CAS-libref refers to a collection of information that is defined in the LIBNAME statement and\n    includes the caslib, which includes a path to where the data table is to be stored, and\n    a session identifier, which defaults to the active session but which can be explicitly\n    defined in the LIBNAME statement. \n    \n  data-table specifies the name of the output data table."},"StatementOptionType":"V"},{"StatementOptionName":"COPYVAR=|COPYVARS=","StatementOptionHelp":{"#cdata":"Syntax: COPYVAR=variable | COPYVARS=(variables) \n          \nLists one or more variables from the input data table to be copied to the output data table."},"StatementOptionType":"V"},{"StatementOptionName":"ROLE=","StatementOptionHelp":{"#cdata":"Syntax: ROLE=rolename\n          \nRenames the generated column _ROLE_ in the output data table to the specified role."},"StatementOptionType":"V"}]}},{"StatementName":"PARTITION","StatementHelp":{"#cdata":"Syntax: PARTITION partition-option ;\n      \nThe PARTITION statement specifies how observations in the input data set are logically partitioned into\ndisjoint subsets for model training, validation, and testing."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"FRACTION","StatementOptionHelp":{"#cdata":"Syntax: FRACTION(< TEST=fraction > < VALIDATE=fraction > < SEED=number >)\n          \nRandomly assigns specified proportions of the observations in the input data table to the roles. You\nspecify the proportions for testing and validation by using the TEST= and VALIDATE= suboptions.\nIf you specify both the TEST= and VALIDATE= suboptions, then the sum of the specified fractions\nmust be less than 1 and the remaining fraction of the observations are assigned to the training role. The\nSEED= option specifies an integer that is used to start the pseudorandom number generator for random\npartitioning of data for training, testing, and validation. If you do not specify SEED=number or if\nnumber is less than or equal to 0, the seed is generated by reading the time of day from the computer\u2019s \nclock."},"StatementOptionType":"V","SubOptionsKeywords":"VALIDATE=|TEST=|SEED="},{"StatementOptionName":"ROLE=|ROLEVAR=","StatementOptionHelp":{"#cdata":"Syntax: ROLE=|ROLEVAR=variable (< TEST='value' > < TRAIN='value' > < VALIDATE='value' >)  \n\nNames the variable in the input data table whose values are used to assign roles to each observation.\nThis variable cannot also appear as an analysis variable in other statements or options. The TEST=,\nTRAIN=, and VALIDATE= suboptions specify the formatted values of this variable that are used to\nassign observation roles. If you do not specify the TRAIN= suboption, then all observations whose\nrole is not determined by the TEST= or VALIDATE= suboption are assigned to the training role."},"StatementOptionType":"V","SubOptionsKeywords":"TRAIN=|VALIDATE=|TEST="}]}},{"StatementName":"SAVESTATE","StatementHelp":{"#cdata":"Syntax: SAVESTATE RSTORE=CAS-libref.data-table;  \n      \nThe SAVESTATE statement creates an analytic store for the model and saves it as a binary object \nin a data table. You can use the analytic store in the ASTORE procedure to score new data."},"StatementOptions":{"StatementOption":{"StatementOptionName":"RSTORE=","StatementOptionHelp":{"#cdata":"Syntax: RSTORE=CAS-libref.data-table \n          \nSpecifies a data table in which to save the analytic store for the model. CAS-libref.data-table \nis a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table \nspecifies the name of the output data table."},"StatementOptionType":"V"}}},{"StatementName":"TARGET","StatementHelp":{"#cdata":"Syntax: TARGET variable;\n\nThe TARGET statement names the variable that PROC BNET predicts. PROC BNET treats the TARGET variable as nominal.\n\nThe target values are levelized in descending order."},"StatementOptions":null}]}}}