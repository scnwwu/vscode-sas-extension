{"Procedure":{"Name":"CALIS","ProductGroup":"SAS/STAT","#comment":{},"ProcedureHelp":{"#cdata":"Syntax: PROC CALIS <options> ; \n    BOUNDS boundary constraints ;\n    BY variables ;\n    COSAN set of variables, cosan model ; \n    COV covariance parameters ; \n    DETERM variables <label> ; \n    EFFPART effects ; \n    FACTOR <factor options> ; \n    FITINDEX <options> ; \n    FREQ variable ; \n    GROUP group number </ group options> ; \n    LINCON linear constraints ; \n    LINEQS model equations ; \n    LISMOD variable lists ; \n    LMTESTS <options> ; \n    MATRIX matrix-name parameters-in-matrix ; \n    MEAN mean parameters ; \n    MODEL model number </ model options> ; \n    MSTRUCT variable list ; \n    NLINCON nonlinear constraints ; \n    NLOPTIONS optimization options ; \n    OUTFILES output files organization ; \n    PARAMETERS parameters ; \n    PARTIAL variables ; \n    PATH path list ; \n    PCOV partial covariance parameters ; \n    PVAR partial variance parameters ; \n    RAM set of variables, ram list ; \n    REFMODEL model number </ options> ; \n    RENAMEPARM parameter renaming ; \n    SIMTESTS simultaneous tests definitions ; \n    STD variance parameters ; \n    STRUCTEQ set of variables <label> ; \n    TESTFUNC parametric functions ; \n    VAR variables ; \n    VARIANCE variance parameters ; \n    VARNAMES name assignments ; \n    WEIGHT variable ; \n    SAS Programming statements ; \n    \nThe CALIS procedure deals with structural equation modeling, an important statistical tool in social \nand behavioral sciences. Structural equations express relationships among a system of variables that \ncan be either observed variables (manifest variables) or unobserved hypothetical variables (latent \nvariables). You can use the CALIS procedure to estimate parameters and test hypotheses for constrained \nand unconstrained problems in various situations, including but not limited to the following: \n  o exploratory and confirmatory factor analysis of any order \n  o linear measurement-error models or regression with errors in variables \n  o multiple and multivariate linear regression \n  o multiple-group structural equation modeling with mean and covariance structures \n  o path analysis and causal modeling \n  o simultaneous equation models with reciprocal causation \n  o structured covariance and mean matrices in various forms"},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"ALPHAECV=","ProcedureOptionHelp":{"#cdata":"[Syntax: ALPHAECV=\u03b1] \n      \nSpecifies a (1 - \u03b1)100% confidence interval, 0 \u2264 \u03b1 \u2264 1, for the Browne and Cudeck (1993) \nexpected cross validation index (ECVI). The default value is \u03b1=0.1, which corresponds to \na 90% confidence interval for the ECVI."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ALPHARMS=","ProcedureOptionHelp":{"#cdata":"[Syntax: ALPHARMS=\u03b1] \n      \nSpecifies a (1 - \u03b1)100% confidence interval, 0 \u2264 \u03b1 \u2264 1, for the Steiger and Lind (1980) \nroot mean squared error of approximation (RMSEA) coefficient. The default value is \u03b1=0.1, \nwhich corresponds to a 90% confidence interval for the RMSEA."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ASINGULAR=|ASING=","ProcedureOptionHelp":{"#cdata":"[Syntax: ASINGULAR | ASING=r] \n      \nSpecifies an absolute singularity criterion r, r > 0, for the inversion of the information \nmatrix, which is needed to compute the covariance matrix."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ASYCOV=|ASC=","ProcedureOptionHelp":{"#cdata":"Specifies the formula for asymptotic covariances used in the weight matrix W for WLS \nand DWLS estimation. The ASYCOV option is effective only if METHOD=WLS or METHOD=DWLS \nand no INWGT= input data set is specified."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"BIASED","@Value2":"UNBIASED","@Value3":"CORR"},"ProcedureOptionToolTips":{"@ToolTip1":"Browne\u2019s (1984) formula (3.4) biased asymptotic covariance estimates; the resulting weight matrix  is at least positive semidefinite. This is the default for analyzing a covariance matrix.","@ToolTip2":"Browne\u2019s (1984) formula (3.8) asymptotic covariance estimates corrected for bias; the resulting  weight matrix can be indefinite (that is, can have negative eigenvalues), especially for small N.","@ToolTip3":"Browne and Shapiro\u2019s (1986) formula (3.2), which is identical to DeLeeuw\u2019s (1983) formulas  (2, 3, 4) the asymptotic variances of the diagonal elements are set to the reciprocal of  the value r specified by the WPENALTY= option (default: r=100). This formula is the default  for analyzing a correlation matrix."}},{"ProcedureOptionName":"AUGMENT|AUG","ProcedureOptionHelp":{"#cdata":"[Obsolete] \n      \nAnalyzes the augmented correlation or covariance matrix."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"BASEFIT=|INBASEFIT=","ProcedureOptionHelp":{"#cdata":"Syntax: BASEFIT | INBASEFIT=SAS-data-set \n      \nInputs the SAS-data-set that contains the fit information of the baseline model of your choice. \nThis customized baseline model replaces the default uncorrelatedness model for computing several \nfit indices of your target model. Typically, you create the BASEFIT= data set by using the OUTFIT= \noption in a previous PROC CALIS fitting of your customized baseline model. Using the BASEFIT= option \nassumes that you fit your customized baseline model and your target model with the same data, number \nof groups (for multiple-group analysis), and estimation method. Typically, your baseline model should \nbe more restrictive (or have fewer parameters) than your target model."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"BASEFUNC=","ProcedureOptionHelp":{"#cdata":"Syntax: BASEFUNC=r(<DF=>i) or BASEFUNC(<DF=>i)=r \n      \nInputs the fit function value r and the degrees of freedom i of the baseline model of your choice. \nThis customized baseline model replaces the default uncorrelatedness model for computing several fit \nindices of your target model. To use this option, you must first fit your customized baseline model \nand then use this option to input the baseline model fit information when you fit your target model. \n\nUsing the BASEFUNC= option assumes that you fit your customized baseline model and your target model \nwith the same data, number of groups (for multiple-group analysis), and estimation method. Typically, \nyour baseline model should be more restrictive (or have fewer parameters) than your target model."},"ProcedureOptionType":"S|V"},{"ProcedureOptionName":"BIASKUR","ProcedureOptionHelp":{"#cdata":"Computes univariate skewness and kurtosis by formulas uncorrected for bias."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"CHICORRECT=|CHICORR=","ProcedureOptionHelp":{"#cdata":"[Syntax: CHICORRECT | CHICORR= name  |  c] \n      \nSpecifies a correction factor c for the chi-square statistics for model fit. You can \nspecify a name for a built-in correction factor or a value between 0 and 1 as the \nCHICORRECT= value."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"EQVARCOV|COMPSYM","@Value2":"CIRCULARITY|CIRCULAR|TYPEH|SPHERICITY","@Value3":"EQCOVMAT"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies the correction factor due to Box (1949) for testing equal variances and equal  covariances in a covariance matrix.","@ToolTip2":"Specifies the correction factor due to Mauchly (1940) for testing circularity or Huynh  and Feldt Type H matrix.","@ToolTip3":"Specifies the correction factor due to Box (1949) for testing equality of covariance matrices."}},{"ProcedureOptionName":"CLOSEFIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: CLOSEFIT=p] \n      \nDefines the criterion value p for indicating a close fit. The smaller the better fit. The default \nvalue for close fit is 0.05."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CORRELATION|CORR","ProcedureOptionHelp":{"#cdata":"Analyzes the correlation matrix, instead of the default covariance matrix."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"COVARIANCE|COV","ProcedureOptionHelp":{"#cdata":"Analyzes the covariance matrix. Because this is also the default analysis in PROC CALIS, you \ncan simply omit this option when you analyze covariance rather than correlation matrices."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"COVSING=","ProcedureOptionHelp":{"#cdata":"[Syntax: COVSING=r] \n      \nSpecifies a nonnegative threshold r, which determines whether the eigenvalues of the \ninformation matrix are considered to be zero."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"[Syntax: DATA=SAS-data-set] \n      \nSpecifies an input data set that can be an ordinary SAS data set or a specially structured \nTYPE=CORR, TYPE=COV, TYPE=UCORR, TYPE=UCOV, TYPE=SSCP, or TYPE=FACTOR SAS data set."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"DEMPHAS=|DE=","ProcedureOptionHelp":{"#cdata":"[Syntax: DEMPHAS=r | DE=r] \n      \nChanges the initial values of all variance parameters by the relationship\n\n    snew = r(|sold| + 1) \n    \nwhere snew is the new initial value and sold is the original initial value. The initial values \nof all variance parameters should always be nonnegative to generate positive definite predicted\nmodel matrices in the first iteration. By using values of r > 1, for example, r D 2, r D 10,\nand so on, you can increase these initial values to produce predicted model matrices with high\npositive eigenvalues in the first iteration."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"DFREDUCE=|DFRED=","ProcedureOptionHelp":{"#cdata":"[Syntax: DFREDUCE=i | DFRED=i] \n      \nReduces the degrees of freedom of the model fit \u03c7\u00b2 test by i. In general, the number \nof degrees of freedom is the total number of nonredundant elements in all moment \nmatrices minus the number of parameters, t. Because negative values of i are allowed, \nyou can also increase the number of degrees of freedom by using this option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"EDF=|DFE=","ProcedureOptionHelp":{"#cdata":"[Syntax: EDF=n | DFE=n] \n      \nMakes the effective number of observations n+i. You can also use the NOBS= option \nto specify the number of observations."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"EFFPART|PARTEFF|TOTEFF|TE","ProcedureOptionHelp":{"#cdata":"[Syntax: EFFPART | PARTEFF | TOTEFF | TE] \n      \nComputes and displays total, direct, and indirect effects for the unstandardized and standardized \nestimation results."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"EXTENDPATH|GENPATH","ProcedureOptionHelp":{"#cdata":"Displays the extended path estimates such as the variances, covariances, means, and \nintercepts in the table that contains the ordinary path effect (coefficient) estimates. \nThis option applies to the PATH model only."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FCONV=|FTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: FCONV=r | FTOL=r] \n      \nSpecifies the relative function convergence criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FDCODE","ProcedureOptionHelp":{"#cdata":"[Obsolete] \n      \nReplaces the analytic derivatives of the programming statements by numeric derivatives (finite-difference approximations)."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"G4=","ProcedureOptionHelp":{"#cdata":"[Syntax: G4=i] \n      \nSpecifies the algorithm to compute the approximate covariance matrix of parameter \nestimates used for computing the approximate standard errors and modification indices \nwhen the information matrix is singular."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"GCONV=|GTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: GCONV=r | GTOL=r] \n      \nSpecifies the relative gradient convergence criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"HESSALG=|HA=","ProcedureOptionHelp":{"#cdata":"[Obsolete] \n      \nSpecifies the algorithm used to compute the (approximate) Hessian matrix when TECHNIQUE=LEVMAR and NEWRAP, \nto compute approximate standard errors of the parameter estimates, and to compute Lagrange multipliers."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"1","@Value2":"2","@Value3":"3","@Value4":"4","@Value5":"5","@Value6":"6","@Value7":"11"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies the analytic formulas group of algorithms.","@ToolTip2":"Specifies the analytic formulas group of algorithms.","@ToolTip3":"Specifies the analytic formulas group of algorithms.","@ToolTip4":"Specifies the analytic formulas group of algorithms.","@ToolTip5":"Specifies the finite-difference approximation group of algorithms.","@ToolTip6":"Specifies the finite-difference approximation group of algorithms.","@ToolTip7":"Specifies the analytic formulas or sparse storage group of algorithms."}},{"ProcedureOptionName":"INEST=|INVAR=|ESTDATA=","ProcedureOptionHelp":{"#cdata":"[Syntax: INEST | INVAR | ESTDATA=SAS-data-set] \n      \nSpecifies an input data set that contains initial estimates for the parameters used in the \noptimization process and can also contain boundary and general linear constraints on the \nparameters."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"INMODEL=|INRAM=","ProcedureOptionHelp":{"#cdata":"[Syntax: INMODEL | INRAM=SAS-data-set] \n      \nSpecifies an input data set that contains information about the analysis model. \nA typical use of the INMODEL= option is when you run an analysis with its model \nspecifications saved as an OUTMODEL= data set from a previous PROC CALIS run. \nInstead of specifying the main or subsidiary model specification statements in \nthe new run, you use the INMODEL= option to input the model specification saved \nfrom the previous run. "},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"INSTEP=|SALPHA=","ProcedureOptionHelp":{"#cdata":"[Syntax: INSTEP=r] \n      \nFor highly nonlinear objective functions, such as the EXP function, the default initial \nradius of the trust-region algorithms (TRUREG, DBLDOG, and LEVMAR) or the default step \nlength of the line-search algorithms can produce arithmetic overflows. If an arithmetic \noverflow occurs, specify decreasing values of r such as INSTEP=1E-1, INSTEP=1E-2, INSTEP=1E-4, \nand so on, until the iteration starts successfully."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"INWGT=|INWEIGHT=","ProcedureOptionHelp":{"#cdata":"[Syntax: INWGT | INWEIGHT<(INV)>=SAS-data-set] \n      \nSpecifies an input data set that contains the weight matrix W used in generalized least squares \n(GLS), weighted least squares (WLS, ADF), or diagonally weighted least squares (DWLS) estimation."},"ProcedureOptionType":"S|V","SubOptionsKeywords":"INV"},{"ProcedureOptionName":"INWGTINV","ProcedureOptionHelp":{"#cdata":"Specifies that the INWGT= data set contains the inverse of the weight matrix, rather \nthan the weight matrix itself. This option is effective only with an input weight \nmatrix specified in the INWGT= data set and with the generalized least squares (GLS), \nweighted least squares (WLS or ADF), or diagonally weighted least squares (DWLS) \nestimation."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"KURTOSIS|KU","ProcedureOptionHelp":{"#cdata":"Computes and displays univariate kurtosis and skewness, various coefficients of multivariate kurtosis, \nand the numbers of observations that contribute most to the normalized multivariate kurtosis."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LINESEARCH=|LIS=|SMETHOD=|SM=","ProcedureOptionHelp":{"#cdata":"[Syntax: LINESEARCH | LIS | SMETHOD | SM=i] \n      \nSpecifies the line-search method for the CONGRA, QUANEW, and NEWRAP optimization techniques."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"1","@Value2":"2","@Value3":"3","@Value4":"4","@Value5":"5","@Value6":"6","@Value7":"7","@Value8":"8"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies a line-search method that needs the same number of function and gradient calls  for cubic interpolation and cubic extrapolation; this method is similar to one used by  the Harwell subroutine library.","@ToolTip2":"Specifies a line-search method that needs more function calls than gradient calls for  quadratic and cubic interpolation and cubic extrapolation; this method is implemented  as shown in Fletcher (1987) and can be modified to an exact line search by using the  LSPRECISION= option.","@ToolTip3":"Specifies a line-search method that needs the same number of function and gradient calls  for cubic interpolation and cubic extrapolation; this method is implemented as shown in  Fletcher (1987) and can be modified to an exact line search by using the LSPRECISION=  option.","@ToolTip4":"Specifies a line-search method that needs the same number of function and gradient calls  for stepwise extrapolation and cubic interpolation","@ToolTip5":"Specifies a line-search method that is a modified version of LIS=4.","@ToolTip6":"Specifies golden section line search (Polak 1971), which uses only function values for  linear approximation.","@ToolTip7":"Specifies bisection line search (Polak 1971), which uses only function values for linear  approximation.","@ToolTip8":"Specifies Armijo line-search technique (Polak 1971), which uses only function values for  linear approximation."}},{"ProcedureOptionName":"LSPRECISION=|LSP=|SPRECISION=|SP=","ProcedureOptionHelp":{"#cdata":"[Syntax: LSPRECISION=r | LSP=r | SPRECISION=r | SP=r] \n      \nSpecifies the degree of accuracy that should be obtained by the line-search algorithms \nLIS=2 and LIS=3. The default LSPRECISION= values are: \n\n  o For TECH=QUANEW UPDATE=DBFGS, BFGS: r = 0.4\n  o For TECH=QUANEW UPDATE=DDFP, DFP: r = 0.06 \n  o For TECH=CONGRA UPDATE=all r = 0.1\n  o For TECH=NEWRAP NO UPDATE: r = 0.9"},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXFUNC=|MAXFU=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXFUNC=i | MAXFU=i] \n      \nSpecifies the maximum number i of iterations in the optimization process. The default \nvalues are: \n\n  o For TECH= LEVMAR, NEWRAP, NRRIDG, TRUREG: i=125 \n  o For TECH= DBLDOG, QUANEW: i=500 \n  o For TECH= CONGRA: i=1000"},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXITER=|MAXIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXITER= | MAXIT=i <n>] \n      \nSpecifies the maximum number i of iterations in the optimization process. The default \nvalues are: \n\n  o For TECH= LEVMAR, NEWRAP, NRRIDG, TRUREG: i=50 \n  o For TECH= DBLDOG, QUANEW: i=200 \n  o For TECH= CONGRA: i=400"},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MEANSTR","ProcedureOptionHelp":{"#cdata":"Invokes the analysis of mean structures. By default, no mean structures are analyzed. \nYou can specify the MEANSTR option in both the PROC CALIS and the MODEL statements. \nWhen this option is specified in the PROC CALIS statement, it propagates to all models. \nWhen this option is specified in the MODEL statement, it applies only to the local model."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"METHOD=|MET=","ProcedureOptionHelp":{"#cdata":"[Syntax: METHOD= | MET=name] \n      \nSpecifies the method of parameter estimation. The default is METHOD=ML."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"FIML","@Value2":"ML|M|MAX","@Value3":"GLS|G","@Value4":"WLS|W|ADF","@Value5":"DWLS|D","@Value6":"ULS|LS|U","@Value7":"LSFIML","@Value8":"LSML|LSM|LSMAX","@Value9":"LSGLS|LSG","@Value10":"LSWLS|LSW|LSADF","@Value11":"LSDWLS|LSD","@Value12":"NONE|NO"},"ProcedureOptionToolTips":{"@ToolTip1":"Performs full information maximum-likelihood parameter estimation for data with missing  values. This method assumes raw input data sets. Exploratory factor analysis and model  modification indices are not available with FIML in this version of PROC CALIS. If  METHOD=FIML is specified with exploratory factor models, ML is used instead.","@ToolTip2":"Performs normal-theory maximum likelihood parameter estimation. The ML method requires  a nonsingular covariance or correlation matrix. This is the default method.","@ToolTip3":"Performs generalized least squares parameter estimation. If no INWGT= data set is specified,  the GLS method uses the inverse sample covariance or correlation matrix as weight matrix W.  Therefore, METHOD=GLS requires a nonsingular covariance or correlation matrix.","@ToolTip4":"Performs weighted least squares parameter estimation. If no INWGT= data set is specified,  the WLS method uses the inverse matrix of estimated asymptotic covariances of the sample  covariance or correlation matrix as the weight matrix W.","@ToolTip5":"Performs diagonally weighted least squares parameter estimation. If no INWGT= data set is  specified, the DWLS method uses the inverse diagonal matrix of asymptotic variances of  the input sample covariance or correlation matrix as the weight matrix W.","@ToolTip6":"Performs unweighted least squares parameter estimation.","@ToolTip7":"Performs unweighted least squares followed by full information maximum-likelihood parameter estimation.","@ToolTip8":"Performs unweighted least squares followed by normal-theory maximum likelihood parameter  estimation.","@ToolTip9":"Performs unweighted least squares followed by generalized least squares parameter estimation.","@ToolTip10":"Performs unweighted least squares followed by weighted least squares parameter estimation.","@ToolTip11":"Performs unweighted least squares followed by diagonally weighted least squares parameter  estimation.","@ToolTip12":"Uses no estimation method. This option is suitable for checking the validity of the input  information and for displaying the model matrices and initial values."}},{"ProcedureOptionName":"MODIFICATION|MOD","ProcedureOptionHelp":{"#cdata":"Computes and displays Lagrange multiplier test indices for constant parameter constraints, \nequality parameter constraints, and active boundary constraints, as well as univariate and \nmultivariate Wald test indices."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"MSINGULAR=|MSING=","ProcedureOptionHelp":{"#cdata":"[Syntax: MSINGULAR= | MSING=r] \n      \nSpecifies a relative singularity criterion r, r > 0, for the inversion of the information \nmatrix, which is needed to compute the covariance matrix."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NOADJDF","ProcedureOptionHelp":{"#cdata":"Turns off the automatic adjustment of degrees of freedom when there are active constraints \nin the analysis."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NODIAG|NODI","ProcedureOptionHelp":{"#cdata":"[Obsolete] \n      \nOmits the diagonal elements of the analyzed correlation or covariance matrix from the fit function."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOINT","ProcedureOptionHelp":{"#cdata":"[Obsolete] \n      \nSpecifies that no intercept be used in computing covariances and correlations; that is, \ncovariances or correlations are not corrected for the mean."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOBS=","ProcedureOptionHelp":{"#cdata":"[Syntax: NOBS=nobs] \n      \nSpecifies the number of observations. If the DATA= input data set is a raw data set, \nnobs is defined by default to be the number of observations in the raw data set."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NOINDEXTYPE","ProcedureOptionHelp":{"#cdata":"Disables the display of index types in the fit summary table."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOMEANSTR","ProcedureOptionHelp":{"#cdata":"Deactivates the inherited MEANSTR option for the analysis of mean structures. You can \nspecify the NOMEANSTR option in both the PROC CALIS and the MODEL statements. When this \noption is specified in the PROC CALIS statement, it does not have any apparent effect \nbecause by default the mean structures are not analyzed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOMOD","ProcedureOptionHelp":{"#cdata":"Does not compute modification indices. The NOMOD option is useful in connection with the \nPALL option because it saves computing time."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOORDERSPEC","ProcedureOptionHelp":{"#cdata":"Prints the model results in the order they appear in the input specifications."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOPARMNAME","ProcedureOptionHelp":{"#cdata":"Suppresses the printing of parameter names in the model results."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOPRINT|NOP","ProcedureOptionHelp":{"#cdata":"Suppresses the displayed output. Note that this option temporarily disables the Output \nDelivery System (ODS)."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOSTAND","ProcedureOptionHelp":{"#cdata":"Suppresses the printing of standardized results. The default is to print the standardized results."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOSTDERR|NOSE","ProcedureOptionHelp":{"#cdata":"Suppresses the printing of the standard error estimates. Standard errors are not computed \nfor unweighted least squares (ULS) or diagonally weighted least squares (DWLS) estimation. \nIn general, standard errors are computed even if the STDERR display option is not used (for \nfile output)."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OMETHOD=|OM=|TECHNIQUE=|TECH=","ProcedureOptionHelp":{"#cdata":"[Syntax: OMETHOD= | OM=name |TECHNIQUE=  | TECH=name] \n      \nSpecifies the optimization method or technique."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"CONGRA","@Value2":"DBLDOG","@Value3":"LEVMAR","@Value4":"NEWRAP","@Value5":"NRRIDG","@Value6":"QUANEW","@Value7":"TRUREG","@Value8":"NONE"},"ProcedureOptionToolTips":{"@ToolTip1":"Chooses one of four different conjugate-gradient optimization algorithms, which can be more precisely  defined with the UPDATE= option and modified with the LINESEARCH= option.","@ToolTip2":"Performs a version of double-dogleg optimization, which uses the gradient to update an approximation  of the Cholesky factor of the Hessian.","@ToolTip3":"Performs a highly stable but, for large problems, memory- and time-consuming Levenberg-Marquardt  optimization technique, a slightly improved variant of the Mor\u00e9 (1978) implementation. This is the default optimization technique if there are fewer than 40 parameters to estimate.","@ToolTip4":"Performs a usually stable but, for large problems, memory- and time-consuming Newton-Raphson optimization  technique. The algorithm combines a line-search algorithm with ridging, and it can be modified with the  LINESEARCH= option.","@ToolTip5":"Performs a usually stable but, for large problems, memory- and time-consuming Newton-Raphson optimization  technique. This algorithm does not perform a line search.","@ToolTip6":"Chooses one of four different quasi-Newton optimization algorithms that can be more precisely defined with the UPDATE= option and modified with the LINESEARCH= option.","@ToolTip7":"Performs a usually very stable but, for large problems, memory- and time-consuming trust-region optimization  technique. The algorithm is implemented similar to Gay (1983) and Mor\u00e9 and Sorensen (1983).","@ToolTip8":"Does not perform any optimization. This option is similar to METHOD=NONE, but TECH=NONE also computes and displays residuals and goodness of fit statistics."}},{"ProcedureOptionName":"ORDERALL","ProcedureOptionHelp":{"#cdata":"Prints the model and group results in the order of the model or group numbers, starting \nfrom the smallest number."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"ORDERGROUPS|ORDERG","ProcedureOptionHelp":{"#cdata":"Prints the group results in the order of the group numbers, starting from the smallest number."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"ORDERMODELS|ORDERMO","ProcedureOptionHelp":{"#cdata":"Prints the model results in the order of the model numbers, starting from the smallest number."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"ORDERSPEC","ProcedureOptionHelp":{"#cdata":"Arranges some model results by the types of parameters."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OUTEST=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUTEST= SAS-data-set] \n      \nCreates an output data set that contains the parameter estimates, their gradient,\nHessian matrix, and boundary and linear constraints. For METHOD=ML, METHOD=GLS, and \nMETHOD=WLS, the OUTEST= data set also contains the information matrix, the approximate \ncovariance matrix of the parameter estimates ((generalized) inverse of information \nmatrix), and approximate standard errors."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"OUTJAC","ProcedureOptionHelp":{"#cdata":"[Obsolete] \n      \nWrites the Jacobian matrix, if it has been computed, to the OUTEST= data set. This is useful  \nwhen the information and Jacobian matrices need to be computed for other analyses."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OUTFIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUTFIT=SAS-data-set] \n      \nCreates an output data set that contains the values of the fit indices."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"OUTMODEL=|OUTRAM=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUTMODEL= | OUTRAM=SAS-data-set] \n      \nCreates an output data set that contains the model information for the analysis, the \nparameter estimates, and their standard errors."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"OUTSTAT=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUTSTAT=SAS-data-set] \n      \nCreates an output data set containing the BY-group variables, the analyzed covariance or \ncorrelation matrices, and the predicted and residual covariance or correlation matrices \nof the analysis."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"OUTWGT=|OUTWEIGHT=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUTWGT=SAS-data-set] \n      \nCreates an output data set that contains the elements of the weight matrix W or its \ninverse W\u02c9\u00b9 used in the estimation process."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"PALL|ALL","ProcedureOptionHelp":{"#cdata":"Displays all optional output except the output generated by the PCOVES and PDETERM, options.\n      \nCaution: The PALL option includes the very expensive computation of the modification indices."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PARMNAME","ProcedureOptionHelp":{"#cdata":"Prints the parameter names in the model results."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PCORR|CORR","ProcedureOptionHelp":{"#cdata":"Displays the covariance or correlation matrix that is analyzed and the predicted model \ncovariance or correlation matrix."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PCOVES|PCE","ProcedureOptionHelp":{"#cdata":"Displays the following: \n\n  o the information matrix \n\n  o the approximate covariance matrix of the parameter estimates (generalized inverse of the information matrix) \n\n  o the approximate correlation matrix of the parameter estimates"},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PDETERM|PDE","ProcedureOptionHelp":{"#cdata":"Displays three coefficients of determination: the determination of all equations (DETAE), \nthe determination of the structural equations (DETSE), and the determination of the\nmanifest variable equations (DETMV)."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PESTIM|PES","ProcedureOptionHelp":{"#cdata":"Displays the parameter estimates. In some cases, this includes displaying the standard \nerrors and values."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PINITIAL|PIN","ProcedureOptionHelp":{"#cdata":"Displays the model specification with initial estimates and the vector of initial values."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PJACPAT|PJP","ProcedureOptionHelp":{"#cdata":"[Obsolete] \n      \nDisplays the structure of variable and constant elements of the Jacobian matrix. \nThis displayed output is not included in the output generated by the PALL option."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PLATCOV|PLATMOM|PLC","ProcedureOptionHelp":{"#cdata":"Displays the following: \n\n  o the estimates of the covariances among the latent variables \n\n  o the estimates of the covariances between latent and manifest variables \n  \n  o the estimates of the latent variable means for mean structure analysis \n\n  o the latent variable score regression coefficients"},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PLOTS=|PLOT=","ProcedureOptionHelp":{"#cdata":"Syntax: PLOTS | PLOT <= plot-request> |\n  PLOTS | PLOT <= ( plot-request < ...plot-request> )  \n\nSpecifies the ODS graphical plots. Currently, the only available ODS graphical plots in PROC CALIS\nare for residual distributions."},"ProcedureOptionType":"S|V","ProcedureOptionValues":{"@Value1":"ALL","@Value2":"RESIDUALS","@Value3":"NONE"},"ProcedureOptionToolTips":{"@ToolTip1":"Plots all available plots","@ToolTip2":"Plots distribution of residuals","@ToolTip3":"Plots no ODS graphical plots"}},{"ProcedureOptionName":"PREDET|PRE","ProcedureOptionHelp":{"#cdata":"[Obsolete] \n      \nDisplays the pattern of variable and constant elements of the predicted moment matrix \nthat is predetermined by the analysis model."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PRIMAT|PMAT","ProcedureOptionHelp":{"#cdata":"Displays parameter estimates, approximate standard errors, and t values in matrix form \nif you specify the analysis model in the RAM or LINEQS statement."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PRINT|PRI","ProcedureOptionHelp":{"#cdata":"Adds the options KURTOSIS, RESIDUAL, PLATCOV, and TOTEFF to the default output."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PRIVEC|PVEC","ProcedureOptionHelp":{"#cdata":"[Obsolete] \n      \nDisplays parameter estimates, approximate standard errors, the gradient, and t values \nin vector form. The values are displayed with more decimal places. This displayed output \nis not included in the output generated by the PALL option."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PSHORT|SHORT|PSH","ProcedureOptionHelp":{"#cdata":"Excludes the output produced by the PINITIAL, SIMPLE, and STDERR options from the default output."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PSUMMARY|SUMMARY|PSUM","ProcedureOptionHelp":{"#cdata":"Displays the fit assessment table only."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PWEIGHT|PW","ProcedureOptionHelp":{"#cdata":"Displays the weight matrix W used in the estimation. The weight matrix is displayed after the WRIDGE=\nand WPENALTY= options are applied to it."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"RADIUS=","ProcedureOptionHelp":{"#cdata":"[Syntax: RADIUS=r] \n      \nIs an alias for the INSTEP= option for Levenberg-Marquardt minimization."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"RANDOM=","ProcedureOptionHelp":{"#cdata":"[Syntax: RANDOM=i] \n      \nSpecifies a positive integer as a seed value for the pseudo-random number generator to \ngenerate initial values for the parameter estimates for which no other initial value \nassignments in the model definitions are made."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"RDF=|DFR=","ProcedureOptionHelp":{"#cdata":"[Syntax: RDF= | DFR=n] \n      \nMakes the effective number of observations the actual number of observations minus \nthe RDF= value."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"READADDPARM|READADD","ProcedureOptionHelp":{"#cdata":"Inputs the generated default parameters (for example, observations with _TYPE_=ADDPCOV, \nADDMEAN, or ADDPVAR) in the INMODEL= data set as if they were part of the original \nmodel specification."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"RESIDUAL=|RES=","ProcedureOptionHelp":{"#cdata":"Syntax: RESIDUAL | RES <(TALLY  |  TALLIES)> <= NORM  |  VARSTAND  |  ASYSTAND>\n      \nDisplays the raw and normalized residual covariance matrices, the rank order of the largest residuals,\nand the bar charts of residual tallies. This information is displayed by default when you specify the\nPRINT option. Use the RESIDUAL(TALLY) or RESIDUAL(TALLY)= option if you don't want SAS to replace bar\ncharts of residual tallies with graphical histograms showing residual distributions."},"ProcedureOptionType":"S|V","ProcedureOptionValues":{"@Value1":"NORM","@Value2":"VARSTAND","@Value3":"ASYSTAND"},"ProcedureOptionToolTips":{"@ToolTip1":"Normalized residuals","@ToolTip2":"Variance standardized residuals","@ToolTip3":"Asymptotically standardized residuals"},"SubOptionsKeywords":"TALLY|TALLIES"},{"ProcedureOptionName":"RIDGE=","ProcedureOptionHelp":{"#cdata":"[Syntax: RIDGE<=r>] \n      \nDefines a ridge factor r for the diagonal of the moment matrix S that is analyzed. \nIf you do not specify r in the RIDGE option, PROC CALIS tries to ridge the covariance \nor correlation matrix S so that the smallest eigenvalue is about 10\u207b\u00b3."},"ProcedureOptionType":"S|V"},{"ProcedureOptionName":"SALPHA=","ProcedureOptionHelp":{"#cdata":"[Syntax: SALPHA=r] \n      \nIs an alias for the INSTEP= option for line-search algorithms."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SIMPLE|S","ProcedureOptionHelp":{"#cdata":"Displays means, standard deviations, skewness, and univariate kurtosis if available."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"SINGULAR=|SING=","ProcedureOptionHelp":{"#cdata":"[Syntax: SINGULAR= | SING=r] \n      \nSpecifies the singularity criterion r, 0 < r < 1, used, for example, for matrix inversion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SLMW=","ProcedureOptionHelp":{"#cdata":"[Syntax: SLMW=r] \n      \nSpecifies the probability limit used for computing the stepwise multivariate Wald test. \nThe process stops when the univariate probability is smaller than r. The default value \nis r=0.05."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SPRECISION=|SP=","ProcedureOptionHelp":{"#cdata":"[Syntax: SPRECISION= | SP=r] \n      \nIs an alias for the LSPRECISION= option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"START=","ProcedureOptionHelp":{"#cdata":"[Syntax: START=r] \n      \nSpecifies initial estimates for parameters as multiples of the r value. In all CALIS models, \nyou can supply initial estimates individually as parenthesized values after each parameter \nname. Unspecified initial estimates are usually computed by various reasonable initial \nestimation methods in PROC CALIS."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"STDERR|SE","ProcedureOptionHelp":{"#cdata":"Displays approximate standard errors if estimation methods other than unweighted least \nsquares (ULS) or diagonally weighted least squares (DWLS) are used (and the NOSTDERR \noption is not specified)."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"UCORR","ProcedureOptionHelp":{"#cdata":"[Obsolete] \n      \nAnalyzes the uncorrected correlation matrix instead of the correlation matrix corrected for the mean. \n\nNote that even though the UCORR and UCOV options are not supported in PROC CALIS, you can still provide \nSAS data sets with TYPE=UCORR or TYPE=UCOV in the DATA= option. PROC CALIS uses the information provided \nin the data set to compute the corrected covariance or correlation matrix for analysis."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"UCOV","ProcedureOptionHelp":{"#cdata":"[Obsolete] \n      \nAnalyzes the uncorrected covariance matrix instead of the covariance matrix corrected for the mean. \n\nNote that even though the UCORR and UCOV options are not supported in PROC CALIS, you can still provide \nSAS data sets with TYPE=UCORR or TYPE=UCOV in the DATA= option. PROC CALIS uses the information provided \nin the data set to compute the corrected covariance or correlation matrix for analysis."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"UPDATE=|UPD=","ProcedureOptionHelp":{"#cdata":"Specifies the update method for the quasi-Newton or conjugate-gradient optimization technique."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"PB","@Value2":"FR","@Value3":"PR","@Value4":"CD","@Value5":"DBFGS","@Value6":"DDFP","@Value7":"BFGS","@Value8":"DFP"},"ProcedureOptionToolTips":{"@ToolTip1":"[For TECHNIQUE=CONGRA]--Performs the automatic restart update method of Powell (1977) and Beale (1972). This is the default.","@ToolTip2":"[For TECHNIQUE=CONGRA]--Performs the Fletcher-Reeves update (Fletcher 1980, p. 63).","@ToolTip3":"[For TECHNIQUE=CONGRA]--Performs the Polak-Ribiere update (Fletcher 1980, p. 66).","@ToolTip4":"[For TECHNIQUE=CONGRA]--Performs a conjugate-descent update of Fletcher (1987).","@ToolTip5":"[For TECHNIQUE=DBLDOG|QUANEW]--Performs the dual Broyden-Fletcher-Goldfarb-Shanno (BFGS) update of the Cholesky factor of the Hessian matrix. This is the default.","@ToolTip6":"[For TECHNIQUE=DBLDOG|QUANEW]--Performs the dual Davidon-Fletcher-Powell (DFP) update of the Cholesky factor of the Hessian matrix.","@ToolTip7":"[For TECHNIQUE=QUANEW]--Performs original BFGS update of the inverse Hessian matrix. This is the default for earlier releases.","@ToolTip8":"[For TECHNIQUE=QUANEW]--Performs the original DFP update of the inverse Hessian matrix."}},{"ProcedureOptionName":"VARDEF=","ProcedureOptionHelp":{"#cdata":"Specifies the divisor to use in the calculation of covariances and standard deviations."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"DF","@Value2":"N","@Value3":"WDF","@Value4":"WEIGHT|WGT"},"ProcedureOptionToolTips":{"@ToolTip1":"Degrees of freedom","@ToolTip2":"Number of observations","@ToolTip3":"Sum of weights DF","@ToolTip4":"Sum of weights"}},{"ProcedureOptionName":"VSINGULAR=|VSING=","ProcedureOptionHelp":{"#cdata":"[Syntax: VSINGULAR= | VSING=r] \n      \nSpecifies a relative singularity criterion r, r > 0, for the inversion of the information \nmatrix, which is needed to compute the covariance matrix."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"WPENALTY=|WPEN=","ProcedureOptionHelp":{"#cdata":"[Syntax: WPENALTY= | WPEN=r] \n      \nSpecifies the penalty weight r \u2265 0 for the WLS and DWLS fit of the diagonal elements\nof a correlation matrix (constant 1s)."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"WRIDGE=","ProcedureOptionHelp":{"#cdata":"[Syntax: WRIDGE=r] \n      \nDefines a ridge factor r for the diagonal of the weight matrix W used in GLS, WLS, or DWLS estimation."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"BY","StatementHelp":{"#cdata":"Syntax: BY <DESCENDING> variable-1 <...<DESCENDING> variable-n> <NOTSORTED>; \n      \nYou can specify a BY statement with PROC CALIS to obtain separate analyses on observations \nin groups that are defined by the BY variables. When a BY statement appears, the procedure \nexpects the input data set to be sorted in order of the BY variables. If you specify more \nthan one BY statement, only the last one specified is used."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DESCENDING","StatementOptionHelp":{"#cdata":"Specifies that the observations are sorted in descending order by the variable that \nimmediately follows the word DESCENDING in the BY statement."},"StatementOptionType":"S"},{"StatementOptionName":"NOTSORTED","StatementOptionHelp":{"#cdata":"Specifies that observations are not necessarily sorted in alphabetic or numeric order."},"StatementOptionType":"S"}]}},{"StatementName":"COSAN","StatementHelp":{"#cdata":"Syntax: COSAN <VAR=variable-list,> term < + term...> ; \n\nwhere variable-list is a list of observed variables and term represents either one \nof the following forms:\n\nmatrix_definition <  matrix_definition ...> <mean_definition> \nor\nmean_definition\n\nwhere matrix_definition is of the following form:\n\n  matrix_name <( number_of_columns < , matrix_type < ,transformation >>)>\n\nand mean_definition is one of the following forms:\n\n  [ / mean_vector ]\n  or\n  [ MEAN=mean_vector]\n  where mean_vector is a vector name. \n\nThe PROC CALIS statement invokes the COSAN modeling language. You can specify at most \none COSAN statement in a model within the scope of either the PROC CALIS statement or \na MODEL statement. To complete the COSAN model specification, you might need to add as \nmany MATRIX statements as needed. Optionally, you can provide the variable names for the \nCOSAN model matrices in the VARNAMES statement."},"StatementOptions":{"StatementOption":{"StatementOptionName":"VAR=","StatementOptionHelp":{"#cdata":"[Syntax: VAR=variable-list] \n          \nwhere variable-list is a list of observed variables and term represents either \none of the following forms:\n\n  matrix_definition <  matrix_definition ...> <mean_definition> \n  or mean_definition\n  \nwhere matrix_definition is of the following form:\n  matrix_name <( number_of_columns < , matrix_type < ,transformation >>)>\nand mean_definition is one of the following forms:\n  [ / mean_vector ] or [ MEAN=mean_vector] where mean_vector is a vector name. \n\nPROC CALIS supports the following keywords for matrix_type: \n  IDE -- specifies an identity matrix. \n  ZID -- specifies an identity matrix. \n  DIA -- specifies a diagonal matrix. \n  ZDI -- specifies a diagonal matrix. \n  LOW -- specifies a lower triangular matrix. The matrix can be rectangular. \n  UPP -- specifies an upper triangular matrix. The matrix can be rectangular. \n  SYM -- specifies a symmetric matrix. The matrix cannot be rectangular. \n  GEN -- specifies a general rectangular matrix (default). \n\nPROC CALIS supports the following two keywords for transformation: \n  INV -- uses the inverse of the matrix. \n  IMI -- uses the inverse of the difference between the identity and the matrix."},"StatementOptionType":"V"}}},{"StatementName":"COV","StatementHelp":{"#cdata":"Syntax: COV assignment <, assignment ...> ;\n\nwhere assignment represents var_list <  var_list2> <= parameter-spec> \n\nThe COV statement is a subsidiary model specification statement for the confirmatory \nFACTOR and LINEQS models. In the LINEQS model, the COV statement defines the covariances \namong the exogenous variables, including errors and disturbances. In the confirmatory \nFACTOR model, the COV statement defines the factor covariances. In each assignment of \nthe COV statement, you specify variables in the var_list and the var_list2 lists, \nfollowed by the covariance parameter specification in the parameter-spec list. The \nlatter two specifications are optional. \n\nYou can specify the following five types of the parameters for the covariances: \n\n  o an unnamed free parameter \n  o an initial value \n  o a fixed value \n  o a free parameter with a name provided \n  o a free parameter with a name and initial value provided"},"StatementOptions":null},{"StatementName":"DETERM|STRUCTEQ","StatementHelp":{"#cdata":"Syntax: DETERM | STRUCTEQ variables < / option > ; \n\nwhere option represents: \nLABEL | NAME = name\n\nThe DETERM statement is used to compute the determination coefficient of the listed dependent \nvariables in the model. The precursor of the DETERM statement is the STRUCTEQ statement, which \nenables you to define the list of the dependent variables of the structural equations.  Because \nthe term structural equation is not defined in a unique way, a more generic concept of determination \ncoefficients is revealed by the DETERM statement. \n\nYou can specify the DETERM statement as many times as you want for computing determination \ncoefficients for the sets of dependent variables of interest. You can label each set of dependent \nvariables by using the LABEL= option. Note that you cannot use the DETERM statement in an MSTRUCT \nmodel because there are no dependent variables in this type of model."},"StatementOptions":{"StatementOption":{"StatementOptionName":"LABEL=|NAME=","StatementOptionHelp":{"#cdata":"[Syntax: LABEL | NAME = name] \n          \nSpecifies to label each set of dependent variables."},"StatementOptionType":"V"}}},{"StatementName":"EFFPART","StatementHelp":{"#cdata":"Syntax: EFFPART effect < , effect> ;\n      \nwhere effect represents:\nvar_list < direction var_list2> \nand direction is the direction of the effect, as indicated by one of the following: \n--->, -->, ->, >, <---, <--, <-, or <. \n\nIn the EFFPART statement, you select those effects you want to analyze by partitioning \nthe total effects into direct and indirect effects, with estimated standard errors. The \nEFFPART or TOTEFF option of the PROC CALIS statement also enables you to analyze effects. \nThe difference is that the EFFPART or TOTEFF option displays effects on all endogenous \nvariables, while the EFFPART statement shows only the effects of interest. In addition, \nthe EFFPART statement enables you to arrange the effects in any way you like. Hence, the \nEFFPART statement offers a more precise and organized way to present various results of \neffects."},"StatementOptions":null},{"StatementName":"FITINDEX","StatementHelp":{"#cdata":"Syntax: FITINDEX option <option ...> ;\n      \nYou can use the FITINDEX statement to set the options for computing and displaying \nthe fit indices, or to output the fit indices. All but the OFF= and ON= options of \nthe FITINDEX statement are also available in the PROC CALIS statement. The options \nset in the FITINDEX statement will overwrite those set in the PROC CALIS statement."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ALPHAECV=","StatementOptionHelp":{"#cdata":"[Syntax: ALPHAECV=\u03b1] \n          \nSpecifies a (1 - \u03b1)100% confidence interval, 0 \u2264 \u03b1 \u2264 1, for the Browne and Cudeck (1993) expected \ncross validation index (ECVI). The default value is , which corresponds to a 90% confidence interval \nfor the ECVI."},"StatementOptionType":"V"},{"StatementOptionName":"ALPHARMS=","StatementOptionHelp":{"#cdata":"[Syntax: ALPHARMS=\u03b1] \n          \nSpecifies a (1 - \u03b1)100% confidence interval, 0 \u2264 \u03b1 \u2264 1, for the Steiger and Lind (1980) root mean \nsquared error of approximation (RMSEA) coefficient. The default value is , which corresponds to \n a 90% confidence interval for the RMSEA."},"StatementOptionType":"V"},{"StatementOptionName":"CHICORRECT=|CHICORR=","StatementOptionHelp":{"#cdata":"[Syntax: CHICORRECT | CHICORR= name  |  c] \n          \nSpecifies a correction factor c for the chi-square statistics for model fit."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"EQVARCOV","@Value2":"CIRCULARITY","@Value3":"EQCOVMAT"},"StatementOptionToolTips":{"@ToolTip1":"Specifies the correction factor due to Box (1949) for testing equal variances and equal covariances  in a covariance matrix.","@ToolTip2":"Specifies the correction factor due to Mauchly (1940) for testing circularity or Huynh and Feldt  Type H matrix.","@ToolTip3":"Specifies the correction factor due to Box (1949) for testing equality of covariance matrices."}},{"StatementOptionName":"CLOSEFIT=","StatementOptionHelp":{"#cdata":"[Syntax: CLOSEFIT=p] \n          \nDefines the criterion value p for indicating a close fit. The smaller the better fit. The default \nvalue for close fit is 0.05."},"StatementOptionType":"V"},{"StatementOptionName":"DFREDUCE=|DFRED=","StatementOptionHelp":{"#cdata":"[Syntax: DFREDUCE=i | DFRED=i] \n          \nReduces the degrees of freedom of the chi-square test by i."},"StatementOptionType":"V"},{"StatementOptionName":"NOADJDF","StatementOptionHelp":{"#cdata":"Turns off the automatic adjustment of degrees of freedom when there are active \nconstraints in the analysis."},"StatementOptionType":"S"},{"StatementOptionName":"NOINDEXTYPE","StatementOptionHelp":{"#cdata":"Disables the display of index types in the fit summary table."},"StatementOptionType":"S"},{"StatementOptionName":"OUTFIT=","StatementOptionHelp":{"#cdata":"[Syntax: OUTFIT=SAS-data-set] \n          \nCreates an output data set that contains the values of the fit indices."},"StatementOptionType":"V"},{"StatementOptionName":"OFFLIST=|OFF=","StatementOptionHelp":{"#cdata":"[Syntax: OFF | OFFLIST= [names]  |  {names}] \n          \nTurns off the printing of one or more fit indices or modeling information as indicated by names, \nwhere a name represents a fit index, a group of fit indices, or modeling information."},"StatementOptionType":"V"},{"StatementOptionName":"ONLIST=|ON=","StatementOptionHelp":{"#cdata":"[Syntax: ON | ONLIST < (ONLY) > = [names] | {names}] \n          \nTurns on the printing of one or more fit indices or modeling information as indicated by names, \nwhere a name represents a fit index, a group of fit indices, or modeling information."},"StatementOptionType":"S|V","SubOptionsKeywords":"ONLY"}]}},{"StatementName":"GROUP","StatementHelp":{"#cdata":"Syntax: GROUP i </ options> ;\n      \nwhere i is an assigned group number between 1 and 9999, inclusively. \n\nThe GROUP statement signifies the beginning of a group specification block and designates \na group number for the group. All subsidiary group specification statements after a GROUP \nstatement belong in that group until another MODEL or GROUP statement is used. The subsidiary \ngroup specification statements refer to one of the following four statements: \n\n  o FREQ statement \n  o PARTIAL statement \n  o VAR statement \n  o WEIGHT statement"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"LABEL=","StatementOptionHelp":{"#cdata":"[Syntax: LABEL= | NAME=name] \n          \nSpecifies a label for the current group."},"StatementOptionType":"V"},{"StatementOptionName":"DATA=","StatementOptionHelp":{"#cdata":"[Syntax: DATA=SAS-data-set] \n          \nSpecifies an input data set that can be an ordinary SAS data set or a specially structured TYPE=CORR,\nTYPE=COV, TYPE=UCORR, TYPE=UCOV, TYPE=SSCP, or TYPE=FACTOR SAS data set."},"StatementOptionType":"V"},{"StatementOptionName":"INWGT=","StatementOptionHelp":{"#cdata":"[Syntax: INWGT<(INV)>=SAS-data-set] \n          \nSpecifies an input data set that contains the weight matrix W used in generalized least squares (GLS), \nweighted least squares (WLS, ADF), or diagonally weighted least squares (DWLS) estimation, if the INV\noption is specified."},"StatementOptionType":"DV"},{"StatementOptionName":"OUTSTAT=","StatementOptionHelp":{"#cdata":"[Syntax: OUTSTAT=SAS-data-set] \n          \nCreates an output data set containing the BY-group variables, the analyzed covariance or correlation \nmatrices, and the predicted and residual covariance or correlation matrices of the analysis."},"StatementOptionType":"DV"},{"StatementOptionName":"OUTWGT=","StatementOptionHelp":{"#cdata":"[Syntax: OUTWGT=SAS-data-set] \n          \nCreates an output data set containing the weight matrix W (or its inverse) used in the \nestimation process."},"StatementOptionType":"DV"},{"StatementOptionName":"BIASKUR","StatementOptionHelp":{"#cdata":"Computes univariate skewness and kurtosis by formulas uncorrected for bias."},"StatementOptionType":"S"},{"StatementOptionName":"EDF=|DFE=","StatementOptionHelp":{"#cdata":"[Syntax: EDF=n | DFE=n] \n          \nMakes the effective number of observations n+i, where i is 0 if the NOINT, UCORR, or UCOV option \nis specified without the AUGMENT option or where i is 1 otherwise."},"StatementOptionType":"V"},{"StatementOptionName":"INWGTINV","StatementOptionHelp":{"#cdata":"Specifies that the INWGT= data set contains the inverse of the weight matrix, rather \nthan the weight matrix itself. This option is effective only with an input weight \nmatrix specified in the INWGT= data set and with the generalized least squares (GLS), \nweighted least squares (WLS or ADF), or diagonally weighted least squares (DWLS) \nestimation."},"StatementOptionType":"S"},{"StatementOptionName":"KURTOSIS|KU","StatementOptionHelp":{"#cdata":"Computes and displays univariate kurtosis and skewness, various coefficients of multivariate kurtosis, \nand the numbers of observations that contribute most to the normalized multivariate kurtosis."},"StatementOptionType":"S"},{"StatementOptionName":"NOBS=","StatementOptionHelp":{"#cdata":"[Syntax: NOBS= nobs] \n          \nSpecifies the number of observations."},"StatementOptionType":"V"},{"StatementOptionName":"PCORR","StatementOptionHelp":{"#cdata":"Displays the covariance or correlation matrix that is analyzed and the predicted model covariance\nor correlation matrix."},"StatementOptionType":"S"},{"StatementOptionName":"PLOTS=|PLOT=","StatementOptionHelp":{"#cdata":"Syntax: PLOTS | PLOT <= plot-request> \nPLOTS | PLOT <= ( plot-request < ...plot-request> ) >\n\nSpecifies the ODS graphical plots."},"StatementOptionType":"S|V","StatementOptionValues":{"@Value1":"ALL","@Value2":"NONE","@Value3":"RESIDUALS"},"StatementOptionToolTips":{"@ToolTip1":"All available plots","@ToolTip2":"No ODS graphical plots","@ToolTip3":"Distribution of residuals"}},{"StatementOptionName":"PWEIGHT","StatementOptionHelp":{"#cdata":"Displays the weight matrix W used in the estimation. The weight matrix is displayed after the WRIDGE= \nand WPENALTY= options are applied to it."},"StatementOptionType":"S"},{"StatementOptionName":"RDF=|DFR=","StatementOptionHelp":{"#cdata":"[Syntax: RDF= | DFR=n] \n          \nMakes the effective number of observations the actual number of observations minus the RDF= value."},"StatementOptionType":"V"},{"StatementOptionName":"RESIDUAL=|RES=","StatementOptionHelp":{"#cdata":"Syntax: RESIDUAL | RES <(TALLY  |  TALLIES)> <= NORM  |  VARSTAND  |  ASYSTAND> \n          \nDisplays the raw and normalized residual covariance matrices, the rank order of the largest residuals, \nand the bar charts of residual tallies. This information is displayed by default when you specify the \nPRINT option. Use the RESIDUAL(TALLY) or RESIDUAL(TALLY)= option if you don't want SAS to replace bar \ncharts of residual tallies with graphical histograms showing residual distributions."},"StatementOptionType":"S|V","StatementOptionValues":{"@Value1":"NORM","@Value2":"VARSTAND","@Value3":"ASYSTAND"},"StatementOptionToolTips":{"@ToolTip1":"Normalized residuals","@ToolTip2":"Variance standardized residuals","@ToolTip3":"Asymptotically standardized residuals"},"SubOptionsKeywords":"TALLY|TALLIES"},{"StatementOptionName":"RIDGE=","StatementOptionHelp":{"#cdata":"[Syntax: RIDGE<=r>] \n          \nDefines a ridge factor r for the diagonal of the correlation matrix S that is analyzed."},"StatementOptionType":"S|V"},{"StatementOptionName":"SIMPLE|S","StatementOptionHelp":{"#cdata":"Displays means, standard deviations, skewness, and univariate kurtosis if available."},"StatementOptionType":"S"},{"StatementOptionName":"VARDEF=","StatementOptionHelp":{"#cdata":"Specifies the divisor to use in the calculation of covariances and standard deviations."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"DF","@Value2":"N","@Value3":"WDF","@Value4":"WEIGHT"},"StatementOptionToolTips":{"@ToolTip1":"Degrees of freedom","@ToolTip2":"Number of observations","@ToolTip3":"Sum of weights minus one","@ToolTip4":"Sum of weights"}},{"StatementOptionName":"WPENALTY=|WPEN=","StatementOptionHelp":{"#cdata":"[Syntax: WPENALTY= | WPEN=r] \n          \nSpecifies the penalty weight r \u2265 0 for the WLS and DWLS fit of the diagonal elements of a correlation \nmatrix (constant 1s)."},"StatementOptionType":"V"},{"StatementOptionName":"WRIDGE=","StatementOptionHelp":{"#cdata":"[Syntax: WRIDGE=r] \n          \nDefines a ridge factor r for the diagonal of the weight matrix W used in GLS, WLS, or DWLS estimation."},"StatementOptionType":"V"}]}},{"StatementName":"LINCON","StatementHelp":{"#cdata":"Syntax: LINCON constraint <, constraint ...> ;\n      \nwhere constraint represents one of the following: \n  o number operator linear-term\n  o linear-term operator number \n  and linear-term is \n  <+|-><coefficient*> parameter <<+|-><coefficient*> parameter ...> \n  \nThe LINCON statement specifies a set of linear equality or inequality constraints, which must be \nseparated by commas. Each linear constraint i in the statement consists of a linear combination  \n\u2211jaijxj of a subset of the n parameters xj, j=1,...,n and a constant value bi separated by a \ncomparison operator. Valid operators are \u2264, <, \u2265, >, and = or, equivalently, LE, LT, GE, GT, and \nEQ. PROC CALIS cannot enforce the strict inequalities < or >. Note that the coefficients aij in \nthe linear combination must be constant numbers and must be followed by an asterisk and the name \nof a parameter (that is, listed in the PARMS, main, or subsidiary model specification statements). \nThe following is an example of the LINCON statement that sets a linear constraint on parameters x1 \nand x2: \n\n  lincon  x1 + 3 * x2 <= 1;\n\nAlthough you can easily express boundary constraints in LINCON statements, for many applications \nit is much more convenient to specify both the BOUNDS and the LINCON statements in the same PROC \nCALIS call."},"StatementOptions":null},{"StatementName":"LINEQS","StatementHelp":{"#cdata":"Syntax: LINEQS equation <, equation ...> ;\n      \n  where equation represents \n  dependent = term < + term ...> \n  and each term represents one of the following: \n    o coefficient-name < (number) > variable-name \n    o prefix-name < (number) > variable-name \n    o < number > variable-name \n    \nThe LINEQS statement is a main model specification statement that invokes the LINEQS modeling \nlanguage. You can specify at most one LINEQS statement in a model, within the scope of either \nthe PROC CALIS statement or a MODEL statement. To completely specify a LINEQS model, you might \nneed to add some subsidiary model specification statements such as the VARIANCE, COV, and MEAN \nstatements."},"StatementOptions":null},{"StatementName":"LISMOD","StatementHelp":{"#cdata":"Syntax: LISMOD <var_lists> ; \n        \nwhere var_lists represent one or more of the following: \n\n YVAR  |  YV  |  Y = variables \n XVAR  |  XV  |  X = variables \n ETAVAR  |  ETAV  |  ETA = variables \n XIVAR  |  XIV  |  XI  |  KSIVAR  |  KSIV  |  KSI = variables \n\n\nLISMOD stands for LISrel MODeling, where LISREL is the program developed by J\u00f6reskog and \nS\u00f6rbom (1988). Like the original implementation of LISREL, LISMOD uses a matrix specification \ninterface. To complete the LISMOD specification, you might need to add as many MATRIX statements \nas needed, as shown in the following statement structure for the LISMOD model: \n\n  LISMOD var_lists ; \n  MATRIX matrix-name parameters-in-matrix ; \n  Repeat the MATRIX statement as needed ;"},"StatementOptions":null},{"StatementName":"LMTESTS","StatementHelp":{"#cdata":"Syntax: LMTESTS option <option ...> ;\n      \nwhere option represents one of the following: \n  display-option \n  test-set\n\nand test-set represents one of the following:\n  set-name =  regions  \n  set-name =  regions  \n\nwhere set-name is the name of the set of Lagrange multiplier (LM) tests defined by the regions that \nfollow after the equal sign and regions are keywords denoting specific sets of parameters in the model. \n\nYou can use the LMTESTS statement to set display-options or to customize the test-sets for the LM tests. \nThe LMTESTS statement is one of the model analysis statements. It can be used within the scope of the \nCALIS statement so that the options will apply to all models. It can also be used within the scope of \neach MODEL statement so that the options will apply only locally. Therefore, different models within a \nCALIS run can have very different LMTESTS options."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DEFAULT","StatementOptionHelp":{"#cdata":"Conducts the default sets of LM tests for freeing fixed parameters in the model."},"StatementOptionType":"S"},{"StatementOptionName":"MAXRANK","StatementOptionHelp":{"#cdata":"Sets the maximum number of rankings within a set of LM tests."},"StatementOptionType":"S"},{"StatementOptionName":"NODEFAULT","StatementOptionHelp":{"#cdata":"Turns off the default sets of LM tests for freeing fixed parameters in the model."},"StatementOptionType":"S"},{"StatementOptionName":"NORANK","StatementOptionHelp":{"#cdata":"Turns off the ranking of the LM tests."},"StatementOptionType":"S"},{"StatementOptionName":"LMMAT","StatementOptionHelp":{"#cdata":"Prints the sets of LM tests in matrix form, in addition to the normal LM test results."},"StatementOptionType":"S"}]}},{"StatementName":"MATRIX","StatementHelp":{"#cdata":"Syntax: MATRIX matrix-name <location> = list <, location = list ...> ; \n      \nMATRIX statement specifies the matrix elements (locations) and their parameters. \nParameters can be fixed or free, with or without initial estimates. The matrix-name \nindicates the matrix to specify in the MATRIX statement. The location indicates the \nstarting row and column numbers of the matrix being specified and the parameter-spec \nis a list of free or fixed parameters for the elements that are indicated by the location. \n\nThe MATRIX statement is a subsidiary model specification statement of the COSAN, LISMOD, \nand MSTRUCT modeling languages. You might need to use the MATRIX statements as many times \nas needed for specifying your model. However, you can use the MATRIX statement at most once \nfor each distinct model matrix."},"StatementOptions":null},{"StatementName":"MEAN","StatementHelp":{"#cdata":"Syntax: MEAN assignment <, assignment ...> ; \n      \nwhere assignment represents: var_list <= parameter-spec> \n\nThe MEAN statement specifies the mean or intercept parameters in connection with the \nFACTOR, LINEQS, and PATH modeling languages. With the MEAN statement specification, \nPROC CALIS analyzes the mean structures in addition to the covariance structures. \n\nIn each assignment of the MEAN statement, you list the var_list that you want to specify \nfor their means or intercepts. Optionally, you can provide a list of parameter specifications \nin a parameter-spec after an equal sign for each var_list. The syntax of the MEAN statement \nis exactly the same as that of the VARIANCE statement."},"StatementOptions":null},{"StatementName":"OUTFILES|OUTFILE","StatementHelp":{"#cdata":"Syntax: OUTFILES | OUTFILE file_option <file_option ...> ; \n      \nwhere file_option represents one of the following: \n  OUTMODEL  |  OUTRAM= file_name [ MODEL= int_list < , int_list > ] \n  OUTSTAT= file_name [ GROUP= int_list < , int_list > ]\n  OUTWGT= file_name [ GROUP= int_list < , int_list > ] \n  \nwith file_name representing an output file name and int_list representing list of model or group numbers \n\nUse the OUTFILES statement when you need to output multiple-group or multiple-model information to output\nfiles in a complex way. In each OUTFILES statement, each possible file_option should appear no more than \nonce. However, as needed, you can use the OUTFILES statement more than once."},"StatementOptions":null},{"StatementName":"PATH","StatementHelp":{"#cdata":"Syntax: PATH path < , path ...> ; \n      \nwhere path represents: \n  var_listarrowvar_list2<= parameter-spec> \n  and arrow represents either a left-arrow or a right-arrow. \n  A left-arrow is one of the following: \n    <---, <--, <-, or <\n  A right-arrow is one of the following:\n    --->, -->, ->, or > \n\nThe PATH statement specifies the paths in your structural equation model. You can specify \nat most one PATH statement in a model within the scope of either the PROC CALIS statement \nor a MODEL statement. To complete the PATH model specifications, you might need to add some \nsubsidiary model specification statements such as the PVAR, PCOV, and the MEAN statements. \nThe following is the syntax for the PATH modeling language: \n\n  PATH path < , path ...> ; \n  PVAR partial-variance-parameters ; \n  PCOV partial-covariance-parameters ; \n  MEAN mean-parameters ;"},"StatementOptions":null},{"StatementName":"PCOV","StatementHelp":{"#cdata":"Syntax: PCOV assignment <, assignment ...> ; \n\nwhere assignment represents: \nvar_list <  var_list2> <= parameter-spec> \n\nThe PCOV statement is a subsidiary model specification statement for the PATH model. \nYou can use the PCOV statement only with the PATH modeling language. The PCOV statement \nspecifies the covariances of exogenous variables, or the error covariances of endogenous \nvariables in the PATH model. It can also specify the covariance between an exogenous \nvariable and the error term of an endogenous variables, although this usage is rare \nin practice."},"StatementOptions":null},{"StatementName":"PVAR","StatementHelp":{"#cdata":"Syntax: PVAR assignment < , assignment ...> ;\n        \nwhere assignment represents: var_list <= parameter-spec> \n\nThe PVAR statement specifies the variance or error (partial) variance parameters \nin connection with the confirmatory FACTOR and PATH models. \n\nIn each assignment of the PVAR statement, you list the var_list that you want to \nspecify for their variances or error (partial) variances. Optionally, you can provide \na list of parameter specifications (parameter-spec) after an equal sign for each var_list \nlist. The syntax of the PVAR statement is exactly the same as that of the VARIANCE statement."},"StatementOptions":null},{"StatementName":"REFMODEL","StatementHelp":{"#cdata":"Syntax: REFMODEL model_number </ options> ; \n\nwhere model_number represents a model number between 1 and 9999, inclusively, \nand options are for renaming parameters. \n\nThe REFMODEL statement is not a modeling language itself. It is a tool for referencing \nand modifying models. It is classified into one of the modeling languages because its \nrole is similar to other modeling languages. \n\n  REFMODEL model_number </ options> ; \n  RENAMEPARM parameter renaming ; \n  main model specification statement ; \n  subsidiary model specification statements ; "},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ALLNEWPARMS","StatementOptionHelp":{"#cdata":"Appends to the parameter names in the reference model with _mdl and then an integer suffix \ndenoting the model number of the current model. For example, if qq is a parameter in the \nreference model for a current model with model number 3, then this option creates qq_mdl3 \nas a new parameter name."},"StatementOptionType":"S"},{"StatementOptionName":"PARM_PREFIX=","StatementOptionHelp":{"#cdata":"[Syntax: PARM_PREFIX=prefix] \n          \nInserts to all parameter names in the reference model with the prefix provided. \nFor example, if qq is a parameter in the reference model for a current model, then \nPARM_PREFIX=pre_ creates pre_qq as a new parameter name."},"StatementOptionType":"V"},{"StatementOptionName":"PARM_SUFFIX=","StatementOptionHelp":{"#cdata":"[Syntax: PARM_SUFFIX=suffix] \n          \nAppends to all parameter names in the reference model with the suffix provided. \nFor example, if qq is a parameter in the reference model for a current model, then \nPARM_SUFFIX=_suf creates qq_suf as a new parameter name."},"StatementOptionType":"V"}]}},{"StatementName":"RENAMEPARM","StatementHelp":{"#cdata":"Syntax: RENAMEPARM assignment <, assignment ...> ; \n        \nwhere assignment represents: old_parameters = parameter-spec \n\nYou can use the RENAMEPARM statement to rename parameters or to change the types of \nparameters of a reference model so that new parameters are transferred to the new model \nin question. The RENAMEPARM statement is a subsidiary model specification statement that \nshould be used together with the REFMODEL statement. The syntax of the RENAMEPARM statement \nis similar to that of the VARIANCE statement\u2014except that in the RENAMEPARM statement, you \nput parameter names on the left-hand side of equal signs, whereas you put variable names \non the left-hand side in the VARIANCE statement. You can use no more than one RENAMEPARM \nstatement within the scope of each REFMODEL statement."},"StatementOptions":null},{"StatementName":"SIMTESTS|SIMTEST","StatementHelp":{"#cdata":"Syntax: SIMTESTS sim_test <sim_test ...> ; \n        \nwhere sim_test represents one of the following: \n test_name = [ functions ] \n test_name = { functions } \n \nand functions are either parameters in the model or parametric functions computed in the\nSAS programming statements. \n\nWhen the estimates in a model are asymptotically multivariate-normal, continuous and differentiable\nfunctions of the estimates are also multivariate-normally distributed. In the SIMTEST statement, \nyou can test these parametric functions simultaneously."},"StatementOptions":null},{"StatementName":"MSTRUCT","StatementHelp":{"#cdata":"Syntax: MSTRUCT <VAR=var_list> ; \n\nMSTRUCT stands for matrix structures. As opposed to other modeling languages, in which \nthe mean and covariance structures are implied from paths, equations, or complicated model \nmatrix computations, the MSTRUCT language is for direct structured mean and covariance models. \n\nIn the MSTRUCT statement, you define the list of variables. You can use MATRIX statements to \nspecify the parameters in the mean and covariance structures: \n\n  MSTRUCT variables ; \n  MATRIX _COV_ parameters-in-matrix ; \n  MATRIX _MEAN_ parameters-in-matrix ; \n  \nYou use the MATRIX _COV_ statement to specify the covariance and variance parameters in the \nstructured covariance matrix. When applicable, you use the MATRIX _MEAN_ statement to specify \nthe parameters in the structured mean vector. Each of these matrices can be specified no more \nthan once within a model."},"StatementOptions":{"StatementOption":{"StatementOptionName":"VAR=","StatementOptionHelp":{"#cdata":"Defines a list of variables."},"StatementOptionType":"V"}}},{"StatementName":"MODEL","StatementHelp":{"#cdata":"Syntax: MODEL i </ options> ; \n\nwhere i is an assigned model number between 1 and 9999, inclusively.\n\nA MODEL statement signifies the beginning of a model specification block and designates \na model number for the model. All main and subsidiary model specification statements after \na MODEL statement belong in that model until another MODEL or GROUP statement is encountered."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"LABEL=|NAME=","StatementOptionHelp":{"#cdata":"[Syntax: LABEL= | NAME=name] \n          \nSpecifies a label for the model. You can use any valid SAS names up to 256 characters for labels. \nYou can also use quote strings for labels."},"StatementOptionType":"V"},{"StatementOptionName":"GROUP=|GROUPS=","StatementOptionHelp":{"#cdata":"[Syntax: GROUP= | GROUPS=int-list] \n          \nSpecifies a list of integers int-list of group numbers representing the groups to be fitted by \nthe model."},"StatementOptionType":"V"},{"StatementOptionName":"CORRELATION|CORR","StatementOptionHelp":{"#cdata":"Analyzes the correlation matrix instead of the default covariance matrix."},"StatementOptionType":"S"},{"StatementOptionName":"COVARIANCE|COV","StatementOptionHelp":{"#cdata":"Analyzes the covariance matrix."},"StatementOptionType":"S"},{"StatementOptionName":"DEMPHAS=|DE=","StatementOptionHelp":{"#cdata":"[Syntax: DEMPHAS=r | DE=r] \n          \nChanges the initial values of all variance parameters by the relationship:\n      \n    snew = r(sold|+1) \n    \nwhere snew is the new initial value and sold is the original initial value."},"StatementOptionType":"V"},{"StatementOptionName":"EFFPART|PARTEFF|TOTEFF|TE","StatementOptionHelp":{"#cdata":"[Syntax: EFFPART | PARTEFF | TOTEFF | TE] \n          \nComputes and displays total, direct, and indirect effects for the unstandardized and standardized \nestimation results."},"StatementOptionType":"S"},{"StatementOptionName":"EXTENDPATH|GENPATH","StatementOptionHelp":{"#cdata":"Displays the extended path estimates such as the variances, covariances, means, and \nintercepts in the table that contains the ordinary path effect (coefficient) estimates. \nThis option applies to the PATH model only."},"StatementOptionType":"S"},{"StatementOptionName":"INEST=","StatementOptionHelp":{"#cdata":"[Syntax: INEST | INVAR | ESTDATA=SAS-data-set] \n          \nSpecifies an input data set that contains initial estimates for the parameters used in the optimization \nprocess and can also contain boundary and general linear constraints on the parameters."},"StatementOptionType":"V"},{"StatementOptionName":"INMODEL=|INRAM=","StatementOptionHelp":{"#cdata":"[Syntax: INMODEL | INRAM=SAS-data-set] \n          \nSpecifies an input data set that contains in RAM list form all information needed to specify an \nanalysis model."},"StatementOptionType":"V"},{"StatementOptionName":"MEANSTR","StatementOptionHelp":{"#cdata":"Invokes the analysis of mean structures."},"StatementOptionType":"S"},{"StatementOptionName":"MODIFICATION|MOD","StatementOptionHelp":{"#cdata":"Computes and displays Lagrange multiplier test indices for constant parameter constraints, \nequality parameter constraints, and active boundary constraints, as well as univariate \nand multivariate Wald test indices."},"StatementOptionType":"S"},{"StatementOptionName":"NOMEANSTR","StatementOptionHelp":{"#cdata":"Deactivates the inherited MEANSTR option."},"StatementOptionType":"S"},{"StatementOptionName":"NOMOD","StatementOptionHelp":{"#cdata":"Suppresses the computation of modification indices. The NOMOD option is useful \nin connection with the PALL option because it saves computing time."},"StatementOptionType":"S"},{"StatementOptionName":"NOORDERSPEC","StatementOptionHelp":{"#cdata":"Prints the model results in the order they appear in the input specifications."},"StatementOptionType":"S"},{"StatementOptionName":"NOPARMNAME","StatementOptionHelp":{"#cdata":"Suppresses the printing of parameter names in the model results."},"StatementOptionType":"S"},{"StatementOptionName":"NOSTAND","StatementOptionHelp":{"#cdata":"Suppresses the printing of standardized results. The default is to print the standardized results."},"StatementOptionType":"S"},{"StatementOptionName":"NOSTDERR","StatementOptionHelp":{"#cdata":"Specifies that standard errors should not be computed. Standard errors are not computed \nfor unweighted least squares (ULS) or diagonally weighted least squares (DWLS) estimation."},"StatementOptionType":"S"},{"StatementOptionName":"ORDERSPEC","StatementOptionHelp":{"#cdata":"Arranges some model results by the types of parameters."},"StatementOptionType":"S"},{"StatementOptionName":"OUTEST=","StatementOptionHelp":{"#cdata":"[Syntax: OUTEST=SAS-data-set] \n          \nCreates an output data set containing the parameter estimates, their gradient, Hessian matrix, \nand boundary and linear constraints."},"StatementOptionType":"DV"},{"StatementOptionName":"OUTMODEL=|OUTRAM=","StatementOptionHelp":{"#cdata":"[Syntax: OUTMODEL= | OUTRAM=SAS-data-set] \n          \nCreates an output data set that contains the model information for the analysis, the parameter \nestimates, and their standard errors."},"StatementOptionType":"DV"},{"StatementOptionName":"PARMNAME","StatementOptionHelp":{"#cdata":"Prints the parameter names in the model results."},"StatementOptionType":"S"},{"StatementOptionName":"PDETERM","StatementOptionHelp":{"#cdata":"Displays three coefficients of determination: the determination of all equations (DETAE), the \ndetermination of the structural equations (DETSE), and the determination of the manifest \nvariable equations (DETMV)."},"StatementOptionType":"S"},{"StatementOptionName":"PESTIM","StatementOptionHelp":{"#cdata":"Displays the parameter estimates. In some cases, this includes displaying the standard errors and \nt values."},"StatementOptionType":"S"},{"StatementOptionName":"PINITIAL","StatementOptionHelp":{"#cdata":"Displays the model specification with initial estimates and the vector of initial values."},"StatementOptionType":"S"},{"StatementOptionName":"PLATCOV","StatementOptionHelp":{"#cdata":"Displays the following: \n\n  o the estimates of the covariances among the latent variables \n\n  o the estimates of the covariances between latent and manifest variables \n\n  o the latent variable score regression coefficients"},"StatementOptionType":"S"},{"StatementOptionName":"PRIMAT","StatementOptionHelp":{"#cdata":"Displays parameter estimates, approximate standard errors, and t values in matrix form \nif you specify the analysis model in the RAM or LINEQS statement."},"StatementOptionType":"S"},{"StatementOptionName":"READADDPARM|READADD","StatementOptionHelp":{"#cdata":"Inputs the generated default parameters (for example, observations with _TYPE_=ADDPCOV, \nADDMEAN, or ADDPVAR) in the INMODEL= data set as if they were part of the original model \nspecification."},"StatementOptionType":"S"},{"StatementOptionName":"STDERR","StatementOptionHelp":{"#cdata":"Displays approximate standard errors if estimation methods other than unweighted least \nsquares (ULS) or diagonally weighted least squares (DWLS) are used (and the NOSTDERR \noption is not specified)."},"StatementOptionType":"S"},{"StatementOptionName":"BIASKUR","StatementOptionHelp":{"#cdata":"Computes univariate skewness and kurtosis by formulas uncorrected for bias."},"StatementOptionType":"S"},{"StatementOptionName":"EDF=|DFE=","StatementOptionHelp":{"#cdata":"[Syntax: EDF=n | DFE=n] \n          \nMakes the effective number of observations n+i, where i is 0 if the NOINT, UCORR, or UCOV option \nis specified without the AUGMENT option or where i is 1 otherwise."},"StatementOptionType":"V"},{"StatementOptionName":"INWGTINV","StatementOptionHelp":{"#cdata":"Specifies that the INWGT= data set contains the inverse of the weight matrix, rather \nthan the weight matrix itself. This option is effective only with an input weight \nmatrix specified in the INWGT= data set and with the generalized least squares (GLS), \nweighted least squares (WLS or ADF), or diagonally weighted least squares (DWLS) \nestimation."},"StatementOptionType":"S"},{"StatementOptionName":"KURTOSIS|KU","StatementOptionHelp":{"#cdata":"Computes and displays univariate kurtosis and skewness, various coefficients of multivariate kurtosis, \nand the numbers of observations that contribute most to the normalized multivariate kurtosis."},"StatementOptionType":"S"},{"StatementOptionName":"NOBS=","StatementOptionHelp":{"#cdata":"[Syntax: NOBS= nobs] \n          \nSpecifies the number of observations."},"StatementOptionType":"V"},{"StatementOptionName":"PCORR","StatementOptionHelp":{"#cdata":"Displays the covariance or correlation matrix that is analyzed and the predicted model covariance\nor correlation matrix."},"StatementOptionType":"S"},{"StatementOptionName":"PLOTS=|PLOT=","StatementOptionHelp":{"#cdata":"Syntax: PLOTS | PLOT <= plot-request> \nPLOTS | PLOT <= ( plot-request < ...plot-request> ) >\n\nSpecifies the ODS graphical plots."},"StatementOptionType":"S|V","StatementOptionValues":{"@Value1":"ALL","@Value2":"NONE","@Value3":"RESIDUALS"},"StatementOptionToolTips":{"@ToolTip1":"All available plots","@ToolTip2":"No ODS graphical plots","@ToolTip3":"Distribution of residuals"}},{"StatementOptionName":"PWEIGHT","StatementOptionHelp":{"#cdata":"Displays the weight matrix W used in the estimation. The weight matrix is displayed after the WRIDGE= \nand WPENALTY= options are applied to it."},"StatementOptionType":"S"},{"StatementOptionName":"RDF=|DFR=","StatementOptionHelp":{"#cdata":"[Syntax: RDF= | DFR=n] \n          \nMakes the effective number of observations the actual number of observations minus the RDF= value."},"StatementOptionType":"V"},{"StatementOptionName":"RESIDUAL=|RES=","StatementOptionHelp":{"#cdata":"Syntax: RESIDUAL | RES <(TALLY  |  TALLIES)> <= NORM  |  VARSTAND  |  ASYSTAND> \n          \nDisplays the raw and normalized residual covariance matrices, the rank order of the largest residuals, \nand the bar charts of residual tallies. This information is displayed by default when you specify the \nPRINT option. Use the RESIDUAL(TALLY) or RESIDUAL(TALLY)= option if you don't want SAS to replace bar \ncharts of residual tallies with graphical histograms showing residual distributions."},"StatementOptionType":"S|V","StatementOptionValues":{"@Value1":"NORM","@Value2":"VARSTAND","@Value3":"ASYSTAND"},"StatementOptionToolTips":{"@ToolTip1":"Normalized residuals","@ToolTip2":"Variance standardized residuals","@ToolTip3":"Asymptotically standardized residuals"},"SubOptionsKeywords":"TALLY|TALLIES"},{"StatementOptionName":"RIDGE=","StatementOptionHelp":{"#cdata":"[Syntax: RIDGE<=r>] \n          \nDefines a ridge factor r for the diagonal of the correlation matrix S that is analyzed."},"StatementOptionType":"S|V"},{"StatementOptionName":"SIMPLE|S","StatementOptionHelp":{"#cdata":"Displays means, standard deviations, skewness, and univariate kurtosis if available."},"StatementOptionType":"S"},{"StatementOptionName":"VARDEF=","StatementOptionHelp":{"#cdata":"Specifies the divisor to use in the calculation of covariances and standard deviations."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"DF","@Value2":"N","@Value3":"WDF","@Value4":"WEIGHT"},"StatementOptionToolTips":{"@ToolTip1":"Degrees of freedom","@ToolTip2":"Number of observations","@ToolTip3":"Sum of weights minus one","@ToolTip4":"Sum of weights"}},{"StatementOptionName":"WPENALTY=|WPEN=","StatementOptionHelp":{"#cdata":"[Syntax: WPENALTY= | WPEN=r] \n          \nSpecifies the penalty weight r \u2265 0 for the WLS and DWLS fit of the diagonal elements of a correlation \nmatrix (constant 1s)."},"StatementOptionType":"V"},{"StatementOptionName":"WRIDGE=","StatementOptionHelp":{"#cdata":"[Syntax: WRIDGE=r] \n          \nDefines a ridge factor r for the diagonal of the weight matrix W used in GLS, WLS, or DWLS estimation."},"StatementOptionType":"V"}],"#comment":{}}},{"StatementName":"FREQ","StatementHelp":{"#cdata":"Syntax: FREQ variable;\n      \nIf one variable in your data set represents the frequency of occurrence for the other \nvalues in the observation, specify the variable\u2019s name in a FREQ statement. PROC CALIS \nthen treats the data set as if each observation appears ni times, where ni is the value \nof the FREQ variable for observation i."},"StatementOptions":null},{"StatementName":"VAR","StatementHelp":{"#cdata":"VAR variables;\n    \nThe VAR statement defines and limits the set of observed variables that are available \nfor the corresponding model analysis. It is one of the subsidiary group specification \nstatements. You can use the VAR statement no more than once within the scope of each \nGROUP or the PROC CALIS statement. The set of variables in the VAR statement must be \npresent in the data set specified in the associated GROUP or the PROC CALIS statement."},"StatementOptions":null},{"StatementName":"WEIGHT","StatementHelp":{"#cdata":"Syntax: WEIGHT variable;\n      \nThe WEIGHT statement specifies the weight variable for the observations. It is one of the \nsubsidiary group specification statements. You can use the WEIGHT statement no more than \nonce within the scope of each GROUP statement or the PROC CALIS statement. \n\nWeighting is often done when the error variance associated with each observation is different \nand the values of the weight variable are proportional to the reciprocals of the variances. The \nWEIGHT and FREQ statements have a similar effect, except the WEIGHT statement does not alter the \nnumber of observations unless VARDEF=WGT or VARDEF=WDF. An observation is used in the analysis \nonly if the WEIGHT variable is greater than 0 and is not missing."},"StatementOptions":null},{"StatementName":"STD","StatementHelp":{"#cdata":"Syntax: STD assignment <, assignment ...> ;\n      \nwhere assignment represents:\nvar_list = parameter-spec \n\nThe STD statement functions exactly the same as the VARIANCE statement. The STD statement \nis obsolete and might not be supported in future versions of PROC CALIS. Use the VARIANCE \nstatement instead."},"StatementOptions":null},{"StatementName":"RAM","StatementHelp":{"#cdata":"Syntax: RAM <VAR=variable-list  |   variable-list=number-list <, \n  variable-list=number-list ...> , > <ram-entry <, ram-entry ...>> ; \n  \nwhere variable-list is a list of variables for the rows and columns of the _A_ and \n_P_ matrices and the rows of the _W_ vector of the RAM model, number-list is a list \nof positive integers that denote the order of the specified variables, and ram-entry \nis a parameter specification for an element in one of the three RAM model matrices. \nYou can specify latent variables in addition to observed variables in the VAR= option."},"StatementOptions":null},{"StatementName":"VARNAMES|VARNAME|VNAMES","StatementHelp":{"#cdata":"Syntax: VARNAMES | VNAMES assignment <, assignment ...> ;\n      \nwhere name_assignment represents one of the following forms: \nmatrix_name variable_names \nmatrix_name = [variable_names] \nmatrix_name = matrix_name \n\nYou can use the VARNAMES statement in connection with the COSAN modeling language to assign \nvariable names for matrices. The matrix_name refers to any matrix you define in the COSAN \nstatement. The variable_names that follow the matrix_name are assigned to the column variables \nof the matrix of interest. This applies to the first two types of VARNAMES specifications. \nFor example, \n\n  varnames  F   f1-f3;\n\nis exactly the same as \n\n  varnames  F = [ f1-f3 ];\n\nBoth of these assign f1, f2, and f3 as the names for the first three column variables of matrix F."},"StatementOptions":null},{"StatementName":"FACTOR","StatementHelp":{"#cdata":"Syntax: FACTOR <EFA_options | CFA_spec> ; \n      \nwhere EFA_options are options for the exploratory factor analysis.\n\nIn the FACTOR statement, you can specify either EFA_options, CFA_spec, or neither of these. \nHowever, you cannot specify both EFA_options and CFA_spec at the same time. If no option is \nspecified or there is at least one EFA_option (exploratory factor analysis option) specified \nin the FACTOR statement, an exploratory factor model is analyzed. Otherwise, a confirmatory \nfactor model is analyzed with the CFA_spec."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COMPONENT|COMP","StatementOptionHelp":{"#cdata":"Computes a component analysis instead of a factor analysis (the diagonal matrix U in the model is set to 0)."},"StatementOptionType":"S"},{"StatementOptionName":"HEYWOOD|HEY","StatementOptionHelp":{"#cdata":"Constrains the diagonal elements of U to be nonnegative. Equivalently, you can \nconstrain these elements to positive values by the BOUNDS statement."},"StatementOptionType":"S"},{"StatementOptionName":"GAMMA=","StatementOptionHelp":{"#cdata":"[Syntax: GAMMA=p] \n          \nSpecifies the orthomax weight used with the option ROTATE=ORTHOMAX. Alternatively, you can \nuse ROTATE=ORTHOMAX(p) with p representing the orthomax weight. There is no restriction on \nvalid values for the orthomax weight, although the most common values are between 0 and the \nnumber of variables. The default GAMMA= value is one, resulting in the varimax rotation."},"StatementOptionType":"V"},{"StatementOptionName":"N=","StatementOptionHelp":{"#cdata":"[Syntax: N=n] \n          \nSpecifies the number of first-order factors or components. The number of factors (n) should not exceed the\nnumber of variables (p) in the analysis."},"StatementOptionType":"V"},{"StatementOptionName":"NORM=","StatementOptionHelp":{"#cdata":"[Syntax: RM <= KAISER  |  NONE>] \n          \nKaiser-normalizes the rows of the factor pattern for rotation. The default is KAISER."},"StatementOptionType":"S|V","StatementOptionValues":{"@Value1":"KAISER","@Value2":"NONE"},"StatementOptionToolTips":{"@ToolTip1":"Has exactly the same effect as the NORM option.","@ToolTip2":"Turns off the normalization"}},{"StatementOptionName":"RCONVERGE=|RCONV=","StatementOptionHelp":{"#cdata":"[Syntax: RCONVERGE=p] \n          \nSpecifies the convergence criterion for rotation cycles. Rotation stops when the scaled \nchange of the simplicity function value is less than the RCONVERGE= value."},"StatementOptionType":"V"},{"StatementOptionName":"RITER=","StatementOptionHelp":{"#cdata":"[Syntax: RITER=i] \n          \nSpecifies the maximum number of cycles i for factor rotation. The default i is the greater \nof 10 times the number of variables and 100."},"StatementOptionType":"V"},{"StatementOptionName":"ROTATE=","StatementOptionHelp":{"#cdata":"Specifies an orthogonal or oblique rotation of the initial factor solution. Although \nROTATE=PRINCIPAL is actually not a rotation method, it is put here for convenience. \nBy default, ROTATE=NONE."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"BIQUARTIMAX","@Value2":"EQUAMAX","@Value3":"FACTORPARSIMAX","@Value4":"NONE","@Value5":"ORTHCF(p1,p2)","@Value6":"ORTHGENCF(p1,p2,p3,p4)","@Value7":"ORTHOMAX<(p1)>","@Value8":"PARSIMAX","@Value9":"PRINCIPAL","@Value10":"QUARTIMAX","@Value11":"VARIMAX","@Value12":"BIQUARTIMIN","@Value13":"COVARIMIN","@Value14":"OBBIQUARTIMAX","@Value15":"OBEQUAMAX","@Value16":"OBFACTORPARSIMAX","@Value17":"OBLICF(p1,p2)","@Value18":"OBLIGENCF(p1,p2,p3,p4)","@Value19":"OBLIMIN<(p1)>","@Value20":"OBPARSIMAX","@Value21":"OBQUARTIMAX","@Value22":"OBVARIMAX","@Value23":"QUARTIMIN|QMIN"},"StatementOptionToolTips":{"@ToolTip1":"Specifies orthogonal biquartimax rotation.","@ToolTip2":"Specifies orthogonal equamax rotation.","@ToolTip3":"Specifies orthogonal factor parsimax rotation.","@ToolTip4":"Specifies that no rotation be performed,","@ToolTip5":"Specifies the orthogonal Crawford-Ferguson rotation with the weights p1 and p2 for variable parsimony  and factor parsimony, respectively.","@ToolTip6":"Specifies the orthogonal generalized Crawford-Ferguson rotation with the four weights p1, p2, p3, and p4.","@ToolTip7":"Specifies the orthomax rotation with orthomax weight p1.","@ToolTip8":"Specifies orthogonal parsimax rotation.","@ToolTip9":"Specifies a principal axis rotation.","@ToolTip10":"Specifies orthogonal quartimax rotation.","@ToolTip11":"Specifies orthogonal varimax rotation.","@ToolTip12":"Specifies biquartimin rotation.","@ToolTip13":"Specifies covarimin rotation.","@ToolTip14":"Specifies oblique biquartimax rotation.","@ToolTip15":"Specifies oblique equamax rotation.","@ToolTip16":"Specifies oblique factor parsimax rotation.","@ToolTip17":"Specifies the oblique Crawford-Ferguson rotation (Crawford and Ferguson 1970) with the weights p1  and p2 for variable parsimony and factor parsimony, respectively.","@ToolTip18":"Specifies the oblique generalized Crawford-Ferguson rotation with the four weights p1, p2, p3, and p4.","@ToolTip19":"Specifies the oblimin rotation with oblimin weight p1.","@ToolTip20":"Specifies oblique parsimax rotation.","@ToolTip21":"Specifies oblique quartimax rotation. This is the same as the QUARTIMIN method.","@ToolTip22":"Specifies oblique varimax rotation.","@ToolTip23":"Specifies quartimin rotation. It is the same as the oblique quartimax method."}},{"StatementOptionName":"TAU=","StatementOptionHelp":{"#cdata":"[Syntax: TAU=p] \n          \nSpecifies the oblimin weight used with the option ROTATE=OBLIMIN. Alternatively, you can \nuse ROTATE=OBLIMIN(p) with p representing the oblimin weight. There is no restriction on \nvalid values for the oblimin weight, although for practical purposes a negative or zero \nvalue is recommended. The default TAU= value is 0, resulting in the quartimin rotation."},"StatementOptionType":"V"}]}},{"StatementName":"PARAMETERS|PARMS","StatementHelp":{"#cdata":"Syntax: PARAMETERS | PARMS parameter(s) << = > number(s) > \n      << , > parameter(s) << = > number(s) > ...> ;\n      \nThe PARAMETERS statement defines additional parameters that are not specified in your \nmodels. You can specify more than one PARAMETERS statement. The parameters can be followed \nby an equal sign and a number list. The values of the numbers list are assigned as initial \nvalues to the preceding parameters in the parameters list. For example, each of the following \nstatements assigns the initial values ALPHA=.5 and BETA=-.5 for the parameters used in SAS \nprogramming statements: \n\n  parameters alfa beta=.5 -.5;\n  parameters alfa beta (.5 -.5);\n  parameters alfa beta .5 -.5;\n  parameters alfa=.5 beta (-.5);\n\nThe number of parameters and the number of values do not have to match. When there are fewer \nvalues than parameter names, either the RANDOM= or START= option is used. When there are more \nvalues than parameter names, the extra values are dropped. Parameters listed in the PARAMETERS \nstatement can be assigned initial values by program statements or by the START= or RANDOM= option \nin the PROC CALIS statement."},"StatementOptions":null},{"StatementName":"STRUCTEQ","StatementHelp":{"#cdata":"Syntax: STRUCTEQ variables </ label> ; \n\nwhere label represents: \nLABEL | NAME = name \n\nThe STRUCTEQ statement functions exactly the same as the DETERM statement."},"StatementOptions":null},{"StatementName":"BOUNDS","StatementHelp":{"#cdata":"Syntax: BOUNDS constraint <, constraint ...> ;\n      \nwhere constraint represents: < number operator > parameter-list < operator number >\n\nYou can use the BOUNDS statement to define boundary constraints for any independent \nparameter that has its name specified in the main or subsidiary model specification \nstatements, the PARAMETERS statement, or the INMODEL= data set. You cannot define \nboundary constraints for dependent parameters created in SAS programming statements \nor elsewhere.  \n\nValid operators are \u2264, <, \u2265, >, and = or, equivalently, LE, LT, GE, GT, and EQ."},"StatementOptions":null},{"StatementName":"NLINCON","StatementHelp":{"#cdata":"Syntax: NLINCON | NLC constraint <, constraint ...> ;\n      \nwhere constraint represents one of the following: \n  o number operator variable-list number operator \n  o variable-list operator number \n  o number operator variable-list \n  \nYou can specify nonlinear equality and inequality constraints with the NLINCON or NLC statement.\nThe QUANEW optimization subroutine is used when you specify nonlinear constraints by using the \nNLINCON statement. \n\nThe syntax of the NLINCON statement is similar to that of the BOUNDS statement, except that the \nNLINCON statement must contain the names of variables that are defined in the program statements \nand are defined as continuous functions of parameters in the model. They must not be confused with \nthe variables in the data set."},"StatementOptions":null},{"StatementName":"NLOPTIONS","StatementHelp":{"#cdata":"Syntax: NLOPTIONS option(s) ;\n      \nMany options that are available in SAS/OR PROC NLP can be specified for the optimization \nsubroutines in PROC CALIS by using the NLOPTIONS statement. The NLOPTIONS statement provides \nmore displayed and file output control on the results of the optimization process, and it \npermits the same set of termination criteria as in PROC NLP."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ABSCONV=|ABSTOL=","StatementOptionHelp":{"#cdata":"[Syntax: ABSCONV= | ABSTOL=r] \n          \nSpecifies an absolute function convergence criterion."},"StatementOptionType":"V"},{"StatementOptionName":"ABSFCONV=|ABSFTOL=","StatementOptionHelp":{"#cdata":"[Syntax: ABSFCONV=r <n>  | ABSFTOL=r<n>] \n          \nSpecifies an absolute function convergence criterion."},"StatementOptionType":"V"},{"StatementOptionName":"ABSGCONV=|ABSGTOL=","StatementOptionHelp":{"#cdata":"[Syntax: ABSGCONV= | ABSGTOL=r <n>] \n          \nSpecifies an absolute gradient convergence criterion. Termination requires the maximum \nabsolute gradient element to be small."},"StatementOptionType":"V"},{"StatementOptionName":"ABSXCONV=|ABSXTOL=","StatementOptionHelp":{"#cdata":"[Syntax: ABSXCONV= | ABSXTOL=r <n>] \n          \nSpecifies the absolute parameter convergence criterion. Termination requires a small \nEuclidean distance between successive parameter vectors."},"StatementOptionType":"V"},{"StatementOptionName":"ASINGULAR=|ASING=","StatementOptionHelp":{"#cdata":"[Syntax: ASINGULAR | ASING=r] \n          \nSpecifies an absolute singularity criterion r, r > 0, for the inversion of \nthe information matrix, which is needed to compute the covariance matrix."},"StatementOptionType":"V"},{"StatementOptionName":"DAMPSTEP=|DS=","StatementOptionHelp":{"#cdata":"[Syntax: DAMPSTEP | DS  <=r>] \n          \nSpecifies that the initial step-size value a\u207f (where n=0) for each line search \n(used by the QUANEW, CONGRA, or NEWRAP technique) cannot be larger than r times \nthe step-size value used in the former iteration."},"StatementOptionType":"S|V"},{"StatementOptionName":"FCONV=|FTOL=","StatementOptionHelp":{"#cdata":"[Syntax: FCONV=r | FTOL=r] \n          \nSpecifies the relative function convergence criterion."},"StatementOptionType":"V"},{"StatementOptionName":"FCONV2=|FTOL2=","StatementOptionHelp":{"#cdata":"[Syntax: FCONV2= | FTOL2=r <n>] \n          \nSpecifies a second function convergence criterion."},"StatementOptionType":"V"},{"StatementOptionName":"FSIZE=","StatementOptionHelp":{"#cdata":"[Syntax:FSIZE=r] \n          \nSpecifies the FSIZE parameter of the relative function and relative gradient termination \ncriteria. The default value is r=0."},"StatementOptionType":"V"},{"StatementOptionName":"GCONV=|GTOL=","StatementOptionHelp":{"#cdata":"[Syntax: GCONV=r | GTOL=r] \n          \nSpecifies the relative gradient convergence criterion."},"StatementOptionType":"V"},{"StatementOptionName":"GCONV2=","StatementOptionHelp":{"#cdata":"[Syntax: GCONV2=r | GTOL2=r] \n          \nSpecifies another relative gradient convergence criterion."},"StatementOptionType":"V"},{"StatementOptionName":"HESCAL=|HS=","StatementOptionHelp":{"#cdata":"Specifies the scaling version of the Hessian or crossproduct Jacobian matrix used in NRRIDG, TRUREG, \nLEVMAR, NEWRAP, or DBLDOG optimization."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"0","@Value2":"1","@Value3":"2","@Value4":"3"},"StatementOptionToolTips":{"@ToolTip1":"Specifies that no scaling is done.","@ToolTip2":"Specifies the Mor\u00e9 (1978) scaling update","@ToolTip3":"Specifies the Dennis, Gay, and Welsch (1981) scaling update","@ToolTip4":"Specifies that di is reset in each iteration"}},{"StatementOptionName":"INHESSIAN=","StatementOptionHelp":{"#cdata":"[Syntax: INHESSIAN<=r>] \n          \nSpecifies how the initial estimate of the approximate Hessian is defined for \nthe quasi-Newton techniques QUANEW and DBLDOG."},"StatementOptionType":"S|V"},{"StatementOptionName":"INSTEP=|SALPHA=|RADIUS=","StatementOptionHelp":{"#cdata":"[Syntax: INSTEP=r] \n          \nReduces the length of the first trial step during the line search of the first iterations."},"StatementOptionType":"V"},{"StatementOptionName":"LCDEACT=|LCD=","StatementOptionHelp":{"#cdata":"[Syntax: LCDEACT= | LCD=r] \n          \nSpecifies a threshold r for the Lagrange multiplier that decides whether an active \ninequality constraint remains active or can be deactivated."},"StatementOptionType":"V"},{"StatementOptionName":"LCEPSILON=|LCEPS=|LCE=","StatementOptionHelp":{"#cdata":"[Syntax: LCEPSILON= | LCEPS= | LCE=r] \n          \nSpecifies the range r, r \u2265 0, for active and violated boundary and linear constraints."},"StatementOptionType":"V"},{"StatementOptionName":"LCSINGULAR=|LCSING=|LCS=","StatementOptionHelp":{"#cdata":"[Syntax: LCSINGULAR= | LCSING= | LCS=r] \n          \nSpecifies a criterion r, r \u2265 0, used in the update of the QR decomposition that \ndecides whether an active constraint is linearly dependent on a set of other \nactive constraints. "},"StatementOptionType":"V"},{"StatementOptionName":"LINESEARCH=|LIS=|SMETHOD=|SM=","StatementOptionHelp":{"#cdata":"[Syntax: LINESEARCH | LIS | SMETHOD | SM=i] \n          \nSpecifies the line-search method for the CONGRA, QUANEW, and NEWRAP optimization techniques."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"1","@Value2":"2","@Value3":"3","@Value4":"4","@Value5":"5","@Value6":"6","@Value7":"7","@Value8":"8"},"StatementOptionToolTips":{"@ToolTip1":"Specifies a line-search method that needs the same number of function and gradient calls for cubic  interpolation and cubic extrapolation; this method is similar to one used by the Harwell subroutine library.","@ToolTip2":"Specifies a line-search method that needs more function calls than gradient calls for quadratic and  cubic interpolation and cubic extrapolation; this method is implemented as shown in Fletcher (1987) and  can be modified to an exact line search by using the LSPRECISION= option.","@ToolTip3":"Specifies a line-search method that needs the same number of function and gradient calls for cubic  interpolation and cubic extrapolation; this method is implemented as shown in Fletcher (1987) and can  be modified to an exact line search by using the LSPRECISION= option.","@ToolTip4":"Specifies a line-search method that needs the same number of function and gradient calls for stepwise  extrapolation and cubic interpolation","@ToolTip5":"Specifies a line-search method that is a modified version of LIS=4.","@ToolTip6":"Specifies golden section line search (Polak 1971), which uses only function values for linear approximation.","@ToolTip7":"Specifies bisection line search (Polak 1971), which uses only function values for linear approximation.","@ToolTip8":"Specifies Armijo line-search technique (Polak 1971), which uses only function values for linear approximation."}},{"StatementOptionName":"LSPRECISION=|LSP=|SPRECISION=|SP=","StatementOptionHelp":{"#cdata":"[Syntax: LSPRECISION=r | LSP=r | SPRECISION=r | SP=r] \n          \nSpecifies the degree of accuracy that should be obtained by the line-search algorithms \nLIS=2 and LIS=3. The default LSPRECISION= values are:\n\n  o For TECH=QUANEW UPDATE=DBFGS, BFGS: r = 0.4\n  o For TECH=QUANEW UPDATE=DDFP, DFP: r = 0.06 \n  o For TECH=CONGRA UPDATE=all r = 0.1\n  o For TECH=NEWRAP NO UPDATE: r = 0.9"},"StatementOptionType":"V"},{"StatementOptionName":"MAXFUNC=|MAXFU=","StatementOptionHelp":{"#cdata":"[Syntax: MAXFUNC=i | MAXFU=i] \n          \nRequires the number of function calls to be no larger than i. The default values are: \n\n  o For TECH= LEVMAR, NEWRAP, NRRIDG, TRUREG: i=125 \n  o For TECH= DBLDOG, QUANEW: i=500 \n  o For TECH= CONGRA: i=1000"},"StatementOptionType":"V"},{"StatementOptionName":"MAXITER=|MAXIT=","StatementOptionHelp":{"#cdata":"[Syntax: MAXITER= | MAXIT=i <n>] \n          \nRequires the number of iterations to be no larger than i. The default values are:\n  o For TECH= LEVMAR, NEWRAP, NRRIDG, TRUREG: i=50 \n  o For TECH= DBLDOG, QUANEW: i=200 \n  o For TECH= CONGRA: i=400"},"StatementOptionType":"V"},{"StatementOptionName":"MAXSTEP=","StatementOptionHelp":{"#cdata":"[Syntax: MAXSTEP=r<n>] \n          \nSpecifies an upper bound for the step length of the line-search algorithms during the \nfirst n iterations."},"StatementOptionType":"V"},{"StatementOptionName":"MAXTIME=","StatementOptionHelp":{"#cdata":"[Syntax: MAXTIME=r] \n          \nRequires the CPU time to be no larger than r. The default value of the MAXTIME= \noption is the largest double floating-point number on your computer."},"StatementOptionType":"V"},{"StatementOptionName":"MINITER=|MINIT=","StatementOptionHelp":{"#cdata":"[Syntax: MINITER= | MINIT=i] \n          \nSpecifies the minimum number of iterations. The default value is 0."},"StatementOptionType":"V"},{"StatementOptionName":"MSINGULAR=|MSING=","StatementOptionHelp":{"#cdata":"[Syntax: MSINGULAR= | MSING=r] \n          \nSpecifies a relative singularity criterion r, r > 0, for the inversion of \nthe information matrix, which is needed to compute the covariance matrix."},"StatementOptionType":"V"},{"StatementOptionName":"NOPRINT","StatementOptionHelp":{"#cdata":"Suppresses output related to optimization such as the iteration history."},"StatementOptionType":"S"},{"StatementOptionName":"PALL|ALL","StatementOptionHelp":{"#cdata":"[Displays information about the starting values and final values of the optimization process."},"StatementOptionType":"S"},{"StatementOptionName":"PHISTORY|PHIS","StatementOptionHelp":{"#cdata":"Displays the optimization history. The PHISTORY option is set automatically if the PALL or PRINT \noption is set."},"StatementOptionType":"S"},{"StatementOptionName":"RESTART=|REST=","StatementOptionHelp":{"#cdata":"[Syntax: RESTART= | REST=i] \n          \nSpecifies that the QUANEW or CONGRA algorithm is restarted with a steepest descent/ascent \nsearch direction after at most i iterations, i > 0."},"StatementOptionType":"V"},{"StatementOptionName":"SINGULAR=","StatementOptionHelp":{"#cdata":"[Syntax: SINGULAR= | SING=r] \n          \nSpecifies the singularity criterion r, 0 < r < 1, used, for example, for matrix inversion."},"StatementOptionType":"V"},{"StatementOptionName":"SOCKET=","StatementOptionHelp":{"#cdata":"Specifies the fileref that contains the information needed for remote monitoring."},"StatementOptionType":"V"},{"StatementOptionName":"TECHNIQUE=|TECH=|OMETHOD=|OM=","StatementOptionHelp":{"#cdata":"[Syntax: TECHNIQUE= | TECH=name | OMETHOD= | OM=name] \n          \nSpecifies the optimization technique."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"CONGRA","@Value2":"DBLDOG","@Value3":"LEVMAR","@Value4":"NEWRAP","@Value5":"NRRIDG","@Value6":"QUANEW","@Value7":"TRUREG","@Value8":"NONE"},"StatementOptionToolTips":{"@ToolTip1":"Chooses one of four different conjugate-gradient optimization algorithms, which can be more precisely  defined with the UPDATE= option and modified with the LINESEARCH= option.","@ToolTip2":"Performs a version of double-dogleg optimization, which uses the gradient to update an approximation  of the Cholesky factor of the Hessian.","@ToolTip3":"Performs a highly stable but, for large problems, memory- and time-consuming Levenberg-Marquardt  optimization technique, a slightly improved variant of the Mor\u00e9 (1978) implementation. This is  the default optimization technique if there are fewer than 40 parameters to estimate.","@ToolTip4":"Performs a usually stable but, for large problems, memory- and time-consuming Newton-Raphson optimization  technique. The algorithm combines a line-search algorithm with ridging, and it can be modified with the  LINESEARCH= option.","@ToolTip5":"Performs a usually stable but, for large problems, memory- and time-consuming Newton-Raphson optimization  technique. This algorithm does not perform a line search.","@ToolTip6":"Chooses one of four different quasi-Newton optimization algorithms that can be more precisely defined with  the UPDATE= option and modified with the LINESEARCH= option.","@ToolTip7":"Performs a usually very stable but, for large problems, memory- and time-consuming trust-region optimization  technique. The algorithm is implemented similar to Gay (1983) and Mor\u00e9 and Sorensen (1983).","@ToolTip8":"Does not perform any optimization. This option is similar to METHOD=NONE, but TECH=NONE also computes and displays residuals and goodness of fit statistics."}},{"StatementOptionName":"UPDATE=","StatementOptionHelp":{"#cdata":"Specifies the update method for the quasi-Newton, double-dogleg, or conjugate-gradient optimization technique."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"BFGS","@Value2":"DBFGS","@Value3":"DDFP","@Value4":"DFP","@Value5":"PB","@Value6":"FR","@Value7":"PR","@Value8":"CD"},"StatementOptionToolTips":{"@ToolTip1":"Performs the original Broyden, Fletcher, Goldfarb, and Shanno (BFGS) update of the inverse Hessian matrix.","@ToolTip2":"Performs the dual BFGS update of the Cholesky factor of the Hessian matrix. This is the default update method.","@ToolTip3":"Performs the dual Davidon, Fletcher, and Powell (DFP) update of the Cholesky factor of the Hessian matrix.","@ToolTip4":"Performs the original DFP update of the inverse Hessian matrix.","@ToolTip5":"Performs the automatic restart update method of Powell (1977) and Beale (1972).","@ToolTip6":"Performs the Fletcher-Reeves update (Fletcher 1987).","@ToolTip7":"Performs the Polak-Ribiere update (Fletcher 1987).","@ToolTip8":"Performs a conjugate-descent update of Fletcher (1987)."}},{"StatementOptionName":"VERSION=|VS=","StatementOptionHelp":{"#cdata":"Specifies the version of the quasi-Newton optimization technique with nonlinear constraints."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"1","@Value2":"2"},"StatementOptionToolTips":{"@ToolTip1":"Specifies the update of the U vector as in Powell (1978a, 1978b) (update like VF02AD).","@ToolTip2":"Specifies the update of the U vector as in Powell (1982a, 1982b) (update like VMCWD)."}},{"StatementOptionName":"VSINGULAR=|VSING=","StatementOptionHelp":{"#cdata":"[Syntax: VSINGULAR= | VSING=r] \n            \nSpecifies a relative singularity criterion r, r > 0, for the inversion of the information \nmatrix, which is needed to compute the covariance matrix."},"StatementOptionType":"V"},{"StatementOptionName":"XCONV=|XTOL=","StatementOptionHelp":{"#cdata":"[Syntax: XCONV= | XTOL=r <n>] \n          \nSpecifies the relative parameter convergence criterion. Termination requires a small \nrelative parameter change in subsequent iterations."},"StatementOptionType":"V"},{"StatementOptionName":"XSIZE=","StatementOptionHelp":{"#cdata":"[Syntax: XSIZE=r] \n          \nSpecifies the XSIZE parameter of the relative function and relative gradient termination \ncriteria. The default value is r=0."},"StatementOptionType":"V"}]}},{"StatementName":"PARTIAL","StatementHelp":{"#cdata":"Syntax: PARTIAL variables ;\n      \nIf you want the analysis to be based on a partial correlation or covariance matrix, \nuse the PARTIAL statement to list the variables used to partial out the variables \nin the analysis. You can specify only one PARTIAL statement within the scope of each \nGROUP or PROC CALIS statement."},"StatementOptions":null},{"StatementName":"TESTFUNC","StatementHelp":{"#cdata":"Syntax: TESTFUNC functions ; \n      \nwhere functions are either parameters in the model or parametric functions computed \nin the SAS programming statements. \n\nWhen the estimates in a model are asymptotically multivariate-normal, any continuous \nand differentiable function of the estimates is also normally distributed. In the TESTFUNC \nstatement, you can test these parametric functions using z-tests."},"StatementOptions":null},{"StatementName":"VARIANCE","StatementHelp":{"#cdata":"Syntax: VARIANCE assignment <, assignment ...> ; \n\nwhere assignment represents: \nvar_list <=parameter-spec> \n\nThe VARIANCE statement specifies the variance parameters in connection with the LINEQS \nmodel. Notice that the VARIANCE statement is different from the VAR statement, which \nspecifies variables for analysis. In previous versions of PROC CALIS, the STD statement \nname was used instead of the VARIANCE statement name. Although these two names result in \nthe same functionalities, the VARIANCE statement name reflects the intended usages better. \n\nIn each assignment of the VARIANCE statement, you list the var_list whose variances you \nwant to specify. Optionally, you can provide a list of parameter specifications (parameter-spec) \nafter an equal sign for each var_list list. \n\nYou can specify the following five types of the parameters for the variances of the exogenous \nvariables in the VARIANCE statement: \n\n  o an unnamed free parameter \n  o an initial value \n  o a fixed value \n  o a free parameter with a name provided \n  o a free parameter with a name and initial value provided"},"StatementOptions":null},{"StatementName":"ABORT","StatementHelp":{"#cdata":"Syntax: ABORT <ABEND | CANCEL <FILE> | RETURN | > <n> <NOLIST>; \n      \nStops executing the current DATA step, SAS job, or SAS session.\n\nn is an integer value that enables you to specify a condition code: \n    \n  o when used with the CANCEL argument, the value is placed in the SYSINFO automatic macro variable \n  o when not used with the CANCEL argument, the error code that is returned by SAS is ERROR. The value \n    of ERROR depends on the operating system. The condition code n is returned to the operating system \n    as the final SAS system exit code."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ABEND","StatementOptionHelp":{"#cdata":"Causes abnormal termination of the current SAS job or session. Results depend on the method \nof operation: \n\no batch mode and noninteractive mode \n\n  o stops processing immediately\n  o sends an error message to the SAS log that states that execution was terminated by the ABEND option \n    of the ABORT macro statement\n  o does not execute any subsequent statements or check syntax\n  o returns control to the operating environment; further action is based on how your operating environment \n    and your site treat jobs that end abnormally.\n\no windowing environment and interactive line mode \n\n  o causes your windowing environment and interactive line mode to stop processing immediately \n    and return you to your operating environment."},"StatementOptionType":"S"},{"StatementOptionName":"CANCEL","StatementOptionHelp":{"#cdata":"Causes the cancellation of the current submitted statements. The results depend on the method \nof operation:\n\no batch mode and noninteractive mode\n\n  o The entire SAS program and SAS system are terminated.\n  o The error message is written to the SAS log.\n\no windowing environment and interactive line mode \n\n  o It only clears the current submitted program.\n  o Other subsequent submitted programs are not affected.\n  o The error message is written to the SAS log.\n\no workspace server and stored process server \n\n  o It only clears currently submitted program.\n  o Other subsequent submit calls are not affected.\n  o The error message is written to the SAS log.\n\no SAS IntrNet application server \n\n  o A separate execution is created for each request. The execution submits the request code. A CANCEL \n    argument in the request code clears the current submitted code but does not terminate the execution \n    of the SAS session."},"StatementOptionType":"S"},{"StatementOptionName":"CANCEL FILE","StatementOptionHelp":{"#cdata":"Causes only the contents of the autoexec file or %INCLUDE file to be cleared by the %ABORT statement. \nOther submitted source statements will be executed after the autoexec or %INCLUDE file."},"StatementOptionType":"S"},{"StatementOptionName":"RETURN","StatementOptionHelp":{"#cdata":"Causes abnormal termination of the current SAS job or session. Results depend on the method \nof operation: \n\no batch mode and noninteractive mode \n\n  o stops processing immediately\n  o sends an error message to the SAS log that states that execution was terminated by the RETURN option \n    in the ABORT macro statement\n  o does not execute any subsequent statements or check syntax\n  o returns control to the operating environment with a condition code indicating an error.\n\no windowing environment and interactive line mode \n\n  o causes your windowing environment and interactive line mode to stop processing immediately \n    and return you to your operating environment."},"StatementOptionType":"S"},{"StatementOptionName":"NOLIST","StatementOptionType":"S","StatementOptionHelp":{"#cdata":"Suppresses the output of all variables to the SAS log. \n          \nRequirement: NOLIST must be the last option in the ABORT statement."}}]}},{"StatementName":"CALL","StatementHelp":{"#cdata":"Syntax: CALL routine(parameter-1<, ...parameter-n>);  \n      \nInvokes a SAS CALL routine."},"StatementOptions":null},{"StatementName":"DELETE","StatementHelp":{"#cdata":"Syntax: DELETE; \n      \nStops processing the current observation."},"StatementOptions":null},{"StatementName":"DO","StatementHelp":{"#cdata":"Specifies a group of statements to be executed as a unit.\n      \nSyntax: \n(1) DO; \n...more SAS statements...  \nEND;  \n\n(2) DO index-variable=specification-1 <, ... specification-n>; \n... more SAS statements ...  \nEND;  \n\n(3) DO UNTIL (expression); \n...more SAS statements...  \nEND \n\n(4) DO WHILE (expression); \n...more SAS statements...  \nEND;"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"UNTIL","StatementOptionHelp":{"#cdata":"Executes statements in a DO loop repetitively until a condition is true.\n          \nSyntax: \nDO UNTIL (expression); \n...more SAS statements...  \nEND"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Executes statements in a DO-loop repetitively while a condition is true. \n          \nSyntax: \nDO WHILE (expression); \n...more SAS statements...  \nEND;"},"StatementOptionType":"S"},{"StatementOptionName":"OVER","StatementOptionType":"S"},{"StatementOptionName":"TO","StatementOptionHelp":{"#cdata":"Separates the start and stop integers or expressions that control the number of times the \nportion of the DATA step between the iterative DO and END statements is processed."},"StatementOptionType":"S"},{"StatementOptionName":"BY","StatementOptionHelp":{"#cdata":"Precedes an increment integer (other than 0) or an expression that generates an integer to be \nadded to the value of the index variable in each iteration of the DO loop."},"StatementOptionType":"S"}]}},{"StatementName":"END","StatementHelp":{"#cdata":"Syntax: END; \n      \nEnds a DO group or SELECT group processing."},"StatementOptions":null},{"StatementName":"GOTO","StatementHelp":{"#cdata":"Syntax: GOTO label;\n      \nJumps to a new statement."},"StatementOptions":null},{"StatementName":"IF","StatementHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions. \n\nSyntax: \n(1) IF expression THEN statement; \n    <ELSE statement;> \n(2) IF condition;"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"DO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"WHEN","StatementOptionHelp":{"#cdata":"WHEN statement in an IF-THEN-WHEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"OUTPUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"GO TO|GOTO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct. \n          \nSyntax: ... GO TO label; | ... GOTO label;\n      \nJumps to a new statement."},"StatementOptionType":"S"},{"StatementOptionName":"PUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"STOP","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct. \n          \nStops execution of the current DATA step."},"StatementOptionType":"S"},{"StatementOptionName":"SET","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct.\n          \nSyntax: SET <SAS-data-set(s) <(data-set-options(s) )>>; \n      \nReads an observation from one or more SAS data sets."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"ELSE","StatementHelp":{"#cdata":"If the condition in an IF-THEN statement is false and an ELSE statement is present, \nthen the ELSE action is carried out."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"IF","StatementOptionHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions."},"StatementOptionType":"S"},{"StatementOptionName":"DO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN-ELSE construct."},"StatementOptionType":"S"},{"StatementOptionName":"OUTPUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN-ELSE construct."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"LINK","StatementHelp":{"#cdata":"Syntax: LINK statement-label; \n      \nDirects program execution immediately to the statement label that is specified and, if followed \nby a RETURN statement, returns execution to the statement that follows the LINK statement."},"StatementOptions":null},{"StatementName":"RETURN","StatementHelp":{"#cdata":"Syntax: RETURN; \n      \nStops executing statements at the current point and returns to a predetermined point in the step."},"StatementOptions":null},{"StatementName":"SELECT","StatementHelp":{"#cdata":"Executes one of several statements or groups of statements.\n      \nSyntax: \nSELECT <(select-expression)>;  \n  WHEN-1 (when-expression-1 <..., when-expression-n>) statement;  \n    <... WHEN-n (when-expression-1 <..., when-expression-n>) statement;>  \n      <OTHERWISE statement;> \nEND;"},"StatementOptions":null},{"StatementName":"WHEN","StatementHelp":{"#cdata":"SELECT groups contain WHEN statements that identify SAS statements that are executed when a particular \ncondition is true. Use at least one WHEN statement in a SELECT group.\n      \nSyntax: WHEN-1 (when-expression-1 <..., when-expression-n>) statement; "},"StatementOptions":{"StatementOption":{"StatementOptionName":"DO","StatementOptionType":"S"}}},{"StatementName":"OTHERWISE","StatementHelp":{"#cdata":"An optional OTHERWISE statement specifies a statement to be executed if no WHEN condition is met. \nAn END statement ends a SELECT group.\n      \nSyntax: \n  <... WHEN-n (when-expression-1 <..., when-expression-n>) statement;>  \n    <OTHERWISE statement;>"},"StatementOptions":null},{"StatementName":"STOP","StatementHelp":{"#cdata":"Syntax: STOP ;\n\nThe STOP statement halts the execution of all statements that contain it, including \nDO statements and other control or looping statements. Execution continues with the \nnext top-level source statement."},"StatementOptions":null},{"StatementName":"PUT","StatementHelp":{"#cdata":"Syntax: PUT print-item ...< @ > < @@ > ;\n\nThe PUT statement writes text data to the current output file."},"StatementOptions":{"StatementOption":{"StatementOptionName":"_PAGE_","StatementOptionHelp":{"#cdata":"Outputs any pending line data and moves to the top of the next page."},"StatementOptionType":"S"}}}],"#comment":{}}}}