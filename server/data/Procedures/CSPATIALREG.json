{"Procedure":{"Name":"CSPATIALREG","ProductGroup":"SAS ECONOMETRICS","ProcedureHelp":{"#cdata":"Syntax: PROC CSPATIALREG <options>; \n    BOUNDS bound1 [ , bound2 \u2026]; \n    BY variables; \n    CLASS variable <(options)>\u2026<variable <(options)>> </ global-options>; \n    DISPLAY <table-list> </ options>; \n    DISPLAYOUT table-spec-list </ options>; \n    INIT initialization1 < , initialization2 \u2026>; \n    MODEL dependent-variable = regressors </ options>; \n    OUTPUT <output-options>; \n    RESTRICT restriction1 [, restriction2 \u2026]; \n    TEST equation1 <, equation2\u2026> / <test-options>; \n    SPATIALEFFECTS <model-spatial-effect-regressors>; \n    SPATIALID variable; \n    \nThe CSPATIALREG (spatial regression) procedure analyzes a class of spatial linear econometric models \nfor cross-sectional data whose observations are spatially referenced or georeferenced. For example, \nhousing price data that are collected from 48 continental states in the United States fall into the \ncategory of spatially referenced data. Compared to nonspatial regression models, spatial econometric \nmodels are capable of handling spatial interaction and spatial heterogeneity in a regression setting \n(Anselin 2001)."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=SAS-data-set \n      \nSpecifies the primary SAS data set that contains dependent variables, and explanatory variables, and so on."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"WMAT=","ProcedureOptionHelp":{"#cdata":"Syntax: WMAT=SAS-data-set \n      \nSpecifies the secondary spatial weights data set, which can be used to construct the spatial weights matrix W."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NONORMALIZE","ProcedureOptionHelp":{"#cdata":"Suppresses the row standardization of the spatial weights matrix that is specified in the WMAT= option."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"APPROXIMATION=","ProcedureOptionHelp":{"#cdata":"Specifies options that are related to approximating the Jacobian.\n     \nYou can specify one or more of the following approx-options: \n  Chebyshev | TAYLOR \n    specifies Taylor approximation. By default, Chebyshev approximation is used. \n  NMC=number \n    specifies a positive integer as the number of standard random normal draws for Monte Carlo simulation.\n    By default, NMC=100. \n  ORDER=number \n    specifies a positive integer as the order of series in Taylor approximation or Chebyshev approximation. \n    If Taylor approximation is used, by default ORDER=50. If Chebyshev approximation is used, by default ORDER=5. \n  SEED=number \n    specifies an integer seed."},"ProcedureOptionType":"V","SubOptionsKeywords":"CHEBYSHEV|TAYLOR|NMC=|ORDER=|SEED="},{"ProcedureOptionName":"CORRB","ProcedureOptionHelp":{"#cdata":"Prints the correlation matrix of the parameter estimates."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"COVB","ProcedureOptionHelp":{"#cdata":"Prints the covariance matrix of the parameter estimates."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOPRINT","ProcedureOptionHelp":{"#cdata":"Suppresses all printed output."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PRINTALL","ProcedureOptionHelp":{"#cdata":"Requests all printing options. "},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PRINTTIMING","ProcedureOptionHelp":{"#cdata":"Prints a timing report."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PRINTINTERNALNAMES","ProcedureOptionHelp":{"#cdata":"Prints internal names assigned to parameters."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"COVEST=","ProcedureOptionHelp":{"#cdata":"Specifies the method to calculate the covariance matrix of parameter estimates.\n      \nBy default, COVEST=HESSIAN."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"OP","@Value2":"HESSIAN","@Value3":"QML"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies the covariance from the outer product matrix.","@ToolTip2":"Specifies the covariance from the inverse Hessian matrix.","@ToolTip3":"Specifies the covariance from the outer product and Hessian matrices (the quasi-maximum likelihood estimates)."}},{"ProcedureOptionName":"MAXFUNC=|MAXFU=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXFUNC= | MAXFU=i \n          \nSpecifies the maximum number of function calls in the optimization process. The default is 1,000. \n\nThe optimization can terminate only after completing a full iteration. Therefore, the number of \nfunction calls that is actually performed can exceed the number that is specified by this option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXITER=|MAXIT=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXITER=i | MAXIT=i \n          \n Specifies the maximum number of iterations in the optimization process. \n \n The default value is 200."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXTIME=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXTIME=r \n          \nSpecifies an upper limit of r seconds of CPU time for the optimization process. The default \nvalue is the largest floating-point double representation of your computer. The time specified \nby this option is checked only once at the end of each iteration. Therefore, the actual running \ntime can be much longer than r. The actual running time includes the remaining time needed to \nfinish the iteration and the time needed to generate the output of the results."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"METHOD=","ProcedureOptionHelp":{"#cdata":"Specifies the iterative minimization method to use. The default is METHOD=NEWRAP."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"CONGRA","@Value2":"DBLDOG","@Value3":"NONE","@Value4":"NEWRAP","@Value5":"NRRIDG","@Value6":"QUANEW","@Value7":"TRUREG"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies a conjugate-gradient method","@ToolTip2":"Specifies the double dogleg method","@ToolTip3":"Specifies that no optimization be performed beyond using the ordinary least squares method  to compute the parameter estimates. ","@ToolTip4":"Specifies the Newton-Raphson method (this is the default). ","@ToolTip5":"Specifies the Newton-Raphson Ridge method.","@ToolTip6":"Specifies the quasi-Newton method.","@ToolTip7":"Specifies the trust region method."}}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"BOUNDS","StatementHelp":{"#cdata":"Syntax: BOUNDS bound1 < , bound2 ...> ; \n\nThe BOUNDS statement imposes simple boundary constraints on the parameter estimates. BOUNDS \nstatement constraints refer to the parameters estimated by the QLIM procedure. Any number of \nBOUNDS statements can be specified. \n\nEach bound is composed of parameters and constants and inequality operators. Parameters associated \nwith regressor variables are referred to by the names of the corresponding regressor variables: \n\n  item operator item < operator item < operator item ...> >\n\nEach item is a constant, the name of a parameter, or a list of parameter names. Each operator\nis \u2019<\u2019, \u2019>\u2019, \u2019\u2264\u2019, or \u2019\u2265\u2019."},"StatementOptions":null},{"StatementName":"BY","StatementHelp":{"#cdata":"Syntax: BY variables ; \n      \nA BY statement can be used in PROC CSPATIALREG to obtain separate analyses of observations in groups \nthat are defined by the BY variables. When you use a BY statement, the primary input data set (specified \nin the DATA= option) should be sorted by the BY variables."},"StatementOptions":null},{"StatementName":"CLASS","StatementHelp":{"#cdata":"Syntax: CLASS variable <(options)> \u2026<variable <(options)>> </global-options>;\n\nThe CLASS statement names the classification variables that are used to group (classify) data in the \nanalysis. Classification variables can be either character or numeric."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DESCENDING|DESC","StatementOptionHelp":{"#cdata":"Reverses the sort order of the classification variable. If both the DESCENDING and ORDER= options \nare specified, PROC BCHOICE orders the categories according to the ORDER= option and then reverses \nthat order."},"StatementOptionType":"S"},{"StatementOptionName":"MISSING","StatementOptionHelp":{"#cdata":"Treats missing values (., ._, .A, \u2026, .Z for numeric variables and blanks for character variables) \nas valid values for the CLASS variable."},"StatementOptionType":"S"},{"StatementOptionName":"ORDER=","StatementOptionHelp":{"#cdata":"Specifies the sort order for the levels of classification variables. This ordering determines which \nparameters in the model correspond to each level in the data. By default, ORDER=FORMATTED. \nFor ORDER=FORMATTED and ORDER=INTERNAL, the sort order is machine-dependent. When ORDER=FORMATTED \nis in effect for numeric variables for which you have supplied no explicit format, the levels are \nordered by their internal values."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"FORMATTED","@Value2":"FREQ","@Value3":"INTERNAL"},"StatementOptionToolTips":{"@ToolTip1":"Levels sorted by the external formatted value, except for numeric variables with no explicit  format, which are sorted by their unformatted (internal) value.","@ToolTip2":"Levels sorted by the descending frequency count (levels that have more observations come ealier  in the order).","@ToolTip3":"Levels sorted by the unformatted value. The sort order is machine-dependent."}},{"StatementOptionName":"PARAM=","StatementOptionHelp":{"#cdata":"Specifies the parameterization method for the classification variable or variables."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"EFFECT","@Value2":"GLM","@Value3":"ORDINAL|THERMOMETER","@Value4":"POLYNOMIAL|POLY","@Value5":"REFERENCE|REF","@Value6":"ORTHEFFECT","@Value7":"ORTHORDINAL|ORTHOTHERM","@Value8":"ORTHPOLY","@Value9":"ORTHREF"},"StatementOptionToolTips":{"@ToolTip1":"Specifies effect coding.","@ToolTip2":"Specifies less-than-full-rank, reference-cell coding; this option can be used  only as a global option.","@ToolTip3":"Specifies the cumulative parameterization for an ordinal CLASS variable.","@ToolTip4":"Specifies polynomial coding.","@ToolTip5":"Specifies reference-cell coding.","@ToolTip6":"Orthogonalizes PARAM=EFFECT.","@ToolTip7":"Orthogonalizes PARAM=ORDINAL.","@ToolTip8":"Orthogonalizes PARAM=POLYNOMIAL.","@ToolTip9":"Orthogonalizes PARAM=REFERENCE."}},{"StatementOptionName":"REFERENCE=|REF=","StatementOptionHelp":{"#cdata":"Syntax: REFERENCE='level'|keyword | REF='level'|keyword \n\nSpecifies the reference level that is used when you specify a nonsingular parameterization. "},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"'<level>'","@Value2":"FIRST","@Value3":"LAST"},"StatementOptionToolTips":{"@ToolTip1":"Specifies the level of the variable to use as the reference level. Specify the formatted value of the variable  if a format is assigned. Replace <level> with an actual value.","@ToolTip2":"Designates the first ordered level as reference.","@ToolTip3":"Designates the last ordered level as reference."}}]}},{"StatementName":"DISPLAY","StatementHelp":{"#cdata":"Syntax: DISPLAY <table-list> </ options>;\n      \nThe DISPLAY statement enables you to specify a list of display tables to display or exclude. This statement \nis similar to the ODS SELECT, ODS EXCLUDE, and ODS TRACE statements. However, the DISPLAY statement can improve \nperformance when a large number of tables could be generated (such as in BY-group processing). The procedure \nprocesses the DISPLAY statement on a CAS server and thus sends only a subset of ODS tables to the SAS client. \nBecause ODS statements are processed on a SAS client, all the display tables generated are first sent to the \nclient and then the client creates a subset. If both DISPLAY and ODS statements are used together, the DISPLAY \nstatement takes precedence over the ODS statements."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"CASESENSITIVE","StatementOptionHelp":{"#cdata":"Performs a case-sensitive comparison of table names in the table-list to display table names when \ntables are subsetted for display. To preserve case, you must enclose table names in the table-list \nin quotation marks."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDE","StatementOptionHelp":{"#cdata":"Displays all display tables except those specified in the table-list."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDEALL","StatementOptionHelp":{"#cdata":"Suppresses display of all tables. This option takes precedence over the other options."},"StatementOptionType":"S"},{"StatementOptionName":"TRACE","StatementOptionHelp":{"#cdata":"Displays the display table names, labels, and paths."},"StatementOptionType":"S"}]}},{"StatementName":"DISPLAYOUT","StatementHelp":{"#cdata":"Syntax: DISPLAYOUT table-spec-list < / options > ;\n      \nThe DISPLAYOUT statement enables you to create CAS output tables from your displayed output. This\nstatement is similar to the ODS OUTPUT statement.\n\nThe table-spec-list specifies a list of CAS output tables to create. Each entry in the list has either a key or a\nkey=value format:\n\n  key=value specifies key as the ODS table name, path, or partial pathname, and specifies value as the\n    CAS output table name.\n  key specifies key as the ODS table name and also as the CAS output table name.\n  \nTable names and partial pathnames are discussed under the DISPLAY statement. The DISPLAYOUT\nstatement does not support regular expressions."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"INCLUDEALL","StatementOptionHelp":{"#cdata":"Creates output CAS tables for all display tables. The name of the created output CAS table is the \nsame as the corresponding display table name. If you specify this option, the table-spec-list specification \nis ignored."},"StatementOptionType":"S"},{"StatementOptionName":"NOREPLACE","StatementOptionHelp":{"#cdata":"Does not replace an existing CAS output table of the same name."},"StatementOptionType":"S"},{"StatementOptionName":"REPEATED","StatementOptionHelp":{"#cdata":"Replicates the CAS output tables on all nodes."},"StatementOptionType":"S"}]}},{"StatementName":"INIT","StatementHelp":{"#cdata":"Syntax: INIT initvalue1 < , initvalue2 ...> ; \n\nThe INIT statement is used to set initial values for parameters in the optimization. \n\nEach initvalue is written as a parameter or parameter list, followed by an optional \nequality operator (=), followed by a number: \n\n  parameter <=> number"},"StatementOptions":null},{"StatementName":"MODEL","StatementHelp":{"#cdata":"Syntax: MODEL dependent-variable = regressors </ options>;\n\nThe MODEL statement specifies the dependent-variable and independent covariates (regressors) for the \nregression model. If you specify no regressors, PROC CSPATIALREG fits a model that contains only an \nintercept. The dependent-variable is treated as a continuous variable in the primary input data set \n(specified in the DATA= option). Models in PROC CSPATIALREG do not allow missing values. If there are \nmissing values, you get an error message."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"NOINT","StatementOptionHelp":{"#cdata":"Suppresses the intercept parameter."},"StatementOptionType":"S"},{"StatementOptionName":"TYPE=","StatementOptionHelp":{"#cdata":"Specifies  the type of model to be fitted. If you specify this option in both the MODEL statement \nand the PROC CSPATIALREG statement, the MODEL statement overrides the PROC CSPATIALREG statement.\n\nBy default, TYPE=SAR."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"LINEAR","@Value2":"SAR","@Value3":"SEM"},"StatementOptionToolTips":{"@ToolTip1":"Specifies the linear model.","@ToolTip2":"Specifies the spatial autoregressive model.","@ToolTip3":"Specifies the spatial error model."}},{"StatementOptionName":"CORRB","StatementOptionHelp":{"#cdata":"Prints the correlation matrix of the parameter estimates."},"StatementOptionType":"S"},{"StatementOptionName":"COVB","StatementOptionHelp":{"#cdata":"Prints the covariance matrix of the parameter estimates."},"StatementOptionType":"S"},{"StatementOptionName":"NOPRINT","StatementOptionHelp":{"#cdata":"Suppresses all printed output."},"StatementOptionType":"S"},{"StatementOptionName":"PRINTALL","StatementOptionHelp":{"#cdata":"Requests all available output."},"StatementOptionType":"S"}]}},{"StatementName":"OUTPUT","StatementHelp":{"#cdata":"Syntax: OUTPUT <OUT=SAS-data-set> <output-options> ; \n\nThe OUTPUT statement creates a new SAS data set that includes variables created by the output-options. \nThese variables include the estimates of xi'\u03b2, the expected value of the response variable, and the \nresidual."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COPYVAR=|COPYVARS=","StatementOptionHelp":{"#cdata":"Syntax: COPYVAR=SAS-variable-names | COPYVARS=SAS-variable-names \n          \nAdds SAS variables to the output data set. "},"StatementOptionType":"V"},{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"Syntax: OUT=SAS-data-set\n          \nNames the output data set."},"StatementOptionType":"V"},{"StatementOptionName":"XBETA=","StatementOptionHelp":{"#cdata":"Syntax: XBETA=name \n          \nNames the variable that contains estimates xi'\u03b2."},"StatementOptionType":"V"},{"StatementOptionName":"PRED=|MEAN=","StatementOptionHelp":{"#cdata":"Syntax: PRED=name | MEAN=name \n          \nAssigns a name to the variable that contains the predicted value of the response variable."},"StatementOptionType":"V"},{"StatementOptionName":"RESIDUAL=|RESID=","StatementOptionHelp":{"#cdata":"Syntax: RESID=name | RESIDUAL=name \n          \nAssigns a name to the variable that contains the residuals (that is, the difference between the \nobserved and predicted values of the response variable). "},"StatementOptionType":"V"}]}},{"StatementName":"RESTRICT","StatementHelp":{"#cdata":"Syntax: RESTRICT restriction1 <, restriction2 ...> ; \n\nThe RESTRICT statement imposes linear restrictions on the parameter estimates. You can specify \nany number of RESTRICT statements. \n\nEach restriction is written as an expression, followed by an equality operator (=) or an inequality\noperator (<, >, \u2264, \u2265), followed by a second expression: \n\n  expression operator expression\n\nThe operator can be =, <, >, \u2264 , or \u2265."},"StatementOptions":null},{"StatementName":"TEST","StatementHelp":{"#cdata":"Syntax: <label:> TEST <string:> equation [,equation...] / options ; \n\nThe TEST statement performs Wald, Lagrange multiplier, and likelihood ratio tests of linear \nhypotheses about the parameters that are specified in the preceding MODEL statement."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ALL","StatementOptionHelp":{"#cdata":"Requests Wald, Lagrange multiplier, and likelihood ratio tests."},"StatementOptionType":"S"},{"StatementOptionName":"LM","StatementOptionHelp":{"#cdata":"Requests the Lagrange multiplier test."},"StatementOptionType":"S"},{"StatementOptionName":"LR","StatementOptionHelp":{"#cdata":"Requests the likelihood ratio test."},"StatementOptionType":"S"},{"StatementOptionName":"WALD","StatementOptionHelp":{"#cdata":"Requests the Wald test."},"StatementOptionType":"S"}]}},{"StatementName":"SPATIALID","StatementHelp":{"#cdata":"Syntax: SPATIALID variable;\n\nFor models that require a spatial weights matrix, the SPATIALID statement specifies a variable that \nidentifies a spatial unit for each observation in the two data sets that are specified in the DATA= \noption and WMAT= option in the PROC CSPATIALREG statement. The variable that is specified in the \nSPATIALID statement is also used to match the rows and columns in the spatial weights matrix. Only \none SPATIALID statement and one spatial ID variable are allowed. The values of the spatial ID \nvariable in either the DATA= data set or the WMAT= data set cannot be missing."},"StatementOptions":null},{"StatementName":"SPATIALEFFECTS","StatementHelp":{"#cdata":"Syntax: SPATIALEFFECTS <model-spatial-effect-regressors> </options>;\n\nThe SPATIALEFFECTS statement enables you to specify covariates (such as X) whose spatial lag, WX, \nis to be added to the MODEL statement."},"StatementOptions":null}]}}}