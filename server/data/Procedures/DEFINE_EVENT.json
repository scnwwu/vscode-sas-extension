{"Procedure":{"Name":"DEFINE_EVENT","ProductGroup":"SAS/BASE","ProcedureHelp":{"#cdata":""},"ProcedureOptions":null,"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"FILE=","StatementHelp":{"#cdata":"Syntax: FILE= BODY | CODE | CONTENTS | DATA | FRAME | PAGES | STYLESHEET; \n      \nRedirects event output to any of the known types of output that are open.\n\nRestriction:The FILE= attribute is valid only in markup family destinations. \n\nInteraction:The names of the output files correspond to the output file names on \nthe ODS MARKUP statement that are specified with the BODY=, CODE=, CONTENTS=, FRAME=, \nPAGES=, and STYLESHEET= options."},"StatementOptions":null},{"StatementName":"PURE_STYLE=","StatementHelp":{"#cdata":"Syntax: PURE_STYLE= YES | NO;\n      \nEnables the event to use any style element that has been defined. \n\nYES \n  enables the event to use any of the style elements that have been defined. \n  Alias:ON \nNO \n  does not enable the event to use any of the style elements that have been defined. \n  Alias:OFF \n\nDefault:NO \n\nRestriction:The PURE_STYLE= attribute is valid only in markup family destinations."},"StatementOptions":null},{"StatementName":"STYLE=","StatementHelp":{"#cdata":"Syntax: STYLE= style-element;\n      \nSpecifies a style element. \n\nRestriction:The STYLE= attribute is valid only in markup family destinations. \n\nTip:When a carriage return separates style attributes, add a space before or after \nthe carriage return to prevent syntax errors. SAS does not interpret a carriage \nreturn as a space."},"StatementOptions":null},{"StatementName":"BLOCK","StatementHelp":{"#cdata":"Syntax:  BLOCK event </ event-statement-condition(s)>; \n      \nDisables the specified event.\n\nRequired Argument:\nevent -- specifies the event.\n\nOptional Argument:\n  event-statement-condition(s) -- specifies one or more conditions that must be true for the event statement to execute. \n\n  Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"BREAK","StatementHelp":{"#cdata":"Syntax:  BREAK </ event-statement-condition(s)>; \n\nStops the current event from executing. Statements below the BREAK statement are not executed. \n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"CLOSE","StatementHelp":{"#cdata":"Syntax: CLOSE < / event-statement-condition(s)>; \n \nCloses the current stream variable and directs all future output to the output file.\n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"CONTINUE","StatementHelp":{"#cdata":"Syntax:  CONTINUE </ event-statement-condition(s)>; \n\nSpecifies that the execution of the DO loop returns to the corresponding DO statement \nfor re-evaluation of the IF event statement condition. \n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"DELSTREAM","StatementHelp":{"#cdata":"Syntax: DELSTREAM $$stream-variable-name </ event-statement-condition(s)>; \n  \nDeletes the specified stream variable.\n\nRequired Argument \n  stream-variable \n    specifies the stream variable to be deleted. \n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"DO","StatementHelp":{"#cdata":"Syntax: DO </ event-statement-condition(s)>; \n  \nBegins a statement block that executes if the required condition is true.\n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"DONE","StatementHelp":{"#cdata":"Syntax: DONE; \n      \nEnds a DO or ELSE statement block."},"StatementOptions":null},{"StatementName":"ELSE","StatementHelp":{"#cdata":"Syntax:  ELSE </ event-statement-condition(s)>; \n\nBegins a statement block that executes if the corresponding DO statement is false.\n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"EVAL","StatementHelp":{"#cdata":"Syntax:  EVAL $<$>user-defined-variable-name user-defined-variable-value where-expression </event-statement-condition(s)>; \n\nCreates or updates a user-defined variable by setting the value of the variable to the \nreturn value of a WHERE expression. \n\nRequired Arguments \n  user-defined-variable \n    specifies the user-defined variable that you want to create or update. A user-defined-variable has one of the following forms: \n      o $dictionary-variable['key'] \n      o $list-variable[<index>] \n      o $scalar-variable\n      o $$stream-variable\n\nwhere-expression \n  any expression that can be used in the WHERE= data set option. \n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"FLUSH","StatementHelp":{"#cdata":"Syntax: FLUSH </event-statement-condition(s)>; \n      \nWrites buffered output to the current output file or the current stream variable.\n\nOptional Argument \n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"ITERATE","StatementHelp":{"#cdata":"Syntax: ITERATE $dictionary-variable | $list-variable</ event-statement-condition(s)>;\n      \nSpecifies a dictionary variable or list variable to loop through, and assigns the \nvariable's value to the _NAME_ and _VALUE_ event variables for each iteration. \n\nRequired Arguments: \n  dictionary-variable \n    specifies a dictionary variable. \n    Requirement:dictionary-variable must be preceded by the \u201c$\u201d symbol. \n    Tip:User-defined variables are not case sensitive. \n\n  list-variable \n    specifies a list variable. \n    Requirement:list-variable must be preceded by the \u201c$\u201d symbol. \n    Tip:User-defined variables are not case sensitive. \n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"NDENT","StatementHelp":{"#cdata":"Syntax: NDENT </ event-statement-condition(s)>; \n\nIndents output one more level than the number of spaces specified by the INDENT= attribute.\n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"NEXT","StatementHelp":{"#cdata":"Syntax: NEXT $dictionary-variable | $list-variable </ event-statement-condition(s)>; \n  \nSpecifies to increase a dictionary or list variable incrementally to the next \nvalue and to repopulate the event variables _VALUE_ and _NAME_ as appropriate.\n\nRequired Arguments: \n  dictionary-variable \n    specifies a dictionary variable that is designated as an iterator by the ITERATE statement. \n    Requirement:dictionary-variable must be preceded by the \u201c$\u201d symbol. \n    Tip:User-defined variables are not case sensitive. \n\nlist-variable \n  specifies a list variable that is designated as an iterator by the ITERATE statement. \n  Requirement:list-variable must be preceded by the \u201c$\u201d symbol. \n  Tip:User-defined variables are not case sensitive. \n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":" OPEN","StatementHelp":{"#cdata":"Syntax: OPEN $$stream-variable-name </ event-statement-condition(s)>; \n       \nOpens or creates a stream variable. When the PUT statements occur after the \nOPEN statement, all text or variable data that is specified by PUT statements \nis appended to the stream variable instead of the output file.\n\nRequired Argument:\nstream\u2013variable \n  specifies a stream variable, which is a temporary item store that contains output. \n  Tips:User-defined variables are not case sensitive. \n  If you assign the name of a memory variable to stream-variable, then the stream variable \n  resolves as the value of the memory variable. For example, the following program uses the \n  memory variable $MyStream as a stream variable: \n\n    set $mystream 'test';\n      open $mystream;\n      put 'The memory variable $mystream is being used as a stream variable';\n      close;\n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"PUT","StatementHelp":{"#cdata":"Syntax: PUT <function> <NL> <variable> <'text' > < / event-statement-condition(s)>; \n      \nWrites text, new lines, variable values, or DATA step function return values \nto an output file. \n\nOptional Arguments:\n\nNL -- specifies a new line.\n  Aliases:CR, LF\n\ntext -- specifies a string of text. \n  Requirement:text must be enclosed in quotation marks. \n  Interactions: The PUT statement pairs text strings with variables. A string of text \n    that precedes a variable creates a string-value pair if the variable has a value. \n    For example, for the following PUT statement, if the event variable ForeGround has \n    a value of blue, then the output is color=blue: \n\n      put 'color=' foreground;\n\nvalue \n  specifies any event variable, style variable, dynamic variable, user-defined variable, \n  or DATA step function whose value you want to output. \n\n  Restriction:DATA step functions cannot be nested. \n  Requirement:User-defined variables must be preceded by a '$' or '$$' character. \n  Interactions:The PUT statement pairs text strings with variables. A string of text that \n  precedes a variable creates a string-value pair, if the variable has a value. \n  \nevent-statement-condition(s) \n  specifies one or more conditions that must be true for the event statement to execute. \n  Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"PUTL","StatementHelp":{"#cdata":"Syntax: PUTL <'text'> <NL(s)> <value(s)> </ event-statement-condition(s)>; \n      \nWrites text, new lines, variable values, or DATA step function return values \nto an output file and automatically adds a new line to the end of the output.  \n\nOptional Arguments:\n\nNL -- specifies a new line.\n  Aliases:CR, LF\n\ntext -- specifies a string of text. \n  Requirement:text must be enclosed in quotation marks. \n  Interactions: The PUTL statement pairs text strings with variables. A string of text \n    that precedes a variable creates a string-value pair if the variable has a value. \n    For example, for the following PUTL statement, if the event variable ForeGround has \n    a value of blue, then the output is color=blue: \n\n      putl 'color=' foreground;\n\nvalue \n  specifies any event variable, style variable, dynamic variable, user-defined variable, \n  or DATA step function whose value you want to output. \n\n  Restriction:DATA step functions cannot be nested. \n  Requirement:User-defined variables must be preceded by a '$' or '$$' character. \n  Interactions:The PUTL statement pairs text strings with variables. A string of text that \n  precedes a variable creates a string-value pair, if the variable has a value. \n  \nevent-statement-condition(s) \n  specifies one or more conditions that must be true for the event statement to execute. \n  Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"PUTLOG","StatementHelp":{"#cdata":"Syntax: PUTLOG <'text'> <value(s)> </ event-statement-condition(s)>; \n      \nWrites text, new lines, variable values, or DATA step function return values to the log. \n\nOptional Arguments:\n\ntext -- specifies a string of text. \n  Requirement:text must be enclosed in quotation marks. \n  Interactions: The PUTLOG statement pairs text strings with variables. A string of text \n    that precedes a variable creates a string-value pair if the variable has a value. \n    For example, for the following PUTLOG statement, if the event variable ForeGround has \n    a value of blue, then the output is color=blue: \n\n      putlog 'color=' foreground;\n\nvalue \n  specifies any event variable, style variable, dynamic variable, user-defined variable, \n  or DATA step function whose value you want to output. \n\n  Restriction:DATA step functions cannot be nested. \n  Requirement:User-defined variables must be preceded by a '$' or '$$' character. \n  Interactions:The PUTLOG statement pairs text strings with variables. A string of text that \n  precedes a variable creates a string-value pair, if the variable has a value. \n  \nevent-statement-condition(s) \n  specifies one or more conditions that must be true for the event statement to execute. \n  Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"PUTQ","StatementHelp":{"#cdata":"Syntax: PUTQ <'text'> <NL(s)> <value(s)> </ event-statement-condition(s)>; \n      \nWrites text, new lines, variable values, or DATA step function return values \nto an output file and places quotes around the value of the variable.  \n\nOptional Arguments:\n\nNL -- specifies a new line.\n  Aliases:CR, LF\n\ntext -- specifies a string of text. \n  Requirement:text must be enclosed in quotation marks. \n  Interactions: The PUTQ statement pairs text strings with variables. A string of text \n    that precedes a variable creates a string-value pair if the variable has a value. \n    For example, for the following PUTQ statement, if the event variable ForeGround has \n    a value of blue, then the output is color=blue: \n\n      putl 'color=' foreground;\n\nvalue \n  specifies any event variable, style variable, dynamic variable, user-defined variable, \n  or DATA step function whose value you want to output. \n\n  Restriction:DATA step functions cannot be nested. \n  Requirement:User-defined variables must be preceded by a '$' or '$$' character. \n  Interactions:The PUTQ statement pairs text strings with variables. A string of text that \n  precedes a variable creates a string-value pair, if the variable has a value. \n  \nevent-statement-condition(s) \n  specifies one or more conditions that must be true for the event statement to execute. \n  Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"PUTSTREAM","StatementHelp":{"#cdata":"Syntax: PUTSTREAM stream-variable < / event-statement-condition(s)>; \n       \nWrites the contents of the specified stream variable to an output file. \n\nRequired Argument:\n  stream-variable \n    specifies a stream variable, which is a temporary item store that contains output. \n    Tip:If you assign the name of a memory variable to stream-variable-name, then the stream \n    variable resolves as the value of the memory variable. For example, the following partial \n    program uses the memory variable $MyStream as a stream variable: \n\n      set $mystream 'test';\n        open $mystream;\n        put 'The memory variable $mystream is being used as a stream variable';\n        close;\n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"PUTVARS","StatementHelp":{"#cdata":"Syntax: PUTVARS (variable-group | dictionary-variable | list-variable)<NL(s)> <'text'> <value(s)>\n  < / event-statement-condition(s)>; \n      \nIterates over each value in a variable group, list, or dictionary and writes text, \nnew lines, variable values, or DATA step function return values to an output file. \nEach iteration populates the special variables _VALUE_ and __NAME_ . Putvars prints \nonce for each variable or value that it finds.\n\nRequired Arguments:\n  variable-group \n    specifies the type of variable to use in each iteration when you specify the name or value \n    in the variable. variable-group is one of the following: \n      EVENT -- specifies to loop through all event variables. \n      STYLE -- specifies to loop through all style variables. \n      DYNAMIC -- specifies to loop through all dynamic variables. \n      MEMORY -- specifies to loop through all memory variables. A memory variable is classified \n        as a dictionary variable if it is created with a subscript that contains a key. A memory \n        variable is classified as a list variable if it is created with a subscript that is empty \n        or contains an index. If you omit a key or an index, then the memory variable is a numeric \n        or character scalar variable, depending on the variable's value.\n    STREAM -- specifies to loop through all stream variables. \n\n  dictionary-variable -- specifies a dictionary variable. \n    Requirement: dictionary-variable must be preceded by the '$' symbol. \n    Tip:User-defined variables are not case sensitive. \n\n  list-variable -- specifies a list variable. \n    Requirement:list-variable must be preceded by the \u201c$\u201d symbol. \n    Tip:User-defined variables are not case sensitive. \n\nOptional Arguments \n  NL -- specifies a new line. Aliases:CR, LF\n  text -- specifies a string of text. Requirement: text must be enclosed in quotation marks. \n  value -- specifies any event variable, style variable, dynamic variable, user-defined \n    variable, or DATA step function whose value you want to output. \n\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"SET","StatementHelp":{"#cdata":"Syntax: SET $dictionary-variable entry </ event-statement-condition(s)>; \nSET $list-variable entry </ event-statement-condition(s)>; \nSET $scalar-variable | $$stream-variable entry </ event-statement-condition(s)>; \n      \nCreates or updates a user-defined variable and its value. \n\nRequired Arguments:\n  dictionary-variable \n    specifies an array that contains a list of numbers or text strings that is identified by a key. \n    dictionary-variable has the following form: $dictionary-variable['key']       \n      ['key'] specifies a subscript that contains text or a variable that has a character value.\n      \n    entry -- specifies the value of a dictionary variable, list variable, scalar variable, \n      or stream-variable. An entry is one of the following: \n        function -- specifies a DATA step function. \n        text -- specifies a string of text. \n        variable -- specifies any event variable, style variable, dynamic variable, \n          user-defined variable, or DATA step function whose value you want to output. \n\n  list-variable -- an array that contains a list of numbers or strings of text that \n    are indexed. list-variable has the following form: $list-variable[<index>] \n    [<index>] specifies a subscript that contains a number or numeric variable.\n    \n  scalar-variable -- an area of memory that contains numeric or character data.\n  stream-variable -- specifies a stream variable, which is a temporary item store that contains output.\n  \nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"STOP","StatementHelp":{"#cdata":"Syntax: STOP </ event-statement-condition(s)>; \n       \nSpecifies that execution moves to the end of the current statement block.\n\nOptional Argument: \n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:event-statement-condition(s) must be preceded by a slash (/)."},"StatementOptions":null},{"StatementName":"TRIGGER","StatementHelp":{"#cdata":"Syntax: TRIGGER event-name <START | FINISH> </ event-statement-condition(s)>; \n   \nExecutes an event.\n\nWithout Arguments:\n  If a triggered event does not have start or finish sections, then it runs the current event statements. \n\nRequired Argument:\n  event-name -- specifies the name of the event. \n\nOptional Arguments:\n  START -- specifies the start section of an event. \n    Interaction:If the program is in the start section of an event, then any event \n    that is triggered runs its start section. \n  \n  FINISH -- specifies the finish section of an event. \n    Interaction:If the program is in the finish section of an event, then any event \n    that is triggered runs its finish section. \n    \n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:an event-statement-condition must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"UNBLOCK","StatementHelp":{"#cdata":"Syntax: UNBLOCK event-name </ event-statement-condition(s)>; \n      \nEnables a disabled event.\n\nRequired Argument:\n  event-name \n    specifies the name of the event. \n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:an event-statement-condition must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"UNSET","StatementHelp":{"#cdata":"Syntax: UNSET ALL | dictionary-variable | list-variable | scalar-variable | stream-variable \n  </ event-statement-condition(s)>; \n\nDeletes a user-defined variable and its value.\n\nRequired Arguments:\n  ALL -- deletes all dictionary variables, list variables, and scalar variables. \n  Tip:You must delete stream variables individually. \n  \n  dictionary-variable \n    specifies an array that contains a list of numbers or text strings that are identified by a key. \n    A dictionary-variable has the following form: $dictionary-variable['key'] \n    ['key'] specifies the location in the dictionary variable of the value that you want to delete. \n\n  list-variable \n    specifies an array that contains a list of numbers or strings of text that are indexed. \n    A list-variable has the following form: $list-variable[<index>] \n    [<index>] specifies the location in the list variable of the value to be deleted. If you \n      omit the index and specify empty brackets, then the entire list variable is deleted.\n      \n  scalar-variable -- specifies a scalar variable to delete. \n    Requirement:Scalar variables must be preceded by the '$' symbol.\n    \n  stream-variable -- specifies a stream variable to delete. \n    Requirement:A user-defined-variable-name must be preceded by the '$$' symbol.\n    \nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:an event-statement-condition must be preceded by a slash (/)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"All","StatementOptionHelp":{"#cdata":"Deletes all dictionary variables, list variables, and scalar variables. \n\nTip: You must delete stream variables individually."},"StatementOptionType":"RS"},{"StatementOptionName":"ANY","StatementOptionHelp":{"#cdata":"Syntax: ANY (variable-1,<..., variable-n>) \n\nChecks a list of comma-delimited variables for values. If any of the variables \nhas a value, then the condition is true. \n\nExample:\n  put 'One of our variables has a value!'\n    nl/if any(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"BREAKIF","StatementOptionHelp":{"#cdata":"Syntax: BREAKIF event \n\nStops an event that is executing. The current statement is executed and the event ends.\n\nTip:Using the BREAKIF condition is more efficient than using a PUT event statement \nand a BREAK event statement with an IF condition together. For example, the following \nstatements are equivalent: \n\n  put 'Foreground has a value!' /breakif exists(foreground); \n  put 'Foreground has a value!' /if exists(foreground);\n    break /if exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CMP","StatementOptionHelp":{"#cdata":"Syntax: CMP (\u201cstring\u201d, variable | variable-list) \n\nCompares, for equality, a string to a variable or list of variables. \n\nExample:\n put 'The foreground is blue!' nl/if cmp('blue',foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"Syntax: CONTAINS (argument-1, argument-2)\n          \nSearches the first argument for the second argument. \n\nExample:\n  set $myvariable 'some random text';\n    put 'myvariable contains 'ran' nl/if contains($myvariable, 'ran');"},"StatementOptionType":"S"},{"StatementOptionName":"EXIST|EXISTS","StatementOptionHelp":{"#cdata":"Syntax: EXIST | EXISTS (variable | variable-list) \n\nDetermines whether a variable or a list of variables has values. If all of the \nvariables have values, then the condition is true. If a variable has an empty \nstring of length 0, then the variable has no value and the condition is false. \n\nTip:Use the MISSING event variable with the EXIST condition to determine whether a value is missing. \n\nExample:\n  put 'All of our variables have a value!'\n    nl/if exists(background, foreground, cellpadding, cellspacing);"},"StatementOptionType":"S"},{"StatementOptionName":"IF|WHEN|WHERE","StatementOptionHelp":{"#cdata":"Syntax: IF | WHEN | WHERE (<value><'string'><variable>) \n\nTests for existence or equality. IF, WHEN, and WHERE are optional and interchangeable. \nAn IF, a WHEN, or a WHERE condition compares values and strings, or checks variables \nfor values. \n\nRestriction:When you specify an IF condition with a single, user-defined variable, then \nthe variable is evaluated to determine if it has a value, according to the variable's \ntype. A string variable type uses the length to determine existence, a numeric variable \ntype uses value, and a dictionary array variable type uses the key (if there is a key \nspecified, then the test is true). \n\nExample:All of the following are equivalent: \n  put 'Foreground has a value!' nl/if (foreground);\n  put 'Foreground has a value!' nl/if exists(foreground);\n  put 'Foreground has a value!' nl/when exists(foreground);\n  put 'Foreground has a value!' nl/exists(foreground);\n  put 'Foreground has a value!' nl/where exists(foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"Syntax: NOT | ! | ^ <'string'><variable>\n          \nNegates a condition. You can use the keyword NOT or the characters '!' or '^'. \n\nRestriction:The character '!' works only as the first character in a condition. \nThe standard WHERE processing syntax is required for subsequent characters. \n\nExample:\n  put 'The foreground is not red!' nl/if not cmp('red', foreground);\n  put 'The foreground is not red or blue' /if !cmp('red', foreground)\n      and ^cmp('blue', foreground);\n  put 'The foreground is not red or blue' /if ^cmp('red', foreground)\n      and ^cmp('blue', foreground);"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Syntax: WHILE condition-expression \n\nIndicates that the corresponding statement block should loop until the WHILE value becomes false. \n\nRestriction:The WHILE condition can be used only with the DO statement. \n\nExample:\n  eval $count 0;\n\n    do /while $count < 10;\n      eval $i $count+1;\n      continue /if $count eq 5;\n      stop /if $count eq 8;\n      put 'Count is ' $i nl;\n  else;\n      put 'Count was never less than 10' nl;\n  done;"},"StatementOptionType":"S"}]}},{"StatementName":"XDENT","StatementHelp":{"#cdata":"Syntax: XDENT </ event-statement-condition(s)>; \n       \nIndents output one less indention level, using the number of spaces specified by the INDENT= attribute. \n\nOptional Argument:\n  event-statement-condition(s) \n    specifies one or more conditions that must be true for the event statement to execute. \n    Requirement:an event-statement-condition must be preceded by a slash (/)."},"StatementOptions":null},{"StatementName":"END","StatementHelp":{"#cdata":"Syntax: END;  \n      \nEnds the tagset or event."},"StatementOptions":null}]}}}