{"Procedure":{"Name":"DEFINE_TAGSET","ProductGroup":"SAS/BASE","ProcedureHelp":{"#cdata":""},"ProcedureOptions":null,"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"BREAKTEXT_LENGTH=","StatementHelp":{"#cdata":"Syntax: BREAKTEXT_LENGTH=number\n\nSpecifies the maximum number of characters that will be considered for forced line \nbreaks by ODS. When the number of characters in the text exceeds the number specified \nby the BREAKTEXT_LENGTH= option, then line breaks are inserted by the application that \ndisplays the output. If the number of characters in the text is less than or equal to \nthe number specified by the BREAKTEXT_LENGTH= option, then any necessary line breaks \nare inserted by ODS. The placement of the line breaks is based upon the total available \ntext width."},"StatementOptions":null},{"StatementName":"BREAKTEXT_RATIO=","StatementHelp":{"#cdata":"Syntax: BREAKTEXT_RATIO=number\n\nSpecifies the maximum ratio of the width of space available for text entry to the \nlength of the text that is supposed to fit in that space. If the ratio of width space \nto text length is greater than the ratio specified by the BREAKTEXT_RATIO= option, \nthen any necessary line breaks are inserted by the application that displays the \noutput. If the ratio of width space to text length is equal to or less then the \nratio specified by the BREAKTEXT_RATIO= option, then any necessary line breaks \nare inserted by ODS."},"StatementOptions":null},{"StatementName":"BREAKTEXT_WIDTH=","StatementHelp":{"#cdata":"Syntax: BREAKTEXT_WIDTH=number\n\nSpecifies the maximum width of space available for text entry that ODS will consider \nfor placement of automatic line breaks. If the width of space is greater than the number \nspecified by the BREAKTEXT_WIDTH= option, then any necessary line breaks are inserted by \nthe application that displays the output. If the width of space is less than or equal to \nthe number specified by the BREAKTEXT_WIDTH= option, then ODS inserts necessary line breaks."},"StatementOptions":null},{"StatementName":"COPYRIGHT=","StatementHelp":{"#cdata":"Syntax: COPYRIGHT= '(text)'\n\nSpecifies the text to use as the copyright. \n\nRequirement: When specifying text, enclose the text in parentheses and then quotation marks."},"StatementOptions":null},{"StatementName":"DEFAULT_EVENT=","StatementHelp":{"#cdata":"Syntax: DEFAULT_EVENT= 'event-name'\n\nSpecifies the name of an event to execute by default when the requested event cannot \nbe found in the tagset. \n\nRequirement: When specifying an event-name, enclose the name of the event in quotation marks."},"StatementOptions":null},{"StatementName":"EMBEDDED_STYLESHEET=","StatementHelp":{"#cdata":"Syntax: EMBEDDED_STYLESHEET= YES | ON | NO | OFF\n\nSpecifies whether or not the tagset supports embedded stylesheets.\n\nDefault: The default value is YES or ON, which means that embedded stylesheets are supported. \nTip: If embedded stylesheets are supported and you do not specify a stylesheet in the ODS \nstatement, then the stylesheet is written to the top of the output file. \n\n  YES\n  supports embedded stylesheets.\n\n  Alias: ON \n\n  ON\n  supports embedded stylesheets.\n\n  Alias: YES \n\n  NO\n  does not support embedded stylesheets.\n\n  Alias: OFF \n\n  OFF\n  does not support embedded stylesheets.\n\n  Alias: NO"},"StatementOptions":null},{"StatementName":"IMAGE_FORMATS=","StatementHelp":{"#cdata":"Syntax: IMAGE_FORMATS= 'image-type(s)'\n\nSpecifies a comma-delimited list of image types or file extensions that are valid \nfor an output destination. The image types can be any that are supported by SAS/GRAPH. \nList them in order of preference. \n\nExample: The following IMAGE_FORMATS= statement lists valid image types for the \nHTML destination: \n\n  image_formats='gif,jpeg,png';"},"StatementOptions":null},{"StatementName":"INDENT=","StatementHelp":{"#cdata":"Syntax: INDENT=n\n\nspecifies how many spaces the NDENT and XDENT event statements will indent the output.\n\nn\nspecifies a numeric value for the number of spaces that you want the output to indent.\n\nDefault: 0 \nTip: The INDENT= attribute is valid only in markup family destinations."},"StatementOptions":null},{"StatementName":"LOG_NOTE=","StatementHelp":{"#cdata":"Syntax: LOG_NOTE= 'string'\n\nDefines a string that is printed to the SAS log when the tagset is used.\n\nstring\nspecifies the text that is printed to the SAS log.\n\nRequirement: Specify only one string at a time."},"StatementOptions":null},{"StatementName":"MAP=","StatementHelp":{"#cdata":"Syntax: MAP= 'characters'\n\nSpecifies the special characters that require translation.\n\ncharacters\nspecifies one or more special characters.\n\nRequirement: When listing special characters in the MAP= statement, omit blank spaces between them. \nRequirement: When you specify special characters, enclose the list of special characters in quotation marks.  \nRequirement: Use the MAP= statement with the MAPSUB statement."},"StatementOptions":null},{"StatementName":"MAPSUB=","StatementHelp":{"#cdata":"Syntax: MAPSUB= 'strings'\n\nSpecifies the text to substitute for the characters that are specified in the MAP= statement.\n\nstrings\nSpecifies the text strings to substitute for the characters that are specified in the MAP= statement.\n\nRequirement: When specifying multiple strings, use a forward slash (/) to separate the text strings. \nRequirement: When specifying strings, enclose the entire string list in quotation marks. \nRequirement: Use the MAPSUB= statement with the MAP= statement."},"StatementOptions":null},{"StatementName":"NOBREAKSPACE=","StatementHelp":{"#cdata":"Syntax: NOBREAKSPACE= 'string'\n\nDefines a nonbreaking space for the markup output.\n\nstring\nspecifies the character that defines a nonbreaking space.\n\nRequirement: When specifying a string, enclose the string in quotation marks. \nRestriction: Specify only one string at a time."},"StatementOptions":null},{"StatementName":"NO_BYTE_ORDER_MARK=","StatementHelp":{"#cdata":"Syntax: NO_BYTE_ORDER_MARK=YES | ON | NO | OFF\n\nSpecifies whether or not a byte-order mark is written to the output files when using \na UTF character set."},"StatementOptions":null},{"StatementName":"OUTPUT_TYPE=","StatementHelp":{"#cdata":"Syntax: OUTPUT_TYPE= CSV | HTML | LATEX | WML | XML\n\nsets a category for the output.\n\n  CSV\n  produces output with comma-separated values.\n\n  HTML\n  produces Hypertext Markup Language output.\n\n  LATEX\n  produces output in LaTeX, which is a document preparation system for high-quality typesetting.\n\n  WML\n  uses the Wireless Application Protocol (WAP) to produce a wireless markup language.\n\n  XML\n  produces output in Extensible Markup Language."},"StatementOptions":null},{"StatementName":"PARENT=","StatementHelp":{"#cdata":"Syntax: PARENT= tagset-path\n\nSpecifies the tagset from which the current template inherits.\n\ntagset-path\nspecifies the name of a directory in a template store.\n\nDefault: The current template inherits from the specified template in the first template \nstore where you have Read access. The PATH statement specifies which locations to search \nfor templates that were created by PROC TEMPLATE, as well as the order in which to search \nfor them. \n\nInteraction: When you specify a parent, all of the template options, attributes, and \nstatements that are specified in the parent's template are used in the current template, \nunless the current template overrides them. \n\nRequirement: When you specify a parent, all of the template options, attributes, and \nstatements that are specified in the parent's template are used in the current template, \nunless the current template overrides them. \nTip: Specify a tagset that SAS supplies or a customized tagset. \nTip: Control the item store from which the tagset is read by using the ODS PATH statement."},"StatementOptions":null},{"StatementName":"PURE_STYLE=","StatementHelp":{"#cdata":"Syntax: PURE_STYLE=YES | ON | NO | OFF\n\nSpecifies whether all of the style attributes are available at all times."},"StatementOptions":null},{"StatementName":"REGISTERED_TM=","StatementHelp":{"#cdata":"Syntax: REGISTERED_TM= '(text)'\n\nspecifies the text to use as the registered trademark. \n\nRequirement: When specifying text, enclose the text in parentheses and then quotation marks."},"StatementOptions":null},{"StatementName":"SPLIT=","StatementHelp":{"#cdata":"Syntax: SPLIT= 'string'\n\nDefines a text string to use for line breaks in the markup output.\n\nRequirement: When specifying a string, enclose the string in quotation marks. \nRestriction: Specify one string at a time."},"StatementOptions":null},{"StatementName":"STACKED_COLUMNS=","StatementHelp":{"#cdata":"Syntax: STACKED_COLUMNS= YES | ON | NO | OFF\n\nSpecifies whether or not the tagset lets procedures stack columns on top \nof each other, or place them side by side.\n\nDefault: The default value is YES or ON, which means that columns are stacked. \nTip: To place columns side by side, specify the NO or OFF value.\n\n  YES\n  stacks columns on top of each other.\n  Alias: ON \n\n  ON\n  stacks columns on top of each other.\n  Alias: YES \n\n  NO\n  stacks columns side by side.\n  Alias: OFF \n\n  OFF\n  stacks columns side by side.\n  Alias: NO"},"StatementOptions":null},{"StatementName":"TRADEMARK=","StatementHelp":{"#cdata":"Syntax: TRADEMARK= '(text)'\n\nSpecifies the text to use as the trademark. \n\nRequirement: When specifying text, enclose the text in parentheses and then \nquotation marks."},"StatementOptions":null},{"StatementName":"DEFINE EVENT","StatementHelp":{"#cdata":"Syntax: DEFINE EVENT event-name; \n  <event-attribute-1;<...event-attribute-n;>> \n  <event statements>   \n      \nDefines what is written to the output file."},"StatementOptions":null},{"StatementName":"NOTES","StatementHelp":{"#cdata":"Syntax: NOTES 'text'; \n      \nProvides information about the tagset."},"StatementOptions":null},{"StatementName":"END","StatementHelp":{"#cdata":"Syntax: END;  \n\nEnds the tagset."},"StatementOptions":null}]}}}