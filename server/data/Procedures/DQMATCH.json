{"Procedure":{"Name":"DQMATCH","ProductGroup":"SAS DATA QUALITY SERVER","ProcedureHelp":{"#cdata":"Syntax: PROC DQMATCH\n    <DATA=input-data-set>\n    <DELIMITER | NODELIMITER>\n    <CLUSTER=output-variable-name>\n    <CLUSTER_BLANKS | NO_CLUSTER_BLANKS>\n    <CLUSTERS_ONLY>\n    <LOCALE=locale-name>\n    <MATCHCODE=output-variable-name>\n    <OUT=data-set-name> ;\n    <CRITERIA1 options\n    ...\n    CRITERIAn options\n    >; \n\nThe DQMATCH procedure creates match codes in an output data set for specified input \ncharacter variables. The procedure can also generate cluster numbers for input values \nthat generate identical match codes. Cluster numbers are not assigned to input values \nthat generate unique match codes. Input values that generate a unique match code (no \ncluster number) can be excluded from the output data set. Blank values can be retained \nin the output data set. Blank values can receive a cluster number.\n\nMatch codes are created based on a specified match definition in a specified locale.\n\nA specified sensitivity level determines the amount of information in the match codes. \nThe amount of information in the match codes determines the number of clusters and the \nnumber of members in each cluster. Higher sensitivity levels produce fewer clusters, with \nfewer members per cluster. Use higher sensitivities when you need matches that are more \nexact. Use lower sensitivity levels to sort data into general categories or to capture \nall values that use different spellings to convey the same information."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"[Syntax: DATA=input-data-set] \n      \nIdentifies the input SAS data set. The default input data set is the most recently created \ndata set in the current SAS session."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"CLUSTER=","ProcedureOptionHelp":{"#cdata":"[Syntax: CLUSTER=output-variable-name] \n      \nSpecifies the name of the numeric variable in the output data set that contains the cluster \nnumber. If the CLUSTER= option is not specified and if the CLUSTERS_ONLY option is specified, \nthen an output variable named CLUSTER is created."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CLUSTER_BLANKS","ProcedureOptionHelp":{"#cdata":"Writes blank values into the output data set, without an accompanying match code."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOCLUSTER_BLANKS","ProcedureOptionHelp":{"#cdata":"Removes blank values from the output data set."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"CLUSTERS_ONLY","ProcedureOptionHelp":{"#cdata":"Excludes from the output data set any input character values that are not found to be part \nof a cluster. A cluster number is assigned only when two or more input values produce the \nsame match code. Specifying CLUSTERS_ONLY excludes input character values that have unique \nmatch codes and are not blank. This option is not asserted by default. Normally, all input \nvalues are included in the output data set."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"DELIMITER","ProcedureOptionHelp":{"#cdata":"Specifies that exclamation points (!) separate the individual match codes that make up the \nconcatenated match code."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NODELIMITER","ProcedureOptionHelp":{"#cdata":"Specifies that multiple match codes are concatenated without the exclamation points."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LOCALE=","ProcedureOptionHelp":{"#cdata":"[Syntax: LOCALE=locale-name] \n      \nSpecifies the locale that will be used to create match codes. The value can be a locale name \nin quotation marks or the name of a variable whose value is a locale name or is an expression \nthat evaluates to a locale name."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MATCHCODE=","ProcedureOptionHelp":{"#cdata":"[Syntax: MATCHCODE=output-variable] \n      \nSpecifies a name for the output character variable that stores the match codes. The DQMATCH \nprocedure defines a sufficient length for this variable, even if a variable with the same name \nalready exists in the input data set.\n\nA default match code variable named MATCH_CD is generated if the following statements are all true:\n\n  o No value is specified for the MATCHCODE= option in the PROC DQMATCH statement, and no values \n    are specified for the MATCHCODE= option in subsequent CRITERIA statements.\n\n  o No value is specified for the CLUSTER= option.\n\n  o No value is specified for the CLUSTERS_ONLY option.\n\nIf the MATCHCODE= option is not specified in the PROC DQMATCH or in any CRITERIA statements, \nand if CLUSTERS= or CLUSTERS_ONLY is specified, then no match code output variable is created \nand no match codes are written into the output data set."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUT=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUT=data-set-name] \n      \nSpecifies the name of the output data set. If the specified data set does not exist, \nPROC DQMATCH creates it. The default output data set is the input data set."},"ProcedureOptionType":"DV"}]},"ProcedureStatements":{"ProcedureStatement":{"StatementName":"CRITERIA","StatementHelp":{"#cdata":"Syntax: CRITERIA\n    DELIMSTR=delimited-input-variable | VAR=input-variable\n    MATCHDEF=match-definition | EXACT\n    <SENSITIVITY=complexity-value>\n    <MATCHCODE=output-variable>\n    <CONDITION=integer> ; \n\nCreates match codes and optional cluster numbers for an input variable. \n\nRequirement:  At least one CRITERIA statement is required in a DQMATCH procedure step."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DELIMSTR=","StatementOptionHelp":{"#cdata":"[Syntax: DELIMSTR= parsed-input-variable] \n          \nSpecifies the name of a variable that has been parsed by the DQPARSE function, or contains \ntokens that were added with the DQPARSETOKENPUT function. \n\nYou cannot specify the DELIMSTR= option and the VAR= option in the same CRITERIA statement."},"StatementOptionType":"V"},{"StatementOptionName":"VAR=","StatementOptionHelp":{"#cdata":"[Syntax: VAR=input-variable] \n          \nSpecifies the name of the character variable that is used to create match codes. \nThe values of this variable cannot contain delimiters that were added with the \nfunctions DQPARSE or DQPARSETOKENPUT. If the variable contains delimited values, \nuse the DELIMSTR= option instead of the VAR= option."},"StatementOptionType":"V"},{"StatementOptionName":"MATCHDEF=","StatementOptionHelp":{"#cdata":"[Syntax: MATCHDEF=match-definition] \n          \nDefines the match definition that is used to create the match code for the specified variable. \nThe match definition must exist in the locale that is specified in the LOCALE=option of the \nPROC DQMATCH statement."},"StatementOptionType":"V"},{"StatementOptionName":"EXACT","StatementOptionHelp":{"#cdata":"Assigns a cluster number based on an exact character match between values rather than a match \nbetween match codes. If you have not assigned a value to the CLUSTER= option in the DQMATCH \nprocedure, then cluster numbers will be assigned to a variable named CLUSTER by default. If \nyou specify EXACT, you cannot specify MATCHDEF=, MATCHCODE=, or SENSITIVITY= in that CRITERIA \nstatement. If you specify MATCHCODE= in PROC DQMATCH, the match code is a composite of the exact \ncharacter value and the match code that is generated by the match definition."},"StatementOptionType":"S"},{"StatementOptionName":"SENSITIVITY=","StatementOptionHelp":{"#cdata":"[Syntax: SENSITIVITY=information-value] \n          \n(Optional) Determines the amount of information in the resulting match codes. Higher sensitivity \nvalues create match codes that contain more information about the input values. Higher sensitivity \nlevels result in a greater number of clusters, with fewer values in each cluster. Valid values range \nfrom 50 to 95. The default value is 85."},"StatementOptionType":"V"},{"StatementOptionName":"MATCHCODE=","StatementOptionHelp":{"#cdata":"[Syntax: MATCHCODE=output-variable] \n          \n(Optional) Specifies the name of the variable that receives the match codes for the character \nvariable that is specified in the VAR= or DELIMSTR= option. \n\nIn the CRITERIA statement, the value of the MATCHCODE= option is not valid if you also specify \nthe MATCHCODE= option in the PROC DQMATCH statement.\n\nIf you are using multiple CRITERIA statements in a single procedure step, you must either specify \nthe MATCHCODE= variable in each CRITERIA statement, or generate composite match codes by specifying \nonly the MATCHCODE= option in the PROC DQMATCH statement."},"StatementOptionType":"V"},{"StatementOptionName":"CONDITION=","StatementOptionHelp":{"#cdata":"[Syntax: CONDITION=integer] \n          \n(Optional) Groups CRITERIA statements to constrain the assignment of cluster numbers. \nMultiple CRITERIA statements with the same CONDITION= value are all required to match\nthe values of an existing cluster to receive the number of that cluster. \n\nThe CRITERIA statements are applied as a logical AND. If more than one CONDITION= number \nis defined in a series of CRITERIA statements, then a logical OR is applied across all \nCONDITION= values. For example, in a table of customer information, you could assign cluster \nnumbers based on matches between the customer name AND the home address OR the customer name \nand organization address.\n\nThe default value of CONDITION= is 1. All CRITERIA statements that lack a CONDITION= value \nreceive a cluster number based on a logical AND of all such CRITERIA statements.\n\nIf you have not assigned a value to the CLUSTER= option in the DQMATCH procedure, then cluster \nnumbers are assigned to a variable named CLUSTER by default.\n\nIf you specify a value for MATCHCODE= in PROC DQMATCH, and if you specify more than one \nCONDITION= value, then SAS generates an error. To prevent the error, specify MATCHCODE= \nin the CRITERIA statements only."},"StatementOptionType":"V"}]}}}}}