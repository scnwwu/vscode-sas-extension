{"Procedure":{"Name":"DQSCHEME","ProductGroup":"SAS DATA QUALITY SERVER","ProcedureHelp":{"#cdata":"Syntax: PROC DQSCHEME\n    <DATA=input-data-set>\n    <BFD | NOBFD>\n    <OUT=output-data-set>;\n\n    <CREATE options;>\n    <APPLY options;>\n    <CONVERT options;>\n\nThe DQSCHEME procedure creates scheme data sets and analysis data sets and applies schemes to \ninput data sets. You can also apply schemes with the DQSCHEMEAPPLY function or CALL routine."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"BFD","ProcedureOptionHelp":{"#cdata":"Indicates that all Blue Fusion Data that are created or applied in the current procedure step \nare in BFD format. This is the default."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOBFD","ProcedureOptionHelp":{"#cdata":"Indicates that all schemes are in SAS format."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"[Syntax: DATA=input-SAS-data-set] \n      \nIdentifies the SAS data set from which one or more schemes are built, when you use \nthe CREATE statement. When you use the APPLY statement to apply existing schemes, \nthe DATA= option specifies the data set against which the schemes are applied.\n\nThe default data set is the most recently created data set in the current SAS session."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"OUT=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUT=output-data-set] \n      \nSpecifies the name of the output data set. If the specified data set does not exist, \nPROC DQSCHEME creates it. The default output data set is the input data set.\n\nIf you use one or more APPLY statements, you must use the OUT= option to specify the \nname of the output data set. Results are written to the output data set after all schemes \nhave been applied. If you specify OUT= without any APPLY statements, the output data set \nwill be created but it will be empty."},"ProcedureOptionType":"DV"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"CREATE","StatementHelp":{"#cdata":"Syntax: CREATE\n    ANALYSIS=output-data-set\n    SCHEME=scheme-name\n    VAR=variable-name\n    MATCHDEF=match-definition\n    <SENSITIVITY=complexity-factor>\n    <LOCALE=locale-name>\n    <SCHEME_LOOKUP=EXACT | IGNORE_CASE | USE_MATCHDEF>\n    <MODE=PHRASE | ELEMENT>\n    <INCLUDE_ALL>; \n\nCreates a scheme or an analysis data set."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ANALYSIS=","StatementOptionHelp":{"#cdata":"[Syntax: ANALYSIS=output-data-set] \n          \nNames the output data set that will store analytical data."},"StatementOptionType":"DV"},{"StatementOptionName":"INCLUDE_ALL","StatementOptionHelp":{"#cdata":"Specifies that the scheme is to contain all of the values of the input variable, including \nthose with unique match codes that were not transformed and that did not receive a cluster \nnumber. INCLUDE_ALL is not specified by default."},"StatementOptionType":"S"},{"StatementOptionName":"LOCALE=","StatementOptionHelp":{"#cdata":"[Syntax: LOCALE=locale-name] \n          \n(Optional) Specifies the locale that contains the specified match definition. The value \ncan be a locale name in quotation marks or the name of a variable whose value is a locale \nname or is an expression that evaluates to a locale name."},"StatementOptionType":"V"},{"StatementOptionName":"MATCHDEF=","StatementOptionHelp":{"#cdata":"[Syntax: MATCHDEF=match-definition] \n          \nSpecifies the match definition in the specified locale that is used to establish cluster numbers. \nAlthough you can specify any valid match definition, you are strongly encouraged to use definitions \nwhose names end in (SCHEME BUILD) when using the ENUSA locale. These match definitions yield optimal \nresults in the DQSCHEME procedure, as discussed in About the Scheme Build Match Definitions.\n\nThe value of the MATCHEDF= option is stored in the scheme as a meta option, which provides a \ndefault match definition when the scheme is applied. This meta option is used at apply time only \nwhen SCHEME_LOOKUP=MATCHDEF. The default value that is supplied by this meta option is superseded \nby a match definition that is specified in the APPLY statement or in the DQSCHEMEAPPLY function or \nCALL routine."},"StatementOptionType":"V"},{"StatementOptionName":"MODE=","StatementOptionHelp":{"#cdata":"Specifies a default mode of scheme application. This information is stored in the scheme \nas metadata. The default mode that you specify here can be superseded when the scheme is applied."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"PHRASE","@Value2":"ELEMENT"},"StatementOptionToolTips":{"@ToolTip1":"This default value specifies that the entirety of each value of the input character variable  is compared to the data values in the scheme.","@ToolTip2":"Specifies that each element in each value of the input character variable is compared to the  data values in the scheme."}},{"StatementOptionName":"SCHEME=","StatementOptionHelp":{"#cdata":"[Syntax: SCHEME=scheme-name] \n          \nSpecifies the name of the scheme that will be created. To create a scheme data set \nin Blue Fusion Data format, specify the BFD option in the PROC DQSCHEME statement \n(see DQSCHEME Procedure Syntax), and specify an existing fileref as the value of the \nSCHEME= option. The fileref must reference a fully qualified path with a filename that \nends in .sch.bfd. Lowercase letters are required.\n\nCAUTION:\nIn the z/OS operating environment, specify only schemes using SAS format. \nBFD schemes can be applied but not created in the z/OS operating environment.  \n\nTo create a scheme in SAS format, specify the NOBFD option in the PROC DQSCHEME statement \nand specify a one-level or two-level SAS data set name.\n\nThe SCHEME= option is required if the ANALYSIS= option is not specified."},"StatementOptionType":"V"},{"StatementOptionName":"SCHEME_LOOKUP=","StatementOptionHelp":{"#cdata":"Specifies one of three mutually exclusive methods of applying the scheme to the values of \nthe input character variable."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"EXACT","@Value2":"IGNORE_CASE","@Value3":"USE_MATCHDEF"},"StatementOptionToolTips":{"@ToolTip1":"This default value specifies that the values of the input variable are to be compared to the  DATA values in the scheme without changing the input values in any way.","@ToolTip2":"Specifies that capitalization is to be ignored when input values are compared to the DATA values  in the scheme. Any adjacent blank spaces in the input values are replaced with single blank spaces  before comparison.","@ToolTip3":"Specifies that comparisons are to be made between the match codes of the input values and the  match codes of the DATA values in the scheme. A transformation occurs when the match code of  an input value is identical to the match code of a DATA value in the scheme."}},{"StatementOptionName":"SENSITIVITY=","StatementOptionHelp":{"#cdata":"[Syntax: SENSITIVITY=information-factor] \n          \n(Optional) Determines the amount of information that will be included in the match codes that \nare generated during the creation and perhaps the application of the scheme. Higher-sensitivity \nvalues generate match codes that contain more information, which generally results in fewer matches, \na greater number of clusters, and fewer values in each cluster. Valid values range from 50 to 95. \nThe default value is 85. \n\nThe value of the SENSITIVITY= option is stored in the scheme as a meta option, which provides \na default sensitivity value when the scheme is applied. This meta option is used at apply time \nonly when SCHEME_LOOKUP=MATCHDEF. The default value that is supplied by this meta option is \nsuperseded by a sensitivity value that is specified in the APPLY statement or in the DQSCHEMEAPPLY \nfunction or CALL routine."},"StatementOptionType":"V"},{"StatementOptionName":"VAR=","StatementOptionHelp":{"#cdata":"[Syntax: VAR=variable-name] \n          \nIdentifies the input character variable that is analyzed and transformed. The maximum length \nof input values is 1024 bytes."},"StatementOptionType":"V"}]}},{"StatementName":"APPLY","StatementHelp":{"#cdata":"Syntax: APPLY\n    SCHEME=scheme-name\n    VAR=variable-name\n    <SCHEME_LOOKUP=EXACT | IGNORE_CASE | USE_MATCHDEF>\n    <MATCHDEF=match definition>\n    <SENSITIVITY=complexity-factor>\n    <LOCALE=locale-name>\n    <MODE=PHRASE | ELEMENT>; \n\nApplies a scheme to transform the values of a single variable."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"LOCALE=","StatementOptionHelp":{"#cdata":"[Syntax: LOCALE=locale-name] \n          \nSpecifies the locale that contains the match definition that is specified in the MATCHDEF= option. \n\nNote: This option is valid only when SCHEME_LOOKUP= USE_MATCHDEF.  \n\nIf USE_MATCHDEF is specified and LOCALE= is not specified, the locale that is used is the default \nlocale, which is the first locale in the locale list.\n\nIf you do not specify USE_MATCHDEF, then the locale that is used is the locale that is stored \nin the scheme. The default locale is used if a locale is not stored in the scheme.\n\nThe default locale is the first locale in the locale list."},"StatementOptionType":"V"},{"StatementOptionName":"MATCHDEF=","StatementOptionHelp":{"#cdata":"[Syntax: MATCHDEF=match-definition] \n          \nSpecifies the name of the match definition in the specified locale that will be used \nto create match codes during the application of the scheme. \n\nNote: This option is valid only when SCHEME_LOOKUP= USE_MATCHDEF.  \n\nIf USE_MATCHDEF is specified and the MATCHDEF= option is not specified, the match definition \nthat is used is the one that is stored in the scheme. If USE_MATCHDEF is not specified and if \na match definition is not stored in the scheme, then a value is required for the MATCHDEF= option."},"StatementOptionType":"V"},{"StatementOptionName":"MODE=","StatementOptionHelp":{"#cdata":"Specifies how the scheme is to be applied. The default value is the mode that is stored in \nthe scheme. If no mode is stored in the scheme, then PHRASE is the default mode."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"PHRASE","@Value2":"ELEMENT"},"StatementOptionToolTips":{"@ToolTip1":"Specifies that the entirety of each value of the input character variable is compared to the  data values in the scheme. When SCHEME_LOOKUP=USE_MATCHDEF, the match code for the entire input  value is compared to the match codes that are generated for each DATA value in the scheme.","@ToolTip2":"Specifies that each element in each value of the input character variable is compared to the  DATA values in the scheme. When SCHEME_LOOKUP=USE_MATCHDEF, the match code for each element  is compared to the match codes that are generated for each element in each data value in the  scheme."}},{"StatementOptionName":"SCHEME=","StatementOptionHelp":{"#cdata":"[Syntax: SCHEME=scheme-name] \n          \nIdentifies the scheme to apply to the input data set. In all operating environments \nother than z/OS, schemes using BFD format are identified by specifying a fileref for \na fully-qualified filename that ends in .sch.bfd. In the z/OS operating environment, \nno special naming conventions are required. For schemes with SAS format, specify a \none-level or two-level SAS data set name.\n"},"StatementOptionType":"V"},{"StatementOptionName":"SCHEME_LOOKUP=","StatementOptionHelp":{"#cdata":"Specifies one of three mutually exclusive methods of applying the scheme to the values of \nthe input character variable."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"EXACT","@Value2":"IGNORE_CASE","@Value3":"USE_MATCHDEF"},"StatementOptionToolTips":{"@ToolTip1":"This default value specifies that the values of the input variable are to be compared to the  DATA values in the scheme without changing the input values in any way.","@ToolTip2":"Specifies that capitalization is to be ignored when input values are compared to the DATA  values in the scheme. Any adjacent blank spaces in the input values are replaced with single  blank spaces before comparison.","@ToolTip3":"Specifies that comparisons are to be made between the match codes of the input values and  the match codes of the DATA values in the scheme. A transformation occurs when the match  code of an input value is identical to the match code of a DATA value in the scheme."}},{"StatementOptionName":"SENSITIVITY=","StatementOptionHelp":{"#cdata":"[Syntax: SENSITIVITY=complexity-factor] \n          \nSpecifies the amount of information in the match codes that are created during the application \nof the scheme. With higher sensitivity values, two values must be increasingly similar to create \nthe same match code. At lower sensitivity values, two values can receive the same match code despite \ndissimilarities. \n\nNote: The SENSITIVITY= option is valid only when SCHEME_LOOKUP= USE_MATCHDEF.  \n\nIf USE_MATCHDEF is specified and SENSITIVITY= is not specified, the sensitivity value is 85. \nIf USE_MATCHDEF is not specified, the sensitivity value is the value that is stored in the \nscheme. If USE_MATCHDEF is not specified and if a sensitivity value is not stored in the scheme, \nthe sensitivity value is 85.\n\nValid values for the SENSITIVITY= option range from 50 to 95."},"StatementOptionType":"V"},{"StatementOptionName":"VAR=","StatementOptionHelp":{"#cdata":"[Syntax: VAR=variable-name] \n          \nIdentifies the character variable in the input data set that is to be transformed. \nThe maximum length of input values is 1024 bytes."},"StatementOptionType":"V"}]}},{"StatementName":"CONVERT","StatementHelp":{"#cdata":"Syntax: CONVERT IN=file-specification OUT=file-specification  \n    BFDTOSAS | SASTOBFD; \n\nConverts schemes between SAS and BFD formats. \n\nRequired: All options are required (IN and OUT, BFDTOSAS or SASTOBFD)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"BFDTOSAS","StatementOptionHelp":{"#cdata":"Converts a scheme in Blue Fusion Data format to SAS format."},"StatementOptionType":"S"},{"StatementOptionName":"SASTOBFD","StatementOptionHelp":{"#cdata":"Convert a scheme in SAS format to Blue Fusion Data format."},"StatementOptionType":"S"},{"StatementOptionName":"IN=","StatementOptionHelp":{"#cdata":"[Syntax: IN=file-specification] \n          \nIdentifies the existing scheme that is to be converted. If BFDTOSAS is specified, then the \nvalue must be the name of a fileref that references a fully-qualified path in lowercase that \nends in .sch.bfd. (In the z/OS operating environment, the PDS specification has no special\nnaming requirements.) If SASTOBFD is specified, then the value must be a one-level or two-level\nSAS data set name."},"StatementOptionType":"V"},{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"[Syntax: OUT=file-specification] \n          \nSpecifies the name of the converted scheme. If BFDTOSAS is specified, then the value \nmust be a one-level or two-level SAS data set name. If SASTOBFD is specified, then the \nvalue must be the name of a fileref that references a fully-qualified path in lowercase \nthat ends in .sch.bfd. (In the z/OS operating environment, the PDS specification has no \nspecial naming requirements.)"},"StatementOptionType":"V"}]}}]}}}