{"Procedure":{"Name":"EXPORT","ProductGroup":"BASE","ProcedureHelp":{"#cdata":"Syntax: PROC EXPORT DATA=<libref.>SAS-data-set <(SAS-data-set-options)> \n      OUTFILE=\"filename\" | OUTTABLE=\"tablename\" <DBMS=identifier> <REPLACE><LABEL>;  \n      <data-source-statement(s);>\n      \nThe EXPORT procedure reads data from a SAS data set and writes it to an external data source. \nExternal data sources can include such files as Microsoft Access Database, Excel files, Lotus \nspreadsheets, and delimited external files. In delimited files, a delimiter--such as a blank, \ncomma, or tab--separates columns of data values. \n\nWhen you run PROC EXPORT, it reads the input data set and writes the data to the external data \nsource. PROC EXPORT uses one of these methods to export data:\n\n  o generated DATA step code \n  o generated SAS/ACCESS code \n  o translation engines\n\nYou control the results with options and statements that are specific to the output data source. \nPROC EXPORT generates the specified output file and writes information about the export to the \nSAS log, where you can see the DATA step or the SAS/ACCESS code that PROC EXPORT generates. If a \ntranslation engine is used, then no code is submitted."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=<libref.>SAS-data-set] \n      \nIdentifies the input SAS data set with either a one- or two-level SAS name (library \nand member name)."},"ProcedureOptionType":"RV|DV"},{"ProcedureOptionName":"OUTFILE=|FILE=","ProcedureOptionHelp":{"#cdata":"Syntax: OUTFILE=\"filename\"] \n      \nSpecifies the complete path and filename or a fileref for the output PC file, spreadsheet, \nor delimited external file. If you specify a fileref or if the complete path and filename \ndo not include special characters (such as the backslash in a path), lowercase characters, \nor spaces, you can omit the quotation marks."},"ProcedureOptionType":"RV"},{"ProcedureOptionName":"OUTTABLE=|TABLE=","ProcedureOptionHelp":{"#cdata":"Syntax: OUTTABLE=\"tablename\"]\n      \nSpecifies the table name of the output DBMS table. If the name does not include \nspecial characters (such as question marks), lowercase characters, or spaces, you \ncan omit the quotation marks. Note that the DBMS table name might be case sensitive."},"ProcedureOptionType":"RV"},{"ProcedureOptionName":"DBMS=","ProcedureOptionHelp":{"#cdata":"Specifies the type of data to export. To export a DBMS table, you must specify DBMS= \nby using a valid database identifier. For example, DBMS=ACCESS specifies to export \na table into a Microsoft Access 2000, 2002, 2003, or 2007 database. You do not have \nto specify DBMS= to export PC files, spreadsheets, and delimited external files if \nthe filename that you specify in OUTFILE= contains a valid extension. PROC EXPORT \ncan recognize the type of data if you specify a valid extension. For example, PROC \nEXPORT recognizes the filename ACCOUNTS.WK1 as a Lotus 1-2-3 Release 2 spreadsheet \nand the filename MYDATA.CSV as an external file that contains comma-separated data \nvalues; therefore, a DBMS= specification is not necessary.\n\nTip: When you specify DBMS=XLS for an Excel file, you can read and write Excel spreadsheets under \nUNIX directly, without having to access the PC Files Server."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"CSV","@Value2":"DLM","@Value3":"TAB","@Value4":"ACCESS","@Value5":"ACCESS97","@Value6":"ACCESSCS","@Value7":"DBF","@Value8":"DBFMEMO","@Value9":"DTA","@Value10":"EXCEL","@Value11":"EXCEL4","@Value12":"EXCEL5","@Value13":"EXCELCS","@Value14":"JMP","@Value15":"PARADOX","@Value16":"PCFS","@Value17":"SAV","@Value18":"WK1","@Value19":"WK3","@Value20":"WK4","@Value21":"XLS"},"ProcedureOptionToolTips":{"@ToolTip1":"Comma-separated file [.csv]","@ToolTip2":"Delimited file (default delimiter is a blank) [.*]","@ToolTip3":"Delimited file (tab-delimited values) [.txt]","@ToolTip4":"Microsoft Access 2000, 2002, 2003, or 2007 table (using the LIBNAME statement) [.mdb, .accdb]                                  [Not available for Microsoft Windows 64-Bit Edition.]","@ToolTip5":"Microsoft Access 97 table (using the LIBNAME statement) [.mdb]","@ToolTip6":"Microsoft Access table (using the LIBNAME statement [.mdb, .accdb]","@ToolTip7":"dBASE 5.0, IV, III+, and III files [.dbf]","@ToolTip8":"dBASE 5.0, IV, III+, and III files with memos; FoxPro and Visual FoxPro files with memos [.dbf, .fpt, .dbt","@ToolTip9":"Stata file [.dta]","@ToolTip10":"Excel 97, 2000, 2002, 2003, or 2007 spreadsheet (using the LIBNAME statement) [.xls, .xlsb, .xlsm, .xlsm, .xlsx                                  [Not available for Microsoft Windows 64-Bit Edition.]","@ToolTip11":"Excel 4.0 spreadsheet (using PROC ACCESS) [.xls]","@ToolTip12":"Excel 5.0 or 7.0 (95) spreadsheet (using PROC ACCESS) [.xls]","@ToolTip13":"Excel spreadsheet (using the LIBNAME statement) [.xls, .xlsb]","@ToolTip14":"PCFS [.jmp]","@ToolTip15":"Paradox .DB files [.db]","@ToolTip16":"Files on PC Files Server [.*]","@ToolTip17":"SPSS file [.sav]","@ToolTip18":"Lotus1-2-3 Release 2 spreadsheet [.wk1]","@ToolTip19":"Lotus 1-2-3 Release 3 spreadsheet [.wk3]","@ToolTip20":"Lotus 1-2-3 Release 4 or 5 spreadsheet [.wk4]","@ToolTip21":"Excel 5.0, 95, 97, 2000, 2002, or 2003 spreadsheet (using file formats) [.xls]"}},{"ProcedureOptionName":"REPLACE","ProcedureOptionHelp":{"#cdata":"Overwrites an existing file. Note that for a Microsoft Access database or an Excel \nworkbook, REPLACE overwrites the target table or spreadsheet. If you do not specify \nREPLACE, PROC EXPORT does not overwrite an existing file."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LABEL|DBLABEL","ProcedureOptionHelp":{"#cdata":"Specifies a variable label name. SAS writes these to the exported table as column names. \nIf the label names do not already exist, SAS writes them to the exported table."},"ProcedureOptionType":"S"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"DELIMITER=","StatementHelp":{"#cdata":"Syntax: DELIMITER='char' | 'nn'x;\n      \nSpecifies the delimiter to separate columns of data in the output file. \nYou can specify the delimiter as a single character or as a hexadecimal value. \nFor example, if you want columns of data to be separated by an ampersand, specify DELIMITER='&'. \nIf you do not specify DELIMITER=, PROC EXPORT assumes that the delimiter is a blank."},"StatementOptions":null},{"StatementName":"DBDSOPTS=","StatementHelp":{"#cdata":"Syntax: DBDSOPTS='any data set options that are valid for the Excel LIBNAME engine' \n      \nEnables you to take advantage of useful data set options for the LIBNAME engine \nsuch as READBUFF=, INSERTBUFF=, DBTYPE=, DROP=, FIRSTOBS=, and OBS=. These options \nare for advanced users who are familiar with the PC files LIBNAME engine.\n\nYou must surround the options in single quotation marks. Here is an example: \nDBDSOPTS='FIRSTOBS=10 READBUFF=25';.\n\nIf the option string that you are specifying contains single quotations marks, use \ndouble quotation marks around it in your statement. Here is an example: \nDBDSOPTS=\"DBTYPE=(BilledTo='CHAR(8)')\"; ."},"StatementOptions":null},{"StatementName":"NEWFILE=","StatementHelp":{"#cdata":"Syntax: NEWFILE=YES | NO; (available only for DBMS=EXCEL or DBMS=XLS) \n      \nWhen exporting a SAS data set to an existing Excel file, specifies whether to replace \nthe previous Excel file. This statement is valid only when DBMS=EXCEL is used.\n\nYES specifies that PROC EXPORT deletes the specified Excel file, if it exists, and loads \nthe SAS data set to a sheet in the newly created Excel file.\n \nNO specifies that PROC EXPORT loads the SAS data set to a sheet and append it to the existing \nExcel file. If the specified Excel file does not already exist, it is loaded to a sheet in the \nnewly created Excel file."},"StatementOptions":null},{"StatementName":"PORT=|PORT_NUMBER","StatementHelp":{"#cdata":"Syntax: PORT= port-number; (available only for Client Server Model) \n      \nSpecifies the number of the port that is listening on the PC Files Server. The valid \nvalue is between 1 and 65535. This port or service name displays on the PC Files Server \ncontrol panel screen when it is started on the PC. This PORT= statement and the SERVICE= \nstatement should not be used in the same procedure. \n\nThe default value is 8621. Alias: PORT_NUMBER=."},"StatementOptions":null},{"StatementName":"SERVER=|SERVER_NAME=","StatementHelp":{"#cdata":"Syntax: SERVER= \"PC-server-name\"; (available only for Client Server Model) \n\nSpecifies the name of the PC Files Server. You must bring up the listener on the PC Files Server \nbefore you can establish a connection to it. You can configure the service name, port number, \nmaximum number of connections allowed, and use of data encryption on your PC Files Server. \nThis is a required statement."},"StatementOptions":null},{"StatementName":"SERVICE=|SERVICE_NAME=","StatementHelp":{"#cdata":"Syntax: SERVICE= \"service-name\";.(available only for Client Server Model) \n\nSpecifies the service name that is defined on your service file for your client and \nserver machines. This port number or service name is displayed on the PC Files Server \ncontrol panel screen when it is started on the PC. This statement and the PORT= statement \nshould not be used in the same procedure. The service name needs to be defined on your \nUNIX machine and your PC Files Server."},"StatementOptions":null},{"StatementName":"SHEET=","StatementHelp":{"#cdata":"Syntax: SHEET=\"sheet-name\" |\"sheetname\" ; \n      \nIdentifies a particular spreadsheet in an Excel workbook. If the \"sheet-name\" contains a special \ncharacter such as space in PROC EXPORT, SAS converts it into an underscore. For example, a sheet \nname \"Employee Information\" becomes ''Employee_Information\".\n\nIf your sheet name contains special characters, use PROC DATASETS to list the available data set \nnames. If the sheet name shown contains single quotes, keep the single quotes as part of the sheet \nname in order to be able to access the sheet. For example, specify SHEET=\"'My#Test'\"; .\n\nRestriction:  Avoid sheet-names that look like cell references, which have <1-3 characters> plus \n1 or more digits. For example, A1, IV65536, TRY123, XFD1048576. \n\nIf both the range name and the sheet name are missing, PROC IMPORT reads the first spreadsheet \nin the workbook. If you do not specify this statement, PROC IMPORT reads the first spreadsheet \nthat was physically saved in the Excel file. To make sure that PROC IMPORT reads the data that \nyou want, identify the spreadsheet by specifying the range name (RANGE=) or the sheet name (SHEET=). \nIt is recommended that you use RANGE= without SHEET= in PROC IMPORT. Use SHEET= only when you want \nto import the entire spreadsheet. If the sheet name contains special characters, you can use RANGE= \ninstead of SHEET= to import data. \n\nIf you do not specify this statement, PROC EXPORT writes the spreadsheet name as the SAS data set name.\n\nExcel supports spreadsheet names up to 31 characters. SAS supports data set names up to 32 characters."},"StatementOptions":null},{"StatementName":"VERSION=","StatementHelp":{"#cdata":"Syntax: VERSION='file-version';.(available only for Client Server Model) \n      \nSpecifies the version of the file that you want to create if the file does not exist on your PC Files \nServer yet. Valid values are 2007, 2003, 2002, 2000, 97, 95, and 5. The default value is 97 for XLS \nfiles. Always surround the version value with single quotation marks. If the file already exists on \nthe PC Files Server, this statement is ignored."},"StatementOptions":null},{"StatementName":"PUTNAMES=","StatementHelp":{"#cdata":"Syntax: PUTNAMES=YES | NO; (available only for backward compatibility;) \n\nDetermines whether to write SAS variable names to the first record of the exported data file. \nIf you specify the LABEL option, SAS variable labels are written instead of variable names.\n\nYES specifies that PROC EXPORT is to write SAS variable names to the first record and write the \nfirst observation data to the second record of the exported data file.\n \nNO specifies that PROC EXPORT is to write the first observation data to the exported data file."},"StatementOptions":null},{"StatementName":"SSPI=","StatementHelp":{"#cdata":"Syntax: SSPI=YES|NO  \n\nEnables PC Files Server to allow Integrated Windows Authentication. This is a mechanism \nfor Windows client and server to exchange credentials.\n\nDefault: NO \n\nNote: SSPI can also be enabled by specifying the -SSPI option on the SAS command line. \n\nRestriction: Valid on Windows 64-Bit only."},"StatementOptions":null},{"StatementName":"SERVERUSER=|SERVERUID=","StatementHelp":{"#cdata":"Syntax: SERVERUSER=server-user-name  \n\nSpecifies a domain and User ID that is valid for the PC running PC Files Server. Always \nenclose the value in quotes, otherwise the backslash can be misinterpreted by the SAS parser.\n\nNote: If you are not on a domain, omit the domain name and the backslash. \n\nNote: Use the USER= option for database User IDs."},"StatementOptions":null},{"StatementName":"SERVERPASS=|SERVERPASSWORD=|SERVERPW=|SERVERPWD=","StatementHelp":{"#cdata":"Syntax: SERVERPASS=server-user-password\n\nSpecifies the password for the User ID given. If the account has no password, omit \nthis option. Always enclose the value in quotes, to preserve the case of the password."},"StatementOptions":null},{"StatementName":"MEMOSIZE=|DBMAX_TEXT=","StatementHelp":{"#cdata":"Syntax: MEMOSIZE=1 to 32767  \n\nSpecifies the maximum variable length in SAS that is allowed while importing data \nfrom memo columns of an Access database table. Any memo data in an Access database \ntables whose length exceeds 32767 is truncated when it is imported into SAS. \n\nRestriction: If the maximum length that SCANMEMO= option is greater than the value of \nthe MEMOSIZE= option, the smaller value in the MEMOSIZE= option is applied as the SAS \nvariable width."},"StatementOptions":null},{"StatementName":"DBPASSWORD=|DBPWD=|DBPW=","StatementHelp":{"#cdata":"Syntax: DBPASSWORD=database-file-password  \n\nEnables you to access a file if database-level security is set in the .mdb file. \nA database password is case sensitive. You can define a database password instead \nof user-level security."},"StatementOptions":null},{"StatementName":"DATABASE=","StatementHelp":{"#cdata":"Syntax: DATABASE=database ;\n\nSpecifies the complete path and filename of the Access database file that contains \nthe specified DBMS table. If the database name does not contain lowercase characters, \nspecial characters, or national characters ($, #, or @), you can omit the quotation marks.\n\nNote: SAS does not generate a default value, but you can configure one in the DBMS client \nsoftware."},"StatementOptions":null}]}}}