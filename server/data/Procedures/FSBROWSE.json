{"Procedure":{"Name":"FSBROWSE","ProductGroup":"SAS/FSP","ProcedureHelp":{"#cdata":"Syntax: PROC FSBROWSE <DATA=data-set>  <KEYS=keys-entry>  \n    <SCREEN=SAS-catalog <.screen-entry>> | <display-options>  \n    <procedure-options>  \n    <letter-options>;  \n    \n    FORMAT variable-list format <... variable-list-n format-n>;  \n    LABEL variable='label' <... variable-n='label-n'>;  \n    VAR variable <... variable-n>;  \n    WHERE expression;     \n\nThe FSBROWSE procedure opens the FSBROWSE window, from which you can browse the contents \nof a SAS data set one observation at a time. The FSBROWSE procedure is identical to the \nFSEDIT procedure, except that the FSBROWSE window does not allow you to make changes to \nthe displayed data set.\n\nThe procedure provides the tools for building applications that display data. An FSBROWSE \napplication provides a custom display in which you can specify how values are presented and \nalso add descriptive text.\n\nThe FSBROWSE procedure also allows you to call the FSLETTER procedure from within an FSBROWSE \nsession. This enables you to create form letters or reports that are personalized with information \nfrom the observations that are displayed by the FSBROWSE procedure."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"[Syntax: DATA=data-set <(data-set-options)>] \n      \nNames an existing SAS data set to be edited. By default, the FSEDIT procedure uses \nthe most recently created data set.\n\nIf you specify both the DATA= option and the NEW= option in the same PROC FSEDIT \nstatement, the DATA= option is ignored.\n\nYou can add a list of data set options following the data set name. The list must \nbe enclosed in parentheses.\n\nNote: The FSEDIT procedure ignores the data set options FIRSTOBS= and OBS=. \nAll other data set options are valid."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"DEBUG","ProcedureOptionHelp":{"#cdata":"Turns on the SAS Component Language (SCL) source-level debugger, which provides step-by-step \nassistance in resolving errors in SCL programs. This option is useful when you are creating \nor modifying an application that includes an SCL program."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"KEYS=","ProcedureOptionHelp":{"#cdata":"[Syntax: KEYS=keys-entry] \n      \nNames the KEYS entry to be associated with the FSEDIT session. The KEYS entry contains \nfunction key assignments for the FSEDIT window. \n\nNote: The KEYS= option is ignored when the SCREEN= option is also used in the PROC FSEDIT \nstatement, unless a new SCREEN entry is being created. \n\nThe keys-entry value must be a one-level name."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LABEL","ProcedureOptionHelp":{"#cdata":"(display option; ignored when an existing SCREEN entry is specified with the SCREEN= option) \n\nSpecifies that variable labels, rather than variable names, are used to identify variable \nfields in the FSEDIT window. If a variable has no associated label, the variable name is \nused to identify that variable's field."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LETTER=","ProcedureOptionHelp":{"#cdata":"[Syntax: LETTER=SAS-catalog<.letter-entry>] \n      \n(letter option)\n\nNames a SAS catalog that contains LETTER entries, or produces copies of a specified document \nfor all observations in the data set. If the specified catalog does not exist, it is created."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"MODIFY|MOD","ProcedureOptionHelp":{"#cdata":"Opens the FSEDIT Menu window before opening the FSEDIT window. From the FSEDIT Menu window, \nyou can perform tasks that modify the appearance and behavior of the FSEDIT window.\n\nThe MODIFY option is ignored (and a warning message is generated) if the PROC FSEDIT \nstatement also includes the SCREEN= option specifying an existing SCREEN entry that \nis protected by a password."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NC=","ProcedureOptionHelp":{"#cdata":"[Syntax: NC=n] \n      \n(display option; ignored when an existing SCREEN entry is specified with the SCREEN= option)\n\nspecifies the width in columns of the FSEDIT window. By default, the FSEDIT window occupies \nthe maximum number of columns that is supported by the output device. The value of n must be \nat least 35. If you specify a value that exceeds the maximum number of columns available on \nyour device, the procedure sets the window width to the maximum available width; no warning \nmessage is generated."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NOBORDER","ProcedureOptionHelp":{"#cdata":"Suppresses the sides and bottom of the FSEDIT window's border in a character-based display \nenvironment.\n\nNote: This option is ignored in graphical windowing environments.  \n\nWhen this option is used in a supported display environment, text and fields can appear in \nthe columns and row that the border normally occupies.\n\nWhen the NOBORDER option is used in conjunction with the SCREEN= option, the window size \nthat is specified in the SCREEN entry is ignored. The FSEDIT window always occupies the \nmaximum possible number of rows and columns when the NOBORDER option is specified."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NR=","ProcedureOptionHelp":{"#cdata":"[Syntax: NR=n] \n      \n(display option)\n\nspecifies the height in rows of the FSEDIT window. By default, the FSEDIT window occupies \nthe maximum number of rows that is supported by the output device. The value of n must be \nat least 10. If you specify a value that exceeds the maximum number of rows available on \nyour device, the procedure sets the window height to the maximum available height; no warning \nmessage is generated.\n\nNote: When the NR= option is used in conjunction with the SCREEN= option, the window size \nthat is specified in the NR= option overrides the number of rows that is specified in the \nSCREEN entry."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OBS=","ProcedureOptionHelp":{"#cdata":"[Syntax: OBS=n] \n      \nSpecifies the number of the observation that is displayed when the FSEDIT window is opened. \nBy default, the first observation in the data set (observation 1) is initially displayed. If \nthe n value is greater than the number of observations in the input data set, then the last \nobservation in the data set is displayed when the FSEDIT window is opened.\n\nThis option is not valid if a WHERE statement is used with the PROC FSEDIT statement."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"PRINTALL","ProcedureOptionHelp":{"#cdata":"Prints a copy of the FSEDIT display for each observation in the data set. (If a WHERE statement \nis used in conjunction with the PROC FSEDIT statement, then only observations that meet the \nspecified criteria are printed.) If the SCREEN= option is also specified, the custom display \nformat is used.\n\nThe procedure output is written to the location that has been designated for SAS System output. \nIf you are using the SAS windowing environment, the output is written to the OUTPUT window.\n\nWhen you use the PRINTALL option, the procedure does not open an FSEDIT window. A pause occurs \nwhile the output is created; then the procedure terminates."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PRINTFILE=|PRTFILE=|PRINT=|DDNAME=","ProcedureOptionHelp":{"#cdata":"[Syntax: PRINTFILE=|PRTFILE=|PRINT=|DDNAME= fileref] \n      \n(letter option)\n\nNames an external file to which documents that are produced during the FSEDIT session \nare written. By default, output is sent to the output destination that is specified in \nthe FORM entry that is associated with the LETTER entry. When this option is used, output \nis written to the specified file instead.\n\nYou must use a FILENAME statement to assign the fileref to an external file before \nsubmitting a PROC FSEDIT statement that contains this option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SCREEN=","ProcedureOptionHelp":{"#cdata":"[Syntax: SCREEN=SAS-catalog<.screen-entry>] \n      \nNames a catalog or a specific SCREEN entry that contains information for a custom FSEDIT \napplication, or in which the procedure can store custom features that are defined during \nthe current session. If the specified catalog does not already exist, it is created.\n\nThe general form of the SAS-catalog value is \n\n  <libref.>catalog-name  \n\nIf you specify only a one-level name, it is treated as a catalog name in the default library, \nWORK. You must use a two-level catalog name if you want to specify a SCREEN entry name.\n\nThe general form of the screen-entry value is \n\n  entry-name<.SCREEN>  \n\nIf you specify a two-level screen name that has anything other than SCREEN as the second level \n(entry type), the specified entry type is ignored; SCREEN is used instead."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"SEND=","ProcedureOptionHelp":{"#cdata":"[Syntax: SEND=letter-entry] \n      \nGenerates a copy of the specified document for each observation in the input data set. \n(If a WHERE statement is used in conjunction with the PROC FSEDIT statement, then letters \nare generated only for observations that meet the specified criteria.) This option is valid \nonly when the LETTER= option is also used.\n\nThe letter-entry value must be the name of an existing LETTER entry in the catalog that is \nidentified in the LETTER= option. The value should be a one-level name; the entry type LETTER \nis assumed. The procedure terminates with an error message if the specified entry does not exist.\n\nWhen you specify the SEND= option, the procedure does not open an FSEDIT window. A pause occurs \nwhile the copies of the document are produced; then the procedure terminates."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"STCOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: STCOL=n] \n      \n(display option; ignored when an existing SCREEN entry is specified with the SCREEN= option)\n\nSpecifies the display column in which the leftmost column of the FSEDIT window is positioned. \nBy default, the FSEDIT window begins at the leftmost column of the display (STCOL=1)."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"STROW=","ProcedureOptionHelp":{"#cdata":"[Syntax: STROW=n] \n      \n(display option; ignored when an existing SCREEN entry is specified with the SCREEN= option)\n\nspecifies the display row in which the top row of the FSEDIT window is positioned. By default, \nthe window begins at the top row of the display (STROW=1)."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"TAB=","ProcedureOptionHelp":{"#cdata":"[Syntax: TAB=n] \n      \n(display option; ignored when an existing SCREEN entry is specified with the SCREEN= option)\n\nSpecifies the interval that is used for column spacing when more than one column is necessary \nto display variables in the default screen format."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"VAR","StatementHelp":{"#cdata":"Syntax: VAR variable <... variable-n>; \n      \nwhere variable is the name of a variable from the input data set. \n      \nSelects which variables to display and what order to display then in."},"StatementOptions":null},{"StatementName":"WHERE","StatementHelp":{"#cdata":"Syntax: WHERE expression; \n      \nwhere expression is any valid WHERE expression that includes one or more of the variables \nin the input data set. \n      \nDefines criteria that observations must meet in order to be displayed for editing. \n\nBy default, the FSEDIT procedure displays all of the observations in the data set. The WHERE \nstatement is useful when you want to process only a subset of the observations in a SAS data \nset. For example, to process only observations for which the value of the variable YEAR is \nless than 5, follow the PROC FSEDIT statement with this statement: \n\n  where year<5;\n\nThe FSEDIT procedure displays only observations that meet the specified condition(s). \nObservations that do not satisfy the condition(s) are not shown and cannot be edited."},"StatementOptions":null}]}}}