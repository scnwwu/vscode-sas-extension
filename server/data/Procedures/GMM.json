{"Procedure":{"Name":"GMM","ProductGroup":"CAS|VIYA|DATA MINING AND MACHINE LEARNING","ProcedureHelp":{"#cdata":"Syntax: PROC GMM <options>;\n    DISPLAY <table-list> </options>;\n    DISPLAYOUT <table-spec-list> </options>;\n    INPUT variables;\n    SCORE OUT=CAS-libref.data-table <options>;\n    SAVESTATE RSTORE=CAS-libref.data-table <option>;\n    \nThe GMM procedure performs clustering\u2014a common step in data exploration\u2014on quantitative data in SAS Viya.\n\nYou can use this procedure to read and write data in distributed form, as well as to perform clustering \nand scoring in parallel by making full use of multicore computers or a distributed computing environment.\n\nPROC GMM performs cluster analysis by using the Gaussian mixture model (GMM), which is a probabilistic \nmodel that assumes that all the data points are generated from a mixture of Gaussian distributions. This \nmodel can be regarded as generalizing k-means clustering to incorporate information about the covariance \nstructure of the data as well as the centers of the latent Gaussians."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"ALPHA=","ProcedureOptionHelp":{"#cdata":"Syntax: ALPHA=number\n      \nSpecifies the mass parameter of the Dirichlet process. The value of number must be a positive \nreal number. When you specify a larger number, the Dirichlet process tends to discover more \nclusters in the input data. By default, ALPHA=1."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CLUSTERCOVOUT=","ProcedureOptionHelp":{"#cdata":"Syntax: CLUSTERCOVOUT=CAS-libref.data-table\n      \nCreates the output data table that contains the summary of the clustering results. CAS-libref.data-table \nis a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies \nthe name of the output data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CLUSTERSUMOUT=","ProcedureOptionHelp":{"#cdata":"Syntax: CLUSTERSUMOUT=CAS-libref.data-table\n      \nCreates the output data table that contains the summary of the clustering results. CAS-libref.data-table \nis a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies \nthe name of the output data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=CAS-libref.data-table \n\nNames the input data table for PROC GMM to use. The default is the most recently created data \ntable. CAS-libref.data-table is a two-level name, where \n\nCAS-libref\n  refers to a collection of information that is defined in the LIBNAME statement and includes \n  the caslib, which includes a path to the data, and a session identifier, which defaults to \n  the active session but which can be explicitly defined in the LIBNAME statement.\n  \ndata-table\n  specifies the name of the input data table."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"INFERENCE=","ProcedureOptionHelp":{"#cdata":"Syntax: INFERENCE=VB <suboptions>\n      \nPerforms the inference by using the variational Bayesian (VB) algorithm.\n\nYou can specify one or more of the following suboptions:\n\nCOVARIANCE=keyword\n  specifies the type of covariance matrices in the Gaussian mixture model. You can specify the following keywords:\n  DIAGONAL\n    specifies the covariance matrices of the Gaussian distributions as diagonal matrices.\n  FULL\n    specifies the covariance matrices of the Gaussian distributions as full matrices.\n  By default, COVARIANCE=DIAGONAL.\n\nMAXVBITER=number\n  specifies the maximum number of VB iterations. By default, MAXVBITER=100.\nTHRESHOLD=number\n  specifies the threshold to define the convergence of the VB algorithm. By default, THRESHOLD=0.01."},"ProcedureOptionType":"V","SubOptionsKeywords":"COVARIANCE=|MAXVBITER=|THRESHOLD="},{"ProcedureOptionName":"MAXCLUSTERS=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXCLUSTERS=number\n      \nSpecifies the maximum number of clusters that PROC GMM searches to find the best number of clusters \nby using the Dirichlet process. By default, MAXCLUSTERS=100."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NTHREADS=","ProcedureOptionHelp":{"#cdata":"Syntax: NTHREADS=number-of-threads\n      \nSpecifies the number of threads to use for the computation. The default value is the number \nof CPUs available in the machine."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SEED=","ProcedureOptionHelp":{"#cdata":"Syntax: SEED=number\n      \nSpecifies an integer to use to start the pseudorandom number generator. If you do not specify \na seed or if you specify a value less than or equal to zero, the seed is generated by reading \nthe time of day from the computer\u2019s clock."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"DISPLAY","StatementHelp":{"#cdata":"Syntax: DISPLAY <table-list> </ options>;\n      \nThe DISPLAY statement enables you to specify a list of display tables to display or exclude. This statement \nis similar to the ODS SELECT, ODS EXCLUDE, and ODS TRACE statements. However, the DISPLAY statement can improve \nperformance when a large number of tables could be generated (such as in BY-group processing). The procedure \nprocesses the DISPLAY statement on a CAS server and thus sends only a subset of ODS tables to the SAS client. \nBecause ODS statements are processed on a SAS client, all the display tables generated are first sent to the \nclient and then the client creates a subset. If both DISPLAY and ODS statements are used together, the DISPLAY \nstatement takes precedence over the ODS statements."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"CASESENSITIVE","StatementOptionHelp":{"#cdata":"Performs a case-sensitive comparison of table names in the table-list to display table names when \ntables are subsetted for display. To preserve case, you must enclose table names in the table-list \nin quotation marks."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDE","StatementOptionHelp":{"#cdata":"Displays all display tables except those specified in the table-list."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDEALL","StatementOptionHelp":{"#cdata":"Suppresses display of all tables. This option takes precedence over the other options."},"StatementOptionType":"S"},{"StatementOptionName":"TRACE","StatementOptionHelp":{"#cdata":"Displays the display table names, labels, and paths."},"StatementOptionType":"S"}]}},{"StatementName":"DISPLAYOUT","StatementHelp":{"#cdata":"Syntax: DISPLAYOUT table-spec-list < / options > ;\n      \nThe DISPLAYOUT statement enables you to create CAS output tables from your displayed output. This\nstatement is similar to the ODS OUTPUT statement.\n\nThe table-spec-list specifies a list of CAS output tables to create. Each entry in the list has either a key or a\nkey=value format:\n\n  key=value specifies key as the ODS table name, path, or partial pathname, and specifies value as the\n    CAS output table name.\n  key specifies key as the ODS table name and also as the CAS output table name.\n  \nTable names and partial pathnames are discussed under the DISPLAY statement. The DISPLAYOUT\nstatement does not support regular expressions."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"INCLUDEALL","StatementOptionHelp":{"#cdata":"Creates output CAS tables for all display tables. The name of the created output CAS table is the same \nas the corresponding display table name. If you specify this option, the table-spec-list specification \nis ignored."},"StatementOptionType":"S"},{"StatementOptionName":"NOREPLACE","StatementOptionHelp":{"#cdata":"Does not replace an existing CAS output table of the same name."},"StatementOptionType":"S"},{"StatementOptionName":"REPEATED","StatementOptionHelp":{"#cdata":"Replicates all CAS output tables on all nodes."},"StatementOptionType":"S"}]}},{"StatementName":"INPUT","StatementHelp":{"#cdata":"Syntax: INPUT variables;\n\nThe INPUT statement specifies the names of the variables to use in clustering. The GMM procedure \nuses only interval input variables for its clustering. Any nominal variables that you specify in \nthe INPUT statement are ignored.\n\nAny input interval variable that has a standard deviation of zero indicates a constant variable \n(column) in the input data table. Such constant variables do not contribute to the clustering and \nare ignored."},"StatementOptions":null},{"StatementName":"SAVESTATE","StatementHelp":{"#cdata":"Syntax: SAVESTATE RSTORE=CAS-libref.data-table;  \n      \nThe SAVESTATE statement creates an analytic store for the model and saves it as a binary object \nin a data table. You can use the analytic store in the ASTORE procedure to score new data."},"StatementOptions":{"StatementOption":{"StatementOptionName":"RSTORE=","StatementOptionHelp":{"#cdata":"Syntax: RSTORE=CAS-libref.data-table \n          \nSpecifies a data table in which to save the analytic store for the model. CAS-libref.data-table \nis a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table \nspecifies the name of the output data table."},"StatementOptionType":"V"}}},{"StatementName":"SCORE|OUTPUT","StatementHelp":{"#cdata":"Syntax: OUTPUT OUT=CAS-libref.data-table < options > ;\n      \nThe SCORE statement writes the cluster membership information of each observation to the output \ndata table that is specified in the OUT= option. This information includes the variables that are \nspecified in the COPYVARS= option, the predicted cluster scores, and the probability distributions \nover the discovered clusters. The probability value can be interpreted as the probability of that \nobservation being a member of that cluster. This information enables you to use the GMM procedure \nas a soft-clustering technique."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"Syntax: OUT=CAS-libref.data-table\n          \nNames the output data table for PROC GMM to use. You must specify this option before any other options.\n\nCAS-libref.data-table is a two-level name,\nwhere\n\n  CAS-libref refers to a collection of information that is defined in the LIBNAME statement and\n    includes the caslib, which includes a path to where the data table is to be stored, and\n    a session identifier, which defaults to the active session but which can be explicitly\n    defined in the LIBNAME statement. \n    \n  data-table specifies the name of the output data table."},"StatementOptionType":"V"},{"StatementOptionName":"COPYVAR=|COPYVARS=","StatementOptionHelp":{"#cdata":"Syntax: COPYVAR=variable | COPYVARS=(variables) \n          \nLists one or more variables from the input data table to be copied to the scored output data table,\nprovided that the output data table produces one or more records per input observation. By default, \nthe GMM procedure does not transfer any variables from the input data table to the output data table. \nThe COPYVARS= option accepts numeric and character variables. You can also use COPYVARS=(_ALL_) to include all the input variables."},"StatementOptionType":"V"}]}}]}}}