{"Procedure":{"Name":"GROOVY","ProductGroup":"BASE","ProcedureHelp":{"#cdata":"Syntax: PROC GROOVY <classpath options>; \n  ADD classpath options; \n  EVALUATE <(LOAD | PARSEONLY | NORUN)> \u201cGroovy statement string\u201d <arguments>; \n  EXECUTE <(LOAD | PARSEONLY | NORUN)> Groovy file name | fileref <arguments>; \n  SUBMIT <(LOAD | PARSEONLY | NORUN)> <arguments>; \n  Groovy statements\n  ENDSUBMIT;\n  CLEAR;\nQUIT;\n\nGroovy is a dynamic language that runs on the Java Virtual Machine (JVM). PROC GROOVY \nenables SAS code to execute Groovy code on the JVM. PROC GROOVY can run Groovy statements \nthat are written as part of your SAS code, and it can run statements that are in files that \nyou specify with PROC GROOVY commands. It can parse Groovy statements into Groovy Class \nobjects, and run these objects or make them available to other PROC GROOVY statements or \nJava DATA Step Objects. You can also use PROC GROOVY to update your CLASSPATH environment \nvariable with additional CLASSPATH strings or filerefs to jar files. \n\nNote: \nGroovy code that is submitted with PROC GROOVY runs as the process owner, and has the same \naccess to resources (file system, network, and so on) as any process owner. Groovy code \naccess to resources can cause problems when SAS code is running inside multiuser servers \nlike the Stored Process Server. To give administrators some control over this functionality, \nPROC GROOVY runs only if the NOXCMD option is turned off. All SAS servers are shipped with \nthe NOXCMD option turned on. \n\nThe use of a percent character (%) in the first byte of the text that is output by Java to \nthe SAS log is reserved by SAS. If you need to output a percent character in the first byte \nof a Java text line, then you must immediately follow it with another percent character (%%)."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"CLASSPATH=|PATH=","ProcedureOptionHelp":{"#cdata":"[Syntax: CLASSPATH= | PATH=] \n      \nSpecifies a quoted CLASSPATH string or a fileref to a specific jar file that \nis to be added to the current classpath. This path is searched after the paths \nthat are in the user\u2019s CLASSPATH environment variable."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SASJAR=","ProcedureOptionHelp":{"#cdata":"[Syntax: SASJAR= <version=> | <range=>] \n      \nSpecifies a quoted string that identifies a jar in the Versioned Jar Repository (VJR) \nthat should be added to the current classpath. The VERSION and RANGE values are optional. \nRANGE takes precedence over VERSION, as in the following example: \n\n  ADD SASJAR=\"sas.core\";\n  ADD SASJAR=\"sas.core\" version=\"903000.9.0.20100810190000_v930\";\n  ADD SASJAR=\"sas.core\" range=\"[0,909000]\";\n  \nNote: SAS jars do not have a source compatibility guarantee across versions of SAS. \nFuture versions of this jar can change without notice. To ensure continued functionality, \ncontact SAS Technical Support."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"ADD","StatementHelp":{"#cdata":"Syntax: ADD classpath options ; \n      \nThe ADD command appends the given classpath to the current CLASSPATH environment variable. \n\nYou must specify at least one CLASSPATH or one SASJAR. You can specify multiple CLASSPATHs \nor SASJARs."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"CLASSPATH=|PATH=","StatementOptionHelp":{"#cdata":"Syntax: CLASSPATH= | PATH= \n          \nSpecifies a quoted CLASSPATH string or a fileref to a specific jar file that \nis to be added to the current classpath. This path is searched after the paths \nthat are in the user\u2019s CLASSPATH environment variable."},"StatementOptionType":"V"},{"StatementOptionName":"SASJAR=","StatementOptionHelp":{"#cdata":"Syntax: SASJAR=<version=> | <range=> \n\nSpecifies a quoted string that identifies a jar in the Versioned Jar Repository (VJR) \nthat should be added to the current classpath. The VERSION and RANGE values are optional. \nRANGE takes precedence over VERSION, as in the following example: \n\n  ADD SASJAR=\"sas.core\";\n  ADD SASJAR=\"sas.core\" version=\"903000.9.0.20100810190000_v930\";\n  ADD SASJAR=\"sas.core\" range=\"[0,909000]\";\n\nNote: SAS jars do not have a source compatibility guarantee across versions of SAS. \nFuture versions of this jar can change without notice. To ensure continued functionality, \ncontact SAS Technical Support."},"StatementOptionType":"V"}]}},{"StatementName":"EVALUATE|EVAL","StatementHelp":{"#cdata":"Syntax: EVALUATE <(LOAD | PARSEONLY | NORUN)> \"Groovy statement string\" <arguments>; \n\nThe EVALUATE command parses the Groovy statement that is provided in the quoted string \ninto a groovy.lang.Script object and calls the Run method on the Script. If one of the \nLOAD, PARSEONLY, or NORUN options is present, then this command parses the Groovy statement \ninto a Class object but does not run it. Any classes that are defined by the Groovy code \nare then available for use by PROC GROOVY statements or by Java DATA Step Objects. \n\nOptional Arguments:\nLOAD | PARSEONLY | NORUN \n  parses the Groovy statement into a groovy.lang.Script object, but does not run it. \n  The arguments are aliases for each other. \n\narguments \n  specifies arguments that are passed to the code that is being evaluated."},"StatementOptions":{"StatementOption":{"StatementOptionName":"(LOAD)|(PARSEONLY)|(NORUN)","StatementOptionHelp":{"#cdata":"Parses the Groovy statement into a groovy.lang.Script object, but does not run it."},"StatementOptionType":"S"}}},{"StatementName":"EXECUTE|EXEC","StatementHelp":{"#cdata":"Syntax: EXECUTE <(LOAD | PARSEONLY | NORUN)> Groovy file name | fileref <arguments>; \n\nThe EXECUTE command reads the contents of the file that is specified as either \na quoted string path or as a fileref. The contents are then parsed into a \ngroovy.lang.Script object, and the Run method is called on the Script. If one \nof the LOAD, PARSEONLY, or NORUN options is present, then this command parses \nthe file contents into a Class object but does not run it. Any classes that are \ndefined by the Groovy code are then available for use by PROC GROOVY statements \nor by Java DATA Step Objects. \n \nOptional Arguments:\nLOAD | PARSEONLY | NORUN \n  parses the Groovy statement in the specified Groovy file or fileref into a \n  groovy.lang.Script object, but does not run it. The arguments are aliases \n  for each other. \n\narguments \nspecifies arguments that are passed to the code that is being executed."},"StatementOptions":{"StatementOption":{"StatementOptionName":"(LOAD)|(PARSEONLY)|(NORUN)","StatementOptionHelp":{"#cdata":"Parses the Groovy statement into a groovy.lang.Script object, but does not run it."},"StatementOptionType":"S"}}},{"StatementName":"SUBMIT","StatementHelp":{"#cdata":"Syntax: SUBMIT <(LOAD | PARSEONLY | NORUN)> <arguments>; \n  Groovy statements\nENDSUBMIT;  \n\nThe SUBMIT command parses the Groovy statements that are between the SUBMIT and ENDSUBMIT \ncommands into a groovy.lang.Script object and calls the Run method on the Script. If one \nof the LOAD, PARSEONLY, or NORUN options is present, then this command parses the Groovy \nstatements into a Class object but does not run it. Any classes that are defined by the \nGroovy code are then available for use by PROC GROOVY statements or by Java DATA Step Objects. \n\nNote: \no The ENDSUBMIT statement must be on a line by itself and preceded by only blank space. \no Macro substitution is disabled between the SUBMIT and ENDSUBMIT commands. \no PROC GROOVY with multi-line submit commands cannot be used inside a macro.\n \nOptional Arguments:\nLOAD | PARSEONLY | NORUN \n  parses the Groovy statement in the specified Groovy file or fileref into a \n  groovy.lang.Script object, but does not run it. The arguments are aliases \n  for each other. \n\narguments \nspecifies arguments that are passed to the code that is being submitted."},"StatementOptions":{"StatementOption":{"StatementOptionName":"(LOAD)|(PARSEONLY)|(NORUN)","StatementOptionHelp":{"#cdata":"Parses the Groovy statement into a groovy.lang.Script object, but does not run it."},"StatementOptionType":"S"}}},{"StatementName":"ENDSUBMIT","StatementHelp":{"#cdata":"Syntax: ENDSUBMIT; \n      \nEnds the Groovy statements that begin with the SUBMIT command. \n\nNote: The ENDSUBMIT statement must be on a line by itself, and preceded by \nonly blank space."},"StatementOptions":null},{"StatementName":"CLEAR|RESET","StatementHelp":{"#cdata":"Syntax: CLEAR; \n      \nThe CLEAR command empties the binding and unloads the Groovy classloader. When this \nstatement is executed, any variables that are saved in the binding are rendered \nunavailable. Any classes that are loaded into the Groovy classloader are also \nrendered unavailable. \n\nRESET is an alias for the CLEAR command. \n\nNote: Neither the CLEAR command nor the RESET command resets the System.Properties \ncollection or the CLASSPATH."},"StatementOptions":null}]}}}