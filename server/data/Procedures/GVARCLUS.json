{"Procedure":{"Name":"GVARCLUS","ProductGroup":"CAS|VIYA|DATA MINING AND MACHINE LEARNING","ProcedureHelp":{"#cdata":"Syntax: PROC GVARCLUS <options>;\n    DISPLAY <table-list> </options>;\n    DISPLAYOUT table-spec-list </options>;\n    INPUT variables <LEVEL= INTERVAL | NOMINAL>;\n    FREQ variable;\n\nThe GVARCLUS procedure performs variable clustering and graphical modeling in SAS Viya. The procedure \ndivides a set of variables into disjoint clusters and creates tables that contain the edge and vertex \ninformation for defining an undirected graph. Variables in different clusters are conditionally independent \ngiven their own clusters. The procedure also provides the edge and vertex information for an undirected \ngraphical model; this information expresses the relationships among all the variables. A regularization \nparameter is used to control the sparsity of connections among variables. Tuning the regularization \nparameter from low to high increases the number of disconnected components and splits larger clusters \ninto smaller ones. Those divided clusters naturally form a hierarchical structure during this process."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=CAS-libref.data-table \n\nNames the input data table for PROC GVARCLUS to use. The default is the most recently created data \ntable. CAS-libref.data-table is a two-level name, where \n\nCAS-libref\n  refers to a collection of information that is defined in the LIBNAME statement and includes \n  the caslib, which includes a path to the data, and a session identifier, which defaults to \n  the active session but which can be explicitly defined in the LIBNAME statement.\n  \ndata-table\n  specifies the name of the input data table."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"EXACT","ProcedureOptionHelp":{"#cdata":"Performs graphical variable clustering without preprocessing by thresholding the sample covariance\ninto connected components. By default, the preprocessing step is performed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"MAXITER=|MAXITERS=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXITER=n | MAXITERS=n\n      \nSpecifies the maximum number of iterations for estimating the sparse precision matrix by using \ncoordinate descent. By default, MAXITER=50."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXMEMBER=|MAXMEMBERS=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXMEMBER=n | MAXMEMBERS=n\n      \nStops PROC GVARCLUS when the number of members within any cluster is greater than or equal to n."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXSTEP=|MAXSTEPS=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXSTEP=n | MAXSTEPS=n\n      \nStops PROC GVARCLUS after it runs n steps. By default, MAXSTEP=3."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MINCLUSTER=|MINCLUSTERS=","ProcedureOptionHelp":{"#cdata":"Syntax: MINCLUSTER=n | MINCLUSTERS=n\n      \nStops PROC GVARCLUS when the number of clusters is less than or equal to n. \n\nBy default, MINCLUSTER=3."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUTCP=","ProcedureOptionHelp":{"#cdata":"Syntax: OUTCP=CAS-libref.data-table < / LIST <EPS=number>>\n      \nCreates a data table that contains a covariance matrix that depicts the relationships among variables \nand also creates a set of statistics about the input data table and variables. CAS-libref.data-table \nis a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table \nspecifies the name of the output data table. \n\nWhen you specify the LIST option, the symmetric matrix is output in the list-of-list (LIL) format. \nIn this format, the matrix is represented as a set of tuples (i, j, x), where x is an entry in the \nmatrix and i and j denote its row and column indices, respectively.\n\nWhen you specify EPS=number in the LIST suboption, matrix entries whose absolute value is smaller \nthan number are ignored in the output. This feature helps omit unreliable estimations and generate \na compact representation of the matrix."},"ProcedureOptionType":"V","SubOptionsKeywords":"LIST|EPS="},{"ProcedureOptionName":"OUTEDGE=","ProcedureOptionHelp":{"#cdata":"Syntax: OUTEDGE=CAS-libref.data-table\n      \nCreates a data set for use with the hypergroup action. This table contains the information that \ndefines the edges in the network, _FROM_, _TO_, and _WEIGHT_. CAS-libref.data-table is a two-level \nname, where CAS-libref refers to the caslib and session identifier, and data-table specifies the \nname of the output data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUTTREE=","ProcedureOptionHelp":{"#cdata":"Syntax: OUTTREE=CAS-libref.data-table\n      \nCreates a data table that depicts a tree diagram to display the hierarchical clustering results. \nThe tree diagram can be plotted using the DENDROGRAM statement in the Graph Template Language. \nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session \nidentifier, and data-table specifies the name of the output data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUTVERT=","ProcedureOptionHelp":{"#cdata":"Syntax: OUTVERT=CAS-libref.data-table\n      \nCreates a data set for use with the hypergroup action. This table contains the vertices in the \nnetwork and their size. CAS-libref.data-table is a two-level name, where CAS-libref refers to \nthe caslib and session identifier, and data-table specifies the name of the output data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"RHO=","ProcedureOptionHelp":{"#cdata":"Syntax: RHO=fraction\n      \nSpecifies the value of \u03c1 that determines the sequence of regularization parameters, {\u03c11, \u03c12, \u03c13, ...} \nthat are used on sequential clustering steps. The higher the \u03c1 value, the more regularization and the \nsparser the inverse covariance. By default, RHO=0.8."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SELECT=","ProcedureOptionHelp":{"#cdata":"Syntax: SELECT=NONE | PENALIZED\n      \nSelects the optimal clustering on the basis of the specified criterion.\n\nBy default, SELECT=NONE."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"NONE","@Value2":"PENALIZED"},"ProcedureOptionToolTips":{"@ToolTip1":"Performs no selection, and the output tables of the edges and vertices of the network reflect the  clustering from the last step.","@ToolTip2":"Performs selection through minimizing the penalized log likelihood."}},{"ProcedureOptionName":"STOP=","ProcedureOptionHelp":{"#cdata":"Syntax: STOP=n\n      \nRequests that the action stop if the clustering results do not change in the previous n consecutive \nsteps. By default, STOP=3."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"TOLERANCE=|TOL=","ProcedureOptionHelp":{"#cdata":"Syntax: TOLERANCE=fraction | TOL=fraction\n      \nSpecifies the minimal absolute tolerance at which an iteration stops. The tolerance number must \nbe equal to or greater than 1.0E\u201312. By default, TOLERANCE=1.0E\u20133."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"DISPLAY","StatementHelp":{"#cdata":"Syntax: DISPLAY <table-list> </ options>;\n      \nThe DISPLAY statement enables you to specify a list of display tables to display or exclude. This statement \nis similar to the ODS SELECT, ODS EXCLUDE, and ODS TRACE statements. However, the DISPLAY statement can improve \nperformance when a large number of tables could be generated (such as in BY-group processing). The procedure \nprocesses the DISPLAY statement on a CAS server and thus sends only a subset of ODS tables to the SAS client. \nBecause ODS statements are processed on a SAS client, all the display tables generated are first sent to the \nclient and then the client creates a subset. If both DISPLAY and ODS statements are used together, the DISPLAY \nstatement takes precedence over the ODS statements."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"CASESENSITIVE","StatementOptionHelp":{"#cdata":"Performs a case-sensitive comparison of table names in the table-list to display table names when \ntables are subsetted for display. To preserve case, you must enclose table names in the table-list \nin quotation marks."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDE","StatementOptionHelp":{"#cdata":"Displays all display tables except those specified in the table-list."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDEALL","StatementOptionHelp":{"#cdata":"Suppresses display of all tables. This option takes precedence over the other options."},"StatementOptionType":"S"},{"StatementOptionName":"TRACE","StatementOptionHelp":{"#cdata":"Displays the display table names, labels, and paths."},"StatementOptionType":"S"}]}},{"StatementName":"DISPLAYOUT","StatementHelp":{"#cdata":"Syntax: DISPLAYOUT table-spec-list < / options > ;\n      \nThe DISPLAYOUT statement enables you to create CAS output tables from your displayed output. This\nstatement is similar to the ODS OUTPUT statement.\n\nThe table-spec-list specifies a list of CAS output tables to create. Each entry in the list has either a key or a\nkey=value format:\n\n  key=value specifies key as the ODS table name, path, or partial pathname, and specifies value as the\n    CAS output table name.\n  key specifies key as the ODS table name and also as the CAS output table name.\n  \nTable names and partial pathnames are discussed under the DISPLAY statement. The DISPLAYOUT\nstatement does not support regular expressions."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"INCLUDEALL","StatementOptionHelp":{"#cdata":"Creates output CAS tables for all display tables. The name of the created output CAS table is the same \nas the corresponding display table name. If you specify this option, the table-spec-list specification \nis ignored."},"StatementOptionType":"S"},{"StatementOptionName":"NOREPLACE","StatementOptionHelp":{"#cdata":"Does not replace an existing CAS output table of the same name."},"StatementOptionType":"S"},{"StatementOptionName":"REPEATED","StatementOptionHelp":{"#cdata":"Replicates all CAS output tables on all nodes."},"StatementOptionType":"S"}]}},{"StatementName":"FREQ","StatementHelp":{"#cdata":"Syntax: FREQ variable;\n\nThe variable in the FREQ statement identifies a numeric variable in the data set that contains \nthe frequency of occurrence of each observation. PROC GVARCLUS treats each observation as if it \nappears f times, where f is the value of the FREQ variable for the observation. If f is not an \ninteger, it is truncated to an integer. If f is less than 1 or missing, the observation is not \nused in the analysis. When the FREQ statement is not specified, each observation is assigned a \nfrequency of 1."},"StatementOptions":null},{"StatementName":"INPUT","StatementHelp":{"#cdata":"Syntax: INPUT variables / <LEVEL=INTERVAL | NOMINAL>;\n\nThe INPUT statement specifies the names of variables to be used in training. Only interval, binary, \nand nominal variables are accepted. If you want to use different options for different variables, \nyou can specify multiple INPUT statements."},"StatementOptions":{"StatementOption":{"StatementOptionName":"LEVEL=","StatementOptionHelp":{"#cdata":"Syntax: LEVEL=INTERVAL | NOMINAL\n          \nSpecifies whether the specified input variables are continuous or categorical.\n\nBy default, LEVEL=INTERVAL for numeric variables and LEVEL=NOMINAL for categorical variables.\nBinary variables are considered to be categorical variables."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"INTERVAL","@Value2":"NOMINAL"},"StatementOptionToolTips":{"@ToolTip1":"Specifies that the input variables are continuous.","@ToolTip2":"Specifies that the input variables are categorical."}}}}]}}}