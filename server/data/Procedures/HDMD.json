{"Procedure":{"Name":"HDMD","ProductGroup":"BASE","ProcedureHelp":{"#cdata":"Syntax: PROC HDMD <Hadoop-metadata-options>; \n    COLUMN column-specification(s) ; \n    RUN;\n    \nUse PROC HDMD to generate XML-based metadata that describes the contents of files that are stored \nin HDFS. This metadata enables SAS/ACCESS Interface to Hadoop, SAS/ACCESS Interface to Spark, and \nSAS high-performance procedures to read Hadoop data directly without an intermediate metadata \nrepository such as Hive."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"BYTE_ORDER=","ProcedureOptionHelp":{"#cdata":"Syntax: BYTE_ORDER=< LITTLEENDIAN | BIGENDIAN >\n      \nSpecifies whether numeric data is stored with the least significant byte first (like a PC) or with \nthe most significant byte first."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"LITTLEENDIAN","@Value2":"BIGENDIAN"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies that numeric data is stored with the least significant byte first (like a PC).","@ToolTip2":"Specifies that numeric data is stored with the most significant byte first."}},{"ProcedureOptionName":"DATA_FILE=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA_FILE='input-filename' \n      \nSpecifies the path to the input data file relative to the HDFS_DATADIR= option in the Hadoop engine\nLIBNAME= statement. "},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ENCODING=","ProcedureOptionHelp":{"#cdata":"Syntax: ENCODING=encoding\n      \nSpecifies the encoding for text for the input data file or folder."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FILE_FORMAT=|FILE_FMT=","ProcedureOptionHelp":{"#cdata":"Syntax: FILE_FORMAT=file-format\n      \nSpecifies the format of the input data that is passed to the SAS Embedded Process for Hadoop."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"BINARY","@Value2":"DELIMITED","@Value3":"XML"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies a file with fixed length records where numeric data is stored in machine-specific binary form.","@ToolTip2":"Specifies a file that contains only text-based data where fields are separated by a specific delimiter.","@ToolTip3":"Specifies a text-based data file in XML format."}},{"ProcedureOptionName":"FILE_TYPE=","ProcedureOptionHelp":{"#cdata":"Syntax: FILE_TYPE='custom-input-file-type' \n      \nSpecifies the file type that is used in the MapReduce framework to load the data into the SAS Embedded Process."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FROM=","ProcedureOptionHelp":{"#cdata":"Syntax: FROM=Hive-table\n      \nSpecifies the name of a Hive table that you want to use for in-database scoring. SAS creates the \nmetadata file Hive-table.sashdmd in the target\u2019s metadata directory. "},"ProcedureOptionType":"V"},{"ProcedureOptionName":"HEADER_LINES=","ProcedureOptionHelp":{"#cdata":"Syntax: HEADER_LINES=n\n      \nSpecifies the number of lines that are skipped when parsing delimited files."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"INPUT_CLASS=","ProcedureOptionHelp":{"#cdata":"Syntax: INPUT_CLASS='java.class' \n      \nSpecifies the fully qualified class name that implements the Java custom MapReduce reader to use."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MANAGED","ProcedureOptionHelp":{"#cdata":"Specifies that the file is deleted when its metadata is deleted (for example, by using PROC DELETE)."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NAME=","ProcedureOptionHelp":{"#cdata":"Syntax: NAME=libref.filename<hadoop | spark>\n      \nSpecifies the name of the metadata file to create. The HDFS_METADIR= connection option specifies \nwhere metadata is located."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"RECORD_LENGTH=","ProcedureOptionHelp":{"#cdata":"Syntax: RECORD_LENGTH=record-length\n      \nSpecifies the record length of the BINARY file."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ROW_TAG=","ProcedureOptionHelp":{"#cdata":"Syntax: ROW_TAG='row-tag' \n      \nSpecifies the XML tag that identifies records in the input XML."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SEP=","ProcedureOptionHelp":{"#cdata":"Syntax: SEP='character-separator' \n      \nSpecifies the character to separate the columns for the records in the delimited input file. \nHere is how you can specify values. \n  SEP=^A \n  SEP=',' \n  SEP=TAB \n  SEP=^Z \n  SEP='09'x \n  SEP=32"},"ProcedureOptionType":"V"},{"ProcedureOptionName":"TEXT_QUALIFIER=","ProcedureOptionHelp":{"#cdata":"Syntax: TEXT_QUALIFIER='character-qualifier' \n      \nSpecifies the text qualifier for the input data file or folder. Here is how you can specify values."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":{"StatementName":"COLUMN","StatementHelp":{"#cdata":"Syntax: COLUMN <name> <data-type><column-options>;\n      \nProvides specifications for one or more columns."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"BYTES=","StatementOptionHelp":{"#cdata":"Syntax: BYTES=byte-lenth\n          \nFor BINARY files, specifies the number of bytes that the data occupies in the record."},"StatementOptionType":"V"},{"StatementOptionName":"CTYPE=","StatementOptionHelp":{"#cdata":"Syntax: CTYPE=ctype\n          \nFor BINARY files, specifies the actual binary type of data that to be stored in the record. Here are \nthe valid binary data types: \n  char \n  double \n  float \n  int8 \n  int16 \n  int32 \n  int64 \n  uint8 \n  uint16 \n  uint32 \n  uint64"},"StatementOptionType":"V"},{"StatementOptionName":"ENCODING=","StatementOptionHelp":{"#cdata":"Syntax: ENCODING=encoding\n          \nFor BINARY files, specifies the encoding for the character data if it differs from the overall file encoding."},"StatementOptionType":"V"},{"StatementOptionName":"FORMAT=","StatementOptionHelp":{"#cdata":"Syntax: FORMAT=format-specification\n          \nSpecifies the format that is associated with the column."},"StatementOptionType":"V"},{"StatementOptionName":"INFORMAT=","StatementOptionHelp":{"#cdata":"Syntax: INFORMAT=informat-specification\n          \nSpecifies the informat to use to read the input data."},"StatementOptionType":"V"},{"StatementOptionName":"OFFSET=","StatementOptionHelp":{"#cdata":"Syntax: OFFSET=bytes\n          \nSpecifies the offset of the column data in the record."},"StatementOptionType":"V"},{"StatementOptionName":"TAG=","StatementOptionHelp":{"#cdata":"Syntax: TAG='tag' \n          \nSpecifies the XML element that encloses the column data."},"StatementOptionType":"V"},{"StatementOptionName":"BIGINT","StatementOptionHelp":{"#cdata":"BIGINT data type"},"StatementOptionType":"S"},{"StatementOptionName":"CHAR","StatementOptionHelp":{"#cdata":"CHAR data type"},"StatementOptionType":"S"},{"StatementOptionName":"DATE","StatementOptionHelp":{"#cdata":"DATE data type"},"StatementOptionType":"S"},{"StatementOptionName":"DOUBLE","StatementOptionHelp":{"#cdata":"DOUBLE data type"},"StatementOptionType":"S"},{"StatementOptionName":"INT","StatementOptionHelp":{"#cdata":"INT data type"},"StatementOptionType":"S"},{"StatementOptionName":"REAL","StatementOptionHelp":{"#cdata":"REAL data type"},"StatementOptionType":"S"},{"StatementOptionName":"SMALLINT","StatementOptionHelp":{"#cdata":"SMALLINT data type"},"StatementOptionType":"S"},{"StatementOptionName":"TIME","StatementOptionHelp":{"#cdata":"TIME data type"},"StatementOptionType":"S"},{"StatementOptionName":"TIMESTAMP","StatementOptionHelp":{"#cdata":"TIMESTAMP data type"},"StatementOptionType":"S"},{"StatementOptionName":"TINYINT","StatementOptionHelp":{"#cdata":"TINYINT data type"},"StatementOptionType":"S"},{"StatementOptionName":"VARCHAR","StatementOptionHelp":{"#cdata":"VARCHAR data type"},"StatementOptionType":"S"}]}}}}}