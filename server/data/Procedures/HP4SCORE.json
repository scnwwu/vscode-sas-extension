{"Procedure":{"Name":"HP4SCORE","ProductGroup":"Enterprise Miner/HPA","#comment":{},"ProcedureHelp":{"#cdata":"Syntax: PROC HP4SCORE data-options ; \n    ID variables ; \n    SCORE score-options ; \n    PERFORMANCE performance-options ;  \n    \nThe HP4SCORE procedure is a high-performance procedure that scores a data set with a forest predictive\nmodel that was previously trained by the HPFOREST procedure.\n\nThe forest predictive model is an ensemble of hundreds of decision trees that are used to predict a target. The\ntarget can have either an interval or a nominal measurement level. Each decision tree consists of a sequence\nof rules that are applied to the observation to arrive at the prediction. The final prediction is either an average\nof the individual predictions for a target that has an interval measurement level or is derived from the average\nof the individual posterior probabilities for a target that has a nominal measurement level. \n\nThe HP4SCORE procedure can score the data in distributed form in parallel when executed in the symmetric\nmultiprocessing (SMP) or massively parallel processing (MPP) mode"},"ProcedureOptions":{"ProcedureOption":{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=<libref.>SAS-data-set \n      \nNames the SAS data set to be used for scoring by PROC HP4SCORE. \n\nIf the data are already distributed, the procedure reads the data alongside the distributed database. \nSee the section SMP and MPP Modes for the various execution modes and the section Alongside-the-Database \nExecution for the alongside-the-database model. The different nodes then independently read the data rows, \nscore them and write them back."},"ProcedureOptionType":"DV"}},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"ID","StatementHelp":{"#cdata":"Syntax: ID variables ; \n\nThe ID statement lists one or more variables from the input data set that are transferred to \nthe output data set. The ID statement accepts numeric and character variables. \n\nThe ID statement is optional."},"StatementOptions":null},{"StatementName":"CODE","StatementHelp":{"#cdata":"Syntax: CODE FILE= filename ; \n\nThe CODE statement is optional for proc hpbin. If CODE statement is provided, the score code \nwill be generated and saved into the specified the file which can be used for scoring purpose. \nOnly one CODE statement is processed. If multiple code statements exist, the first one will be \nused."},"StatementOptions":{"StatementOption":{"StatementOptionName":"FILE=","StatementOptionHelp":{"#cdata":"Syntax: FILE= filename \n          \nIf CODE statement is provided, the score code will be generated and saved into the specified \nthe file which can be used for scoring purpose."},"StatementOptionType":"V"}}},{"StatementName":"SCORE","StatementHelp":{"#cdata":"Syntax: SCORE score-options ; \n\nThe SCORE statement specifies the name of the model file and the output data set name."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"FILE=","StatementOptionHelp":{"#cdata":"Syntax: FILE=<>model-file-name \n          \nSpecifies either the file reference or the full path and member name of the valid model \nfile created by PROC HPFOREST."},"StatementOptionType":"V"},{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"Syntax: OUT=<libref.>SAS-data-set \n          \nNames the SAS data set output by PROC HP4SCORE which contains the scored results."},"StatementOptionType":"V"}]}},{"StatementName":"PERFORMANCE","StatementHelp":{"#cdata":"Syntax: PERFORMANCE < performance-options > ;\n      \nThe PERFORMANCE statement defines performance parameters for multithreaded and distributed \ncomputing, passes variables about the distributed computing environment, and requests detailed \nresults about the performance characteristics of a High-Performance Analytics procedure.\n\nYou can also use the PERFORMANCE statement to control whether the HP4SCORE procedure executes in\nsymmetric multiprocessing or massively parallel mode."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COMMIT=","StatementOptionHelp":{"#cdata":"Syntax: COMMIT=n\n          \nRequests that the High-Performance Analytics procedure write periodic updates to the \nSAS Log when observations are sent from the client to the appliance for distributed \nprocessing.\n\nHigh-Performance Analytics procedures do not have to use input data that are stored \nin the appliance. You can perform distributed computations regardless of the origin \nor format of the input data, provided the data are in a format that can be read by \nthe SAS System (for example, because a SAS/ACCESS engine is available)."},"StatementOptionType":"V"},{"StatementOptionName":"CPUCOUNT=","StatementOptionHelp":{"#cdata":"Syntax: CPUCOUNT=ACTUAL | num\n          \nSpecifies how many processors the procedure assumes are available on each host in the \ncomputing environment. num can be any integer from 1 to 256.\n\nCPUCOUNT=ACTUAL sets CPUCOUNT to the number of physical processors available. This number\ncan be less than the physical number of CPUs if the SAS process has been restricted by system\nadministration tools. Setting CPUCOUNT= to a number greater than the actual number of available\nCPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system\noption.\n\nIf a High-Performance Analytics procedure executes in SMP mode, this option refers to the client\nmachine of the SAS session. In MPP mode, this option applies to the nodes on the appliance."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ACTUAL","@Value2":"<num>"},"StatementOptionToolTips":{"@ToolTip1":"Sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","@ToolTip2":"Replace <num> with an actual number. Setting CPUCOUNT= to a number  greater than the actual number of available CPUs might result in reduced performance. This  option overrides the CPUCOUNT= SAS system option."}},{"StatementOptionName":"DATASERVER=","StatementOptionHelp":{"#cdata":"Syntax: DATASERVER=\u201cname\u201d\n          \nSpecifies the name of the server on Teradata systems as defined through the hosts file \nand as used in the LIBNAME statement for Teradata. For example, if the hosts file defines\n\n    myservercop1 33.44.55.66\n    \nas the server for Teradata, then a LIBNAME specification would be as follows:\n\n    libname TDLib teradata server=myserver user= password= database= ;\n    \nA PERFORMANCE statement to induce running alongside the Teradata server would specify the\nfollowing:\n\n    performance dataserver=\"myserver\";\n    \nIf the DATASERVER= option is specified, it overrides the GRIDDATASERVER environment \nvariable."},"StatementOptionType":"V"},{"StatementOptionName":"DETAILS","StatementOptionHelp":{"#cdata":"Requests a table that shows a timing breakdown of the procedure steps."},"StatementOptionType":"V"},{"StatementOptionName":"TIMEOUT=","StatementOptionHelp":{"#cdata":"Syntax: TIMEOUT=s\n          \nSpecifies the timeout in seconds for a High-Performance Analytics procedure to wait for a connection\nto the appliance and establish a connection back to the client. The default is s=120 seconds. If jobs\nare submitted to the appliance through workload management tools that might suspend access to the\nappliance for a longer period, you might want to increase the timeout value."},"StatementOptionType":"V"},{"StatementOptionName":"HOST=|GRIDHOST=","StatementOptionHelp":{"#cdata":"Syntax: HOST=\u201cname\u201d | GRIDHOST=\u201cname\u201d \n          \nSpecifies the name of the appliance host in single or double quotes. If the HOST= option \nis specified, it overrides the value of the GRIDHOST environment variable."},"StatementOptionType":"V"},{"StatementOptionName":"INSTALL=|INSTALLLOC=","StatementOptionHelp":{"#cdata":"Syntax: INSTALL=\u201cname\u201d | INSTALLLOC=\u201cname\u201d \n          \nSpecifies the directory in which the High-Performance Analytics shared libraries are \ninstalled on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC \nenvironment variable."},"StatementOptionType":"V"},{"StatementOptionName":"NODES=|NNODES=","StatementOptionHelp":{"#cdata":"Syntax: NODES=n | NNODES=n\n          \nSpecifies the number of nodes in the distributed computing environment, provided that \nthe data are not processed alongside the database.\n\nIf you specify NODES=0, you indicate that you want to process the data in SMP mode on \nthe client machine. If the input data are not alongside the database, this is the default. \nThe High-Performance Analytics procedures then perform the analysis mutlithreaded on the client."},"StatementOptionType":"V"},{"StatementOptionName":"NTHREADS=","StatementOptionHelp":{"#cdata":"Syntax: NTHREADS=n \n          \nSpecifies the number of threads for analytic computations and overrides the SAS system option\nTHREADS | NOTHREADS. If you do not specify the NTHREADS= option, the number of threads\nare determined based on the number of CPUs on the host on which the analytic computations execute.\nThe algorithm by which a CPU count is converted to a thread count is specific to the High-\nPerformance Analytics procedure. Most procedures create one thread per CPU for the analytic computations.\nBy default, High-Performance Analytics procedures execute in multiple concurrent threads unless\nturned off by the NOTHREADS system option or you force single-threaded execution with\nNTHREADS=1. The largest number that can be specified for n is 256. Individual High-Performance\nAnalytics procedures can impose more stringent limits if called for by algorithmic considerations.\nYou can affect the determination of the CPU count with the CPUCOUNT= option in the PERFORMANCE\nstatement.\n\nNOTE: The SAS system options THREADS | NOTHREADS apply to the client machine on which\nthe SAS High-Performance Analytics procedures execute. They do not apply to the compute nodes\nin a distributed environment."},"StatementOptionType":"V"}]}}]}}}