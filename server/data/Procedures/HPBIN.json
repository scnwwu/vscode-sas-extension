{"Procedure":{"Name":"HPBIN","ProductGroup":"HPA","#comment":{},"ProcedureHelp":{"#cdata":"Syntax: PROC HPBIN DATA=sas-data-set < options > ;\n    CODE FILE=filename ;\n    FREQ variable ;\n    ID id1 id2 . . . idn ;\n    INPUT variables < option > ;\n    PERFORMANCE < performance-options > ;\n    TARGET variable < option(s) > ; \n    \nBinning is a common step in the data preparation stage of the model building process. One can \nuse binning to classify missing variables, reduce the impact of outliers, or generate multiple \neffects. The generated effects are useful and contain certain nonlinear information of the \noriginal interval variables. \n\nThe HPBIN procedure conducts high-performance binning using either bucket binning, winsorized \nbinning or pseudo-quantile binning. Like other high-performance procedures, the HPBIN procedure \ncan read and write data in distributed form. And it can perform computation in parallel in either \nsymmetric multiprocessing (SMP) or massively parallel processing (MPP) mode. \n\nThe HPBIN procedure has following features. \n\n  o performs analysis on a massively parallel SAS high-performance appliance \n  o reads input data in parallel and writes output data in parallel when the data source is on \n    the appliance database \n  o is highly multithreaded during all phases of analytic execution \n  o provides a bucket, or equal length, binning method \n  o provides a winsorized binning method and winsorized statistics \n  o provides a pseudo-quantile binning method, which is similar to quantile binning \n  o provides a mapping table for the selected binning method \n  o provides a basic statistic table which contains minimum, maximum, mean, pseudo-median, etc. \n  o provides a histogram table showing the output mapping statistics \n  o provides an estimation of pseudo-quantile table"},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"BINS_META=","ProcedureOptionHelp":{"#cdata":"Syntax: BINS_META=SAS-data-set \n      \nSpecifies the BINS_META input data set, which contains the binning results. The BINS_META data\nset contains six variables: variable name, bin variable name, lower bound, upper bound, bin, and SAS\nEnterprise Miner bin label. The mapping table that is generated by PROC HPBIN can be used as the\nBINS_META data set. \n\nWhen a BINS_META data set is specified, PROC HPBIN does not do binning and ignores\nthe binning method options, binning level options, and INPUT statement. Instead, PROC HPBIN\ntakes the binning results from the BINS_META data set and calculates the weight of evidence and\ninformation value."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"BUCKET","ProcedureOptionHelp":{"#cdata":"If you specify BUCKET, then PROC HPBIN uses equal-length binning."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"COMPUTEHIST","ProcedureOptionHelp":{"#cdata":"Specifies the histogram table to be printed. If you specify COMPUTEHIST, PROC HPBIN prints\nthe histogram table, which contains frequencies of the mapping result for each mapping range. The\nhistogram table contains five variables: variable name, bin variable name, bin, frequency, and range."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"COMPUTEQUANTILE","ProcedureOptionHelp":{"#cdata":"If option COMPUTEQUANTILE is specified, the estimated quantile table is provided. The table \ncontains the following percentages 0%, 1%, 5%, 10%, 25%, 50%, 75%, 90%, 95%, 99% and 100%."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"COMPUTESTATS","ProcedureOptionHelp":{"#cdata":"If option COMPUTESTATS is specified, the basic statistic information is computed and the ODS \noutput can be provided. The output table contains minimum, maximum, mean, std, \npseudo-median, ect."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=SAS-data-set \n      \nSpecifies the input SAS data set or database table to be used by PROC HPBIN. \n\nIf the procedure executes in MPP mode, the input data are distributed to memory on the appliance\nnodes and analyzed in parallel, unless the data are already distributed in the appliance database. In this\ncase, PROC HPBIN reads the data alongside the distributed database.\nFor SMP mode, the input is a SAS data set."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"NOPRINT","ProcedureOptionHelp":{"#cdata":"Specify this option to suppress the generation of ODS outputs. The output table is generated \nif output option presents. "},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NUMBIN=","ProcedureOptionHelp":{"#cdata":"Syntax: NUMBIN=integer  \n      \nSpecifies the global number of binning levels for all binning variables. The value of integer can be any\ninteger between 2 and 1,000, inclusive. The default number of binning levels is 16, which is used in\nSAS Enterprise Miner. \n\nThe resulting number of binning levels might be less than integer if the sample size is small or if the\ndata are not normalized. In this case, PROC HPBIN provides a warning message. \n\nYou can specify a different number of binning levels for each different variable in an INPUT statement.\nThe number of binning levels that you specify in an INPUT statement overwrites the global number of\nbinning levels."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUTPUT=","ProcedureOptionHelp":{"#cdata":"Syntax: OUTPUT=SAS-data-set \n      \nCreates an output SAS data set in SMP mode or database table that is saved alongside the distributed\ndatabase in MPP mode. The output data set or table contains binning variables. The variables in the\ninput data set are not included in the output data set to avoid data duplication for large data sets."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"PSEUDO_QUANTILE","ProcedureOptionHelp":{"#cdata":"If you specify PSEUDO_QUANTILE, then PROC HPBIN generates a result that approximates the \nquantile binning."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"WINSOR","ProcedureOptionHelp":{"#cdata":"If you specify WINSOR, PROC HPBIN uses Winsorized binning, and you must specify the WINSORRATE \noption with a value from 0.0 to 0.5 exclusive for number."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"WINSORRATE=","ProcedureOptionHelp":{"#cdata":"Syntax: WINSOR WINSORRATE=number\n      \nIf you specify WINSOR, PROC HPBIN uses Winsorized binning, and you must specify the WINSORRATE \noption with a value from 0.0 to 0.5 exclusive for number."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"WOE","ProcedureOptionHelp":{"#cdata":"Specifies that the weight of evidence (WOE) and information value (IV) be computed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"WOEADJUST=","ProcedureOptionHelp":{"#cdata":"Syntax: WOEADJUST=number \n      \nSpecifies the adjustment factor for the weight-of-evidence calculation. You can specify any value from\n0.0 to 1.0, inclusive, for number. The default is 0.5."},"ProcedureOptionType":"V"}],"#comment":{}},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"VAR","StatementHelp":{"#cdata":"Syntax: VAR var-1 var-2 ... var-n; \n\n[New in SAS HPA Server 12.2: You can use the new INPUT statement as an alias for the VAR statement.]\n\nThe list of interval variables which will be the input as the binning variables. Unlike other \nPROCs, the VAR statement is required for PROC HPBIN. If the statement does not exist, the \nprocess stops. The selected variables must be intervals, if class variables are provided, \nthe process stops with error message. \n\nDuplicated variables are not supported in proc hpbin. If a duplicated variable exists in the \nVAR statement, process stops with error message. \n\nInput variables are not allowed in ID statement nor as a frequency variable."},"StatementOptions":null},{"StatementName":"FREQ","StatementHelp":{"#cdata":"Syntax: FREQ variable ; \n\nThe variable in the FREQ statement identifies a numeric variable in the data set that \ncontains the frequency of occurrence for each observation. The HPBIN procedure treats \neach observation as if it appeared f times, where f is the value of the FREQ variable \nfor the observation. If the frequency value is not an integer, it is truncated to an \ninteger. If the frequency value is less than 1 or missing, the observation is not used \nin the analysis. When the FREQ statement is not specified, each observation is assigned \na frequency of 1. \n\nNOTE: For bucket binning, the frequency option has no effect."},"StatementOptions":null},{"StatementName":"ID","StatementHelp":{"#cdata":"Syntax: ID id-1 id-2 ... id-n ; \n\nThe optional ID statement lists one or more variables from the input data set to be transferred to the output \ndata set. If you specify an ID statement, the output data set contains the ID variables: id1 id2 . . . idn. The \nID statement accepts both numeric and character variables. \n\nBy default, the HPBIN procedure does not include any variables from the input data set in the output data set \nto avoid data duplication for large data sets. The variables in an ID statement can also appear in an INPUT \nstatement. Therefore, the ID statement can be used to copy variables from the input data set to the output \ndata set."},"StatementOptions":null},{"StatementName":"CODE","StatementHelp":{"#cdata":"Syntax: CODE FILE= filename ; \n\nThe CODE statement is optional in PROC HPBIN. If you use a CODE statement, score code is generated\nand stored in a file that can be used for scoring purposes. Only one CODE statement is processed. If you\nspecify multiple CODE statements, only the first one is used."},"StatementOptions":{"StatementOption":{"StatementOptionName":"FILE=","StatementOptionHelp":{"#cdata":"Syntax: FILE= filename \n          \nIf you use a CODE statement, score code is generated and stored in a file that can be used \nfor scoring purposes."},"StatementOptionType":"V"}}},{"StatementName":"INPUT","StatementHelp":{"#cdata":"Syntax: INPUT variables < option > ; \n      \nThe INPUT statement names one or more variables as input variables for binning. The specified variables\nmust be interval variables. If classification variables are provided, PROC HPBIN stops with an error message.\n\nPROC HPBIN does not support duplicate variables. If the INPUT statement contains a duplicate variable,\nPROC HPBIN takes only the first variable and provides a warning message."},"StatementOptions":{"StatementOption":{"StatementOptionName":"NUMBIN=","StatementOptionHelp":{"#cdata":"Syntax: NUMBIN=integer \n          \nSpecifies the number of binning levels for all the binning variables in the current INPUT statement.\nThe value of integer can be any integer between 2 and 1,000, inclusive. \n\nThe resulting number of binning levels might be less than integer if the sample size is small or if the\ndata are not normalized. In these cases, PROC HPBIN provides a warning message. \n\nThe number of binning levels that you specify in an INPUT statement overwrites the global number of\nbinning levels. If you do not specify the NUMBIN= option in the INPUT statement, PROC HPBIN\nuses the global number of binning levels, which is 16 by default but can be specified in the NUMBIN=\noption in the PROC HPBIN statement."},"StatementOptionType":"V"}}},{"StatementName":"PERFORMANCE","StatementHelp":{"#cdata":"Syntax: PERFORMANCE < performance-options > ;\n      \nThe PERFORMANCE statement defines performance parameters for multi-threaded and distributed \ncomputing, communicates variable information regarding the distributed computing environment, \nand requests detailed results about the performance characteristics of the HPBIN procedure. \nWith the PERFORMANCE statement, you can control whether the HPBIN procedure executes in \nsymmetric multiprocessing or massively parallel mode."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COMMIT=","StatementOptionHelp":{"#cdata":"Syntax: COMMIT=n\n          \nThis option specifies the minimum number of observations transferred from the client to the \nappliance necessary to update the SAS Log. For instance, if you specify COMMIT=5000, then \nevery time the number of observations sent exceeds an integer multiple of 5000 a log message \nis produced. This message indicates the actual number of observations distributed, not the \nCOMMIT= value that triggered the message. "},"StatementOptionType":"V"},{"StatementOptionName":"CPUCOUNT=","StatementOptionHelp":{"#cdata":"Syntax: CPUCOUNT=ACTUAL | num\n          \nThis argument specifies how many processors PROC HPBIN assumes are available on each host \nin the computing environment. Valid values for number are integers between 1 and 256, \ninclusive. Setting CPUCOUNT= to a value greater than the actual number of available CPUs \nmight results in reduced performance. Specify CPUCOUNT=ACTUAL to set CPUCOUNT= to the \nnumber of processors physically available. This number can be less than the physical \nnumber of CPUs if the SAS process has been restricted by system administration tools. \nThis option overrides the CPUCOUNT= SAS system option. If PROC HPBIN executes in SMP \nmode, then this option referes to the client machine of the SAS session. If PROC HPBIN \nexecutes in MPP mode, then this option applies the nodes on the appliance."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ACTUAL","@Value2":"<num>"},"StatementOptionToolTips":{"@ToolTip1":"Sets CPUCOUNT to the number of processors physically available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","@ToolTip2":"Replace <num> with an actual number. Setting CPUCOUNT= to a number  greater than the actual number of available CPUs might result in reduced performance. This  option overrides the CPUCOUNT= SAS system option."}},{"StatementOptionName":"DATASERVER=","StatementOptionHelp":{"#cdata":"Syntax: DATASERVER=\u201cname\u201d\n          \nSpecifies the name of the server on Teradata systems as defined through the hosts file \nand as used in the LIBNAME statement for Teradata. For example, if the hosts file defines\n\n    myservercop1 33.44.55.66\n    \nas the server for Teradata, then a LIBNAME specification would be as follows:\n\n    libname TDLib teradata server=myserver user= password= database= ;\n    \nA PERFORMANCE statement to induce running alongside the Teradata server would specify the\nfollowing:\n\n    performance dataserver=\"myserver\";\n    \nIf the DATASERVER= option is specified, it overrides the GRIDDATASERVER environment \nvariable."},"StatementOptionType":"V"},{"StatementOptionName":"DETAILS","StatementOptionHelp":{"#cdata":"Specify this option to request a table that shows a timing breakdown of the procedure steps."},"StatementOptionType":"V"},{"StatementOptionName":"TIMEOUT=","StatementOptionHelp":{"#cdata":"Syntax: TIMEOUT=s\n          \nThis options specifies the length of time, in seconds, PROC HPBIN should wait for a connection \nto the appliance and to establish a connection back to the client. The default value for s is \n120 seconds. If jobs are submitted to the appliance through workload management tools that might \nsuspend access to the appliance for a longer period, you might want to increase the timeout value. "},"StatementOptionType":"V"},{"StatementOptionName":"HOST=|GRIDHOST=","StatementOptionHelp":{"#cdata":"Syntax: HOST=name | GRIDHOST=name\n          \nThis option specifies the name of the appliance host. The HOST= option overrides the value \nof the GRIDHOST environment variable."},"StatementOptionType":"V"},{"StatementOptionName":"INSTALL=|INSTALLLOC=","StatementOptionHelp":{"#cdata":"Syntax: INSTALL=\u201cname\u201d | INSTALLLOC=\u201cname\u201d \n          \nThis option specifies the directory where the High-Performance Analytics shared libraries \nare installed on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC \nenvironment variable."},"StatementOptionType":"V"},{"StatementOptionName":"NODES=|NNODES=","StatementOptionHelp":{"#cdata":"Syntax: NODES=n | NNODES=n\n          \nThis option specifies the number of nodes in the distributed computing environment, \nprovided that the data are not processed alongside the database. \n\nSpecify NODES=0 to indicate that you want to process the data in SMP mode on the client \nmachine. If the input data are not alongside the database, this is the default setting. \nThe HPBIN procedure then performs multithreaded analysis on the client. If the data are \nnot read alongside the database, the NODES= option specifies the number of nodes on the \nappliance that are involved in the analysis. If the number of nodes can be modified by \nthe application, you can specify a NODES= option where n exceeds the number of physical \nnodes on the appliance. The High-Performance Analytics software then oversubscribes the \nnodes and associates nodes with multiple units of work. For example, on a system with \n16 appliance nodes, the following statement would oversubscribe the system by a factor \nof 3: \n\n  performance nodes=48 host=\"hpa.sas.com\"; \n  \nGenerally, it is not advisable to oversubscribe the system because the analytic code \nis optimized for a certain level of multithreading on the nodes that depend on the CPU \ncount. If the data are read alongside the distributed database on the appliance, specifying \na nonzero value for the NODES= option has no effect. The number of units of work in the \ndistributed computing environment is then determined by the distribution of the data and \ncannot be altered."},"StatementOptionType":"V"},{"StatementOptionName":"NTHREADS=","StatementOptionHelp":{"#cdata":"Syntax: NTHREADS=n \n          \nThis option specifies the number of threads used for analytic computations and overrides the \nSAS system option THREADS | NOTHREADS. If you do not specify the NTHREADS= option, then the \nnumber of threads is determined based on the number of CPUs on the host machine where the \nanalytic computations execute. By default, High-Performance Analytics procedures execute in \nmultiple concurrent threads, unless you disable this behavior with the NOTHREADS system option \nor you specify NTHREADS=1 to force single-threaded execution. The value specified here must \nnot exceed 256.\n\nNote:The SAS system option THREADS | NOTHREADS applies to the current machine where the SAS \nHigh-Performance Analytics procedures execute. This option does not apply to the compute nodes \nin a distributed environment."},"StatementOptionType":"V"}]}},{"StatementName":"TARGET","StatementHelp":{"#cdata":"Syntax: TARGET variable LEVEL=level ORDER=order ; \n          \nThe TARGET statement names the variable that PROC HPBIN uses to calculate the weight of evidence and\ninformation value. You can specify the following arguments: \n\nLEVEL=level\n  specifies the level of the target variable. The values of level can be BINARY or NOMINAL.\nORDER=order\n  specifies the order of the target variable. The values of order can be ASCENDING or DESCENDING."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"LEVEL=","StatementOptionHelp":{"#cdata":"Syntax: LEVEL=level \n          \nSpecifies the level of the target variable. The values of level can be BINARY or NOMINAL."},"StatementOptionType":"V"},{"StatementOptionName":"ORDER=","StatementOptionHelp":{"#cdata":"Syntax: ORDER=order \n          \nSpecifies the order of the target variable. The values of order can be ASCENDING or DESCENDING."},"StatementOptionType":"V"}]}}]}}}