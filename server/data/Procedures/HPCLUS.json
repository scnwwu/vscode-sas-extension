{"Procedure":{"Name":"HPCLUS","ProductGroup":"Enterprise Miner/HPA","#comment":{},"ProcedureHelp":{"#cdata":"Syntax: PROC HPCLUS < options > ;\n    INPUT variables < options > ;\n    ID variables ;\n    FREQ variable ;\n    SCORE < options > ;\n    CODE < options > ;\n    PERFORMANCE performance-options ; \n    \nThe HPCLUS procedure executes high-performance clustering. Clustering is a common step in the data\nexploration stage. The HPCLUS procedure takes only numeric variables. \n\nThe HPCLUS procedure performs an cluster analysis on the basis of distances computed from one or more\nvariables. The observations are divided into clusters such that every observation belongs to one and only one\ncluster. \n\nBy default, the HPCLUS procedure uses Euclidean distances. The clustering method used is k-means\nmodel. In that model, the cluster centers are the means of the observations assigned to each cluster when the\nalgorithm is run to complete convergence. Each iteration reduces the least-squared criterion for Euclidean\nuntil convergence is achieved. \n\nPROC HPCLUS produces brief summaries of clusters that it computes."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"CLUSTERS=","ProcedureOptionHelp":{"#cdata":"Syntax: CLUSTERS=number \n      \nSpecifies the number of clusters. If you omit the CLUSTERS= option, a value of 6 is assumed. If the\nnumber of observations is less than the number specified in CLUSTERS= option, than CLUSTERS\nwill be set to the number of observations. ADD DETAILS ABOUT REMOVING CLUSTERS THAT\nHAS ZERO OBSERVATIONS."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=<libref.>SAS-data-set \n      \nNames the SAS data set for which PROC HPCLUS is to compute clusters. The default is the most\nrecently created data set. If the data are already distributed, PROC HPCLUS reads the data alongside\nthe distributed database."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"DISTANCE=","ProcedureOptionHelp":{"#cdata":"Syntax: DISTANCE=keyword\nspecifies distance measure for similarity. You can choose from the following methods by specifying\nthe appropriate keyword: \n\n  MANHATTAN performs Manhattan distance calculation (p = 1).\n  EUCLIDEAN performs Euclidean distance calculation (p = 2).\n  MINKOWSKI performs Minkowski distance calculation (1 < p < 2). The value for p can\n    be specified using the suboption. The default value for p is 1.2. PUT THAT\n    SUBOPTION HERE.\n  CHEBYSHEV performs Chebyshev distance calculation (p = \u221e).\n  \nThe default value is DISTANCE=EUCLIDEAN. For more information, see the section XXXX"},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"MANHATTAN","@Value2":"EUCLIDEAN","@Value3":"MINKOWSKI","@Value4":"CHEBYSHEV"},"ProcedureOptionToolTips":{"@ToolTip1":"Performs Manhattan distance calculation (p = 1).","@ToolTip2":"Performs Euclidean distance calculation (p = 2).","@ToolTip3":"Performs Minkowski distance calculation (1 < p > 2). The value for p can     be specified using the suboption. The default value for p is 1.2. PUT THAT     SUBOPTION HERE.","@ToolTip4":"Performs Chebyshev distance calculation (p = \u221e)."}},{"ProcedureOptionName":"INITIALIZE=","ProcedureOptionHelp":{"#cdata":"Syntax: INITIALIZE=keyword \n      \nSpecifies the initialization technique for cluster centroids. For this release, only RANDOM keyword is\nsupported and this is the default for that option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXITER=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXITER=number \n      \nspecifies the maximum number of iterations for recomputing cluster centroids. When the value of the\nMAXITER= option is greater than zero, PROC HPCLUS executes the third of the four steps described\nin the section Background on page XXX. In each iteration, each observation is assigned to the nearest\ncluster centroid, and the centroids are recomputed as the means of the clusters. The default value of\nthe MAXITER= option is 10."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUTSTAT=","ProcedureOptionHelp":{"#cdata":"Syntax: OUTSTAT=< libref. >SAS-data-set \n      \nCreates the output SAS data set to contain the cluster centroids for each cluster. If the OUTITER is\nspecified, the dataset contains cluster centroids at each iteration."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SEED=","ProcedureOptionHelp":{"#cdata":"Syntax: number \n      \nSpecifies a positive integer as a starting value for the pseudo-random number generator for use with\nINITIALIZE=RANDOM. The default value for SEED= is 12345."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"STOPCRITERION=","ProcedureOptionHelp":{"#cdata":"Syntax: STOPCRITERION=keyword(VALUE=number) \n      \nspecifies the method that will be used for convergence. If you omit the STOPCRITERION= option,\nOnly the following method is supported for this release:"},"ProcedureOptionType":"V","SubOptionsKeywords":"VALUE="}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"CODE","StatementHelp":{"#cdata":"Syntax: CODE < options > ; \n      \nThe CODE statement generates SAS DATA step code that mimics the computations done by the SCORE\nstatement. You can specify the following options:\n\nFILE=filename\nspecifies the filename of the file to which the SAS score code is written."},"StatementOptions":{"StatementOption":{"StatementOptionName":"FILE=","StatementOptionHelp":{"#cdata":"Syntax: FILE= filename \n          \nSpecifies the filename of the file to which the SAS score code is written."},"StatementOptionType":"V"}}},{"StatementName":"FREQ","StatementHelp":{"#cdata":"Syntax: FREQ variable ; \n      \nThe variable in the FREQ statement identifies a numeric variable in the data set that contains the frequency\nof occurrence for each observation. SAS High-Performance Analytics procedures that support the FREQ\nstatement treat each observation as if it appeared f times, where f is the value of the FREQ variable for the\nobservation. If the frequency value is not an integer, it is truncated to an integer. If the frequency value is less\nthan 1 or missing, the observation is not used in the analysis. When the FREQ statement is not specified,\neach observation is assigned a frequency of 1."},"StatementOptions":null},{"StatementName":"ID","StatementHelp":{"#cdata":"Syntax: ID variables ; \n      \nThe optional ID statement lists one or more variables from the input data set that are transferred to the output\ndata set. The ID statement accepts numeric and character variables. For example, when you specify the\nOUT= option in the PROC HPCLUS statement, the ID variables, followed by cluster variables and cluster\ndistance variables, are added to the output data set. \n\nBy default, the HPCLUS procedure does not include any variables from the input data set in the output data\nsets."},"StatementOptions":null},{"StatementName":"SCORE","StatementHelp":{"#cdata":"Syntax: SCORE < options > ; \n      \nThe SCORE statement causes the HPCLUS procedure to write the closest cluster and the distance to that\ncluster for each observation in the input data set to the output data set that is specified by the OUT option.\nThe variables from the input data set that are specified in the ID statement are also written to the OUT dataset.\nThe SCORE statement is optional."},"StatementOptions":null},{"StatementName":"INPUT","StatementHelp":{"#cdata":"Syntax: INPUT variables < options > ; \n      \nThe INPUT statement names one of more input variables with common options. You can specify multiple\nINPUT statements.."},"StatementOptions":null},{"StatementName":"PERFORMANCE","StatementHelp":{"#cdata":"Syntax: PERFORMANCE < performance-options > ;\n      \nhe PERFORMANCE statement defines performance parameters for multithreaded and distributed computing,\npasses variables about the distributed computing environment, and requests detailed results about the\nperformance characteristics of the HPCLUS procedure. \n\nWith the PERFORMANCE statement, you can also control whether the HPCLUS procedure executes in\nsymmetric multiprocessing or massively parallel mode."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COMMIT=","StatementOptionHelp":{"#cdata":"Syntax: COMMIT=n\n          \nRequests that the High-Performance Analytics procedure write periodic updates to the \nSAS Log when observations are sent from the client to the appliance for distributed \nprocessing.\n\nHigh-Performance Analytics procedures do not have to use input data that are stored \nin the appliance. You can perform distributed computations regardless of the origin \nor format of the input data, provided the data are in a format that can be read by \nthe SAS System (for example, because a SAS/ACCESS engine is available)."},"StatementOptionType":"V"},{"StatementOptionName":"CPUCOUNT=","StatementOptionHelp":{"#cdata":"Syntax: CPUCOUNT=ACTUAL | num\n          \nSpecifies how many processors the procedure assumes are available on each host in the \ncomputing environment. num can be any integer from 1 to 256.\n\nCPUCOUNT=ACTUAL sets CPUCOUNT to the number of physical processors available. This number\ncan be less than the physical number of CPUs if the SAS process has been restricted by system\nadministration tools. Setting CPUCOUNT= to a number greater than the actual number of available\nCPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system\noption.\n\nIf a High-Performance Analytics procedure executes in SMP mode, this option refers to the client\nmachine of the SAS session. In MPP mode, this option applies to the nodes on the appliance."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ACTUAL","@Value2":"<num>"},"StatementOptionToolTips":{"@ToolTip1":"Sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","@ToolTip2":"Replace <num> with an actual number. Setting CPUCOUNT= to a number  greater than the actual number of available CPUs might result in reduced performance. This  option overrides the CPUCOUNT= SAS system option."}},{"StatementOptionName":"DATASERVER=","StatementOptionHelp":{"#cdata":"Syntax: DATASERVER=\u201cname\u201d\n          \nSpecifies the name of the server on Teradata systems as defined through the hosts file \nand as used in the LIBNAME statement for Teradata. For example, if the hosts file defines\n\n    myservercop1 33.44.55.66\n    \nas the server for Teradata, then a LIBNAME specification would be as follows:\n\n    libname TDLib teradata server=myserver user= password= database= ;\n    \nA PERFORMANCE statement to induce running alongside the Teradata server would specify the\nfollowing:\n\n    performance dataserver=\"myserver\";\n    \nIf the DATASERVER= option is specified, it overrides the GRIDDATASERVER environment \nvariable."},"StatementOptionType":"V"},{"StatementOptionName":"DETAILS","StatementOptionHelp":{"#cdata":"Requests a table that shows a timing breakdown of the procedure steps."},"StatementOptionType":"V"},{"StatementOptionName":"TIMEOUT=","StatementOptionHelp":{"#cdata":"Syntax: TIMEOUT=s\n          \nSpecifies the timeout in seconds for a High-Performance Analytics procedure to wait for a connection\nto the appliance and establish a connection back to the client. The default is s=120 seconds. If jobs\nare submitted to the appliance through workload management tools that might suspend access to the\nappliance for a longer period, you might want to increase the timeout value."},"StatementOptionType":"V"},{"StatementOptionName":"HOST=|GRIDHOST=","StatementOptionHelp":{"#cdata":"Syntax: HOST=\u201cname\u201d | GRIDHOST=\u201cname\u201d \n          \nSpecifies the name of the appliance host in single or double quotes. If the HOST= option \nis specified, it overrides the value of the GRIDHOST environment variable."},"StatementOptionType":"V"},{"StatementOptionName":"INSTALL=|INSTALLLOC=","StatementOptionHelp":{"#cdata":"Syntax: INSTALL=\u201cname\u201d | INSTALLLOC=\u201cname\u201d \n          \nSpecifies the directory in which the High-Performance Analytics shared libraries are \ninstalled on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC \nenvironment variable."},"StatementOptionType":"V"},{"StatementOptionName":"NODES=|NNODES=","StatementOptionHelp":{"#cdata":"Syntax: NODES=n | NNODES=n\n          \nSpecifies the number of nodes in the distributed computing environment, provided that \nthe data are not processed alongside the database.\n\nIf you specify NODES=0, you indicate that you want to process the data in SMP mode on \nthe client machine. If the input data are not alongside the database, this is the default. \nThe High-Performance Analytics procedures then perform the analysis mutlithreaded on the client."},"StatementOptionType":"V"},{"StatementOptionName":"NTHREADS=","StatementOptionHelp":{"#cdata":"Syntax: NTHREADS=n \n          \nSpecifies the number of threads for analytic computations and overrides the SAS system option\nTHREADS | NOTHREADS. If you do not specify the NTHREADS= option, the number of threads\nare determined based on the number of CPUs on the host on which the analytic computations execute.\nThe algorithm by which a CPU count is converted to a thread count is specific to the High-\nPerformance Analytics procedure. Most procedures create one thread per CPU for the analytic computations.\nBy default, High-Performance Analytics procedures execute in multiple concurrent threads unless\nturned off by the NOTHREADS system option or you force single-threaded execution with\nNTHREADS=1. The largest number that can be specified for n is 256. Individual High-Performance\nAnalytics procedures can impose more stringent limits if called for by algorithmic considerations.\nYou can affect the determination of the CPU count with the CPUCOUNT= option in the PERFORMANCE\nstatement.\n\nNOTE: The SAS system options THREADS | NOTHREADS apply to the client machine on which\nthe SAS High-Performance Analytics procedures execute. They do not apply to the compute nodes\nin a distributed environment."},"StatementOptionType":"V"}]}}]}}}