{"Procedure":{"Name":"HPDECIDE","ProductGroup":"Enterprise Miner/HPA","#comment":{},"ProcedureHelp":{"#cdata":"Syntax: PROC HPDECIDE <option(s)> ; \n    ID variable(s) ; \n    FREQ variable ; \n    PERFORMANCE performance-options ; \n    POSTERIORS variable-list ; \n    PREDICTED variable ; \n    TARGET variable ; \n    DECISION DECDATA=<libref.>SAS-data-set <option(s)> ; \n    CODE <options> ;  \n    \nThe HPDECIDE procedure creates optimal decisions that are based on a decision matrix that you specify, on\nprior probabilities, and on output from a modeling procedure. This output can be either posterior probabilities\nfor a categorical target variable or predicted values for an interval target variable. The HPDECIDE procedure\ncan also adjust the posterior probabilities for changes in the prior probabilities. \n\nSome modeling procedures assume that the prior probabilities for categorical variable level membership\neither are all equal or are proportional to the relative frequency of the corresponding response level in the data\nset. PROC HPDECIDE enables you to specify other prior probabilities. Thus, you can conduct a sensitivity\nanalysis without running the modeling procedure again. \n\nThe HPDECIDE procedure can exploit computer grids by running in parallel independently on different grid\nnodes, while multithreading is supported at each node."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=<libref.>SAS-data-set \n      \nSpecifies the input data set that contains the output from a modeling procedure. The default \nis the most recently created data set. If the data are already distributed, the procedure reads \nthe data alongside the distributed database."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"OUT=","ProcedureOptionHelp":{"#cdata":"Syntax: OUT=<libref.>SAS-data-set \n      \nThis option specifies the output data set, which contains the following information: \n\n  1. any variables from the input data set specified in the ID Statement \n  2. the chosen decision with a prefix of D_ \n  3. the expected consequence of the chosen decision with a prefix of either EL_ or EP_ \n\nIf the target value is in the input data set, then the output data set also contains the following variables: \n\n  1. the consequence of the chosen decision computed from the target value with a prefix of either CL_ or CP_ \n  2. the consequence of the best possible decision knowing the target value with a prefix of either BL_ or BP_ \n\nIf the profit matrix is revenue, then the output data set also contains the following variables: \n\n  1. the investment cost with a prefix of IC_ \n  2. the return on investment with a prefix of ROI_ \n\nAdditionally, if PRIORVAR= and OLDPRIORVAR= variables are specified, then this data set will \ncontain the recalculated posterior probabilities. The default name for this data set is data_n, \nwhere n is the smallest integer not already used to name a data set."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUTFIT=","ProcedureOptionHelp":{"#cdata":"Syntax: OUTFIT=<libref.>SAS-data-set \n      \nThis option specifies an output data set that contains fit statistics. These statistics include \nthe total and average profit or loss. You cannot specify this option with a data set of type SCORE. \nBy default, this data set is not created."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ROLE=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=<libref.>SAS-data-set \n      \nThis option specifies the role of the data set. This option affects the variables that \nare created in the ROLE= data set. The default value is TEST."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"TRAIN","@Value2":"VALID|VALIDATION","@Value3":"TEST","@Value4":"SCORE"},"ProcedureOptionToolTips":{"@ToolTip1":"TRAIN role","@ToolTip2":"VALIDATION role","@ToolTip3":"TEST role","@ToolTip4":"SCORE role"}}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"ID","StatementHelp":{"#cdata":"Syntax: ID variables ; \n\nThe ID statement lists one or more variables from the input data set that are transferred to \nthe output data sets created by High-Performance Analytics procedures, provided that the output \ndata set produces one (or more) records per input observation. By default, the HPDECIDE procedure \ndoes not include all variables from the input data set in the output data sets. The ID statement \naccepts numeric and character variables."},"StatementOptions":null},{"StatementName":"FREQ","StatementHelp":{"#cdata":"Syntax: FREQ variable ; \n\nThe FREQ statement specifies a single numeric variable whose value represents the frequency of each\nobservation. If you use the FREQ statement, the HPDECIDE procedure treats the data set as if each\nobservation appeared n times, where n is the value of the FREQ variable. The FREQ variable has no effect on\ndecisions of the adjustment for prior probabilities. It affects only the summary statistics in the OUTFIT= data\nset. If a value of the FREQ variable is not an integer, then the fractional part is not truncated. If a value of the\nFREQ variable is less than or equal to 0, then the observation does not contribute to the summary statistics.\nHowever, all the variables in the OUT= data set are processed as if the FREQ variable were positive."},"StatementOptions":null},{"StatementName":"PERFORMANCE","StatementHelp":{"#cdata":"Syntax: PERFORMANCE < performance-options > ;\n      \nThe PERFORMANCE statement defines performance parameters for multithreaded and distributed \ncomputing, passes variables about the distributed computing environment, and requests detailed \nresults about the performance characteristics of a High-Performance Analytics procedure.\n\nWith the PERFORMANCE statement, you can also control whether the HPNLIN procedure executes \nin SMP or MPP mode."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COMMIT=","StatementOptionHelp":{"#cdata":"Syntax: COMMIT=n\n          \nRequests that the High-Performance Analytics procedure write periodic updates to the \nSAS Log when observations are sent from the client to the appliance for distributed \nprocessing.\n\nHigh-Performance Analytics procedures do not have to use input data that are stored \nin the appliance. You can perform distributed computations regardless of the origin \nor format of the input data, provided the data are in a format that can be read by \nthe SAS System (for example, because a SAS/ACCESS engine is available)."},"StatementOptionType":"V"},{"StatementOptionName":"CPUCOUNT=","StatementOptionHelp":{"#cdata":"Syntax: CPUCOUNT=ACTUAL | num\n          \nSpecifies how many processors the procedure assumes are available on each host in the \ncomputing environment. num can be any integer from 1 to 256.\n\nCPUCOUNT=ACTUAL sets CPUCOUNT to the number of physical processors available. This number\ncan be less than the physical number of CPUs if the SAS process has been restricted by system\nadministration tools. Setting CPUCOUNT= to a number greater than the actual number of available\nCPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system\noption.\n\nIf a High-Performance Analytics procedure executes in SMP mode, this option refers to the client\nmachine of the SAS session. In MPP mode, this option applies to the nodes on the appliance."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ACTUAL","@Value2":"<num>"},"StatementOptionToolTips":{"@ToolTip1":"Sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","@ToolTip2":"Replace <num> with an actual number. Setting CPUCOUNT= to a number  greater than the actual number of available CPUs might result in reduced performance. This  option overrides the CPUCOUNT= SAS system option."}},{"StatementOptionName":"DATASERVER=","StatementOptionHelp":{"#cdata":"Syntax: DATASERVER=\u201cname\u201d\n          \nSpecifies the name of the server on Teradata systems as defined through the hosts file \nand as used in the LIBNAME statement for Teradata. For example, if the hosts file defines\n\n    myservercop1 33.44.55.66\n    \nas the server for Teradata, then a LIBNAME specification would be as follows:\n\n    libname TDLib teradata server=myserver user= password= database= ;\n    \nA PERFORMANCE statement to induce running alongside the Teradata server would specify the\nfollowing:\n\n    performance dataserver=\"myserver\";\n    \nIf the DATASERVER= option is specified, it overrides the GRIDDATASERVER environment \nvariable."},"StatementOptionType":"V"},{"StatementOptionName":"DETAILS","StatementOptionHelp":{"#cdata":"Requests a table that shows a timing breakdown of the procedure steps."},"StatementOptionType":"V"},{"StatementOptionName":"TIMEOUT=","StatementOptionHelp":{"#cdata":"Syntax: TIMEOUT=s\n          \nSpecifies the timeout in seconds for a High-Performance Analytics procedure to wait for a connection\nto the appliance and establish a connection back to the client. The default is s=120 seconds. If jobs\nare submitted to the appliance through workload management tools that might suspend access to the\nappliance for a longer period, you might want to increase the timeout value."},"StatementOptionType":"V"},{"StatementOptionName":"HOST=|GRIDHOST=","StatementOptionHelp":{"#cdata":"Syntax: HOST=\u201cname\u201d | GRIDHOST=\u201cname\u201d \n          \nSpecifies the name of the appliance host in single or double quotes. If the HOST= option \nis specified, it overrides the value of the GRIDHOST environment variable."},"StatementOptionType":"V"},{"StatementOptionName":"INSTALL=|INSTALLLOC=","StatementOptionHelp":{"#cdata":"Syntax: INSTALL=\u201cname\u201d | INSTALLLOC=\u201cname\u201d \n          \nSpecifies the directory in which the High-Performance Analytics shared libraries are \ninstalled on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC \nenvironment variable."},"StatementOptionType":"V"},{"StatementOptionName":"NODES=|NNODES=","StatementOptionHelp":{"#cdata":"Syntax: NODES=n | NNODES=n\n          \nSpecifies the number of nodes in the distributed computing environment, provided that \nthe data are not processed alongside the database.\n\nIf you specify NODES=0, you indicate that you want to process the data in SMP mode on \nthe client machine. If the input data are not alongside the database, this is the default. \nThe High-Performance Analytics procedures then perform the analysis mutlithreaded on the client."},"StatementOptionType":"V"},{"StatementOptionName":"NTHREADS=","StatementOptionHelp":{"#cdata":"Syntax: NTHREADS=n \n          \nSpecifies the number of threads for analytic computations and overrides the SAS system option\nTHREADS | NOTHREADS. If you do not specify the NTHREADS= option, the number of threads\nare determined based on the number of CPUs on the host on which the analytic computations execute.\nThe algorithm by which a CPU count is converted to a thread count is specific to the High-\nPerformance Analytics procedure. Most procedures create one thread per CPU for the analytic computations.\nBy default, High-Performance Analytics procedures execute in multiple concurrent threads unless\nturned off by the NOTHREADS system option or you force single-threaded execution with\nNTHREADS=1. The largest number that can be specified for n is 256. Individual High-Performance\nAnalytics procedures can impose more stringent limits if called for by algorithmic considerations.\nYou can affect the determination of the CPU count with the CPUCOUNT= option in the PERFORMANCE\nstatement.\n\nNOTE: The SAS system options THREADS | NOTHREADS apply to the client machine on which\nthe SAS High-Performance Analytics procedures execute. They do not apply to the compute nodes\nin a distributed environment."},"StatementOptionType":"V"}]}},{"StatementName":"POSTERIORS","StatementHelp":{"#cdata":"Syntax: POSTERIORS variable-list ; \n\nThe POSTERIORS statement specifies a list of the numeric variables in the input data set that contain\nthe estimated posterior probabilities that correspond to the categories of the target variable. If one of the\nfollowing conditions is met, then an observation is set to missing and the variable _WARN_ contains the flag\nP: \n\nThese conditions are as follows: \n\n  o The posterior probability is missing, negative, or greater than 1.\n\n  o There is a nonzero posterior that corresponds to a zero posterior.\n\n  o There is not at least one valid positive posterior probability.\n\nNote that the order of the variables in this list must correspond exactly to the order of the \nclasses in the DECDATA= data set."},"StatementOptions":null},{"StatementName":"PREDICTED","StatementHelp":{"#cdata":"Syntax: PREDICTED variable ; \n\nThe PREDICTED statement specifies the numeric variable in the input data set that contains the predicted\nvalues of an interval target variable. You can specify only an interval target variable in the PREDICTED\nstatement. You cannot use both the POSTERIORS statement and the PREDICTED statement."},"StatementOptions":null},{"StatementName":"TARGET","StatementHelp":{"#cdata":"Syntax: TARGET variable ; \n\nThe TARGET statement specifies which variable is the target variable in the data set that is specified in the\nDECDATA= option in the DECISION statement. The TARGET statement is required. \n\nThe HPDECIDE procedure searches for a target variable with the same name in the input data set. If none\nis found, then the HPDECIDE procedure assumes that actual target values are unknown. For a categorical\nvariable, the target variables in the data sets that are specified in the DATA= option in the PROC HPDECIDE\nstatement and in the DECDATA= option in the DECISION statement do not need to be the same type because\nonly the formatted values are used for comparisons. For an interval target, both variables must be numeric. If\nscoring code is generated by the CODE statement, the code formats the target variable with the format and\nlength from the DATA= data set."},"StatementOptions":null},{"StatementName":"DECISION","StatementHelp":{"#cdata":"Syntax: DECISION DECDATA=<libref.>SAS-data-set <option(s)> ; \n      \nRequired Argument:\nDECDATA=<libref.>SAS-data-set \n\nOptional Arguments:\nDECVARS=variables \nCOST=list-of-costs \nPRIORVAR=variable \nOLDPRIORVAR=variable "},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DECDATA=","StatementOptionHelp":{"#cdata":"Syntax: DECDATA=< libref. >SAS-data-set< (type) > \n          \nnames the input data set that contains the decision matrix or the prior probabilities, or both. This\nargument is required. \n\nThe named data set must contain the target variable, which is specified in the TARGET statement. It\nmight also contain decision variables that are specified in the DECVARS= option and prior probability\nvariables that are specified with the PRIORVAR= option, the OLDPRIORVAR= option, or both. \n\nThe data set option type is specified in parentheses after the data set name when the data set is created\nor used. The possible values of type are LOSS, PROFIT, and REVENUE; the default is PROFIT."},"StatementOptionType":"DV"},{"StatementOptionName":"DECVARS=","StatementOptionHelp":{"#cdata":"Syntax: DECVARS=variables \n          \nSpecifies the numeric decision variables in the DECDATA= data set that contain the target-specific\nconsequences for each decision. The decision variables cannot contain any missing values."},"StatementOptionType":"V"},{"StatementOptionName":"COST=","StatementOptionHelp":{"#cdata":"Syntax: COST=list-of-costs \n          \nSpecifies the numeric constants that give the cost of a decision, the numeric variables in the input data\nset that contain case-specific costs, or any combination of constants and variables. \n\nThe number of cost constants and variables and the number of decision variables in the DECVARS=\noption must be the same. You cannot use abbreviated variable lists. For any observation in which a\ncost variable is missing, the results for that observation are considered missing. By default, all costs\nare assumed to be 0. You can specify this option only when type is REVENUE."},"StatementOptionType":"V"},{"StatementOptionName":"PRIORVAR=","StatementOptionHelp":{"#cdata":"Syntax: PRIORVAR=variable \n          \nSpecifies the number variable in the DECDATA= data set that contains the prior probabilities that\nare used to make decisions. Prior probabilities are also used to adjust the total and average profit or\nloss. Prior probabilities cannot be missing or negative, and there must be at least one positive prior\nprobability. The prior probabilities are not required to sum 1. But if they do not sum to 1, then they are\nscaled by some constant so that they do sum to 1. If you do not specify this option, then no adjustment\nfor prior probabilities is applied to the posterior probabilities."},"StatementOptionType":"V"},{"StatementOptionName":"OLDPRIORVAR=","StatementOptionHelp":{"#cdata":"Syntax: OLDPRIORVAR=variable \n          \nSpecifies the numeric variable in the DECDATA= data set that contains the prior probabilities that\nwere used the first time the model was fit. If you specify this option, then you must also specify the\nPRIORVAR= option."},"StatementOptionType":"V"}]}},{"StatementName":"CODE","StatementHelp":{"#cdata":"Syntax: CODE <options> ; \n\nThe CODE statement generates SAS DATA step code that can be used to score data sets. If neither the\nFILE= option nor the METABASE= option is specified, then the SAS code is written to the SAS log. You\ncan specify both the FILE= option and the METABASE= option to write code to both locations. The target\nvariable must appear both in the data set specified in the DATA= option in the PROC HPDECIDE statement\nand in the data set specified in the DECDATA= option in the DECISION statement."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"FILE=","StatementOptionHelp":{"#cdata":"Syntax: FILE= file-name \n          \nNames the file into which score code is saved."},"StatementOptionType":"V"},{"StatementOptionName":"METABASE=","StatementOptionHelp":{"#cdata":"Syntax: METABASE=catalog-spec \n          \nSpecifies a catalog entry to contain the SAS score code. For example, you can specify\nMETABASE=myLibrary.myCatalog.catalog-entry."},"StatementOptionType":"V"},{"StatementOptionName":"RESIDUAL","StatementOptionHelp":{"#cdata":"Computes the variables that depend on the target variable in the score code.."},"StatementOptionType":"S"}]}}]}}}