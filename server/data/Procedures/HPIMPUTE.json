{"Procedure":{"Name":"HPIMPUTE","ProductGroup":"HPA","#comment":{},"ProcedureHelp":{"#cdata":"Syntax: PROC HPIMPUTE <option(s)> ; \n    INPUT variable(s) <option(s)> ; \n    IMPUTE variable(s) <option(s)> ; \n    PERFORMANCE performance-options ; \n    ID variable(s) ; \n    FREQ variable ; \n    CODE <option(s)> ; \n    \nThe HPIMPUTE procedure executes high-performance numeric variable imputation. Imputation is a common\nstep in the data preparation stage. The HPIMPUTE procedure takes only numeric variables. \n\nThe HPIMPUTE procedure can replace numeric missing values with a specified value. It can also replace\nnumeric missing values with the mean, the pseudo-median, or some random value between the minimum\nvalue and the maximum value of the nonmissing values. \n\nWhen the mean, the pseudo-median, or a random value is being calculated, the HPIMPUTE procedure\nignores any observation that has a FREQ variable whose value is less than or equal to 0."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=<libref.>SAS-data-set \n      \nNames the SAS data set to be used by PROC HPIMPUTE for imputation. The default is the most \nrecently created data set. If the data are already distributed, the procedure reads the data \nalongside the distributed database. See the section SMP and MPP Modes for the various execution \nmodes and the section Alongside-the-Database Execution for the alongside-the-database model.\nWHERE processing is supported."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"DMDBCAT=","ProcedureOptionHelp":{"#cdata":"Syntax: DMDBCAT=<libref.>SAS-catalog \n      \nNames the SAS catalog to be used by PROC HPIMPUTE for looking up the variable metadata. \nIf the DMDBCAT is specified and the imputation value is available in the DMDBCAT, PROC \nHPIMPUTE will impute with the value in the DMDBCAT. Otherwise, PROC HPIMPUTE will first \ncompute the imputation value and then impute with that value."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUT=","ProcedureOptionHelp":{"#cdata":"Syntax: OUT=<libref.>SAS-data-set \n      \nNames the SAS data set to be used by PROC HPIMPUTE write the data with ID variables \n(if applicable), imputation indicator variables (0: not imputed, 1: imputed) and imputed \nvariables."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"INPUT","StatementHelp":{"#cdata":"Syntax: INPUT variable(s) <option(s)> ; \n\nThe INPUT statement names input variables with common options. The INPUT statement \ncan be repeated."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"LEVEL=","StatementOptionHelp":{"#cdata":"Syntax: LEVEL=level \n          \nSpecifies the level of measurement of the variables.\n\nAccepted values of level are: BINARY, NOMINAL, ORDINAL, and INTERVAL."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"BINARY","@Value2":"NOMINAL","@Value3":"ORDINAL","@Value4":"INTERVAL"},"StatementOptionToolTips":{"@ToolTip1":"BINARY level of measurement","@ToolTip2":"NOMINAL level of measurement","@ToolTip3":"ORDINAL level of measurement","@ToolTip4":"INTERVAL level of measurement"}},{"StatementOptionName":"ORDER=","StatementOptionHelp":{"#cdata":"Syntax: ORDER=order \n          \nSpecifies the sorting order of the values of an ordinal input variable."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ASCENDING","@Value2":"ASCFORMATTED","@Value3":"DESCENDING","@Value4":"DESFORMATTED","@Value5":"DSORDER"},"StatementOptionToolTips":{"@ToolTip1":"Ascending order of unformatted values","@ToolTip2":"Ascending order of formatted values","@ToolTip3":"Descending order of unformatted values","@ToolTip4":"Descending order of formatted values","@ToolTip5":"Order of appearance in the input data set"}}]}},{"StatementName":"IMPUTE","StatementHelp":{"#cdata":"Syntax: IMPUTE variable(s) <option(s)> ; \n\nThe IMPUTE statement names the variable(s) whose values PROC HPIMPUTE imputes. The statement \ncan appear multiple times. Note that the IMPUTE statement only takes numeric variables, character \nvariables are reported as an error. The variables in an IMPUTE statement must appear in an INPUT \nstatement; otherwise an error will be reported."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"METHOD=","StatementOptionHelp":{"#cdata":"Syntax: METHOD=MEAN | RANDOM | PMEDIAN    \n          \nSpecifies the method of imputation."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"MEAN","@Value2":"RANDOM","@Value3":"PMEDIAN"},"StatementOptionToolTips":{"@ToolTip1":"Replaces missing values with the algebraic mean of the variable. If there is no non-missing  value, the mean is 0.","@ToolTip2":"Replaces missing values with a random value drawn between the minimum and maximum of the  variable. If there is no non-missing value, the random value is 0.","@ToolTip3":"Replaces missing values with the pseudo-median of the variable. If there is no non-missing  value, the mean is 0."}},{"StatementOptionName":"VALUE=","StatementOptionHelp":{"#cdata":"Syntax: VALUE=<value> \n          \nReplaces missing values with the value specified by the user."},"StatementOptionType":"V"}]}},{"StatementName":"CODE","StatementHelp":{"#cdata":"Syntax: CODE <option(s)> ; \n\nThe CODE statement generates SAS DATA step code that mimics the computations done by the IMPUTE statement."},"StatementOptions":{"StatementOption":{"StatementOptionName":"FILE=","StatementOptionHelp":{"#cdata":"Syntax: FILE= filename \n          \nSpecifies the filename of the file to which the SAS score code is written."},"StatementOptionType":"V"}}},{"StatementName":"FREQ","StatementHelp":{"#cdata":"Syntax: FREQ variable ; \n\nThe variable in the FREQ statement identifies a numeric variable in the data set that \ncontains the frequency of occurrence for each observation. SAS High-Performance Analytics \nprocedures that support the FREQ statement treat each observation as if it appeared f times, \nwhere f is the value of the FREQ variable for the observation. If the frequency value is not \nan integer, it is truncated to an integer. If the frequency value is less than 1 or missing, \nthe observation is not used in the analysis. When the FREQ statement is not specified, each \nobservation is assigned a frequency of 1."},"StatementOptions":null},{"StatementName":"ID","StatementHelp":{"#cdata":"Syntax: ID variables ; \n\nThe ID statement lists one or more variables from the input data set that are transferred \nto the output data set. The ID statement accepts numeric and character variables. For example, \nwhen an OUTPUT statement is used, the ID variables, followed by indicator variables and imputed \nvariables, are added to the output data set. \n\nDefault: By default, the HPIMPUTE procedure does not include all variables from the input data \nset in the output data sets. \n\nRequirement: The variables in an ID statement must not appear in any INPUT statement, otherwise \nan error will be reported. \n\nThe ID statement is optional."},"StatementOptions":null},{"StatementName":"PERFORMANCE","StatementHelp":{"#cdata":"Syntax: PERFORMANCE < performance-options > ;\n      \nThe PERFORMANCE statement defines performance parameters for multithreaded and distributed \ncomputing, passes variables about the distributed computing environment, and requests detailed \nresults about the performance characteristics of a High-Performance Analytics procedure.\n\nWith the PERFORMANCE statement, you can also control whether the HPNLIN procedure executes \nin SMP or MPP mode."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COMMIT=","StatementOptionHelp":{"#cdata":"Syntax: COMMIT=n\n          \nRequests that the High-Performance Analytics procedure write periodic updates to the \nSAS Log when observations are sent from the client to the appliance for distributed \nprocessing.\n\nHigh-Performance Analytics procedures do not have to use input data that are stored \nin the appliance. You can perform distributed computations regardless of the origin \nor format of the input data, provided the data are in a format that can be read by \nthe SAS System (for example, because a SAS/ACCESS engine is available)."},"StatementOptionType":"V"},{"StatementOptionName":"CPUCOUNT=","StatementOptionHelp":{"#cdata":"Syntax: CPUCOUNT=ACTUAL | num\n          \nSpecifies how many processors the procedure assumes are available on each host in the \ncomputing environment. num can be any integer from 1 to 256.\n\nCPUCOUNT=ACTUAL sets CPUCOUNT to the number of physical processors available. This number\ncan be less than the physical number of CPUs if the SAS process has been restricted by system\nadministration tools. Setting CPUCOUNT= to a number greater than the actual number of available\nCPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system\noption.\n\nIf a High-Performance Analytics procedure executes in SMP mode, this option refers to the client\nmachine of the SAS session. In MPP mode, this option applies to the nodes on the appliance."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ACTUAL","@Value2":"<num>"},"StatementOptionToolTips":{"@ToolTip1":"Sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","@ToolTip2":"Replace <num> with an actual number. Setting CPUCOUNT= to a number  greater than the actual number of available CPUs might result in reduced performance. This  option overrides the CPUCOUNT= SAS system option."}},{"StatementOptionName":"DATASERVER=","StatementOptionHelp":{"#cdata":"Syntax: DATASERVER=\u201cname\u201d\n          \nSpecifies the name of the server on Teradata systems as defined through the hosts file \nand as used in the LIBNAME statement for Teradata. For example, if the hosts file defines\n\n    myservercop1 33.44.55.66\n    \nas the server for Teradata, then a LIBNAME specification would be as follows:\n\n    libname TDLib teradata server=myserver user= password= database= ;\n    \nA PERFORMANCE statement to induce running alongside the Teradata server would specify the\nfollowing:\n\n    performance dataserver=\"myserver\";\n    \nIf the DATASERVER= option is specified, it overrides the GRIDDATASERVER environment \nvariable."},"StatementOptionType":"V"},{"StatementOptionName":"DETAILS","StatementOptionHelp":{"#cdata":"Requests a table that shows a timing breakdown of the procedure steps."},"StatementOptionType":"V"},{"StatementOptionName":"TIMEOUT=","StatementOptionHelp":{"#cdata":"Syntax: TIMEOUT=s\n          \nSpecifies the timeout in seconds for a High-Performance Analytics procedure to wait for a connection\nto the appliance and establish a connection back to the client. The default is s=120 seconds. If jobs\nare submitted to the appliance through workload management tools that might suspend access to the\nappliance for a longer period, you might want to increase the timeout value."},"StatementOptionType":"V"},{"StatementOptionName":"HOST=|GRIDHOST=","StatementOptionHelp":{"#cdata":"Syntax: HOST=\u201cname\u201d | GRIDHOST=\u201cname\u201d \n          \nSpecifies the name of the appliance host in single or double quotes. If the HOST= option \nis specified, it overrides the value of the GRIDHOST environment variable."},"StatementOptionType":"V"},{"StatementOptionName":"INSTALL=|INSTALLLOC=","StatementOptionHelp":{"#cdata":"Syntax: INSTALL=\u201cname\u201d | INSTALLLOC=\u201cname\u201d \n          \nSpecifies the directory in which the High-Performance Analytics shared libraries are \ninstalled on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC \nenvironment variable."},"StatementOptionType":"V"},{"StatementOptionName":"NODES=|NNODES=","StatementOptionHelp":{"#cdata":"Syntax: NODES=n | NNODES=n\n          \nSpecifies the number of nodes in the distributed computing environment, provided that \nthe data are not processed alongside the database.\n\nIf you specify NODES=0, you indicate that you want to process the data in SMP mode on \nthe client machine. If the input data are not alongside the database, this is the default. \nThe High-Performance Analytics procedures then perform the analysis mutlithreaded on the client."},"StatementOptionType":"V"},{"StatementOptionName":"NTHREADS=","StatementOptionHelp":{"#cdata":"Syntax: NTHREADS=n \n          \nSpecifies the number of threads for analytic computations and overrides the SAS system option\nTHREADS | NOTHREADS. If you do not specify the NTHREADS= option, the number of threads\nare determined based on the number of CPUs on the host on which the analytic computations execute.\nThe algorithm by which a CPU count is converted to a thread count is specific to the High-\nPerformance Analytics procedure. Most procedures create one thread per CPU for the analytic computations.\nBy default, High-Performance Analytics procedures execute in multiple concurrent threads unless\nturned off by the NOTHREADS system option or you force single-threaded execution with\nNTHREADS=1. The largest number that can be specified for n is 256. Individual High-Performance\nAnalytics procedures can impose more stringent limits if called for by algorithmic considerations.\nYou can affect the determination of the CPU count with the CPUCOUNT= option in the PERFORMANCE\nstatement.\n\nNOTE: The SAS system options THREADS | NOTHREADS apply to the client machine on which\nthe SAS High-Performance Analytics procedures execute. They do not apply to the compute nodes\nin a distributed environment."},"StatementOptionType":"V"}]}}]}}}