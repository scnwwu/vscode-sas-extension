{"Procedure":{"Name":"HPLSO","ProductGroup":"HPA","ProcedureHelp":{"#cdata":"Syntax: PROC HPLSO options ; \n\n  PERFORMANCE options ;  \n    \nThe HPLSO procedure performs general optimization of nonlinear functions that are defined \nby the Base SAS FCMP procedure over both continuous and integer variables. These functions \ncan be nonsmooth, discontinuous, and possibly computationally expensive to evaluate."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"CACHEIN=","ProcedureOptionHelp":{"#cdata":"Syntax: CACHEIN=SAS-data-set\n      \nNames a previously computed sample set. Using a previously computed sample set enables PROC HPLSO \nto warm-start. It is crucial that the nonlinear objective and function values are identical to those \nthat were used when the cache data set was generated."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FIRSTGEN=","ProcedureOptionHelp":{"#cdata":"Syntax: FIRSTGEN=SAS-data-set \n      \nSpecifies an initial sample set that defines a subset of the initial population. The columns \nof this data set should coincide with the same format that is used by the PRIMALIN= data set. \nIf the population size is smaller than this set, only the first points of this set are used."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LINCON=","ProcedureOptionHelp":{"#cdata":"Syntax: LINCON=SAS-data-set \n      \nDescribes the optimization problem\u2019s linear constraints by using a dense format. The \ncorresponding data set should have columns _LB_ and _UB_ to describe lower and upper \nbounds, respectively. The column _ID_ is reserved for the corresponding constraint name. \nThe remaining columns must correspond to the linear coefficients of the variables that \nare listed in the VARIABLES= option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MPSDATA=","ProcedureOptionHelp":{"#cdata":"Syntax: MPSDATA=SAS-data-set \n      \nSpecifies a data set that can be used as a sparse alternative to the LINCON= option, \nwhich uses a dense format to define variables. Mathematical Programming System (MPS) \nis a common file format for representing linear and mixed-integer mathematical programs. \nFor an example of using the OPTMODEL procedure to create the corresponding MPS file, \nsee Using MPS Format. Internally binary variables are converted into integer variables \nwith lower and upper bounds of and , respectively."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NLINCON=","ProcedureOptionHelp":{"#cdata":"Syntax: NLINCON=SAS-data-set \n      \nNames the FCMP functions to be used from the current library as nonlinear constraints, \nalong with respective bounds. This data set should contain three columns: _ID_ to specify \nthe corresponding FCMP function names and _LB_ and _UB_ to specify the lower and upper \nbounds for the corresponding constraints, respectively."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OBJECTIVE=","ProcedureOptionHelp":{"#cdata":"Syntax: OBJECTIVE=SAS-data-set \n      \nNames the FCMP functions to be used from the current library to form the objective. \nAt a minimum, this data set should have three columns: _ID_ to specify the function \nname to be used internally by the solver, _FUNCTION_ to specify the corresponding \nFCMP function, and _SENSE_ to specify whether the objective is to be minimized or \nmaximized. PROC HPLSO enables you to implicitly define your objective function by \nusing an external data set and an intermediate FCMP function definition that can \nbe used as placeholders to store temporary terms with respect to the external data \nset."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"PRIMALIN=","ProcedureOptionHelp":{"#cdata":"Syntax: PRIMALIN=SAS-data-set \n      \nSpecifies an initial sample set to be evaluated. Initial data sets might be useful \nover a sequence of runs, when you want to ensure that PROC HPLSO generates points \nthat are at least as good as your current best solution. This option is more general \nthan the FIRSTGEN= option because points defined in this data set might or might not \nbe used to define the initial population for the genetic algorithm (GA)."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"QPSDATA=","ProcedureOptionHelp":{"#cdata":"Syntax: QPSDATA=SAS-data-set \n      \nSpecifies a data set that can be used as a sparse alternative to the LINCON= option, \nwhich uses a dense format to define variables. Quadratic Programming System (QPS) is \na common file format for representing linear and mixed-integer mathematical programs \nwith quadratic terms in the objective function. This option differs from the MPSDATA= \noption in that any quadratic terms in the objective can be included in the data set. \nDo not use this option if the problem does not have quadratic terms. For an example \nof using PROC OPTMODEL to create the corresponding QPS file, see Using QPS Format. \nInternally binary variables are converted into integer variables with lower and upper \nbounds of 0 and 1, respectively."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"VARIABLES=","ProcedureOptionHelp":{"#cdata":"Syntax: VARIABLES=SAS-data-set \n      \nStores the variable names, bounds, type, and scale. These names must match corresponding \nnames, FCMP functions, and related data sets."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CACHEOUT=","ProcedureOptionHelp":{"#cdata":"Syntax: CACHEOUT=SAS-data-set \n      \nSpecifies the data set to which all completed function evaluations are output."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LASTGEN=","ProcedureOptionHelp":{"#cdata":"Syntax: LASTGEN=SAS-data-set \n      \nSpecifies the data set to which the members of the current genetic algorithm population \nare returned on exit. If more than one genetic algorithm is used, the data set combines \nthe members from each population into a single data set."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"PRIMALOUT=","ProcedureOptionHelp":{"#cdata":"Syntax: PRIMALOUT=SAS-data-set \n      \nSpecifies the output solution set. You can use this data set in future solves as the input \nset for the PRIMALIN= option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSFCONV=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSFCONV=r[n] \n          \nSpecifies an absolute function convergence criterion. PROC HPLSO stops when the changes \nin the objective function and constraint violation values in successive iterations meet \nthe following criterion: \n\n  |f(\u03f4\u207d\u207f\u207b\u00b9\u207e) - f(\u207d\u207f\u207e)| + |\u03f4(x\u207d\u207f\u207b\u00b9\u207e) - \u03f4(x\u207d\u207f\u207e)| \u2264 r\n\nwhere \u03f4(x) denotes the maximum constraint violation at point x. The optional integer value n \nspecifies the number of successive iterations for which the criterion must be satisfied before \nthe process is terminated. The default is r=1E-6 and n=10. To cause an early exit you must \nspecify a value for that is less than the value of the MAXGEN option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXFUNC=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXFUNC=i] \n          \nSpecifies the maximum number of function calls in the optimization process."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXGEN=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXGEN=i] \n          \nSpecifies the maximum number of genetic algorithm iterations. The default is 500."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXTIME=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXTIME=r] \n          \nSpecifies an upper limit on the real time (in seconds) used in the optimization process. \nThe actual running time of PROC HPLSO optimization might be longer because the actual \nrunning time includes the rest of the time needed to finish current function evaluations, \ntime for the output of the (temporary) results, and (if required) the time for saving the \nresults to appropriate data sets. By default, MAXTIME is not used."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FEASTOL=","ProcedureOptionHelp":{"#cdata":"Syntax: FEASTOL=r \n      \nSpecifies a feasibility tolerance for provided constraints. Specify r >= 0. The default is r=1E-3."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NGLOBAL=","ProcedureOptionHelp":{"#cdata":"Syntax: NGLOBAL=i\n      \nSpecifies the number of genetic algorithms to create, with each algorithm working on a separate \npopulation of the size specified by the POPSIZE= option. Specify as an integer greater than 0."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"POPSIZE=","ProcedureOptionHelp":{"#cdata":"Syntax: POPSIZE=i\n      \nSpecifies the population size used by the genetic algorithm. The default is 40 x ceil(log(b)+1), \nwhere n denotes the number of variables."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CACHEMAX=","ProcedureOptionHelp":{"#cdata":"Syntax: CACHEMAX=i  \n      \nSpecifies the maximum number of points that can be cached. The default is calculated \nautomatically by PROC HPLSO."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CACHETOL=","ProcedureOptionHelp":{"#cdata":"Syntax: CACHETOL=r  \n      \nSpecifies the cache tolerance to be used for caching and referencing previously evaluated points. \n\nThe value of r can be any number in the interval [0,1]. The default is 1E\u20139."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LOGFREQ=","ProcedureOptionHelp":{"#cdata":"Syntax: LOGFREQ=i\n      \nSpecifies that the solution progress be printed to the iteration log after every i iterations \nif the value of the LOGLEVEL= option is greater than or equal to 0. The value i=0 disables the \nprinting of the solution progress. The final iteration is always printed if i >= 1 and LOGLEVEL \nis nonzero. The default is 1."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LOGLEVEL=","ProcedureOptionHelp":{"#cdata":"Controls the verbosity of the log file. If LOGLEVEL=0, nothing is printed. Otherwise a short \nsummary of the problem description and final solution status is printed. If LOGLEVEL=0, this \noption overrides the LOGFREQ= option. The default is 1."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"0","@Value2":"1"},"ProcedureOptionToolTips":{"@ToolTip1":"Nothing is printed.","@ToolTip2":"A short summary of the problem description and final solution status is printed."}},{"ProcedureOptionName":"PRINTLEVEL=","ProcedureOptionHelp":{"#cdata":"Controls whether a summary of the problem and solution should be printed. If PRINTLEVEL=1, \nthen the Output Delivery System (ODS) tables ProblemSummary, SolutionSummary, and \nPerformanceInfo are produced and printed. If PRINTLEVEL=0, then no ODS tables are \nproduced. The default is 1."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"0","@Value2":"1"},"ProcedureOptionToolTips":{"@ToolTip1":"No ODS tables are produced.","@ToolTip2":"The Output Delivery System (ODS) tables ProblemSummary, SolutionSummary, and PerformanceInfo  are produced and printed. This is the default."}},{"ProcedureOptionName":"SEED=","ProcedureOptionHelp":{"#cdata":"Syntax: SEED=i\n      \nSpecifies a nonnegative integer as a seed value for the pseudorandom number generator. \nPseudorandom numbers are used within the genetic algorithm."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":{"StatementName":"PERFORMANCE","StatementHelp":{"#cdata":"Syntax: PERFORMANCE < performance-options > ;\n      \nThe PERFORMANCE statement defines performance parameters for multi-threaded and distributed \ncomputing, communicates variable information regarding the distributed computing environment, \nand requests detailed results about the performance characteristics of the HPBIN procedure. \nWith the PERFORMANCE statement, you can control whether the HPBIN procedure executes in \nsymmetric multiprocessing or massively parallel mode."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COMMIT=","StatementOptionHelp":{"#cdata":"Syntax: COMMIT=n\n          \nThis option specifies the minimum number of observations transferred from the client to the \nappliance necessary to update the SAS Log. For instance, if you specify COMMIT=5000, then \nevery time the number of observations sent exceeds an integer multiple of 5000 a log message \nis produced. This message indicates the actual number of observations distributed, not the \nCOMMIT= value that triggered the message. "},"StatementOptionType":"V"},{"StatementOptionName":"CPUCOUNT=","StatementOptionHelp":{"#cdata":"Syntax: CPUCOUNT=ACTUAL | num\n          \nThis argument specifies how many processors PROC HPBIN assumes are available on each host \nin the computing environment. Valid values for number are integers between 1 and 256, \ninclusive. Setting CPUCOUNT= to a value greater than the actual number of available CPUs \nmight results in reduced performance. Specify CPUCOUNT=ACTUAL to set CPUCOUNT= to the \nnumber of processors physically available. This number can be less than the physical \nnumber of CPUs if the SAS process has been restricted by system administration tools. \nThis option overrides the CPUCOUNT= SAS system option. If PROC HPBIN executes in SMP \nmode, then this option referes to the client machine of the SAS session. If PROC HPBIN \nexecutes in MPP mode, then this option applies the nodes on the appliance."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ACTUAL","@Value2":"<num>"},"StatementOptionToolTips":{"@ToolTip1":"Sets CPUCOUNT to the number of processors physically available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","@ToolTip2":"Replace <num> with an actual number. Setting CPUCOUNT= to a number  greater than the actual number of available CPUs might result in reduced performance. This  option overrides the CPUCOUNT= SAS system option."}},{"StatementOptionName":"DATASERVER=","StatementOptionHelp":{"#cdata":"Syntax: DATASERVER=\u201cname\u201d\n          \nSpecifies the name of the server on Teradata systems as defined through the hosts file \nand as used in the LIBNAME statement for Teradata. For example, if the hosts file defines\n\n    myservercop1 33.44.55.66\n    \nas the server for Teradata, then a LIBNAME specification would be as follows:\n\n    libname TDLib teradata server=myserver user= password= database= ;\n    \nA PERFORMANCE statement to induce running alongside the Teradata server would specify the\nfollowing:\n\n    performance dataserver=\"myserver\";\n    \nIf the DATASERVER= option is specified, it overrides the GRIDDATASERVER environment \nvariable."},"StatementOptionType":"V"},{"StatementOptionName":"DETAILS","StatementOptionHelp":{"#cdata":"Specify this option to request a table that shows a timing breakdown of the procedure steps."},"StatementOptionType":"V"},{"StatementOptionName":"TIMEOUT=","StatementOptionHelp":{"#cdata":"Syntax: TIMEOUT=s\n          \nThis options specifies the length of time, in seconds, PROC HPBIN should wait for a connection \nto the appliance and to establish a connection back to the client. The default value for s is \n120 seconds. If jobs are submitted to the appliance through workload management tools that might \nsuspend access to the appliance for a longer period, you might want to increase the timeout value. "},"StatementOptionType":"V"},{"StatementOptionName":"HOST=|GRIDHOST=","StatementOptionHelp":{"#cdata":"Syntax: HOST=name | GRIDHOST=name\n          \nThis option specifies the name of the appliance host. The HOST= option overrides the value \nof the GRIDHOST environment variable."},"StatementOptionType":"V"},{"StatementOptionName":"INSTALL=|INSTALLLOC=","StatementOptionHelp":{"#cdata":"Syntax: INSTALL=\u201cname\u201d | INSTALLLOC=\u201cname\u201d \n          \nThis option specifies the directory where the High-Performance Analytics shared libraries \nare installed on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC \nenvironment variable."},"StatementOptionType":"V"},{"StatementOptionName":"NODES=|NNODES=","StatementOptionHelp":{"#cdata":"Syntax: NODES=n | NNODES=n\n          \nThis option specifies the number of nodes in the distributed computing environment, \nprovided that the data are not processed alongside the database. \n\nSpecify NODES=0 to indicate that you want to process the data in SMP mode on the client \nmachine. If the input data are not alongside the database, this is the default setting. \nThe HPBIN procedure then performs multithreaded analysis on the client. If the data are \nnot read alongside the database, the NODES= option specifies the number of nodes on the \nappliance that are involved in the analysis. If the number of nodes can be modified by \nthe application, you can specify a NODES= option where n exceeds the number of physical \nnodes on the appliance. The High-Performance Analytics software then oversubscribes the \nnodes and associates nodes with multiple units of work. For example, on a system with \n16 appliance nodes, the following statement would oversubscribe the system by a factor \nof 3: \n\n  performance nodes=48 host=\"hpa.sas.com\"; \n  \nGenerally, it is not advisable to oversubscribe the system because the analytic code \nis optimized for a certain level of multithreading on the nodes that depend on the CPU \ncount. If the data are read alongside the distributed database on the appliance, specifying \na nonzero value for the NODES= option has no effect. The number of units of work in the \ndistributed computing environment is then determined by the distribution of the data and \ncannot be altered."},"StatementOptionType":"V"},{"StatementOptionName":"NTHREADS=","StatementOptionHelp":{"#cdata":"Syntax: NTHREADS=n \n          \nThis option specifies the number of threads used for analytic computations and overrides the \nSAS system option THREADS | NOTHREADS. If you do not specify the NTHREADS= option, then the \nnumber of threads is determined based on the number of CPUs on the host machine where the \nanalytic computations execute. By default, High-Performance Analytics procedures execute in \nmultiple concurrent threads, unless you disable this behavior with the NOTHREADS system option \nor you specify NTHREADS=1 to force single-threaded execution. The value specified here must \nnot exceed 256.\n\nNote:The SAS system option THREADS | NOTHREADS applies to the current machine where the SAS \nHigh-Performance Analytics procedures execute. This option does not apply to the compute nodes \nin a distributed environment."},"StatementOptionType":"V"}]}}}}}