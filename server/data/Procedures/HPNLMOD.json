{"Procedure":{"Name":"HPNLMOD","ProductGroup":"SAS/STAT/HPA","#comment":{},"ProcedureHelp":{"#cdata":"Syntax: PROC HPNLMOD < options > ;\n    BOUNDS inequality < ,. . . ,inequality > ;\n    BY variables ;\n    ESTIMATE \u2019label\u2019 expression < options > ;\n    MODEL model specification ;\n    PARAMETERS < parameter-specification > < ,. . . , parameter-specification > ;\n    PERFORMANCE < performance-options > ;\n    PREDICT \u2019label\u2019 expression keyword=names < . . . keyword=names > < options > ;\n    RESTRICT restriction1 < , restriction2 . . . > ;\n    Programming Statements ;\n\nThe HPNLMOD procedure is a high-performance procedure that uses either nonlinear least squares or\nmaximum likelihood to fit nonlinear regression models on the SAS appliance. PROC HPNLMOD enables\nyou to specify the model with SAS programming statements, which gives you greater flexibility in modeling\nthe relationship between the response variable and independent (regressor) variables than SAS procedures\nthat use a more structured MODEL statement. \n\nThe HPNLMOD procedure does the following:\n  \u2022 can perform analysis on a massively parallel SAS high-performance appliance\n  \u2022 reads input data in parallel and writes output data in parallel when the data source is the appliance\n    database\n  \u2022 is highly multithreaded during all phases of analytic execution\n  \u2022 computes analytical derivatives of user-provided expressions for more robust parameter estimations\n  \u2022 evaluates user-provided expressions and their confidence limits with the ESTIMATE and PREDICT\n    statements\n  \u2022 estimates parameters without specifying a particular distribution function by using the least squares\n    method\n  \u2022 estimates parameters by using the maximum likelihood method when either a built-in distribution\n    function is specified or a likelihood function is provided\n\nWith the HPNLMOD procedure you can read and write data in distributed form and perform analyses in\nparallel in symmetric multiprocessing (SMP) or massively parallel processing (MPP) mode."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"ABSCONV=|ABSTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSCONV= | ABSTOL=r] \n      \nSpecifies an absolute function convergence criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSFCONV=|ABSFTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSFCONV=r<n> | ABSFTOL=r<n>] \n      \nSpecifies an absolute function convergence criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSGCONV=|ABSGTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSGCONV=r<n> | ABSGTOL=r<n>] \n      \nSpecifies an absolute gradient convergence criterion. Termination requires the maximum \nabsolute gradient element to be small."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ALPHA=","ProcedureOptionHelp":{"#cdata":"[Syntax: ALPHA=\u03b1] \n      \nSpecifies the level of significance \u03b1 used in the construction of 100(1-\u03b1)% confidence intervals. The\nvalue must be strictly between 0 and 1; the default value of \u03b1=05 results in 95% intervals. This\nvalue is used as the default confidence level for limits computed in the \u201cParameter Estimates\u201d table\nand is used in the LOWER and UPPER options in the PREDICT statement."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CORR","ProcedureOptionHelp":{"#cdata":"Requests the approximate correlation matrix for the parameter estimates."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"COV","ProcedureOptionHelp":{"#cdata":"Requests the approximate covariance matrix for the parameter estimates."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"[Syntax: DATA=SAS-data-set] \n      \nNames the SAS data set to be used by PROC HPNLMOD. The default is the most recently created data\nset. \n\nIf the procedure executes in MPP mode, the input data are distributed to memory on the appliance\nnodes and analyzed in parallel, unless the data are already distributed in the appliance database. In the\nlatter case, the procedure reads the data alongside the distributed database"},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"DF=","ProcedureOptionHelp":{"#cdata":"[Syntax: DF=n] \n      \nSpecifies the default number of degrees of freedom to use in the calculation of p-values and confidence\nlimits for additional parameter estimates."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ECORR","ProcedureOptionHelp":{"#cdata":"Requests the approximate correlation matrix for all expressions that are specified in ESTIMATE\nstatements."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"ECOV","ProcedureOptionHelp":{"#cdata":"Requests the approximate covariance matrix for all expressions that are specified in ESTIMATE\nstatements."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"FCONV=|FTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: FCONV=r<n> | FTOL=r<n>] \n      \nSpecifies the relative function convergence criterion. \n\nThe optional integer value n specifies the number of successive iterations for which the criterion must\nbe satisfied before the process can terminate."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FMTLIBXML=","ProcedureOptionHelp":{"#cdata":"[Syntax: FMTLIBXML=file-ref]\n      \nSpecifies the file reference for the XML stream that contains the user-defined format definitions. Userdefined\nformats are handled differently in a distributed computing environment than they are handled\nin other SAS products."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"GCONV=|GTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: GCONV=r | GTOL=r] \n      \nSpecifies the relative gradient convergence criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXFUNC=|MAXFU=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXFUNC=n | MAXFU=n] \n      \nSpecifies the maximum number n of function calls in the optimization process. The default values are\nas follows, depending on the optimization technique (which you specify in the TECHNIQUE= option):\n\n\u2022 TRUREG, NRRIDG, NEWRAP: 125\n\u2022 QUANEW, DBLDOG: 500\n\u2022 CONGRA: 1,000\n\u2022 NMSIMP: 3,000 \n\nOptimization can terminate only after completing a full iteration. Therefore, the number of function\ncalls that are actually performed can exceed the number that is specified by the MAXFUNC= option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXITER=|MAXIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXITER=n | MAXIT=n] \n      \nSpecifies the maximum number n of iterations in the optimization process. The default values are as\nfollows, depending on the optimization technique (which you specify in the TECHNIQUE= option):\n  \u2022 TRUREG, NRRIDG, NEWRAP: 50\n  \u2022 QUANEW, DBLDOG: 200\n  \u2022 CONGRA: 400\n  \u2022 NMSIMP: 1,000 \n  \nThese default values also apply when n is specified as a missing value."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXTIME=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXTIME=r] \n      \nSpecifies an upper limit of r seconds of CPU time for the optimization process. The default value is the\nlargest floating-point double representation of your computer. The time specified by the MAXTIME=\noption is checked only once at the end of each iteration. Therefore, the actual running time can be\nlonger than that specified by the MAXTIME= option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MINITER=|MINIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: MINITER=n | MINIT=n] \n      \nSpecifies the minimum number of iterations. The default value is 0. If you request more iterations\nthan are actually needed for convergence to a stationary point, the optimization algorithms can behave\nstrangely. For example, the effect of rounding errors can prevent the algorithm from continuing for the\nrequired number of iterations.."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NOITPRINT","ProcedureOptionHelp":{"#cdata":"Suppresses the display of the \u201cIteration History\u201d table."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOPRINT","ProcedureOptionHelp":{"#cdata":"Suppresses the generation of ODS output."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OUT=","ProcedureOptionHelp":{"#cdata":"Syntax: OUT=SAS-data-set \n      \nNames the SAS data set to be created when one or more PREDICT statements are specified. A single\nOUT= data set is created to contain all predicted values when more than one PREDICT statement\nis specified. An error message is produced if a PREDICT statement is specified and an OUT= data \nset is not specified."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SINGULAR=","ProcedureOptionHelp":{"#cdata":"[Syntax: SINGULAR=number]\n      \nTunes the general singularity criterion applied by the HPNLMOD procedure in sweeps and inversions.\nThe default is 1E4 times the machine epsilon; this product is approximately 1E\udbc0\udc0012 on most computers."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"TECHNIQUE=|TECH=","ProcedureOptionHelp":{"#cdata":"[Syntax: TECHNIQUE= | TECH=name] \n      \nSpecifies the optimization technique."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"CONGRA","@Value2":"DBLDOG","@Value3":"LEVMAR","@Value4":"NEWRAP","@Value5":"NMSIMP","@Value6":"NRRIDG","@Value7":"QUANEW","@Value8":"TRUREG","@Value9":"NONE"},"ProcedureOptionToolTips":{"@ToolTip1":"Performs a conjugate-gradient optimization.","@ToolTip2":"Performs a version of double-dogleg optimization.","@ToolTip3":"Performs a Levenberg-Marquardt optimization.","@ToolTip4":"Performs a Newton-Raphson optimization that combines a line-search algorithm with ridging.","@ToolTip5":"Performs a Nelder-Mead simplex optimization.","@ToolTip6":"Performs a Newton-Raphson optimization with ridging.","@ToolTip7":"Performs a quasi-Newton optimization.","@ToolTip8":"Performs a trust-region optimization.","@ToolTip9":"Performs no optimization."}},{"ProcedureOptionName":"XMLFORMAT=","ProcedureOptionHelp":{"#cdata":"[Syntax: XMLFORMAT=filename] \n      \nSpecifies the file name for the XML stream that contains the user-defined format definitions. Userdefined\nformats are handled differently in a distributed computing environment than they are handled\nin other SAS products."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"BOUNDS","StatementHelp":{"#cdata":"Syntax: BOUNDS constraint < , constraint . . . > ; \n      \nwhere constraint represents \n\n  < number operator > parameter-list < operator number > \n  \nBoundary constraints are specified with a BOUNDS statement. One- or two-sided boundary constraints are\nallowed. The list of boundary constraints are separated by commas. For example:\n\n  bounds 0 <= a1-a9 X <= 1, -1 <= c2-c5;\n  bounds b1-b10 y >= 0; \n\nYou can specify more than one BOUNDS statement. If you specify more than one lower (or upper) bound for\nthe same parameter, the maximum (or minimum) of these is taken."},"StatementOptions":null},{"StatementName":"BY","StatementHelp":{"#cdata":"Syntax: BY variables ; \n      \nYou can specify a BY statement with PROC HPNLMOD to obtain separate analyses of observations in\ngroups that are defined by the BY variables. When a BY statement appears, the procedure expects the input\ndata set to be sorted in order of the BY variables. If you specify more than one BY statement, only the last\none specified is used. \n\nIf your input data set is not sorted in ascending order, use one of the following alternatives:\n  \u2022 Sort the data by using the SORT procedure with a similar BY statement.\n  \u2022 Specify the NOTSORTED or DESCENDING option in the BY statement for the HPNLMOD procedure.   \n    The NOTSORTED option does not mean that the data are unsorted but rather that the data are arranged\n    in groups (according to values of the BY variables) and that these groups are not necessarily in\n    alphabetical or increasing numeric order.\n  \u2022 Create an index on the BY variables by using the DATASETS procedure (in Base SAS software).\n  \nBY statement processing is not supported when the HPNLMOD procedure runs alongside the database or\nalongside the Hadoop Distributed File System (HDFS). These modes are used if the input data are stored in a\ndatabase or HDFS and the grid host is the appliance that houses the data."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DESCENDING","StatementOptionHelp":{"#cdata":"Specifies that the observations are sorted in descending order by the variable that \nimmediately follows the word DESCENDING in the BY statement."},"StatementOptionType":"S"},{"StatementOptionName":"NOTSORTED","StatementOptionHelp":{"#cdata":"The NOTSORTED option does not mean that the data are unsorted but rather that the data are arranged\nin groups (according to values of the BY variables) and that these groups are not necessarily in\nalphabetical or increasing numeric order."},"StatementOptionType":"S"}]}},{"StatementName":"ESTIMATE","StatementHelp":{"#cdata":"Syntax: ESTIMATE 'label' expression < options > ; \n      \nThe ESTIMATE statement enables you to compute an additional estimate that is a function of the parameter\nvalues. You must provide a quoted string to identify the estimate and then provide a valid SAS expression.\nMultiple ESTIMATE statements are permitted, and results from all statements are listed in a common\ntable. PROC HPNLMOD computes approximate standard errors for the estimates by using the delta method\n(Billingsley 1986). It uses these standard errors to compute corresponding t statistics, p-values, and confidence\nlimits.\n\nThe ECOV option in the PROC HPNLMOD statement produces a table that contains the approximate\ncovariance matrix of all the additional estimates you specify. The ECORR option produces the corresponding\ncorrelation matrix."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ALPHA=","StatementOptionHelp":{"#cdata":"[Syntax: ALPHA=\u03b1] \n          \nSpecifies the alpha level to be used in computing confidence limits. The default value corresponds to\nthe ALPHA= option in the PROC HPNLMOD statement."},"StatementOptionType":"V"},{"StatementOptionName":"DF=","StatementOptionHelp":{"#cdata":"[Syntax: DF=d] \n          \nSpecifies the degrees of freedom to be used in computing p-values and confidence limits. The default\nvalue corresponds to the DF= option in the PROC HPNLMOD statement."},"StatementOptionType":"V"}]}},{"StatementName":"MODEL","StatementHelp":{"#cdata":"Syntax: MODEL dependent-variable ~ distribution ; \n      \nThe MODEL statement is the mechanism for either using a distribution specification to specify the distribution\nof the data or using the RESIDUAL distribution to specify a predicted value. You must specify a single\ndependent variable from the input data set, a tilde (~), and then a distribution with its parameters. \n\nThe MODEL statement must follow any SAS programming statements you specify for computing parameters\nof the preceding distributions."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"BINARY","StatementOptionHelp":{"#cdata":"Syntax: binary(p)\n          \nSpecifies a binary (Bernoulli) distribution with probability of success p."},"StatementOptionType":"S"},{"StatementOptionName":"BINOMIAL","StatementOptionHelp":{"#cdata":"Syntax: binomial(n, p) \n          \nSpecifies a binomial distribution with count n and probability of success p."},"StatementOptionType":"S"},{"StatementOptionName":"GAMMA","StatementOptionHelp":{"#cdata":"Syntax: gamma(a, b) \n          \nSpecifies a gamma distribution with shape a and scale b."},"StatementOptionType":"S"},{"StatementOptionName":"GENERAL","StatementOptionHelp":{"#cdata":"[Syntax: general(ll)] \n          \nSpecifies a general log-likelihood function that you construct using SAS programming \nstatements."},"StatementOptionType":"S"},{"StatementOptionName":"NEGBIN","StatementOptionHelp":{"#cdata":"Syntax: negbin(n, p)] \n          \nSpecifies a negative binomial distribution with count n and probability of success p."},"StatementOptionType":"S"},{"StatementOptionName":"NORMAL","StatementOptionHelp":{"#cdata":"Syntax: normal(m, v) \n          \nSpecifies a normal (Gaussian) distribution with mean m and variance v"},"StatementOptionType":"S"},{"StatementOptionName":"POISSON","StatementOptionHelp":{"#cdata":"Syntax: poisson(m)] \n          \nSpecifies a Poisson distribution with mean m"},"StatementOptionType":"S"},{"StatementOptionName":"RESIDUAL|LS","StatementOptionHelp":{"#cdata":"Syntax: residual(m) | ls(m)\n          \nSpecifies no particular distribution. Instead minimize the sum of squares of the\ndifferences between m and the dependent variable."},"StatementOptionType":"S"}]}},{"StatementName":"PARAMETERS","StatementHelp":{"#cdata":"Syntax: PARAMETERS < parameter-specification > < ,. . . , parameter-specification > < / options > ;\nPARMS < parameter-specification > < ,. . . , parameter-specification > < / options > ;\n\nThe purpose of the PARAMETERS (PARMS) statement is to provide starting values for the HPNLMOD\nprocedure. You can provide values that define a single point in the parameter space or a set of points."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"BEST=","StatementOptionHelp":{"#cdata":"[Syntax: BEST=i > 0] \n          \nSpecifies the maximum number of parameter grid points and corresponding objective function values\nto display in the \u201cParameters\u201d table. If the BEST= option is specified, parameter grid points are listed\nin ascending order of objective function value. By default, all parameter grid points are displayed."},"StatementOptionType":"DV"},{"StatementOptionName":"PDATA=|DATA=","StatementOptionHelp":{"#cdata":"[Syntax: PDATA=SAS-data-set | DATA=SAS-data-set] \n          \nSpecifies the data set used to provide parameter starting values."},"StatementOptionType":"V"},{"StatementOptionName":"START=|DEFSTART=","StatementOptionHelp":{"#cdata":"[Syntax: START=value | DEFSTART=value] \n          \nspecifies a default starting value for all parameters."},"StatementOptionType":"V"}]}},{"StatementName":"PERFORMANCE","StatementHelp":{"#cdata":"Syntax: PERFORMANCE < performance-options > ;\n      \nThe PERFORMANCE statement defines performance parameters for multithreaded and distributed computing,\npasses variables about the distributed computing environment, and requests detailed results about the\nperformance characteristics of a SAS High-Performance Analytics procedure. \n\nWith the PERFORMANCE statement, you can also control whether a SAS High-Performance Analytics\nprocedure executes in symmetric multiprocessing or massively parallel processing mode."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COMMIT=","StatementOptionHelp":{"#cdata":"Syntax: COMMIT=n\n          \nRequests that the High-Performance Analytics procedure write periodic updates to the \nSAS Log when observations are sent from the client to the appliance for distributed \nprocessing.\n\nHigh-Performance Analytics procedures do not have to use input data that are stored \nin the appliance. You can perform distributed computations regardless of the origin \nor format of the input data, provided the data are in a format that can be read by \nthe SAS System (for example, because a SAS/ACCESS engine is available)."},"StatementOptionType":"V"},{"StatementOptionName":"CPUCOUNT=","StatementOptionHelp":{"#cdata":"Syntax: CPUCOUNT=ACTUAL | num\n          \nSpecifies how many processors the procedure assumes are available on each host in the \ncomputing environment. num can be any integer from 1 to 256.\n\nCPUCOUNT=ACTUAL sets CPUCOUNT to the number of physical processors available. This number\ncan be less than the physical number of CPUs if the SAS process has been restricted by system\nadministration tools. Setting CPUCOUNT= to a number greater than the actual number of available\nCPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system\noption.\n\nIf a High-Performance Analytics procedure executes in SMP mode, this option refers to the client\nmachine of the SAS session. In MPP mode, this option applies to the nodes on the appliance."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ACTUAL","@Value2":"<num>"},"StatementOptionToolTips":{"@ToolTip1":"Sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","@ToolTip2":"Replace <num> with an actual number. Setting CPUCOUNT= to a number  greater than the actual number of available CPUs might result in reduced performance. This  option overrides the CPUCOUNT= SAS system option."}},{"StatementOptionName":"DATASERVER=","StatementOptionHelp":{"#cdata":"Syntax: DATASERVER=\u201cname\u201d\n          \nSpecifies the name of the server on Teradata systems as defined through the hosts file \nand as used in the LIBNAME statement for Teradata. For example, if the hosts file defines\n\n    myservercop1 33.44.55.66\n    \nas the server for Teradata, then a LIBNAME specification would be as follows:\n\n    libname TDLib teradata server=myserver user= password= database= ;\n    \nA PERFORMANCE statement to induce running alongside the Teradata server would specify the\nfollowing:\n\n    performance dataserver=\"myserver\";\n    \nIf the DATASERVER= option is specified, it overrides the GRIDDATASERVER environment \nvariable."},"StatementOptionType":"V"},{"StatementOptionName":"DETAILS","StatementOptionHelp":{"#cdata":"Requests a table that shows a timing breakdown of the procedure steps."},"StatementOptionType":"V"},{"StatementOptionName":"TIMEOUT=","StatementOptionHelp":{"#cdata":"Syntax: TIMEOUT=s\n          \nSpecifies the timeout in seconds for a High-Performance Analytics procedure to wait for a connection\nto the appliance and establish a connection back to the client. The default is s=120 seconds. If jobs\nare submitted to the appliance through workload management tools that might suspend access to the\nappliance for a longer period, you might want to increase the timeout value."},"StatementOptionType":"V"},{"StatementOptionName":"HOST=|GRIDHOST=","StatementOptionHelp":{"#cdata":"Syntax: HOST=\u201cname\u201d | GRIDHOST=\u201cname\u201d \n          \nSpecifies the name of the appliance host in single or double quotes. If the HOST= option \nis specified, it overrides the value of the GRIDHOST environment variable."},"StatementOptionType":"V"},{"StatementOptionName":"INSTALL=|INSTALLLOC=","StatementOptionHelp":{"#cdata":"Syntax: INSTALL=\u201cname\u201d | INSTALLLOC=\u201cname\u201d \n          \nSpecifies the directory in which the High-Performance Analytics shared libraries are \ninstalled on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC \nenvironment variable."},"StatementOptionType":"V"},{"StatementOptionName":"NODES=|NNODES=","StatementOptionHelp":{"#cdata":"Syntax: NODES=n | NNODES=n\n          \nSpecifies the number of nodes in the distributed computing environment, provided that \nthe data are not processed alongside the database.\n\nIf you specify NODES=0, you indicate that you want to process the data in SMP mode on \nthe client machine. If the input data are not alongside the database, this is the default. \nThe High-Performance Analytics procedures then perform the analysis mutlithreaded on the client."},"StatementOptionType":"V"},{"StatementOptionName":"NTHREADS=","StatementOptionHelp":{"#cdata":"Syntax: NTHREADS=n \n          \nSpecifies the number of threads for analytic computations and overrides the SAS system option\nTHREADS | NOTHREADS. If you do not specify the NTHREADS= option, the number of threads\nare determined based on the number of CPUs on the host on which the analytic computations execute.\nThe algorithm by which a CPU count is converted to a thread count is specific to the High-\nPerformance Analytics procedure. Most procedures create one thread per CPU for the analytic computations.\nBy default, High-Performance Analytics procedures execute in multiple concurrent threads unless\nturned off by the NOTHREADS system option or you force single-threaded execution with\nNTHREADS=1. The largest number that can be specified for n is 256. Individual High-Performance\nAnalytics procedures can impose more stringent limits if called for by algorithmic considerations.\nYou can affect the determination of the CPU count with the CPUCOUNT= option in the PERFORMANCE\nstatement.\n\nNOTE: The SAS system options THREADS | NOTHREADS apply to the client machine on which\nthe SAS High-Performance Analytics procedures execute. They do not apply to the compute nodes\nin a distributed environment."},"StatementOptionType":"V"}]}},{"StatementName":"PREDICT","StatementHelp":{"#cdata":"Syntax: PREDICT 'label' expression < options > ;\n    PREDICT 'label' MEAN < options > ; \n\nThe PREDICT statement enables you to construct predictions of an expression across all of the \nobservations in the input data set. Multiple PREDICT statements are permitted. You must provide \na quoted string to identify the predicted expression and then provide the predicted value. You \ncan specify the predicted value either with a SAS programming expression that involves the input \ndata set variables and parameters or by using the keyword MEAN. If you specify the keyword MEAN, \nthe predicted mean value for the distribution specified in the MODEL statement is used. Predicted \nvalues are computed using the final parameter estimates. Standard errors of prediction are computed \nusing the delta method (Billingsley 1986; Cox 1998). Results for all PREDICT statements are placed \nin the output data set that you specify with the OUT= option in the PROC HPNLMOD statement."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ALPHA=","StatementOptionHelp":{"#cdata":"[Syntax: ALPHA=\u03b1] \n          \nSpecifies the alpha level to be used in computing confidence limits. The default value \ncorresponds to the ALPHA= option in the PROC HPNLIN statement.."},"StatementOptionType":"V"},{"StatementOptionName":"DF=","StatementOptionHelp":{"#cdata":"[Syntax: DF=d] \n          \nSpecifies the degrees of freedom to be used in computing confidence limits. The default value \ncorresponds to the DF= option in the PROC HPNLIN statement."},"StatementOptionType":"V"},{"StatementOptionName":"LOWER=","StatementOptionHelp":{"#cdata":"[Syntax: LOWER=name]\n          \nSpecifies a variable that contains the lower confidence limit of the predicted value."},"StatementOptionType":"V"},{"StatementOptionName":"MEAN","StatementOptionHelp":{"#cdata":"If you specify the keyword MEAN, the predicted mean value for the distribution specified in the \nMODEL statement is used. Predicted values are computed using the final parameter estimates."},"StatementOptionType":"S"},{"StatementOptionName":"PRED=","StatementOptionHelp":{"#cdata":"[Syntax: PRED=name] \n          \nSpecifies a variable that contains the predicted value."},"StatementOptionType":"V"},{"StatementOptionName":"PROBT=","StatementOptionHelp":{"#cdata":"[Syntax: PROBT=name] \n          \nSpecifies a variable that contains the p-value of the predicted value."},"StatementOptionType":"V"},{"StatementOptionName":"STDERR=","StatementOptionHelp":{"#cdata":"[Syntax: STDERR=name] \n          \nSpecifies a variable that contains the standard error of the predicted value."},"StatementOptionType":"V"},{"StatementOptionName":"TVALUE=","StatementOptionHelp":{"#cdata":"[Syntax: TVALUE=name] \n          \nSpecifies a variable that contains the t statistic for the predicted value."},"StatementOptionType":"V"},{"StatementOptionName":"UPPER=","StatementOptionHelp":{"#cdata":"[Syntax: UPPER=name] \n          \nSpecifies a variable that contains the upper confidence limit of the predicted value."},"StatementOptionType":"V"}]}},{"StatementName":"RESTRICT","StatementHelp":{"#cdata":"Syntax: RESTRICT restriction1 < , restriction2 . . . > ; \n\nThe RESTRICT statement imposes linear restrictions on the model\u2019s parameters estimates. You can specify\nany number of RESTRICT statements. \n\nEach restriction is written as an expression, followed by an equality operator (=) or an \ninequality operator (<, >, <=, >=), followed by a second expression: \n\n  expression operator expression\n\nThe operator can be =, <, >, <=, or >=. The operator and second expression are optional. When they are\nomitted, the operator defaults to = and the second expression defaults to the value 0. \n\nRestriction expressions can be composed of parameter names, arithmetic operators, functions, and constants.\nComparison operators (such as = or <) and logical operators (such as &) cannot be used in RESTRICT\nstatement expressions. Parameters named in restriction expressions must be among the parameters estimated\nby the model. Restriction expressions cannot refer to other variables defined in the program or the DATA=\ndata set. The restriction expressions must be linear functions of the parameters."},"StatementOptions":null},{"StatementName":"ABORT","StatementHelp":{"#cdata":"Syntax: ABORT; \n\nStops executing the current procedure, SAS job, or SAS session.\n\nThe ABORT statement does not allow any arguments."},"StatementOptions":null},{"StatementName":"CALL","StatementHelp":{"#cdata":"Syntax: CALL name [ ( expression [, expression ... ] ) ]; \n      \nInvokes a function or routine."},"StatementOptions":null},{"StatementName":"DELETE","StatementHelp":{"#cdata":"Syntax: DELETE; \n      \nStops processing the current observation."},"StatementOptions":null},{"StatementName":"DO","StatementHelp":{"#cdata":"Syntax: DO[variable = expression\n    [TO expression] [BY expression]\n    [, expression [ TO expression] [ BY expression ] ... ]\n    ]\n    [ WHILE expression ] [ UNTIL expression ] ; \n    \nThe DO statement does not allow a character index variable. Thus\n\n    do i = 1,2,3; \n    \nis supported, but the following statement is not supported:\n\n    do i = 'A','B','C';"},"StatementOptions":null},{"StatementName":"END","StatementHelp":{"#cdata":"Syntax: END; \n      \nEnds a DO group or SELECT group processing."},"StatementOptions":null},{"StatementName":"GOTO","StatementHelp":{"#cdata":"Syntax: GOTO statement_label; \n      \nJumps to a new statement."},"StatementOptions":null},{"StatementName":"IF","StatementHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions. \n\nSyntax: \n(1) IF expression THEN statement; \n    <ELSE statement;> \n(2) IF condition;"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"DO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"WHEN","StatementOptionHelp":{"#cdata":"WHEN statement in an IF-THEN-WHEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"OUTPUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"GO TO|GOTO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct. \n          \nSyntax: ... GO TO label; | ... GOTO label;\n      \nJumps to a new statement."},"StatementOptionType":"S"},{"StatementOptionName":"PUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"STOP","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct. \n          \nStops execution of the current DATA step."},"StatementOptionType":"S"},{"StatementOptionName":"SET","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct.\n          \nSyntax: SET <SAS-data-set(s) <(data-set-options(s) )>>; \n      \nReads an observation from one or more SAS data sets."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"LINK","StatementHelp":{"#cdata":"Syntax: LINK statement_label; \n      \nDirects program execution immediately to the statement label that is specified and, if followed \nby a RETURN statement, returns execution to the statement that follows the LINK statement."},"StatementOptions":null},{"StatementName":"PUT","StatementHelp":{"#cdata":"Syntax: PUT [variable] [=] [...];\n\nThe PUT statement, used mostly for program debugging in PROC HPNLIN, supports only some of\nthe features of the DATA step PUT statement, and it has some new features that the DATA step PUT\nstatement does not have:\n\n  o The PROC HPNLIN PUT statement does not support line pointers, factored lists, iteration factors,\n    overprinting, _INFILE_, the colon (:) format modifier, or \u201c$\u201d.\n  \n  o The PROC HPNLIN PUT statement supports expressions, but the expression must be enclosed\n    in parentheses. For example, the following statement displays the square root of x:\n    put (sqrt(x));\n  \n  o The PROC HPNLIN PUT statement supports the item _PDV_ to display a formatted listing\n    of all variables in the program. For example, the following statement displays a much more\n    readable listing of the variables than the _ALL_ print item:\n    \n    put _pdv_;"},"StatementOptions":{"StatementOption":{"StatementOptionName":"_PDV_","StatementOptionHelp":{"#cdata":"Displays a formatted listing of all variables in the program."},"StatementOptionType":"S"}}},{"StatementName":"RETURN","StatementHelp":{"#cdata":"Syntax: RETURN; \n      \nStops executing statements at the current point and returns to a predetermined point in the step."},"StatementOptions":null},{"StatementName":"SELECT","StatementHelp":{"#cdata":"Executes one of several statements or groups of statements.\n      \nSyntax: \nSELECT <(select-expression)>;  \n  WHEN-1 (when-expression-1 <..., when-expression-n>) statement;  \n    <... WHEN-n (when-expression-1 <..., when-expression-n>) statement;>  \n      <OTHERWISE statement;> \nEND;"},"StatementOptions":null},{"StatementName":"STOP","StatementHelp":{"#cdata":"Syntax: STOP ;\n\nThe STOP statement halts the execution of all statements that contain it, including \nDO statements and other control or looping statements. Execution continues with the \nnext top-level source statement."},"StatementOptions":null},{"StatementName":"WHEN","StatementHelp":{"#cdata":"SELECT groups contain WHEN statements that identify SAS statements that are executed when a particular \ncondition is true. Use at least one WHEN statement in a SELECT group.\n      \nSyntax: WHEN-1 (when-expression-1 <..., when-expression-n>) statement; "},"StatementOptions":{"StatementOption":{"StatementOptionName":"DO","StatementOptionType":"S"}}},{"StatementName":"OTHERWISE","StatementHelp":{"#cdata":"An optional OTHERWISE statement specifies a statement to be executed if no WHEN condition is met. \nAn END statement ends a SELECT group.\n      \nSyntax: \n  <... WHEN-n (when-expression-1 <..., when-expression-n>) statement;>  \n    <OTHERWISE statement;>"},"StatementOptions":null},{"StatementName":"ELSE","StatementHelp":{"#cdata":"If the condition in an IF-THEN statement is false and an ELSE statement is present, \nthen the ELSE action is carried out."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"IF","StatementOptionHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions."},"StatementOptionType":"S"},{"StatementOptionName":"DO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN-ELSE construct."},"StatementOptionType":"S"},{"StatementOptionName":"OUTPUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN-ELSE construct."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"SUBSTR","StatementHelp":{"#cdata":"Syntax: SUBSTR( variable, index, length )= expression; \n      \nThe SUBSTR function used as a programming statement in PROC HPNLIN."},"StatementOptions":null}],"#comment":{}}}}