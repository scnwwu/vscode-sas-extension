{"Procedure":{"Name":"HPQLIM","ProductGroup":"ETS/HPA","#comment":{},"ProcedureHelp":{"#cdata":"Syntax: PROC HPQLIM options ; \n    BOUNDS bound1 < , bound2 \u2026> ; \n    FREQ variable ; \n    ENDOGENOUS variables ~ options ; \n    HETERO dependent variables exogenous variables / options ; \n    INIT initvalue1 < , initvalue2 \u2026> ; \n    MODEL dependent = regressors < / options > ; \n    OUTPUT OUT=SAS-data-set < output-options > ;\n    PERFORMANCE < performance-options > ;\n    RESTRICT restriction1 < , restriction2 \u2026> ; \n    <label:> TEST <string:> equation [,equation...] / options ; \n    WEIGHT variable ;\n\nThe HPQLIM (high-performance qualitative and limited dependent variable model) procedure \nis a high-performance version of the QLIM procedure in SAS/ETS software, which analyzes \nunivariate limited dependent variable models in which dependent variables are observed \nonly in a limited range of values. Unlike the QLIM procedure, which can be run only on \nan individual workstation, the HPQLIM procedure takes advantage of a computing environment \nthat enables it to distribute the optimization task among one or more nodes. In addition, \neach node can use one or more threads to carry out the optimization on its subset of the \ndata. When several nodes are used with each node using several threads to carry out its \npart of the work, the result is a highly parallel computation that provides a dramatic \ngain in performance. \n\nWith the HPQLIM procedure you can read and write data in distributed form and perform \nanalyses in massively parallel processing (MPP) and symmetric multiprocessing (SMP) mode.\nThe HPQLIM procedure is specifically designed to operate in the high-performance distributed \nenvironment. By default, PROC HPQLIM performs computations in multiple threads"},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"[Syntax: DATA=SAS-data-set] \n      \nSpecifies the input SAS data set. If the DATA= option is not specified, PROC HPQLIM uses \nthe most recently created SAS data set."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"OUTEST=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUTEST=SAS-data-set] \n      \nWrites the parameter estimates to an output data set."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"COVOUT","ProcedureOptionHelp":{"#cdata":"Writes the covariance matrix for the parameter estimates to the OUTEST= data set. This option \nis valid only if the OUTEST= option is specified."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"CORROUT","ProcedureOptionHelp":{"#cdata":"Writes the correlation matrix for the parameter estimates to the OUTEST= data set. This option \nis valid only if the OUTEST= option is specified."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOPRINT","ProcedureOptionHelp":{"#cdata":"Suppresses the normal printed output but does not suppress error listings. If this option \nis specified, then any other print option is turned off."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PRINTALL","ProcedureOptionHelp":{"#cdata":"Turns on all the printing options. The options set by PRINTALL are COVB and CORRB."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"CORRB","ProcedureOptionHelp":{"#cdata":"Prints the correlation matrix of the parameter estimates."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"COVB","ProcedureOptionHelp":{"#cdata":"Prints the covariance matrix of the parameter estimates."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"ITPRINT","ProcedureOptionHelp":{"#cdata":"Prints the initial parameter estimates, convergence criteria, and all constraints of the \noptimization. At each iteration, objective function value, step size, maximum gradient, \nand slope of search direction are also printed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"COVEST=","ProcedureOptionHelp":{"#cdata":"Specifies the method to calculate the covariance matrix of parameter estimates.\n      \nThe default is COVEST=HESSIAN."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"OP","@Value2":"HESSIAN","@Value3":"QML"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies the covariance from the outer product matrix.","@ToolTip2":"Specifies the covariance from the inverse Hessian matrix.","@ToolTip3":"Specifies the covariance from the outer product and Hessian matrices (the quasi-maximum likelihood estimates)."}},{"ProcedureOptionName":"ABSCONV=|ABSTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSCONV=r | ABSTOL=r] \n          \nSpecifies an absolute function convergence criterion by which minimization stops when f(\u03f4\u207d\u207f\u207e) \u2264 r. \nThe default value of r is the negative square root of the largest double-precision value, which \nserves only as a protection against \noverflows."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSFCONV=|ABSFTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSFCONV=r | ABSFTOL=r] \n          \nSpecifies an absolute function convergence criterion by which minimization stops when the \nfunction value has a small change in successive iterations:\n\n|f(\u03f4\u207d\u207f\u207b\u00b9\u207e) - f(\u03f4\u207d\u207f\u207e)| \u2264 r\n\nThe default value is r=0."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSGCONV=|ABSGTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSGCONV=r | ABSGTOL=r] \n          \nSpecifies an absolute gradient convergence criterion.Optimization stops when the maximum \nabsolute gradient element is small: \n\n  max|g\u2093(\u03f4\u207d\u207f\u207e)| \u2264 r\n\nThe default value is r=1E\u20135."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSXCONV=|ABSXTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSXCONV=r | ABSXTOL=r] \n          \nSpecifies the absolute parameter convergence criterion. Optimization stops when the Euclidean \ndistance between successive parameter vectors is small:\n\n ||f(\u03f4\u207d\u207f\u207b\u00b9\u207e) - f(\u03f4\u207d\u207f\u207e)||\u2082 \u2264 r\n\nThe default is r=0."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FCONV=|FTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: FCONV=r | FTOL=r] \n          \nSpecifies a relative function convergence criterion. Optimization stops when a relative \nchange of the function value in successive iterations is small: \n\n    |f(\u03f4\u207d\u207f\u207b\u00b9\u207e) - f(\u03f4\u207d\u207f\u207e)| / |f(\u03f4\u207d\u207f\u207b\u00b9\u207e)| \u2264 r\n\nThe default value is r=2\u03b5, where \u03b5 denotes the machine precision constant, which is the \nsmallest double-precision floating-point number such that 1 + \u03b5 > 1."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"GCONV=|GTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: GCONV=r | GTOL=r] \n          \nSpecifies a relative gradient convergence criterion. For all techniques except CONGRA, \noptimization stops when the normalized predicted function reduction is small.\n\nThe default value is 1E\u20138."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXFUNC=|MAXFU=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXFUNC= | MAXFU=i] \n          \nSpecifies the maximum number of function calls in the optimization process. The default is 1,000. \n\nThe optimization can terminate only after completing a full iteration. Therefore, the number of \nfunction calls that is actually performed can exceed the number that is specified by this option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXITER=|MAXIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXITER= | MAXIT=i[n]] \n          \n Specifies the maximum number of iterations in the optimization process. \n \n The default value is 200."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXTIME=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXTIME=r] \n          \nSpecifies an upper limit of r seconds of CPU time for the optimization process. The default \nvalue is the largest floating-point double representation of your computer. The time specified \nby this option is checked only once at the end of each iteration. Therefore, the actual running \ntime can be much longer than r. The actual running time includes the remaining time needed to \nfinish the iteration and the time needed to generate the output of the results."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"METHOD=","ProcedureOptionHelp":{"#cdata":"Specifies the iterative minimization method to use. The default is METHOD=NEWRAP."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"CONGRA","@Value2":"DBLDOG","@Value3":"NONE","@Value4":"NEWRAP","@Value5":"NRRIDG","@Value6":"QUANEW","@Value7":"TRUREG"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies a conjugate-gradient method","@ToolTip2":"Specifies the double dogleg method","@ToolTip3":"Specifies that no optimization be performed beyond using the ordinary least squares method  to compute the parameter estimates. ","@ToolTip4":"Specifies the Newton-Raphson method (the default). ","@ToolTip5":"Specifies the Newton-Raphson Ridge method.","@ToolTip6":"Specifies the quasi-Newton method.","@ToolTip7":"Specifies the trust region method."}}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"BOUNDS","StatementHelp":{"#cdata":"Syntax: BOUNDS bound1 < , bound2 ...> ; \n\nThe BOUNDS statement imposes simple boundary constraints on the parameter estimates. BOUNDS \nstatement constraints refer to the parameters estimated by the HPQLIM procedure. You can specify \nany number of BOUNDS statements. \n\nEach bound is composed of parameters and constants and inequality operators. Parameters associated \nwith regressor variables are referred to by the names of the corresponding regressor variables. \nSpecify each bound as follows: \n\n  item operator item < operator item < operator item ...> >\n\nEach item is a constant, the name of a parameter, or a list of parameter names. Each operator\nis <, >, <=, or >=."},"StatementOptions":null},{"StatementName":"FREQ","StatementHelp":{"#cdata":"Syntax: FREQ variable ; \n      \nThe FREQ statement identifies a variable that contains the frequency of occurrence \nof each observation. PROC HPQLIM treats each observation as if it appears n times, \nwhere n is the value of the FREQ variable for the observation. If the frequency value \nis not an integer, it is truncated to an integer. If the frequency value is less than \n1 or missing, the observation is not used in the model fitting. When the FREQ statement \nis not specified, each observation is assigned a frequency of 1. If you specify more \nthan one FREQ statement, then the first FREQ statement is used."},"StatementOptions":null},{"StatementName":"ENDOGENOUS","StatementHelp":{"#cdata":"Syntax: ENDOGENOUS variables ~ options ; \n\nThe ENDOGENOUS statement specifies the type of dependent variables that appear \non the left-hand side of the equation. Endogenous variables listed refer to the \ndependent variables that appear on the left-hand side of the equation. Currently, \nno right-hand side endogeneity is handled in PROC QLIM. All variables appearing \non the right-hand side of the equation are treated as exogenous"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"CENSORED","StatementOptionHelp":{"#cdata":"[Syntax: CENSORED <(censored-options )>] \n          \nSpecifies that the endogenous variables in this statement be censored. You can specify \nthe following censored-options:  \n\n  LB=value or variable \n  LOWERBOUND=value or variable \n  specifies the lower bound of the censored variables. If value is missing or the value \n  in variable is missing, no lower bound is set. By default, no lower bound is set. \n\n  UB=value or variable \n  UPPERBOUND=value or variable \n  specifies the upper bound of the censored variables. If value is missing or the value \n  in variable is missing, no upper bound is set. By default, no upper bound is set."},"StatementOptionType":"V","SubOptionsKeywords":"LB=|LOWERBOUND=|UB=|UPPERBOUND="},{"StatementOptionName":"TRUNCATED","StatementOptionHelp":{"#cdata":"[Syntax: CENSORED <(truncated-options )>] \n          \nSpecifies that the endogenous variables in this statement be truncated. You can specify the \nfollowing truncated-options: \n\n  LB=value or variable \n  LOWERBOUND=value or variable \n  specifies the lower bound of the truncated variables. If value is missing or the value in variable is missing,\n  no lower bound is set. By default, no lower bound is set. \n\n  UB=value or variable \n  UPPERBOUND=value or variable \n  specifies the upper bound of the truncated variables. If value is missing or the value in variable is missing, \n  no upper bound is set. By default, no upper bound is set."},"StatementOptionType":"V","SubOptionsKeywords":"LB=|LOWERBOUND=|UB=|UPPERBOUND="},{"StatementOptionName":"FRONTIER","StatementOptionHelp":{"#cdata":"[Syntax: FRONTIER <(frontier-options )>] \n          \nSpecifies that the endogenous variable in this statement follow a production or cost function. \nValid frontier-options are as follows: \n\n  TYPE=HALF | EXPONENTIAL | TRUNCATED\n\n    HALF \n    specifies half-normal model. \n\n    EXPONENTIAL \n    specifies exponential model. \n\n    TRUNCATED \n    specifies truncated normal model. \n\n  PRODUCTION \n  specifies that the model estimated be a production function. \n\n  COST \n  specifies that the model estimated be a cost function.\n  \n If neither PRODUCTION nor COST is specified, a production function is estimated by default."},"StatementOptionType":"V","SubOptionsKeywords":"TYPE=|PRODUCTION|COST"}]}},{"StatementName":"HETERO","StatementHelp":{"#cdata":"Syntax: HETERO dependent variables ~ exogenous variables </ options > ; \n\nThe HETERO statement specifies variables that are related to the heteroscedasticity of the \nresiduals and the way these variables are used to model the error variance."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"LINK=","StatementOptionHelp":{"#cdata":"Specifies the functional form."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"EXP","@Value2":"LINEAR"},"StatementOptionToolTips":{"@ToolTip1":"Specifies a exponential link function. This is the default.","@ToolTip2":"Specifies a linear link function."}},{"StatementOptionName":"NOCONST","StatementOptionHelp":{"#cdata":"Specifies that there be no constant in the linear or exponential heteroscedasticity model.\n          \nThis option is ignored if you do not specify the LINK= option."},"StatementOptionType":"S"},{"StatementOptionName":"SQUARE","StatementOptionHelp":{"#cdata":"Estimates the model by using the square of linear heteroscedasticity function.\n          \nThis option is ignored if you do not specify the LINK= option."},"StatementOptionType":"S"}]}},{"StatementName":"INIT","StatementHelp":{"#cdata":"Syntax: INIT initvalue1 < , initvalue2 ...> ; \n\nThe INIT statement sets initial values for parameters in the optimization. You can specify \nany number of INIT statements. \n\nEach initvalue is written as a parameter or parameter list, followed by an optional equality \noperator (=), followed by a number: \n\n  parameter <=> number"},"StatementOptions":null},{"StatementName":"MODEL","StatementHelp":{"#cdata":"Syntax: MODEL dependent = regressors < / options > ; \n\nThe MODEL statement specifies the dependent variable and independent regressor variables\nfor the regression model."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"NOINT","StatementOptionHelp":{"#cdata":"Suppresses the intercept parameter."},"StatementOptionType":"S"},{"StatementOptionName":"CENSORED","StatementOptionHelp":{"#cdata":"[Syntax: CENSORED <(censored-options )>] \n          \nSpecifies that the endogenous variables in this statement be censored. You can specify \nthe following censored-options:  \n\n  LB=value or variable \n  LOWERBOUND=value or variable \n  specifies the lower bound of the censored variables. If value is missing or the value \n  in variable is missing, no lower bound is set. By default, no lower bound is set. \n\n  UB=value or variable \n  UPPERBOUND=value or variable \n  specifies the upper bound of the censored variables. If value is missing or the value \n  in variable is missing, no upper bound is set. By default, no upper bound is set."},"StatementOptionType":"V","SubOptionsKeywords":"LB=|LOWERBOUND=|UB=|UPPERBOUND="},{"StatementOptionName":"TRUNCATED","StatementOptionHelp":{"#cdata":"[Syntax: CENSORED <(truncated-options )>] \n          \nSpecifies that the endogenous variables in this statement be truncated. You can specify the \nfollowing truncated-options: \n\n  LB=value or variable \n  LOWERBOUND=value or variable \n  specifies the lower bound of the truncated variables. If value is missing or the value in variable is missing,\n  no lower bound is set. By default, no lower bound is set. \n\n  UB=value or variable \n  UPPERBOUND=value or variable \n  specifies the upper bound of the truncated variables. If value is missing or the value in variable is missing, \n  no upper bound is set. By default, no upper bound is set."},"StatementOptionType":"V","SubOptionsKeywords":"LB=|LOWERBOUND=|UB=|UPPERBOUND="},{"StatementOptionName":"FRONTIER","StatementOptionHelp":{"#cdata":"[Syntax: FRONTIER <(frontier-options )>] \n          \nSpecifies that the endogenous variable in this statement follow a production or cost function. \nValid frontier-options are as follows: \n\n  TYPE=HALF | EXPONENTIAL | TRUNCATED\n\n    HALF \n    specifies half-normal model. \n\n    EXPONENTIAL \n    specifies exponential model. \n\n    TRUNCATED \n    specifies truncated normal model. \n\n  PRODUCTION \n  specifies that the model estimated be a production function. \n\n  COST \n  specifies that the model estimated be a cost function.\n  \n If neither PRODUCTION nor COST is specified, a production function is estimated by default."},"StatementOptionType":"V","SubOptionsKeywords":"TYPE=|PRODUCTION|COST"}]}},{"StatementName":"OUTPUT","StatementHelp":{"#cdata":"Syntax: OUTPUT OUT=SAS-data-set <output-options> ; \n\nThe OUTPUT statement creates a new SAS data set to contain variables specified with the \nOUTVAR option and the following data if they are specified by output-options: estimates \nof x'\u03b2, predicted value, residual, marginal effects, probability, standard deviation of \nthe error, expected value, conditional expected value, technical efficiency measures, \nand inverse Mills ratio. When the response values are missing for the observation, all \noutput estimates except the residual are still computed as long as none of the explanatory \nvariables is missing. This enables you to compute these statistics for prediction. You \ncan specify only one OUTPUT statement."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"[Syntax: OUT=SAS-data-set] \n          \nNames the output data set."},"StatementOptionType":"DV"},{"StatementOptionName":"CONDITIONAL","StatementOptionHelp":{"#cdata":"Output estimates of conditional expected values of continuous endogenous"},"StatementOptionType":"S"},{"StatementOptionName":"ERRSTD","StatementOptionHelp":{"#cdata":"Output estimates of \u03c3j, the standard deviation of the error term. "},"StatementOptionType":"S"},{"StatementOptionName":"EXPECTED","StatementOptionHelp":{"#cdata":"Output estimates of expected values of continuous endogenous variables."},"StatementOptionType":"S"},{"StatementOptionName":"MARGINAL","StatementOptionHelp":{"#cdata":"Output marginal effects."},"StatementOptionType":"S"},{"StatementOptionName":"OUTVAR","StatementOptionHelp":{"#cdata":"Syntax: OUTVAR(SAS-variable-names)           \n          \nAdds SAS variables to the output data set."},"StatementOptionType":"S"},{"StatementOptionName":"PREDICTED","StatementOptionHelp":{"#cdata":"Output estimates of predicted endogenous variables."},"StatementOptionType":"S"},{"StatementOptionName":"RESIDUAL","StatementOptionHelp":{"#cdata":"Output estimates of residuals of continuous endogenous variables."},"StatementOptionType":"S"},{"StatementOptionName":"XBETA","StatementOptionHelp":{"#cdata":"Output estimates of x'\u03b2."},"StatementOptionType":"S"},{"StatementOptionName":"TE1","StatementOptionHelp":{"#cdata":"Outputs estimates of technical efficiency for each producer in the stochastic frontier \nmodel suggested by Battese and Coelli (1988)."},"StatementOptionType":"V"},{"StatementOptionName":"TE2","StatementOptionHelp":{"#cdata":"Outputs estimates of technical efficiency for each producer in the stochastic frontier \nmodel suggested by Jondrow et al. (1982)."},"StatementOptionType":"V"}]}},{"StatementName":"PERFORMANCE","StatementHelp":{"#cdata":"Syntax: PERFORMANCE < performance-options > ;\n      \nThe PERFORMANCE statement specifies performance-options to control the multithreaded and distributed\ncomputing environment and requests detailed results about the performance characteristics of the HPQLIM\nprocedure. With the PERFORMANCE statement, you can also control whether the HPQLIM procedure\nexecutes in SMP or MPP mode."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COMMIT=","StatementOptionHelp":{"#cdata":"Syntax: COMMIT=n\n          \nRequests that the High-Performance Analytics procedure write periodic updates to the \nSAS Log when observations are sent from the client to the appliance for distributed \nprocessing.\n\nHigh-Performance Analytics procedures do not have to use input data that are stored \nin the appliance. You can perform distributed computations regardless of the origin \nor format of the input data, provided the data are in a format that can be read by \nthe SAS System (for example, because a SAS/ACCESS engine is available)."},"StatementOptionType":"V"},{"StatementOptionName":"CPUCOUNT=","StatementOptionHelp":{"#cdata":"Syntax: CPUCOUNT=ACTUAL | num\n          \nSpecifies how many processors the procedure assumes are available on each host in the \ncomputing environment. num can be any integer from 1 to 256.\n\nCPUCOUNT=ACTUAL sets CPUCOUNT to the number of physical processors available. This number\ncan be less than the physical number of CPUs if the SAS process has been restricted by system\nadministration tools. Setting CPUCOUNT= to a number greater than the actual number of available\nCPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system\noption.\n\nIf a High-Performance Analytics procedure executes in SMP mode, this option refers to the client\nmachine of the SAS session. In MPP mode, this option applies to the nodes on the appliance."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ACTUAL","@Value2":"<num>"},"StatementOptionToolTips":{"@ToolTip1":"Sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","@ToolTip2":"Replace <num> with an actual number. Setting CPUCOUNT= to a number  greater than the actual number of available CPUs might result in reduced performance. This  option overrides the CPUCOUNT= SAS system option."}},{"StatementOptionName":"DATASERVER=","StatementOptionHelp":{"#cdata":"Syntax: DATASERVER=\u201cname\u201d\n          \nSpecifies the name of the server on Teradata systems as defined through the hosts file \nand as used in the LIBNAME statement for Teradata. For example, if the hosts file defines\n\n    myservercop1 33.44.55.66\n    \nas the server for Teradata, then a LIBNAME specification would be as follows:\n\n    libname TDLib teradata server=myserver user= password= database= ;\n    \nA PERFORMANCE statement to induce running alongside the Teradata server would specify the\nfollowing:\n\n    performance dataserver=\"myserver\";\n    \nIf the DATASERVER= option is specified, it overrides the GRIDDATASERVER environment \nvariable."},"StatementOptionType":"V"},{"StatementOptionName":"DETAILS","StatementOptionHelp":{"#cdata":"Requests a table that shows a timing breakdown of the procedure steps."},"StatementOptionType":"V"},{"StatementOptionName":"TIMEOUT=","StatementOptionHelp":{"#cdata":"Syntax: TIMEOUT=s\n          \nSpecifies the timeout in seconds for a High-Performance Analytics procedure to wait for a connection\nto the appliance and establish a connection back to the client. The default is s=120 seconds. If jobs\nare submitted to the appliance through workload management tools that might suspend access to the\nappliance for a longer period, you might want to increase the timeout value."},"StatementOptionType":"V"},{"StatementOptionName":"HOST=|GRIDHOST=","StatementOptionHelp":{"#cdata":"Syntax: HOST=\u201cname\u201d | GRIDHOST=\u201cname\u201d \n          \nSpecifies the name of the appliance host in single or double quotes. If the HOST= option \nis specified, it overrides the value of the GRIDHOST environment variable."},"StatementOptionType":"V"},{"StatementOptionName":"INSTALL=|INSTALLLOC=","StatementOptionHelp":{"#cdata":"Syntax: INSTALL=\u201cname\u201d | INSTALLLOC=\u201cname\u201d \n          \nSpecifies the directory in which the High-Performance Analytics shared libraries are \ninstalled on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC \nenvironment variable."},"StatementOptionType":"V"},{"StatementOptionName":"NODES=|NNODES=","StatementOptionHelp":{"#cdata":"Syntax: NODES=n | NNODES=n\n          \nSpecifies the number of nodes in the distributed computing environment, provided that \nthe data are not processed alongside the database.\n\nIf you specify NODES=0, you indicate that you want to process the data in SMP mode on \nthe client machine. If the input data are not alongside the database, this is the default. \nThe High-Performance Analytics procedures then perform the analysis mutlithreaded on the client."},"StatementOptionType":"V"},{"StatementOptionName":"NTHREADS=","StatementOptionHelp":{"#cdata":"Syntax: NTHREADS=n \n          \nSpecifies the number of threads for analytic computations and overrides the SAS system option\nTHREADS | NOTHREADS. If you do not specify the NTHREADS= option, the number of threads\nare determined based on the number of CPUs on the host on which the analytic computations execute.\nThe algorithm by which a CPU count is converted to a thread count is specific to the High-\nPerformance Analytics procedure. Most procedures create one thread per CPU for the analytic computations.\nBy default, High-Performance Analytics procedures execute in multiple concurrent threads unless\nturned off by the NOTHREADS system option or you force single-threaded execution with\nNTHREADS=1. The largest number that can be specified for n is 256. Individual High-Performance\nAnalytics procedures can impose more stringent limits if called for by algorithmic considerations.\nYou can affect the determination of the CPU count with the CPUCOUNT= option in the PERFORMANCE\nstatement.\n\nNOTE: The SAS system options THREADS | NOTHREADS apply to the client machine on which\nthe SAS High-Performance Analytics procedures execute. They do not apply to the compute nodes\nin a distributed environment."},"StatementOptionType":"V"}]}},{"StatementName":"RESTRICT","StatementHelp":{"#cdata":"Syntax: RESTRICT restriction1 <, restriction2 ...> ; \n\nThe RESTRICT statement imposes linear restrictions on the parameter estimates. You can \nspecify any number of RESTRICT statements, but the number of restrictions imposed is \nlimited by the number of regressors. \n\nEach restriction is written as an expression, followed by an equality operator (=) or an inequality\noperator (<, >, \u2264, \u2265), followed by a second expression: \n\n  expression operator expression\n\nThe operator can be =, <, >, \u2264 , or \u2265. The operator and second expression are optional. \n\nRestriction expressions can be composed of parameter names, multiplication (), addition (), and \nsubstitution () operators, and constants. Parameters named in restriction expressions must be among \nthe parameters that are estimated by the model. Parameters that are associated with a regressor \nvariable are referred to by the name of the corresponding regressor variable. The restriction \nexpressions must be a linear function of the parameters. \n\nThe following statements illustrate the use of the RESTRICT statement: \n\n   proc hpqlim data=one;\n      model y = x1-x10 / censored(lb=0);\n      restrict x1*2 <= x2 + x3;\n   run;"},"StatementOptions":null},{"StatementName":"TEST","StatementHelp":{"#cdata":"Syntax: <label:> TEST <string:> equation [,equation...] / options ; \n\nThe TEST statement performs the Wald, Lagrange multiplier, and likelihood ratio tests of linear \nhypotheses about the regression parameters in the preceding MODEL statement. Each equation \nspecifies a linear hypothesis to be tested. All hypotheses in one TEST statement are tested \njointly. Variable names in the equations must correspond to regressors in the preceding MODEL \nstatement, and each name represents the coefficient of the corresponding regressor. Use the \nkeyword INTERCEPT for a test that includes a constant."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ALL","StatementOptionHelp":{"#cdata":"Requests the Wald, Lagrange multiplier, and likelihood ratio tests."},"StatementOptionType":"S"},{"StatementOptionName":"WALD","StatementOptionHelp":{"#cdata":"Requests the Wald test."},"StatementOptionType":"S"},{"StatementOptionName":"LM","StatementOptionHelp":{"#cdata":"Requests the Lagrange multiplier test."},"StatementOptionType":"S"},{"StatementOptionName":"LR","StatementOptionHelp":{"#cdata":"Requests the likelihood ratio test."},"StatementOptionType":"S"}]}},{"StatementName":"WEIGHT","StatementHelp":{"#cdata":"Syntax: WEIGHT variable </ option> ; \n\nThe WEIGHT statement specifies a variable that supplies weighting values to use for each \nobservation in estimating parameters. The log likelihood for each observation is multiplied \nby the corresponding weight variable value. \n\nIf the weight of an observation is nonpositive, that observation is not used in the estimation."},"StatementOptions":{"StatementOption":{"StatementOptionName":"NONORMALIZE","StatementOptionHelp":{"#cdata":"Specifies that the weights must be used as is. When this option is not specified, the weights \nare normalized so that they add up to the actual sample size."},"StatementOptionType":"S"}}}]}}}