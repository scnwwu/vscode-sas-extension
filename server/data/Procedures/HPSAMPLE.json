{"Procedure":{"Name":"HPSAMPLE","ProductGroup":"HPA","#comment":{},"ProcedureHelp":{"#cdata":"Syntax: PROC HPSAMPLE DATA=< libref. >SAS-data-set OUT=< libref. >SAS-data-set < option(s) > ;\n    VAR variable < variable ... variable > ;\n    CLASS variable < variable ... variable > ; \n    TARGET variable < variable ... variable > ; \n    PERFORMANCE performance-options ;\n\nThe HPSAMPLE procedure is a high-performance procedure that performs either simple random sampling \nor stratified sampling. The HPSAMPLE procedure creates the following: \n\n  \u2022 one output data set, which contains the sample data set\n  \u2022 one performance table, which contains performance information\n  \u2022 one frequency table, which contains the frequency information for the population and sample\n\nThe HPSAMPLE procedure is high-performance in that it takes advantage of distributed \ncomputing environments (currently only using single thread) when the input data is \nstored on the SAS appliance."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=< libref. >SAS-data-set or database table \n      \nNames the table (SAS data set or database table) that you want to sample from. The default \nis the most recently created data set. If the data are already distributed, the procedure \nreads the data alongside the distributed database."},"ProcedureOptionType":"DV|RV"},{"ProcedureOptionName":"OUT=","ProcedureOptionHelp":{"#cdata":"Syntax: OUT=< libref. >SAS-data-set \n      \nNames the SAS data set that you want to output the sample to. If you run alongside database, \nyou need to specify a dataset with the same database libname as the input data and make sure \nit does not exist in the database before."},"ProcedureOptionType":"RV"},{"ProcedureOptionName":"SAMPPCT=","ProcedureOptionHelp":{"#cdata":"Syntax: SAMPPCT=sample percentage \n      \nNames sample percentage to be used by PROC HPSAMPLE. It should be a positive number which \nis less than 100. For example, SAMPPCT=50.5 specifies that you want to sample 50.5 percent \nof data."},"ProcedureOptionType":"RV"},{"ProcedureOptionName":"SAMPOBS=","ProcedureOptionHelp":{"#cdata":"Syntax: SAMPOBS=number of sample observations \n      \nNames the minimal number of observations you want to sample from the input data. It must \nbe a positive integer. If it exceeds the total number of observations in the input data, \nyou get the original dataset in the output sample. \n\nNote: You must specify either SAMPPCT or SAMPOBS option. If both are specified, only the\nSAMPPCT option is honored."},"ProcedureOptionType":"RV"},{"ProcedureOptionName":"SEED=","ProcedureOptionHelp":{"#cdata":"Syntax: SEED=random seed \n      \nspecifies the seed for the random number generator. If it is not specified or specified \nas a negative number, the seed is set to be the default 12345. The seed option enables \nyou to reproduce same sample output."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"PARTITION","ProcedureOptionHelp":{"#cdata":"Enables you to get an output dataset with the same number of rows as the input dataset but with\nan additional partition indicator(_PARTIND_), indicating whether an observation is selected to the\nsample(1) or not(0)."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NONORM","ProcedureOptionHelp":{"#cdata":"Enables you to distinguish target values which share the same normalized value when you do stratified\nsampling. For example, a target has three distinct values \u201cA\u201d, \u201cB\u201d and \u201cb\u201d, and you want to treat \u201cB\u201d\nand \u201cb\u201d as different levels, you need to use NONORM; By default, \u201cB\u201d and \u201cb\u201d are treated as the\nsame level. A value is normalized by: 1. Removing leading blanks; 2. Truncating to 32 characters; 3.\nChanging lowercase letters to uppercase."},"ProcedureOptionType":"S"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"CLASS","StatementHelp":{"#cdata":"Syntax: CLASS variable < variable ... variable > ; \n      \nThe CLASS statement specifies one or more classification variables to be included in the sample. At least one\nvariable is required. A variable can be character or numeric. The CLASS and VAR statements are mutually\nexclusive. \n\nNOTE: Each variable in the TARGET statement must be specified in the CLASS statement."},"StatementOptions":null},{"StatementName":"VAR","StatementHelp":{"#cdata":"Syntax: VAR variable < variable ... variable > ; \n      \nThe VAR statement specifies one or more numeric variables to be included in the sample. At least one\nvariable is required; all variables must be numeric. You can use this statement to include only the variables\nof interests in your sample. The CLASS and VAR statements are mutually exclusive."}},{"StatementName":"TARGET","StatementHelp":{"#cdata":"Syntax: TARGET variable < variable ... variable > ; \n      \nThe TARGET statement specifies one or two classification variables to be used for stratificaiton. Each\nvariable must be specified in the CLASS statement. Currently up to two target variables are supported. The\nmaximum number of levels (that is, distinct values) in any target variable is 256."},"StatementOptions":null},{"StatementName":"PERFORMANCE","StatementHelp":{"#cdata":"Syntax: PERFORMANCE < performance-options > ;\n      \nThe PERFORMANCE statement defines performance parameters for multithreaded and distributed \ncomputing, passes variables about the distributed computing environment, and requests detailed \nresults about the performance characteristics of a SAS High-Performance Analytics procedure.\n\nWith the PERFORMANCE statement you can also control whether a SAS High-Performance Analytics\nprocedure executes in symmetric multiprocessor (SMP) or massively parallel processor (MPP) mode.\n\nNote: Proc HPSAMPLE does not support multi-threading in this release."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COMMIT=","StatementOptionHelp":{"#cdata":"Syntax: COMMIT=n\n          \nRequests that the High-Performance Analytics procedure write periodic updates to the \nSAS Log when observations are sent from the client to the appliance for distributed \nprocessing.\n\nHigh-Performance Analytics procedures do not have to use input data that are stored \nin the appliance. You can perform distributed computations regardless of the origin \nor format of the input data, provided the data are in a format that can be read by \nthe SAS System (for example, because a SAS/ACCESS engine is available)."},"StatementOptionType":"V"},{"StatementOptionName":"CPUCOUNT=","StatementOptionHelp":{"#cdata":"Syntax: CPUCOUNT=ACTUAL | num\n          \nSpecifies how many processors the procedure assumes are available on each host in the \ncomputing environment. num can be any integer from 1 to 256.\n\nCPUCOUNT=ACTUAL sets CPUCOUNT to the number of physical processors available. This number\ncan be less than the physical number of CPUs if the SAS process has been restricted by system\nadministration tools. Setting CPUCOUNT= to a number greater than the actual number of available\nCPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system\noption.\n\nIf a High-Performance Analytics procedure executes in SMP mode, this option refers to the client\nmachine of the SAS session. In MPP mode, this option applies to the nodes on the appliance."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ACTUAL","@Value2":"<num>"},"StatementOptionToolTips":{"@ToolTip1":"Sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","@ToolTip2":"Replace <num> with an actual number. Setting CPUCOUNT= to a number  greater than the actual number of available CPUs might result in reduced performance. This  option overrides the CPUCOUNT= SAS system option."}},{"StatementOptionName":"DATASERVER=","StatementOptionHelp":{"#cdata":"Syntax: DATASERVER=\u201cname\u201d\n          \nSpecifies the name of the server on Teradata systems as defined through the hosts file \nand as used in the LIBNAME statement for Teradata. For example, if the hosts file defines\n\n    myservercop1 33.44.55.66\n    \nas the server for Teradata, then a LIBNAME specification would be as follows:\n\n    libname TDLib teradata server=myserver user= password= database= ;\n    \nA PERFORMANCE statement to induce running alongside the Teradata server would specify the\nfollowing:\n\n    performance dataserver=\"myserver\";\n    \nIf the DATASERVER= option is specified, it overrides the GRIDDATASERVER environment \nvariable."},"StatementOptionType":"V"},{"StatementOptionName":"DETAILS","StatementOptionHelp":{"#cdata":"Requests a table that shows a timing breakdown of the procedure steps."},"StatementOptionType":"V"},{"StatementOptionName":"TIMEOUT=","StatementOptionHelp":{"#cdata":"Syntax: TIMEOUT=s\n          \nSpecifies the timeout in seconds for a High-Performance Analytics procedure to wait for a connection\nto the appliance and establish a connection back to the client. The default is s=120 seconds. If jobs\nare submitted to the appliance through workload management tools that might suspend access to the\nappliance for a longer period, you might want to increase the timeout value."},"StatementOptionType":"V"},{"StatementOptionName":"HOST=|GRIDHOST=","StatementOptionHelp":{"#cdata":"Syntax: HOST=\u201cname\u201d | GRIDHOST=\u201cname\u201d \n          \nSpecifies the name of the appliance host in single or double quotes. If the HOST= option \nis specified, it overrides the value of the GRIDHOST environment variable."},"StatementOptionType":"V"},{"StatementOptionName":"INSTALL=|INSTALLLOC=","StatementOptionHelp":{"#cdata":"Syntax: INSTALL=\u201cname\u201d | INSTALLLOC=\u201cname\u201d \n          \nSpecifies the directory in which the High-Performance Analytics shared libraries are \ninstalled on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC \nenvironment variable."},"StatementOptionType":"V"},{"StatementOptionName":"NODES=|NNODES=","StatementOptionHelp":{"#cdata":"Syntax: NODES=n | NNODES=n\n          \nSpecifies the number of nodes in the distributed computing environment, provided that \nthe data are not processed alongside the database.\n\nIf you specify NODES=0, you indicate that you want to process the data in SMP mode on \nthe client machine. If the input data are not alongside the database, this is the default. \nThe High-Performance Analytics procedures then perform the analysis mutlithreaded on the client."},"StatementOptionType":"V"},{"StatementOptionName":"NTHREADS=","StatementOptionHelp":{"#cdata":"Syntax: NTHREADS=n \n          \nSpecifies the number of threads for analytic computations and overrides the SAS system option\nTHREADS | NOTHREADS. If you do not specify the NTHREADS= option, the number of threads\nare determined based on the number of CPUs on the host on which the analytic computations execute.\nThe algorithm by which a CPU count is converted to a thread count is specific to the High-\nPerformance Analytics procedure. Most procedures create one thread per CPU for the analytic computations.\nBy default, High-Performance Analytics procedures execute in multiple concurrent threads unless\nturned off by the NOTHREADS system option or you force single-threaded execution with\nNTHREADS=1. The largest number that can be specified for n is 256. Individual High-Performance\nAnalytics procedures can impose more stringent limits if called for by algorithmic considerations.\nYou can affect the determination of the CPU count with the CPUCOUNT= option in the PERFORMANCE\nstatement.\n\nNOTE: The SAS system options THREADS | NOTHREADS apply to the client machine on which\nthe SAS High-Performance Analytics procedures execute. They do not apply to the compute nodes\nin a distributed environment."},"StatementOptionType":"V"}]}}]}}}