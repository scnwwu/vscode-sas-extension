{"Procedure":{"Name":"HPSPLIT","ProductGroup":"SAS/STAT/HPA","#comment":{},"ProcedureHelp":{"#cdata":"Syntax: PROC HPSPLIT <options>; \n    CLASS variable... </options>; \n    CODE FILE=filename; \n    GROW criterion </ options>; \n    ID variables; \n    MODEL response <(response-options)> = variable <variable...>; \n    OUTPUT output-options; \n    PARTITION <partition-options>; \n    PERFORMANCE performance-options; \n    PRUNE prune-method <(prune-options)>; \n    RULES FILE=filename; \n\nThe HPSPLIT procedure is a high-performance procedure that builds tree-based statistical models \nfor classification and regression. The procedure produces classification trees, which model a \ncategorical response, and regression trees, which model a continuous response. Both types of \ntrees are referred to as decision trees because the model is expressed as a series of if-then \nstatements."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"ASSIGNMISSING=","ProcedureOptionHelp":{"#cdata":"Syntax: ASSIGNMISSING=BRANCH |POPULAR |SIMILAR | NONE \n      \nSpecifies how PROC HPSPLIT creates a default splitting rule to handle missing values, unknown levels, \nand levels that have fewer observations than you specify in the MINCATSIZE= option."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"BRANCH","@Value2":"POPULAR","@Value3":"SIMILAR","@Value4":"NONE"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies that PROC HPSPLIT create a special child (branch) for the default rule and assign to that  child missing values, unknown levels, and levels that have fewer observations than you specify in  the MINCATSIZE= option.","@ToolTip2":"Specifies that missing values be assigned to the most popular (largest) child.","@ToolTip3":"Specifies that missing values be assigned to the child that they are most similar to (using the  chi-square for categorical responses or F-test criterion for continuous responses).","@ToolTip4":"Specifies that observations that have any missing variables be excluded from the analysis."}},{"ProcedureOptionName":"CVCC|CVCOSTCOMPLEXITY","ProcedureOptionHelp":{"#cdata":"Requests a table of the results of cost-complexity pruning based on cross validation."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"CVMETHOD=","ProcedureOptionHelp":{"#cdata":"Syntax: CVMETHOD=RANDOM <(k)> | NONE\n          \nRequests the cross validation method to be performed."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"RANDOM","@Value2":"NONE"},"ProcedureOptionToolTips":{"@ToolTip1":"Assigns each training observation randomly to one of the k folds (with a probability of 1/k for any  given fold) for cross validation. The default value of k is 10.","@ToolTip2":"Suppresses cross validation. "}},{"ProcedureOptionName":"CVMODELFIT","ProcedureOptionHelp":{"#cdata":"Requests model assessment with cross validation. When you specify this option, the procedure does a \ncross validation of the final model parameters and produces a table that describes the cross \nvalidation error measures of the parameters."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=< libref.>SAS-data-set \n      \nNames the input SAS data set to be used by PROC HPSPLIT. The default is the most recently created\ndata set. \n\nIf the procedure executes in MPP mode, the input data are distributed to memory on the appliance nodes\nand analyzed in parallel, unless the data are already distributed in the appliance database. In that case\nthe procedure reads the data alongside the distributed database."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"INTERVALBINS=","ProcedureOptionHelp":{"#cdata":"Syntax: INTERVALBINS=number \n      \nSpecifies the number of bins for continuous variables. PROC HPSPLIT bins continuous predictors \nto a fixed bin size. \n\nBy default, INTERVALBINS=100."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LEVTHRESH1=","ProcedureOptionHelp":{"#cdata":"Syntax: LEVTHRESH1=number \n      \nApplies only to categorical predictor variables and specifies the limit for the number of computations \nin an exhaustive search for the optimal partition of the levels of a particular variable."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LEVTHRESH2=","ProcedureOptionHelp":{"#cdata":"Syntax: LEVTHRESH2=number \n      \nApplies to categorical predictor variables and continuous predictor variables with multiway splits. \nThis option does not apply to continuous predictor variables with binary splits."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXBRANCH=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXBRANCH=b \n      \nSpecifies the maximum number of children per node in the tree. PROC HPSPLIT tries to create this \nnumber of children unless it is impossible (for example, if a split variable does not have enough \nlevels). By default, MAXBRANCH=2."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXDEPTH=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXDEPTH=number \n      \nThe maximum depth of the tree to be grown."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MINCATSIZE=","ProcedureOptionHelp":{"#cdata":"Syntax: MINCATSIZE=number \n      \nIf a nominal variable level has less than MINCATSIZE observations in the training set, it is added to\nthe missing values for the respective split and not included in the splitting decision."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MINLEAFSIZE=","ProcedureOptionHelp":{"#cdata":"Syntax: LEAFSIZE=number \n      \nSpecifies the minimum number of observations that each child of a split must contain in the training \ndata set in order for the split to be considered. \n\nBy default, MINLEAFSIZE=1."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MINVARIANCE=","ProcedureOptionHelp":{"#cdata":"Syntax: MINVARIANCE=value \n      \nSpecifies the minimum variance for a regression tree leaf to be eligible for splitting. That is, \nleaves whose variance is less than value are not split any further.\n\nBy default, MINVARIANCE=1E\u20138."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NODES=","ProcedureOptionHelp":{"#cdata":"Syntax: NODES=DETAIL |SUMMARY \n      \nrequests a table that contains the description of the paths from each leaf to the root."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"DETAIL","@Value2":"SUMMARY"},"ProcedureOptionToolTips":{"@ToolTip1":"Assigns each training observation randomly to one of the k folds (with a probability of 1/k for any  given fold) for cross validation. The default value of k is 10.","@ToolTip2":"Suppresses cross validation. "}},{"ProcedureOptionName":"NOPRINT","ProcedureOptionHelp":{"#cdata":"Suppresses the generation of ODS output."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NSURROGATES=","ProcedureOptionHelp":{"#cdata":"Syntax: NSURROGATES=number \n      \nSpecifies the number of surrogate rules to create for each splitting rule. Surrogate rules are backup \nsplitting rules that are used when the variable that corresponds to the primary splitting rule is missing. \nBy default, NSURROGATES=0."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"PLOTS=","ProcedureOptionHelp":{"#cdata":"Syntax: PLOTS <(global-plot-option)> <= plot-request <(options)>> \nSyntax: PLOTS <(global-plot-option)> <= (plot-request <(options)> <... plot-request <(options)>>)> \n\nControls the plots that are produced through ODS Graphics. When you specify only one plot-request, \nyou can omit the parentheses around it.\n\nYou can specify the following global-plot-option: \nONLY suppresses the default plots. Only plots that you specifically request are displayed."},"ProcedureOptionType":"S|V","ProcedureOptionValues":{"@Value1":"ALL","@Value2":"CVCC","@Value3":"PRUNEUNTIL","@Value4":"ROC","@Value5":"WHOLETREE","@Value6":"ZOOMEDTREE","@Value7":"NONE"},"ProcedureOptionToolTips":{"@ToolTip1":"Produces all appropriate plots. ","@ToolTip2":"Syntax: CVCC<(ASE)>                                 Produces a plot that is used to determine the tuning parameter for cost-complexity pruning when  cross validation is used. ASE suboption displays the ASE when the response variable is a  classification variable.","@ToolTip3":"Produces a plot of the metric that is used to select the final subtree.","@ToolTip4":"Produces the receiver operating characteristic (ROC) curve. This option is enabled by default.","@ToolTip5":"Syntax: WHOLETREE <(whole-tree-options)>                                  Produces a plot to visualize the entire finished (grown and pruned) tree. This option is enabled  by default.","@ToolTip6":"Syntax: ZOOMEDTREE <(zoomed-tree-options)>                                 Produces a plot to visualize a portion of the finished (grown and pruned) tree. This option is enabled  by default. ","@ToolTip7":"Suppresses the default plots. Only plots that you specifically request are displayed."},"SubOptionsKeywords":"ONLY|ASE|LINKSTYLE=|LINKWIDTH=|NOLEGEND|DEPTH=|NODES="},{"ProcedureOptionName":"SEED=","ProcedureOptionHelp":{"#cdata":"Syntax: SEED=number \n      \nSpecifies the initial seed for random number generation for cross validation. The value of number \nmust be an integer. The default seed is based on the date and time."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SPLITONCE","ProcedureOptionHelp":{"#cdata":"Specifies that variables be split only once on a branch. However, a variable can be used more than \nonce across branches. That is, a variable cannot be split more than once on the path from any leaf \nto the root node."},"ProcedureOptionType":"S"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"CLASS","StatementHelp":{"#cdata":"Syntax: CLASS variables </ options> ; \n      \nThe CLASS statement names the classification variables to be used in the analysis. Typical class \nvariables are Treatment, Sex, Race, Group, and Replication. If the CLASS statement is used, it \nmust appear before the MODEL statement. \n\nClassification variables can be either character or numeric. Class levels are determined from \nthe formatted values of the variables. Thus, you can use formats to group values into levels."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DESCENDING|DESC","StatementOptionHelp":{"#cdata":"Reverses the sort order of the classification variable. If you specify both the DESCENDING \nand ORDER= options, PROC ADAPTIVEREG orders the categories according to the ORDER= option \nand then reverses that order."},"StatementOptionType":"S"},{"StatementOptionName":"ORDER=","StatementOptionHelp":{"#cdata":"Syntax: ORDER=FORMATTED | INTERNAL \n        \nSpecifies the sort order for the levels of classification variables. By default, ORDER=FORMATTED \nexcept for numeric CLASS variables that have no specified format, for which ORDER=INTERNAL is \nthe default."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"FORMATTED","@Value2":"INTERNAL"},"StatementOptionToolTips":{"@ToolTip1":"Orders values in ascending order of the formatted value. ","@ToolTip2":"Orders values in ascending order of the unformatted value."}},{"StatementOptionName":"UPCASE","StatementOptionHelp":{"#cdata":"Uppercases the values of character-valued CLASS variables before levelizing them. For example, if the \nUPCASE option is in effect and a CLASS variable can take the values 'a', 'A', and 'b', then 'a' \nand 'A' represent the same level and the CLASS variable is treated as having only two values: \n'A' and 'B'."},"StatementOptionType":"S"}]}},{"StatementName":"CODE","StatementHelp":{"#cdata":"Syntax: CODE FILE=[filename | fileref] ; \n      \nIf the CODE statement is used, the final tree will be converted into SAS data step code which can be used for\nscoring. The code will be written to the file specified through the filename filename or fileref fileref.\nIf a target is missing, the _WARN_ variable will be set to \u201cM\u201d for that record in the output SAS data step\ncode. Otherwise, _WARN_ will be set to \u201c \u201d. \n\nIf no CODE statement is used, no SAS data step code will be output."},"StatementOptions":{"StatementOption":{"StatementOptionName":"FILE=","StatementOptionHelp":{"#cdata":"Syntax: file=[filename | fileref] \n          \nNames the external file or fileref that saves the generated code. When enclosed in a quoted string (for example,\nFILE=\"c:nmydirnscorecode.sas\"), this option specifies the path for writing the code to an external\nfile. You can also specify unquoted SAS filenames of no more than eight characters for filename. If\nthe filename is assigned as a fileref in a Base SAS FILENAME statement, the file specified in the\nFILENAME statement is opened. The special filerefs LOG and PRINT are always assigned. If the\nspecified filename is not an assigned fileref, the specified value for filename is concatenated with a .txt\nextension before the file is opened. For example, if FOO is not an assigned fileref, FILE=FOO causes\nFOO.txt to be opened. If filename has more than eight characters, an error message is printed."},"StatementOptionType":"V"}}},{"StatementName":"GROW","StatementHelp":{"#cdata":"Syntax: GROW criterion < (options) > ;\n      \nThe GROW statement specifies the criterion by which to split a parent node into child nodes. As it grows the\ntree, PROC FOREST calculates the specified criterion for each predictor variable and then splits on the\npredictor variable whose criterion is closest to the value specified for that criterion."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"CHAID","StatementOptionHelp":{"#cdata":"Syntax: CHAID < (options) >\n          \nFor categorical predictor variables, CHAID uses the value (as specified in the ALPHA= option) of a\nchi-square statistic (for a classification tree) or an F statistic (for a regression tree) to merge similar\nlevels of the predictor variable until the number of children in the proposed split reaches the number\nthat you specify in the MAXBRANCH= option. The p-values for the final split determine the variable\non which to split.\n\nFor continuous predictor variables, CHAID chooses the best single split until the number of children\nin the proposed split reaches the value that you specify in the MAXBRANCH= option.\n\nYou can specify the following options:\n  ALPHA=value\n    specifies the maximum p-value for a split to be considered.\n    By default, ALPHA=0.3.\n  BONFERRONI\n    requests a Bonferroni adjustment to the p-value for a variable after the split has been determined.\n    By default, no adjustment is made."},"StatementOptionType":"S","SubOptionsKeywords":"ALPHA=|BONFERRONI"},{"StatementOptionName":"CHISQUARE","StatementOptionHelp":{"#cdata":"Syntax: CHISQUARE < (options) >\n          \nUses a chi-square statistic to split each variable and then uses the p-values that correspond to the\nresulting splits to determine the splitting variable.\n\nYou can specify the following options:\n  ALPHA=value\n    specifies the maximum p-value for a split to be considered.\n    By default, ALPHA=0.3.\n  BONFERRONI\n    requests a Bonferroni adjustment to the p-value for a variable after the split has been determined.\n    By default, no adjustment is made."},"StatementOptionType":"S","SubOptionsKeywords":"ALPHA=|BONFERRONI"},{"StatementOptionName":"ENTROPY|GAIN","StatementOptionHelp":{"#cdata":"Syntax: ENTROPY (<options>)  | GAIN < option >\n          \nUses the gain in information (decrease in entropy) to split each variable and then to determine the split.\n\nYou can specify the following option:\n  MINENTROPY=number\n  MINGAIN=number\n   specifies the minimum gain value to validate a split."},"StatementOptionType":"S","SubOptionsKeywords":"MINENTROPY=|MINGAIN="},{"StatementOptionName":"FASTCHAID","StatementOptionHelp":"<![CDATA[Syntax: FASTCHAID <(options)> \n          \nUses a Kolmogorov-Smirnov splitter to determine splits for each variable. The FastCHAID criterion \nfollows a recursive method similar to that of Friedman (1977) after ordering the levels according \nto the response variable. The criterion then selects the split variable as the variable that has \nthe smallest p-value.\n\nYou can specify the following options: \n  ALPHA=value \n    specifies the maximum p-value for a split to be considered. \n    By default, ALPHA=0.3. \n  BONFERRONI \n    requests a Bonferroni adjustment to the p-value for a variable after the split has been determined. \n    By default, no adjustment is made. \n  MINDIST=number \n    specifies the minimum Kolmogorov-Smirnov distance for a candidate split. \n    By default, MINDIST=0.01.]]>ALPHA=|BONFERRONI|MINDIST=","SubOptionsKeywords":null,"StatementOptionType":"S"},{"StatementOptionName":"GINI","StatementOptionHelp":{"#cdata":"Uses the decrease in the Gini index to split each variable and then to determine the split."},"StatementOptionType":"S"},{"StatementOptionName":"IGR","StatementOptionHelp":{"#cdata":"Uses the entropy metric to split each variable and then uses the information gain ratio to determine the\nsplit."},"StatementOptionType":"S"},{"StatementOptionName":"FTEST","StatementOptionHelp":{"#cdata":"Syntax: FTEST < (options) >\n          \nUses an F statistic to split each variable and then uses the resulting p-value to determine the split\nvariable.\n\nYou can specify the following options:\n  ALPHA=value\n    specifies the maximum p-value for a split to be considered.\n    By default, ALPHA=0.3.\n  BONFERRONI\n    requests a Bonferroni adjustment to the p-value for a variable after the split has been determined.\n    By default, no adjustment is made."},"StatementOptionType":"S","SubOptionsKeywords":"ALPHA=|BONFERRONI"},{"StatementOptionName":"RSS|VARIANCE","StatementOptionHelp":{"#cdata":"Uses the change in response variance to split each variable and then to determine the split."},"StatementOptionType":"S"}]}},{"StatementName":"CRITERION","StatementHelp":{"#cdata":"Syntax: CRITERION criterion < / options > ; \n      \nSpecifies the criterion by which to grow the tree. FastCHAID uses a Kolmogorov-Smirnov splitter to\ndetermine splits for each variable, following a recursive method similar to (?) (after ordering nominal\nvariables\u2019 levels by EVENT level) and then uses the lowest of each variable\u2019s resulting p-value to determine\nthe variable on which to split.\n\ncriterion is one of the following:\n  \u2022 ENTROPY\n  \u2022 GINI\n  \u2022 FASTCHAID"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ENTROPY","StatementOptionHelp":{"#cdata":"[criterion]"},"StatementOptionType":"RS"},{"StatementOptionName":"GINI","StatementOptionHelp":{"#cdata":"[criterion]"},"StatementOptionType":"RS"},{"StatementOptionName":"FASTCHAID","StatementOptionHelp":{"#cdata":"[criterion]"},"StatementOptionType":"RS"},{"StatementOptionName":"BFTHRESH1=","StatementOptionHelp":{"#cdata":"Syntax: BFTHRESH1=number \n          \nSpecifies the maximum number of computations to perform for an exhaustive search. If the input\nvariable being examined is an interval variable, it will try to fall back to the fast algorithm. Otherwise,\nit will fall back to a greedy algorithm."},"StatementOptionType":"V"},{"StatementOptionName":"LEVTHRESH2=","StatementOptionHelp":{"#cdata":"Syntax: LEVTHRESH2=number \n          \nSpecifies the maximum number of computations to perform for a greedy search. If the input variable\nbeing examined is an interval variable, it will fall back to the fast algorithm. Otherwise, it will fall\nback to a greedy algorithm. Although this is similar to LEVTHRESH1, it specifies the computations\nof the fallback algorithm for finding the best splits of a nominal variable, which is a much different\ncomputational complexity."},"StatementOptionType":"V"}]}},{"StatementName":"ID","StatementHelp":{"#cdata":"Syntax: ID variables ; \n      \nThe ID statement lists one or more variables from the predictor data set that are to be transferred \nto the output data set that you specify in the OUTPUT statement."}},{"StatementName":"MODEL","StatementHelp":{"#cdata":"Syntax: MODEL response <(response-option)> = variable <variable...>;\n\nThe MODEL statement causes PROC HPSPLIT to create a tree model by using response as the response \nvariable and variable as a predictor. By default, variable is treated as a continuous predictor \nif it is a numeric variable, or as a categorical variable if the variable also appears in the \nCLASS statement."},"StatementOptions":{"StatementOption":{"StatementOptionName":"EVENT=","StatementOptionHelp":{"#cdata":"Syntax: EVENT='category' \n          \nSpecifies the event level for a binary categorical response variable. PROC HPSPLIT associates this \nlevel with the event of interest (sometimes referred to as the positive outcome) for the purpose of \ncomputing sensitivity, specificity, and area under the curve (AUC) and creating receiver operating \ncharacteristic (ROC) curves. You can specify the value (formatted if a format is applied) of the \nevent category in quotation marks."},"StatementOptionType":"V"}}},{"StatementName":"OUTPUT","StatementHelp":{"#cdata":"Syntax: OUTPUT OUT=SAS-data-set; \n      \nThe OUTPUT statement creates a data set that contains one observation for each observation \nin the input data set."},"StatementOptions":{"StatementOption":{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"[Syntax: OUT=SAS-data-set; \n          \nThe OUT= data set contains the following: \n  o the response variable \n  o any variables that you specify by using the ID statement \n  o the observation\u2019s assigned leaf number \n  o the observation\u2019s assigned node number"},"StatementOptionType":"RV"}}},{"StatementName":"PARTITION","StatementHelp":{"#cdata":"Syntax: PARTITION <partition-options> ;\n      \nThe PARTITION statement specifies how observations in the input data set are logically \npartitioned into disjoint subsets for model training, validation, and testing. Either \nyou can designate a variable in the input data set and a set of formatted values of that \nvariable to determine the role of each observation, or you can specify proportions to \nuse for random assignment of observations for each role."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ROLEVAR=","StatementOptionHelp":{"#cdata":"Syntax: ROLEVAR=variable(TRAIN='value', VALID='value') \n          \nnames the variable in the input data set whose values are used to assign roles to each observation. The\nformatted values of this variable that are used to assign observations roles are specified in the TRAIN=,\nand VALID= sub-options."},"StatementOptionType":"V","SubOptionsKeywords":"TRAIN=|VALID="},{"StatementOptionName":"FRACTION","StatementOptionHelp":{"#cdata":"Syntax: FRACTION(VALIDATE=fraction) < SEED=number > \n          \nrequests that specified proportions of the observations in the input data set be randomly assigned\ntraining and validation roles. You specify the proportions for testing and validation by using the\nVALIDATE= sub-option. The SEED sub-option sets the seed. Because fraction is a per-observation\nprobability, setting fraction too low can result in an empty or nearly-empty validation set!"},"StatementOptionType":"S","SubOptionsKeywords":"VALIDATE=|SEED="}]}},{"StatementName":"PERFORMANCE","StatementHelp":{"#cdata":"Syntax: PERFORMANCE < performance-options > ;\n      \nThe PERFORMANCE statement defines performance parameters for multithreaded and distributed \ncomputing, passes variables about the distributed computing environment, and requests detailed \nresults about the performance characteristics of a High-Performance Analytics procedure.\n\nWith the PERFORMANCE statement, you can also control whether the HPREG procedure executes \nin SMP or MPP mode."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COMMIT=","StatementOptionHelp":{"#cdata":"Syntax: COMMIT=n\n          \nRequests that the High-Performance Analytics procedure write periodic updates to the \nSAS Log when observations are sent from the client to the appliance for distributed \nprocessing.\n\nHigh-Performance Analytics procedures do not have to use input data that are stored \nin the appliance. You can perform distributed computations regardless of the origin \nor format of the input data, provided the data are in a format that can be read by \nthe SAS System (for example, because a SAS/ACCESS engine is available)."},"StatementOptionType":"V"},{"StatementOptionName":"CPUCOUNT=","StatementOptionHelp":{"#cdata":"Syntax: CPUCOUNT=ACTUAL | num\n          \nSpecifies how many processors the procedure assumes are available on each host in the \ncomputing environment. num can be any integer from 1 to 256.\n\nCPUCOUNT=ACTUAL sets CPUCOUNT to the number of physical processors available. This number\ncan be less than the physical number of CPUs if the SAS process has been restricted by system\nadministration tools. Setting CPUCOUNT= to a number greater than the actual number of available\nCPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system\noption.\n\nIf a High-Performance Analytics procedure executes in SMP mode, this option refers to the client\nmachine of the SAS session. In MPP mode, this option applies to the nodes on the appliance."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ACTUAL","@Value2":"<num>"},"StatementOptionToolTips":{"@ToolTip1":"Sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","@ToolTip2":"Replace <num> with an actual number. Setting CPUCOUNT= to a number  greater than the actual number of available CPUs might result in reduced performance. This  option overrides the CPUCOUNT= SAS system option."}},{"StatementOptionName":"DATASERVER=","StatementOptionHelp":{"#cdata":"Syntax: DATASERVER=\u201cname\u201d\n          \nSpecifies the name of the server on Teradata systems as defined through the hosts file \nand as used in the LIBNAME statement for Teradata. For example, if the hosts file defines\n\n    myservercop1 33.44.55.66\n    \nas the server for Teradata, then a LIBNAME specification would be as follows:\n\n    libname TDLib teradata server=myserver user= password= database= ;\n    \nA PERFORMANCE statement to induce running alongside the Teradata server would specify the\nfollowing:\n\n    performance dataserver=\"myserver\";\n    \nIf the DATASERVER= option is specified, it overrides the GRIDDATASERVER environment \nvariable."},"StatementOptionType":"V"},{"StatementOptionName":"DETAILS","StatementOptionHelp":{"#cdata":"Requests a table that shows a timing breakdown of the procedure steps."},"StatementOptionType":"V"},{"StatementOptionName":"TIMEOUT=","StatementOptionHelp":{"#cdata":"Syntax: TIMEOUT=s\n          \nSpecifies the timeout in seconds for a High-Performance Analytics procedure to wait for a connection\nto the appliance and establish a connection back to the client. The default is s=120 seconds. If jobs\nare submitted to the appliance through workload management tools that might suspend access to the\nappliance for a longer period, you might want to increase the timeout value."},"StatementOptionType":"V"},{"StatementOptionName":"HOST=|GRIDHOST=","StatementOptionHelp":{"#cdata":"Syntax: HOST=\u201cname\u201d | GRIDHOST=\u201cname\u201d \n          \nSpecifies the name of the appliance host in single or double quotes. If the HOST= option \nis specified, it overrides the value of the GRIDHOST environment variable."},"StatementOptionType":"V"},{"StatementOptionName":"INSTALL=|INSTALLLOC=","StatementOptionHelp":{"#cdata":"Syntax: INSTALL=\u201cname\u201d | INSTALLLOC=\u201cname\u201d \n          \nSpecifies the directory in which the High-Performance Analytics shared libraries are \ninstalled on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC \nenvironment variable."},"StatementOptionType":"V"},{"StatementOptionName":"NODES=|NNODES=","StatementOptionHelp":{"#cdata":"Syntax: NODES=n | NNODES=n\n          \nSpecifies the number of nodes in the distributed computing environment, provided that \nthe data are not processed alongside the database.\n\nIf you specify NODES=0, you indicate that you want to process the data in SMP mode on \nthe client machine. If the input data are not alongside the database, this is the default. \nThe High-Performance Analytics procedures then perform the analysis mutlithreaded on the client."},"StatementOptionType":"V"},{"StatementOptionName":"NTHREADS=","StatementOptionHelp":{"#cdata":"Syntax: NTHREADS=n \n          \nSpecifies the number of threads for analytic computations and overrides the SAS system option\nTHREADS | NOTHREADS. If you do not specify the NTHREADS= option, the number of threads\nare determined based on the number of CPUs on the host on which the analytic computations execute.\nThe algorithm by which a CPU count is converted to a thread count is specific to the High-\nPerformance Analytics procedure. Most procedures create one thread per CPU for the analytic computations.\nBy default, High-Performance Analytics procedures execute in multiple concurrent threads unless\nturned off by the NOTHREADS system option or you force single-threaded execution with\nNTHREADS=1. The largest number that can be specified for n is 256. Individual High-Performance\nAnalytics procedures can impose more stringent limits if called for by algorithmic considerations.\nYou can affect the determination of the CPU count with the CPUCOUNT= option in the PERFORMANCE\nstatement.\n\nNOTE: The SAS system options THREADS | NOTHREADS apply to the client machine on which\nthe SAS High-Performance Analytics procedures execute. They do not apply to the compute nodes\nin a distributed environment."},"StatementOptionType":"V"}]}},{"StatementName":"PRUNE","StatementHelp":{"#cdata":"Syntax: PRUNE < prune-options > ; \n      \nThe PRUNE statement controls pruning. If NONE is specified, no pruning is performed. If C45 is specified,\na C4.5-based pruner (Quinlan (1993)) based on the upper error rate from the binomial distribution (Wilson\n(1927); ?); Agresti and Coull (1998)) (at the value confidence limit) will be used. Otherwise, a statistical\nmetric may be used for pruning. Optionally, the metric may be complemented by a termination condition.\nPruning and the pruning options are discussed in the details section. \n\nIf no prune statement is given, pruning will occur based on entropy."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"NONE","StatementOptionHelp":{"#cdata":"Turns off pruning."},"StatementOptionType":"S"},{"StatementOptionName":"C45","StatementOptionHelp":{"#cdata":"Syntax: C45 < / confidence > \n          \nUses C4.5-style pruning at the optional specified confidence limit."},"StatementOptionType":"S"},{"StatementOptionName":"BY","StatementOptionHelp":{"#cdata":"Syntax: PRUNE by < / until operator value > \n          \nThis form of the PRUNE statement chooses a node to prune back to a leaf by the specified by.\nOptionally, a metric, operator, and value may also be provided to control pruning. If the until metric is\nnot specified, until will be the same as by, operator will be \u201c>=,\u201d and value will be 1. The by metric\nmay be one of\n  \u2022 GINI\n  \u2022 ENTROPY\n  \u2022 ASE\n  \u2022 MISC\nThe optional until metric may be one of\n  \u2022 GINI\n  \u2022 ENTROPY\n  \u2022 ASE\n  \u2022 MISC\n  \u2022 N\nThe operator may be one of the following C and FORTRAN operators:\n  \u2022 <=\n  \u2022 LE\n  \u2022 >=\n  \u2022 GE\n  \u2022 <\n  \u2022 LT\n  \u2022 >\n  \u2022 GT\n  \u2022 =\n  \u2022 EQ"},"StatementOptionType":"S"}]}},{"StatementName":"RULES","StatementHelp":{"#cdata":"Syntax: RULES file=[filename | fileref] ; \n      \nIf the RULES statement is used, the final tree\u2019s leaves will be written to the file specified through the filename\nfilename or fileref fileref.\nIf no RULES statement is used, no rules will be output."}},{"StatementName":"SCORE","StatementHelp":{"#cdata":"Syntax: SCORE < options > ; \n      \nThe SCORE statement scores the training data set by using the forest model that was trained by PROC\nHPSPLIT and outputs a data set that contains the scored results. The output data set contains the ID variables\nthat are specified in the ID statement, predictions, and decisions.\n\nFor each level of the target, a posterior probability variable is generated in addition to the final predicted\nlevel. \n\nUnlike the other output data sets, outds will be written in alongside mode.\nThe _WARN_ variable will not be created in the scored data set.\nIf no SCORE statement is specified, no scoring will take place."},"StatementOptions":{"StatementOption":{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"Syntax: OUT=< libref.>SAS-data-set \n          \nnames the output data set to contain the scored data."},"StatementOptionType":"V"}}},{"StatementName":"TARGET","StatementHelp":{"#cdata":"Syntax: TARGET variable ; \n      \nThe TARGET statement names the variable whose values PROC HPSPLIT tries to predict. Missing values in\nthe target will be ignored except during scoring and therefore the statistics reported by HPSPLIT may differ\nfrom those found using the scored data sets. \n\nIf multiple TARGET statements occur, the last one will be used.\nFor ease of use, if the TARGET variable conflicts with an INPUT variable, the variable will be used for the\ntarget."}}]}}}