{"Procedure":{"Name":"IMPORT","ProductGroup":"BASE","ProcedureHelp":{"#cdata":"Syntax: PROC IMPORT DATAFILE=\"filename\" | TABLE=\"tablename\" \n      OUT=<libref.>SAS-data-set <(SAS-data-set-options)> \n      <DBMS=identifier><REPLACE> ;  <data-source-statement(s);> \n\nThe IMPORT procedure reads data from an external data source and writes it to a SAS \ndata set. Base SAS can import delimited files. In delimited files, a delimiter--such \nas a blank, comma, or tab--separates columns of data values. If you license SAS/ACCESS \nInterface to PC Files, additional external data sources can include such files as \nMicrosoft Access Database, Excel files, and Lotus spreadsheets. See the SAS/ACCESS \nInterface to PC Files for more information.\n\nWhen you run PROC IMPORT, it reads the input file and writes the data to a SAS data set. \nThe SAS variable definitions are based on the input records. When PROC IMPORT reads a \ndelimited file, it generates a DATA step code to import the data.\n\nYou control the results with options and statements that are specific to the input data \nsource. PROC IMPORT generates the specified output SAS data set and writes information \nabout the import to the SAS log, where you can see the DATA step code that PROC IMPORT \ngenerates."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATAFILE=|FILE=","ProcedureOptionHelp":{"#cdata":"[Syntax: DATAFILE=\"filename\"] \n      \nSpecifies the complete path and filename or fileref for the input PC file, spreadsheet, \nor delimited external file."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"DATATABLE=|TABLE=","ProcedureOptionHelp":{"#cdata":"[Syntax: DATATABLE=\"tablename\"] \n      \nSpecifies the table name of the input DBMS table. If the name does not include special \ncharacters (such as question marks), lowercase characters, or spaces, you can omit the \nquotation marks. The DBMS table name might be case sensitive.\n\nRequirement: When importing Microsoft Access tables, SAS/ACCESS converts the table name \nto a SAS member name. SAS does not support member names longer than 32 bytes. \n\nRequirement: When you import a DBMS table, you must specify the DBMS= option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUT=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUT=<libref.>SAS-data-set] \n      \nIdentifies the output SAS data set with either a one- or two-level SAS name (library and \nmember name)."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"DBMS=","ProcedureOptionHelp":{"#cdata":"[Syntax: DBMS=data-source-identifier] \n      \nSpecifies the type of data to import. \n\nTo import a DBMS table, you must specify DBMS= using a valid database identifier. \nFor example, DBMS=ACCESS specifies to import a Microsoft Access 2000, 2002, or 2003 \ntable. To import PC files, spreadsheets, and delimited external files, you do not \nhave to specify DBMS= if the filename that is specified by DATAFILE= contains a \nvalid extension so that PROC IMPORT can recognize the type of data. For example, \nPROC IMPORT recognizes the filename ACCOUNTS.WK1 as a Lotus 1-2-3 Release 2 spreadsheet \nand the filename MYDATA.CSV as a delimited external file that contains comma-separated \ndata values; therefore, a DBMS= specification is not necessary. \n\nRestriction: The availability of a data source depends on: \n\no the operating environment, and in some cases the platform. \no whether your site has a license to the SAS/ACCESS Interface for PC Files. If you do not \n  have a license, only delimited files are supported."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"CSV","@Value2":"DLM","@Value3":"TAB","@Value4":"ACCESS","@Value5":"ACCESS97","@Value6":"ACCESSCS","@Value7":"DBF","@Value8":"DBFMEMO","@Value9":"DTA","@Value10":"EXCEL","@Value11":"EXCEL4","@Value12":"EXCEL5","@Value13":"EXCELCS","@Value14":"JMP","@Value15":"PARADOX","@Value16":"PCFS","@Value17":"SAV","@Value18":"WK1","@Value19":"WK3","@Value20":"WK4","@Value21":"XLS"},"ProcedureOptionToolTips":{"@ToolTip1":"Comma-separated file [.csv]","@ToolTip2":"Delimited file (default delimiter is a blank) [.*]","@ToolTip3":"Delimited file (tab-delimited values) [.txt]","@ToolTip4":"Microsoft Access 2000, 2002, 2003, or 2007 table (using the LIBNAME statement) [.mdb, .accdb]","@ToolTip5":"Microsoft Access 97 table (using the LIBNAME statement) [.mdb]","@ToolTip6":"Microsoft Access table (using the LIBNAME statement [.mdb, .accdb]","@ToolTip7":"dBASE 5.0, IV, III+, and III files [.dbf]","@ToolTip8":"dBASE 5.0, IV, III+, and III files with memos; FoxPro and Visual FoxPro files with memos [.dbf, .fpt, .dbt","@ToolTip9":"Stata file [.dta]","@ToolTip10":"Excel 97, 2000, 2002, 2003 or 2007 spreadsheet (using the LIBNAME statement) [.xls, .xlsb, .xlsm, .xlsm, .xlsx","@ToolTip11":"Excel 4.0 spreadsheet (using PROC ACCESS) [.xls]","@ToolTip12":"Excel 5.0 or 7.0 (95) spreadsheet (using PROC ACCESS) [.xls]","@ToolTip13":"Excel spreadsheet (using the LIBNAME statement) [.xls, .xlsb]","@ToolTip14":"PCFS [.jmp]","@ToolTip15":"Paradox .DB files [.db]","@ToolTip16":"Files on PC Files Server [.*]","@ToolTip17":"SPSS file [.sav]","@ToolTip18":"Lotus1-2-3 Release 2 spreadsheet [.wk1]","@ToolTip19":"Lotus 1-2-3 Release 3 spreadsheet [.wk3]","@ToolTip20":"Lotus 1-2-3 Release 4 or 5 spreadsheet [.wk4]","@ToolTip21":"Excel 5.0, 95, 97, 2000, 2002, or 2003 spreadsheet (using file formats) [.xls]"}},{"ProcedureOptionName":"REPLACE","ProcedureOptionHelp":{"#cdata":"Overwrites an existing SAS data set. If you do not specify REPLACE, PROC IMPORT \ndoes not overwrite an existing data set."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"DATAROW=","StatementHelp":{"#cdata":"[Syntax: DATAROW=1 to 32767;] \n      \nStarts reading data from the specified row number in the delimited text file. \n\nDefault: \n1 when GETNAMES=NO \n2 when GETNAMES=YES (default for GETNAMES=) \n \nInteraction: \nWhen GETNAMES=YES, DATAROW= must be equal to or greater than 2. When GETNAMES=NO, DATAROW must be \nequal to or greater than 1."},"StatementOptions":null},{"StatementName":"DELIMITER=","StatementHelp":{"#cdata":"[Syntax: DELIMITER='char' | 'nn'x;] \n      \nSpecifies the delimiter that separates columns of data in the input file."},"StatementOptions":null},{"StatementName":"GETNAMES=","StatementHelp":{"#cdata":"[Syntax: GETNAMES=YES | NO; ] \n      \nDetermines whether to generate SAS variable names from the data values in the first \nrecord of the imported file.\n\nIf a data value in the first record for the input file is read and it contains invalid \nspecial characters in a SAS name, such as a blank; SAS converts the character to an \nunderscore. For example, the column name Occupancy Code becomes the SAS variable name \nOccupancy_Code.\n\nYES specifies that PROC IMPORT generate SAS variable names from the data values in the \nfirst record of the imported file.\n \nNO specifies that PROC IMPORT generate SAS variable names as F1, F2, F3 (or VAR1, VAR2, \nVAR3), and so on. \n\nRestriction: If the column names in the first record in the input file are not valid \nSAS names, then PROC IMPORT uses default variable names."},"StatementOptions":null},{"StatementName":"GUESSINGROWS=","StatementHelp":{"#cdata":"[Syntax: GUESSINGROWS=1 to 32767;] \n      \nSpecifies the number of rows of the file to scan in order to determine the appropriate \ndata type and length for the columns. The scan data process scans from row 1 to the number \nthat is specified by GUESSINGROWS=. The default value is 20. However, you can change the \ndefault value in the SAS Registry under SAS REGISTRY->PRODUCTS->BASE->EFI->GuessingRows.\n      \nDefault: 20 \n\nRequirement: This number should be greater than the value that is specified for DATAROW=."},"StatementOptions":null},{"StatementName":"DBDSOPTS=","StatementHelp":{"#cdata":"Syntax: DBDSOPTS='any data set options that are valid for the Excel/Access LIBNAME engine' \n      \nEnables you to take advantage of useful data set options for the LIBNAME engine such as READBUFF=, \nINSERTBUFF=, DBTYPE=, DROP=, FIRSTOBS=, and OBS=. These options are for advanced users who are \nfamiliar with the PC files LIBNAME engine.\n\nYou must surround the options in single quotation marks. Here is an example: DBDSOPTS='FIRSTOBS=10 \nREADBUFF=25';.\n\nIf the option string that you are specifying contains single quotations marks, use double quotation \nmarks around it in your statement. Here is an example: DBDSOPTS=\"DBTYPE=(BilledTo='CHAR(8)')\"; ."},"StatementOptions":null},{"StatementName":"DBSASLABEL=","StatementHelp":{"#cdata":"Syntax: DBSASLABEL=COMPAT | NONE | YES | NO; \n      \nSpecifies the data source column names.\n\n(COMPAT/)YES specifies that the data source column names are saved as the corresponding SAS label names. \nYES is an alias of COMPAT.\n \n(NONE/)NO specifies that the data source column names are not saved as SAS label names. The SAS label \nnames are then left as blanks. NO is an alias of NONE."},"StatementOptions":null},{"StatementName":"MIXED=","StatementHelp":{"#cdata":"Syntax: MIXED=YES | NO; (available only for DBMS=EXCEL) \n      \nSpecifies whether to convert numeric data values into character data values for \na column that contains mixed data types. This option is valid only when you import \n(read) data from Excel. The Microsoft Ace or Microsoft Jet engine handles this option. \nThe default is NO.\n\nYES assigns a SAS character type for the column and converts all numeric data values \nto character data values when mixed data types are found. When you specify MIXED=YES, \nthe connection is set in import mode and no updates are allowed.\n\nCAUTION:\nDue to a limitation in the Microsoft Ace or Microsoft Jet Excel engine, using MIXED=YES \ncould result in improper text variable lengths.   \n\nNO assigns numeric or character type for the column, depending on the majority of the \ntype data that is found. Both numeric data in a character column and character data in \na numeric column are imported as missing values."},"StatementOptions":null},{"StatementName":"PORT=|PORT_NUMBER=","StatementHelp":{"#cdata":"Syntax: PORT= port-number; (available only for Client Server Model) \n      \nSpecifies the number of the port that is listening on the PC Files Server. The valid \nvalue is between 1 and 65535. This port or service name displays on the PC Files Server \ncontrol panel screen when it is started on the PC. This PORT= statement and the SERVICE= \nstatement should not be used in the same procedure. The default value is 8621. \n\nAlias: PORT_NUMBER=."},"StatementOptions":null},{"StatementName":"RANGE=","StatementHelp":{"#cdata":"Syntax: RANGE=\"range-name\" | \"absolute-range\";  \n      \nSubsets a spreadsheet by identifying the rectangular set of cells to import from \nthe specified spreadsheet. The range name is a name that the user defined in the \nspreadsheet to represent a range of cells within the spreadsheet in the Excel file. \nThe range name is not case sensitive and does not allow any special character \nexcept underscore.\n\nWhen data is imported from an Excel file, a sheet name that is appended with a $ \ncharacter is treated as a range name, which refers to the whole sheet. You can use \nPROC DATASETS to list the available data set names, which are mapped to the range \nnames in the Excel file. If the displayed range name contains single quotes, keep \nthe single quotes as part of the range name to access the sheet. For example, here \nis how you can retrieve data from the spreadsheet for two separate sheet names, \nMy#Test and CustomerOrders: \n\n  RANGE=\"'My#Test$'\";\n  RANGE=\"' CustomerOrders$'\";\n  \nAbsolute range identifies the top-left cell that begins the range and the bottom-right \ncell that ends the range. For example, C2:F12 represents cells within Column C, Row 2, \nand Column F, Row 12. Here is another example: \n\n  RANGE=\"'summary$a4:b20'\";\n  \nIn this example, $ defines the end of the sheet name, and the colon (:) separates the \nvalues for the upper left (UL) and lower right (LR) of the cell range. If this statement \nis not specified, PROC IMPORT reads the entire spreadsheet as a range. \n\nIf the range name is available, it is recommended that you use RANGE= option without \nthe SHEET= option for PROC IMPORT. To use the absolute range address, it is strongly \nrecommended that you use the full range address with quotes. For example, specify \n'sheet_name$A1:C7'n . Use SHEET= only when you want to access the whole sheet. \n\nIf you do not specify RANGE=, PROC IMPORT reads the entire spreadsheet as a range.\n\nUse RANGE= instead of STARTCOL=, STARTROW=, ENDCOL=, ENDROW=, or any combination of \nthese because RANGE= already contains all of these values."},"StatementOptions":null},{"StatementName":"SCANTEXT=|SCAN_TEXT=|SCANMEMO=","StatementHelp":{"#cdata":"Syntax: SCANTEXT=YES | NO; \n      \nSpecifies whether to scan the column to determine the length of the text data for each \ndata source column. This option applies only to character data type columns. \n\nYES scans the length of text data for a data source column and uses the length of the \nlongest string of data that it finds as the SAS variable width. If the maximum length \nthat it finds is greater than the value in the TEXTSIZE= option, the smaller value in \nTEXTSIZE= is applied as the SAS variable width.\n \nNO does not scan the length of text data for a data source column. The column length \nreturned from the Microsoft Ace or Microsoft Jet engine is used as the SAS variable \nwidth. If the returned column width is greater than what is specified in the TEXTSIZE= \noption, the smaller value specified in TEXTSIZE= is applied as the SAS variable width.\n\nSpecify SCANTEXT=NO when you need to update data in a Microsoft Excel workbook or \nAccess database.\n \nTo correct truncated text data for DBCS users (including Chinese, Japanese, and Korean), \nyou can set the environment variable DBE_DBCS to YES. This doubles the scanned text data \nlength and therefore corrects the problem of truncated text data. To set the DBE_DBCS \nenvironment variable, submit this statement: Options set=DBE_DBCS YES; .\n\nThe Microsoft Ace or Microsoft Jet engine handles the SCANTEXT= option."},"StatementOptions":null},{"StatementName":"SCANTIME=","StatementHelp":{"#cdata":"Syntax: SCANTIME=YES | NO; \n      \nSpecifies whether to scan the date/time data while importing data from a date/time \ncolumn from the Microsoft Excel workbook or Access database.\n\nYES scans the date/time column and assigns the TIME. format for a date/time column \nonly if time values are found in the column.\n \nNO specifies not to scan the date/time column. The DATETIME. format is assigned for \na date/time column if USEDATE=NO. The DATE. format is assigned for a date/time column \nif USEDATE=YES."},"StatementOptions":null},{"StatementName":"SERVER=|SERVER_NAME=","StatementHelp":{"#cdata":"Syntax: SERVER= \"PC-server-name\"; (available only for Client Server Model) \n\nSpecifies the name of the PC Files Server. You must bring up the listener on the \nPC Files Server before you can establish a connection to it. You can configure the \nservice name, port number, maximum number of connections allowed, and use of data \nencryption on your PC Files Server. This is a required statement."},"StatementOptions":null},{"StatementName":"SERVICE=|SERVER_NAME=|SERVICE_NAME=","StatementHelp":{"#cdata":"Syntax: SERVICE= \"service-name\";.(available only for Client Server Model) \n\nSpecifies the service name that is defined on your service file for your client \nand server machines. This port number or service name is displayed on the PC Files \nServer control panel screen when it is started on the PC. This statement and the \nPORT= statement should not be used in the same procedure. The service name needs \nto be defined on your UNIX machine and your PC Files Server."},"StatementOptions":null},{"StatementName":"SHEET=","StatementHelp":{"#cdata":"Syntax: SHEET=\"sheet-name\" |\"sheetname\" ; \n      \nIdentifies a particular spreadsheet in an Excel workbook. If the \"sheet-name\" contains \na special character such as space in PROC EXPORT, SAS converts it into an underscore. \nFor example, a sheet name \"Employee Information\" becomes ''Employee_Information\".\n\nIf your sheet name contains special characters, use PROC DATASETS to list the available \ndata set names. If the sheet name shown contains single quotes, keep the single quotes \nas part of the sheet name in order to be able to access the sheet. For example, specify \nSHEET=\"'My#Test'\"; .\n\nRestriction:  Avoid sheet-names that look like cell references, which have <1-3 characters> \nplus 1 or more digits. For example, A1, IV65536, TRY123, XFD1048576. \n\nIf both the range name and the sheet name are missing, PROC IMPORT reads the first spreadsheet \nin the workbook. If you do not specify this statement, PROC IMPORT reads the first spreadsheet \nthat was physically saved in the Excel file. To make sure that PROC IMPORT reads the data that \nyou want, identify the spreadsheet by specifying the range name (RANGE=) or the sheet name (SHEET=). \nIt is recommended that you use RANGE= without SHEET= in PROC IMPORT. Use SHEET= only when you want \nto import the entire spreadsheet. If the sheet name contains special characters, you can use RANGE= \ninstead of SHEET= to import data. \n\nIf you do not specify this statement, PROC EXPORT writes the spreadsheet name as the SAS data set name.\n\nExcel supports spreadsheet names up to 31 characters. SAS supports data set names up to 32 characters."},"StatementOptions":null},{"StatementName":"TEXTSIZE=|DBMAX_TEXT=","StatementHelp":{"#cdata":"Syntax: TEXTSIZE=1 to 32767; \n\nSpecifies the maximum variable length in SAS that is allowed while importing data from Microsoft \nExcel text columns. Any text data in Excel whose length exceeds this value is truncated when it \nis imported into SAS. Alias: DBMAX_TEXT=."},"StatementOptions":null},{"StatementName":"USEDATE=","StatementHelp":{"#cdata":"Syntax: USEDATE=YES | NO; \n      \nSpecifies whether to assign a DATE or a DATETIME format while importing a date/time \ncolumn from a Microsoft Excel workbook. To assign the appropriate TIME format, see \nthe SCANTIME= statement. For processing date/time values between SAS and Microsoft \nExcel, see Processing Date/Time Values between SAS and Microsoft Excel.\n\nYES assigns the DATE format for the corresponding date/time column in the Microsoft \nExcel table.\n \nNO assigns the DATETIME format for the corresponding date/time column in the Microsoft \nExcel table."},"StatementOptions":null},{"StatementName":"VERSION=","StatementHelp":{"#cdata":"Syntax: VERSION='file-version';.(available only for Client Server Model) \n      \nSpecifies the version of the file that you want to create if the file does not exist \non your PC Files Server yet. Valid values are 2007, 2003, 2002, 2000, 97, 95, and 5. \nThe default value is 97 for XLS files. Always surround the version value with single \nquotation marks. If the file already exists on the PC Files Server, this statement is \nignored."},"StatementOptions":null},{"StatementName":"ENDCOL=","StatementHelp":{"#cdata":"Syntax: ENDCOL=; (available only for DBMS=XLS for backward compatibility; use RANGE= instead) \n      \nSpecifies the last column for data. The default is the last row that contains data.\n\nRestriction:  This component (DBMS=XLS) does not support Excel 2007 formats. Files \nwith .xlsb, .xlsm, and .xlsx extensions are not supported."},"StatementOptions":null},{"StatementName":"ENDNAMEROW=NAMEROW","StatementHelp":{"#cdata":"Syntax: ENDNAMEROW=NAMEROW; (available only for backward compatibility; use RANGE= instead) \n\nSpecifies the last row for variable names. The default is the same as NAMEROW."},"StatementOptions":null},{"StatementName":"ENDROW=","StatementHelp":{"#cdata":"Syntax: ENDROW=1 to 65535; (available only for backward compatibility; use RANGE= instead) \n      \nSpecifies the last row for data. The default is the last row that contains data."},"StatementOptions":null},{"StatementName":"NAMEROW=","StatementHelp":{"#cdata":"Syntax: NAMEROW=; (available only for backward compatibility; use RANGE= instead) \n      \nSpecifies the first row for variable names. The default is the first row that \ncontains variable names."},"StatementOptions":null},{"StatementName":"STARTCOL=","StatementHelp":{"#cdata":"Syntax: STARTCOL=; (available only for backward compatibility; use RANGE= instead) \n      \nSpecifies the first column for data. The default is the first column that \ncontains data."},"StatementOptions":null},{"StatementName":"STARTROW=","StatementHelp":{"#cdata":"Syntax: STARTROW=; (available only for backward compatibility; use RANGE= instead) \n\nSpecifies the first row for data. The default is the first row that \ncontains data."},"StatementOptions":null},{"StatementName":"SSPI=","StatementHelp":{"#cdata":"Syntax: SSPI=YES|NO  \n\nEnables PC Files Server to allow Integrated Windows Authentication. This \nis a mechanism for Windows client and server to exchange credentials.\n\nDefault: NO \n\nNote: SSPI can also be enabled by specifying the -SSPI option on the SAS \ncommand line. \n\nRestriction: Valid on Windows 64-Bit only."},"StatementOptions":null},{"StatementName":"SERVERUSER=|SERVERUID=","StatementHelp":{"#cdata":"Syntax: SERVERUSER=server-user-name  \n\nSpecifies a domain and User ID that is valid for the PC running PC Files Server. \nAlways enclose the value in quotes, otherwise the backslash can be misinterpreted \nby the SAS parser.\n\nNote: If you are not on a domain, omit the domain name and the backslash. \n\nNote: Use the USER= option for database User IDs."},"StatementOptions":null},{"StatementName":"SERVERPASS=|SERVERPASSWORD=|SERVERPW=|SERVERPWD=","StatementHelp":{"#cdata":"Syntax: SERVERPASS=server-user-password\n\nSpecifies the password for the User ID given. If the account has no password, omit \nthis option. Always enclose the value in quotes, to preserve the case of the password."},"StatementOptions":null},{"StatementName":"MEMOSIZE=|DBMAX_TEXT=","StatementHelp":{"#cdata":"Syntax: MEMOSIZE=1 to 32767  \n\nSpecifies the maximum variable length in SAS that is allowed while importing data \nfrom memo columns of an Access database table. Any memo data in an Access database \ntables whose length exceeds 32767 is truncated when it is imported into SAS. \n\nRestriction: If the maximum length that SCANMEMO= option is greater than the value of \nthe MEMOSIZE= option, the smaller value in the MEMOSIZE= option is applied as the SAS \nvariable width."},"StatementOptions":null},{"StatementName":"DBPASSWORD=|DBPWD=|DBPW=","StatementHelp":{"#cdata":"Syntax: DBPASSWORD=database-file-password  \n\nEnables you to access a file if database-level security is set in the .mdb file. \nA database password is case sensitive. You can define a database password instead \nof user-level security."},"StatementOptions":null},{"StatementName":"DATABASE=","StatementHelp":{"#cdata":"Syntax: DATABASE=database ;\n\nSpecifies the complete path and filename of the Access database file that contains \nthe specified DBMS table. If the database name does not contain lowercase characters, \nspecial characters, or national characters ($, #, or @), you can omit the quotation marks.\n\nNote: SAS does not generate a default value, but you can configure one in the DBMS client \nsoftware."},"StatementOptions":null}]}}}