{"Procedure":{"#comment":{},"Name":"%MACRO","ProductGroup":"BASE","ProcedureHelp":{"#cdata":"Syntax: %MACRO macro-name <(parameter-list)></ option-1 <...option-n>>; \n  \nThe %MACRO statement begins the definition of a macro, assigns the macro a name, and can include \na list of macro parameters, a list of options, or both."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"CMD","ProcedureOptionHelp":{"#cdata":"Specifies that the macro can accept either a name-style invocation or a command-style invocation."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"DES=","ProcedureOptionHelp":{"#cdata":"[Syntax: DES='text'] \n      \nSpecifies a description (up to 40 characters) for the macro entry in the macro catalog."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MINDELIMITER=","ProcedureOptionHelp":{"#cdata":"[Syntax: MINDELIMITER='single character';] \n      \nSpecifies a value that will override the value of the MINDELIMITER= global option. \nThe value must be a single character enclosed in single quotation marks and can \nappear only once in a %MACRO statement."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MINOPERATOR","ProcedureOptionHelp":{"#cdata":"Specifies that the macro processor recognizes and evaluates the mnemonic IN and the special character # \nas logical operators when evaluating arithmetic or logical expressions during the execution of the macro."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOMINOPERATOR","ProcedureOptionHelp":{"#cdata":"Specifies that the macro processor does not recognize the mnemonic IN and the special character # as \nlogical operators when evaluating arithmetic or logical expressions during the execution of the \nmacro. The setting of this argument overrides the setting of the MINOPERATOR global system option."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PARMBUFF|PBUFF","ProcedureOptionHelp":{"#cdata":"Assigns the entire list of parameter values in a macro call, including the parentheses in a name-style \ninvocation, as the value of the automatic macro variable SYSPBUFF."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"STMT","ProcedureOptionHelp":{"#cdata":"Specifies that the macro can accept either a name-style invocation or a statement-style invocation."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"SOURCE|SRC","ProcedureOptionHelp":{"#cdata":"Combines and stores the source of the compiled macro with the compiled macro code as an entry in a SAS \ncatalog in a permanent SAS data library."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"STORE","ProcedureOptionHelp":{"#cdata":"Stores the compiled macro as an entry in a SAS catalog in a permanent SAS data library."},"ProcedureOptionType":"S"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"%ABORT","StatementHelp":{"#cdata":"Stops the macro that is executing along with the current DATA step, SAS job, or SAS session. \n      \nSyntax: %ABORT <ABEND | CANCEL <FILE> | RETURN | <n>> ;"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ABEND","StatementOptionHelp":{"#cdata":"Causes abnormal termination of the current macro and SAS job or session. Results depend on the method \nof operation: \n\no batch mode and noninteractive mode \n\n  o stops processing immediately\n  o sends an error message to the SAS log that states that execution was terminated by the ABEND option \n    of the %ABORT macro statement\n  o does not execute any subsequent statements or check syntax\n  o returns control to the operating environment; further action is based on how your operating environment \n    and your site treat jobs that end abnormally.\n\no windowing environment and interactive line mode \n\n  o causes your macro, windowing environment, and interactive line mode to stop processing immediately \n    and return you to your operating environment."},"StatementOptionType":"S"},{"StatementOptionName":"CANCEL","StatementOptionHelp":{"#cdata":"Causes the cancellation of the current submitted statements. The results depend on the method \nof operation:\n\no batch mode and noninteractive mode\n\n  o The entire SAS program and SAS system are terminated.\n  o The error message is written to the SAS log.\n\no windowing environment and interactive line mode \n\n  o It only clears the current submitted program.\n  o Other subsequent submitted programs are not affected.\n  o The error message is written to the SAS log.\n\no workspace server and stored process server \n\n  o It only clears currently submitted program.\n  o Other subsequent submit calls are not affected.\n  o The error message is written to the SAS log.\n\no SAS IntrNet application server \n\n  o A separate execution is created for each request. The execution submits the request code. A CANCEL \n    in the request code clears the current submitted code but does not terminate the execution of the \n    SAS session."},"StatementOptionType":"S"},{"StatementOptionName":"CANCEL FILE","StatementOptionHelp":{"#cdata":"Causes only the contents of the autoexec file or %INCLUDE file to be cleared by the %ABORT statement. \nOther submitted source statements will be executed after the autoexec or %INCLUDE file."},"StatementOptionType":"S"},{"StatementOptionName":"RETURN","StatementOptionHelp":{"#cdata":"Causes abnormal termination of the current macro and SAS job or session. Results depend on the method \nof operation: \n\no batch mode and noninteractive mode \n\n  o stops processing immediately\n  o sends an error message to the SAS log that states that execution was terminated by the RETURN option \n    of the %ABORT macro statement\n  o does not execute any subsequent statements or check syntax\n  o returns control to the operating environment with a condition code indicating an error.\n\no windowing environment and interactive line mode \n\n  o causes your macro, windowing environment, and interactive line mode to stop processing immediately \n    and return you to your operating environment."},"StatementOptionType":"S"}]}},{"StatementName":"%COPY","StatementHelp":{"#cdata":"Syntax: %COPY macro-name< / options(s)>\n      \nCopies specified items from a SAS macro library."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"SOURCE|SRC","StatementOptionHelp":{"#cdata":"Specifies that the source code of the macro will be copied to the output destination. If the OUTFILE= \noption is not specified, the source is written to the SAS log."},"StatementOptionType":"S"},{"StatementOptionName":"LIBRARY=|LIB=","StatementOptionHelp":{"#cdata":"[Syntax: LIBRARY= libref] \n          \nSpecifies the libref of a SAS library that contains a catalog of stored compiled \nSAS macros. If no library is specified, the libref specified by the SASMSTORE= \noption is used.\n\nRestriction:  This libref cannot be WORK."},"StatementOptionType":"V"},{"StatementOptionName":"OUTFILE=","StatementOptionHelp":{"#cdata":"[Syntax: OUTFILE=fileref | 'external file'] \n          \nSpecifies the output destination of the %COPY statement. The value can be a fileref \nor an external file."},"StatementOptionType":"V"}]}},{"StatementName":"%DISPLAY","StatementHelp":{"#cdata":"Syntax: %DISPLAY window<.group><NOINPUT><BLANK> <BELL><DELETE>;\n      \nYou can display only one group of fields in each execution of a %DISPLAY statement. If you display \na window containing any unprotected fields, enter values into any required fields and press ENTER \nto remove the display from the window."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"NOINPUT","StatementOptionHelp":{"#cdata":"Specifies that you cannot input values into fields displayed in the window. If you omit the NOINPUT \noption, you can input values into unprotected fields displayed in the window. Use the NOINPUT option \nwhen the %DISPLAY statement is inside a macro definition and you want to merge more than one group \nof fields into a single display. Using NOINPUT in a particular %DISPLAY statement causes the group \ndisplayed to remain visible when later groups are displayed."},"StatementOptionType":"S"},{"StatementOptionName":"BLANK","StatementOptionHelp":{"#cdata":"Clears the display in the window. Use the BLANK option to prevent fields from a previous display \nfrom appearing in the current display. This option is useful only when the %DISPLAY statement is \ninside a macro definition and when it is part of a window.group specification. When the %DISPLAY \nstatement is outside a macro definition, the display in the window is cleared automatically after \nthe execution of each %DISPLAY statement."},"StatementOptionType":"S"},{"StatementOptionName":"BELL","StatementOptionHelp":{"#cdata":"Rings your personal computer's bell, if available, when the window is displayed."},"StatementOptionType":"S"},{"StatementOptionName":"DELETE","StatementOptionHelp":{"#cdata":"Deletes the display of the window after processing passes from the %DISPLAY statement on which the \noption appears. DELETE is useful only when the %DISPLAY statement is inside a macro definition."},"StatementOptionType":"S"}]}},{"StatementName":"%DO","StatementHelp":{"#cdata":"Executes a section of a macro repetitively based on the value of an index variable.\n      \nSyntax: \n\n%DO macro-variable=start %TO stop <%BY increment>; \n  text and macro language statements  \n%END;"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"%TO","StatementOptionHelp":{"#cdata":"Separates the start and stop integers or macro expressions that control the number of times the \nportion of the macro between the iterative %DO and %END statements is processed."},"StatementOptionType":"S"},{"StatementOptionName":"%BY","StatementOptionHelp":{"#cdata":"Precedes an increment integer (other than 0) or a macro expression that generates an integer to be \nadded to the value of the index variable in each iteration of the loop."},"StatementOptionType":"S"},{"StatementOptionName":"%UNTIL","StatementOptionHelp":{"#cdata":"Executes a section of a macro repetitively until a condition is true.\n      \nSyntax: \n\n%DO %UNTIL (expression); \n  text and macro language statements  \n%END;"},"StatementOptionType":"S"},{"StatementOptionName":"%WHILE","StatementOptionHelp":{"#cdata":"Executes a section of a macro repetitively while a condition is true.\n      \nSyntax: \n\n%DO %WHILE (expression); \n  text and macro language statements  \n%END;"},"StatementOptionType":"S"}]}},{"StatementName":"%DO %UNTIL","StatementHelp":{"#cdata":"Executes a section of a macro repetitively until a condition is true.\n      \nSyntax: \n\n%DO %UNTIL (expression); \n  text and macro language statements  \n%END;"},"StatementOptions":null},{"StatementName":"%DO %WHILE","StatementHelp":{"#cdata":"Executes a section of a macro repetitively while a condition is true.\n      \nSyntax: \n\n%DO %WHILE (expression); \n  text and macro language statements  \n%END;"},"StatementOptions":null},{"StatementName":"%END","StatementHelp":{"#cdata":"Syntax:  %END;\n      \nEnds a %DO group."},"StatementOptions":null},{"StatementName":"%GLOBAL","StatementHelp":{"#cdata":"Syntax: %GLOBAL macro-variable(s);\n      \nCreates macro variables that are available during the execution of an entire SAS session."},"StatementOptions":null},{"StatementName":"%GOTO","StatementHelp":{"#cdata":"Syntax: %GOTO label; \n      \nBranches macro processing to the specified label."},"StatementOptions":null},{"StatementName":"%IF","StatementHelp":{"#cdata":"Syntax: %IF expression %THEN action; <%ELSE action;>\n      \nConditionally process a portion of a macro."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"%THEN","StatementOptionHelp":{"#cdata":"Conditionally process a portion of a macro."},"StatementOptionType":"S"},{"StatementOptionName":"%DO","StatementOptionHelp":{"#cdata":"Action statement in a %IF-%THEN-%DO construct."},"StatementOptionType":"S"},{"StatementOptionName":"%LET","StatementOptionHelp":{"#cdata":"Action statement in an %IF-%THEN statement.\n      \nCreates a macro variable and assigns it a value."},"StatementOptionType":"S"},{"StatementOptionName":"%RETURN","StatementOptionHelp":{"#cdata":"Action statement in an %IF-%THEN statement.\n      \nExecution causes normal termination of the currently executing macro."},"StatementOptionType":"S"},{"StatementOptionName":"%PUT","StatementOptionHelp":{"#cdata":"Action statement in an %IF-%THEN statement.\n      \nWrites text or macro variable information to the SAS log."},"StatementOptionType":"S"},{"StatementOptionName":"%GOTO","StatementOptionHelp":{"#cdata":"Action statement in an %IF-%THEN statement.\n      \nSyntax: ... %GOTO label ;\n      \nJumps to a new statement."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"%ELSE","StatementHelp":{"#cdata":"Part of a %IF-%THEN-%ELSE statement that conditionally processes a portion of a macro.\n      \nSyntax: \n\n%IF expression %THEN action;  \n<%ELSE action;> "},"StatementOptions":{"StatementOption":[{"StatementOptionName":"%THEN","StatementOptionHelp":{"#cdata":"Conditionally processes a portion of a macro."},"StatementOptionType":"S"},{"StatementOptionName":"%IF","StatementOptionHelp":{"#cdata":"Conditionally processes a portion of a macro."},"StatementOptionType":"S"},{"StatementOptionName":"%DO","StatementOptionHelp":{"#cdata":"Action statement in an %ELSE-%DO construct."},"StatementOptionType":"S"},{"StatementOptionName":"%LET","StatementOptionHelp":{"#cdata":"Syntax: %LET macro-variable =<value>;\n      \nCreates a macro variable and assigns it a value."},"StatementOptionType":"S"},{"StatementOptionName":"%GOTO","StatementOptionHelp":{"#cdata":"Action statement in an %ELSE statement.\n      \nSyntax: ... %GOTO label ;\n      \nJumps to a new statement."},"StatementOptionType":"S"},{"StatementOptionName":"%RETURN","StatementOptionHelp":{"#cdata":"Action statement in an %IF-%THEN statement.\n      \nExecution causes normal termination of the currently executing macro."},"StatementOptionType":"S"},{"StatementOptionName":"%PUT","StatementOptionHelp":{"#cdata":"Action statement in an %IF-%THEN statement.\n      \nWrites text or macro variable information to the SAS log."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"%INPUT","StatementHelp":{"#cdata":"Syntax: %INPUT <macro-variable(s)>;\n      \nSupplies values to macro variables during macro execution."},"StatementOptions":null},{"StatementName":"%LET","StatementHelp":{"#cdata":"Syntax: %LET macro-variable =<value>;\n      \nCreates a macro variable and assigns it a value."},"StatementOptions":null},{"StatementName":"%LOCAL","StatementHelp":{"#cdata":"Syntax: %LOCAL macro-variable(s);\n      \nCreates macro variables that are available only during the execution of the macro where \nthey are defined."},"StatementOptions":null},{"StatementName":"%RETURN","StatementHelp":{"#cdata":"Syntax: %RETURN;\n      \nExecution causes normal termination of the currently executing macro."},"StatementOptions":null},{"StatementName":"%PUT","StatementHelp":{"#cdata":"Syntax: %PUT <text | _ALL_ | _AUTOMATIC_ | _GLOBAL_ | _LOCAL_ | _USER_>; \n      \nWrites text or macro variable information to the SAS log."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"_ALL_","StatementOptionHelp":{"#cdata":"Lists the values of all user-generated and automatic macro variables."},"StatementOptionType":"S"},{"StatementOptionName":"_AUTOMATIC_","StatementOptionHelp":{"#cdata":"Lists the values of automatic macro variables. The automatic variables listed depend on the SAS products \ninstalled at your site and on your operating system. The scope is identified as AUTOMATIC."},"StatementOptionType":"S"},{"StatementOptionName":"_GLOBAL_","StatementOptionHelp":{"#cdata":"Lists user-generated global macro variables. The scope is identified as GLOBAL."},"StatementOptionType":"S"},{"StatementOptionName":"_LOCAL_","StatementOptionHelp":{"#cdata":"Lists user-generated local macro variables. The scope is the name of the currently executing macro."},"StatementOptionType":"S"},{"StatementOptionName":"_USER_","StatementOptionHelp":{"#cdata":"Describes user-generated global and local macro variables. The scope is identified either as GLOBAL, \nor as the name of the macro in which the macro variable is defined."},"StatementOptionType":"S"}]}},{"StatementName":"%SYMDEL","StatementHelp":{"#cdata":"Syntax: %SYMDEL macro-variable-1 <...macro-variable-n></option>; \n      \nDeletes the specified variable or variables from the macro global symbol table."},"StatementOptions":{"StatementOption":{"StatementOptionName":"NOWARN","StatementOptionHelp":{"#cdata":"Suppresses the warning message when an attempt is made to delete a non-existent macro variable."},"StatementOptionType":"S"}}},{"StatementName":"%SYSCALL","StatementHelp":{"#cdata":"Syntax: %SYSCALL call-routine<(call-routine-argument(s))>;\n      \nInvokes a SAS call routine. When %SYSCALL invokes a CALL routine, the value of each macro variable \nargument is retrieved and passed unresolved to the CALL routine. Upon completion of the CALL routine, \nthe value for each argument is written back to the respective macro variable. If %SYSCALL encounters \nan error condition, the execution of the CALL routine terminates without updating the macro variable \nvalues, an error message is written to the log, and macro processing continues. "},"StatementOptions":null},{"StatementName":"%SYSEXEC","StatementHelp":{"#cdata":"Syntax: %SYSEXEC <command>; \n      \nIssues operating environment commands."},"StatementOptions":null},{"StatementName":"%SYSLPUT","StatementHelp":{"#cdata":"Syntax: %SYSLPUT macro-variable=<value </ REMOTE=remote-session-id>>;\n      \nCreates a new macro variable or modifies the value of an existing macro variable on a remote \nhost or server. The %SYSLPUT statement is submitted with SAS/CONNECT software from the local \nhost or client to a remote host or server to create a new macro variable on the remote host \nor server, or to modify the value of an existing macro variable on the remote host or server.\n\nNote: The names of the macro variables on the remote and local hosts must not contain any \nleading ampersands."},"StatementOptions":{"StatementOption":{"StatementOptionName":"REMOTE=","StatementOptionHelp":{"#cdata":"[Syntax: REMOTE=remote-session-identifier>;] \n          \nIdentifies the is the name of the remote session."},"StatementOptionType":"S"}}},{"StatementName":"%SYSRPUT","StatementHelp":{"#cdata":"Syntax: %SYSRPUT local-macro-variable=remote-macro-variable;\n      \nThe %SYSRPUT statement is submitted with SAS/CONNECT to a remote host to retrieve the value \nof a macro variable stored on the remote host. %SYSRPUT assigns that value to a macro variable \non the local host. %SYSRPUT is similar to the %LET macro statement because it assigns a value \nto a macro variable. However, %SYSRPUT assigns a value to a variable on the local host, not on \nthe remote host where the statement is processed. The %SYSRPUT statement places the macro variable \ninto the global symbol table in the client session."},"StatementOptions":null},{"StatementName":"%WINDOW","StatementHelp":{"#cdata":"Syntax: %WINDOW window-name<window-option(s) group-definition(s)>field-definition(s);\n      \nDefines customized windows."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COLOR=|C=","StatementOptionHelp":{"#cdata":"Specifies the color of the window background. The default color of the window and the contents \nof its fields are both device-dependent."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"BLACK","@Value2":"GRAY","@Value3":"PINK","@Value4":"BLUE","@Value5":"GREEN","@Value6":"RED","@Value7":"BROWN","@Value8":"MAGENTA","@Value9":"WHITE","@Value10":"CYAN","@Value11":"ORANGE","@Value12":"YELLOW"},"StatementOptionToolTips":{"@ToolTip1":"BLACK","@ToolTip2":"GRAY|GREY","@ToolTip3":"PINK","@ToolTip4":"BLUE","@ToolTip5":"GREEN","@ToolTip6":"RED","@ToolTip7":"BROWN","@ToolTip8":"MAGENTA","@ToolTip9":"WHITE","@ToolTip10":"CYAN","@ToolTip11":"ORANGE","@ToolTip12":"YELLOW"}},{"StatementOptionName":"COLUMNS=","StatementOptionHelp":{"#cdata":"[Syntax: COLUMNS=columns] \n          \nSpecifies the number of display columns in the window, including borders. A window \ncan contain any number of columns and can extend beyond the border of the display. \nThis feature is useful when you need to display a window on a device larger than \nthe one on which you developed it. By default, the window fills all remaining \ncolumns in the display."},"StatementOptionType":"V"},{"StatementOptionName":"ICOLUMN=","StatementOptionHelp":{"#cdata":"[Syntax: ICOLUMN=column] \n          \nSpecifies the initial column within the display at which the window is displayed. \nBy default, the macro processor begins the window at column 1 of the display."},"StatementOptionType":"V"},{"StatementOptionName":"IROW=","StatementOptionHelp":{"#cdata":"[Syntax: IROW=row] \n          \nSpecifies the initial row (line) within the display at which the window is displayed. \nBy default, the macro processor begins the window at row 1 of the display."},"StatementOptionType":"V"},{"StatementOptionName":"KEYS=","StatementOptionHelp":{"#cdata":"[Syntax: KEYS=<<libref.>catalog.>keys-entry] \n          \nSpecifies the name of a KEYS catalog entry that contains the function key definitions \nfor the window. If you omit libref and catalog, SAS uses SASUSER.PROFILE.keys-entry.\n\nIf you omit the KEYS= option, SAS uses the current function key settings defined in \nthe KEYS window."},"StatementOptionType":"V"},{"StatementOptionName":"MENU=","StatementOptionHelp":{"#cdata":"[Syntax: MENU=<<libref.>catalog.>pmenu-entry] \n          \nSpecifies the name of a menu you have built with the PMENU procedure. If you omit \nlibref and catalog, SAS uses SASUSER.PROFILE.pmenu-entry."},"StatementOptionType":"V"},{"StatementOptionName":"ROWS=","StatementOptionHelp":{"#cdata":"[Syntax: ROWS=rows] \n          \nSpecifies the number of rows in the window, including borders. A window can contain \nany number of rows and can extend beyond the border of the display device. This feature \nis useful when you need to display a window on a device larger than the one on which \nyou developed it. If you omit a number, the window fills all remaining rows in the \ndisplay device."},"StatementOptionType":"V"},{"StatementOptionName":"ATTR=|A=","StatementOptionHelp":{"#cdata":"Syntax: ATTR=attribute | (attribute-1 <... , attribute-n>) \n          \nControls several display attributes of the field."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"BLINK","@Value2":"HIGHLIGHT","@Value3":"REV_VIDEO","@Value4":"UNDERLINE"},"StatementOptionToolTips":{"@ToolTip1":"Causes the field to blink.","@ToolTip2":"Displays the field at high intensity.","@ToolTip3":"Displays the field in reverse video.","@ToolTip4":"Underlines the field."}},{"StatementOptionName":"AUTOSKIP=|SKIP=","StatementOptionHelp":{"#cdata":"Controls whether the cursor moves to the next unprotected field of the current window or group \nwhen you have entered data in all positions of a field."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"YES","@Value2":"NO"},"StatementOptionToolTips":{"@ToolTip1":"Causes the cursor to move automatically to the next unprotected field.","@ToolTip2":"Causes the cursor to not move automatically."}},{"StatementOptionName":"DISPLAY=","StatementOptionHelp":{"#cdata":"Determines whether the macro processor displays the characters you are entering into a macro variable \nvalue as you enter them."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"YES","@Value2":"NO"},"StatementOptionToolTips":{"@ToolTip1":"The macro processor displays the characters as you enter them.","@ToolTip2":"The macro processor does not display the characters as you enter them."}},{"StatementOptionName":"PROTECT=|P=","StatementOptionHelp":{"#cdata":"Controls whether information can be entered into a field containing a macro variable."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"YES","@Value2":"NO"},"StatementOptionToolTips":{"@ToolTip1":"If you specify PROTECT=YES, you cannot enter information into a field. Use the PROTECT= option only  for fields containing macro variables; fields containing text are automatically protected.","@ToolTip2":"If you specify PROTECT=NO (the default value), you can enter information."}},{"StatementOptionName":"REQUIRED=","StatementOptionHelp":{"#cdata":"Determines whether you must enter a value for the macro variable in that field."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"YES","@Value2":"NO"},"StatementOptionToolTips":{"@ToolTip1":"If you specify REQUIRED=YES, you must enter a value into that field in order to remove the display  from the window. You cannot enter a null value into a required field.","@ToolTip2":"If you specify REQUIRED=NO (the default value), you do not have to enter a value in that field in  order to remove the display from the window. Entering a command on the command line of the window  removes the effect of REQUIRED=YES."}}]}},{"StatementName":"%INCLUDE","StatementHelp":{"#cdata":"%INCLUDE source(s) </<SOURCE2> <S2=length> <operating-environment-options>>; \n      \nBrings a SAS programming statement, data lines, or both, into a current SAS program."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"SOURCE2","StatementOptionHelp":{"#cdata":"Causes the SAS log to show the source statements that are being included in your SAS program."},"StatementOptionType":"S"},{"StatementOptionName":"S2=","StatementOptionHelp":{"#cdata":"[Syntax: S2=length] \n          \nSpecifies the length of the record to be used for input. \n          \nLength can have these values: \n\n  S \n  sets S2 equal to the current setting of the S= SAS system option.\n   \n  0 \n  tells SAS to use the setting of the SEQ= system option to determine whether the line contains \n  a sequence field. If the line does contain a sequence field, SAS determines line length by \n  excluding the sequence field from the total length.\n   \n  n \n  specifies a number greater than zero that corresponds to the length of the line to be read, \n  when the file contains fixed-length records. When the file contains variable-length records, n \n  specifies the column in which to begin reading data."},"StatementOptionType":"V"}]}},{"StatementName":"%LIST","StatementHelp":{"#cdata":"Displays lines that are entered in the current session.\n      \nSyntax: %LIST<n <:m | - m>>; \n\nwhere\n\n  n - means display line n.\n\n  n-m - means display lines n through m; can be written as n:m"},"StatementOptions":null},{"StatementName":"PROC","StatementHelp":{"#cdata":"Syntax: PROC procedure-name <options>;\n    \nBegins a PROC step. The PROC step consists of a group of SAS statements that call and execute\na procedure, usually with a SAS data set as input."},"StatementOptions":null},{"StatementName":"DATA","StatementHelp":{"#cdata":"Begins a DATA step and provides names for any output SAS data sets, views, or programs. \n    \nSyntax: \n    \n(1) DATA <data-set-name-1 <(data-set-options-1)>> \n      <... data-set-name-n <(data-set-options-n)>> </ <DEBUG> <NESTING> <STACK = stack-size>> <NOLIST>;  \n\n(2) DATA _NULL_ </ <DEBUG> <NESTING> <STACK = stack-size>> <NOLIST>;  \n\n(3) DATA view-name <data-set-name-1 <(data-set-options-1)>> \n      <... data-set-name-n <(data-set-options-n)>> / \n      VIEW=view-name <(<password-option><SOURCE=source-option>)> <NESTING> <NOLIST>;  \n\n(4) DATA data-set-name / PGM=program-name <(<password-option><SOURCE=source-option>)> <NESTING> <NOLIST>;  \n\n(5) DATA VIEW=view-name <(password-option)> <NOLIST>;  \n      DESCRIBE;  \n \n(6) DATA PGM=program-name <(password-option)> <NOLIST>;  \n      <DESCRIBE;>  \n      <REDIRECT INPUT | OUTPUT old-name-1 = new-name-1<... old-name-n = new-name-n>;>  \n      <EXECUTE;>"},"StatementOptions":null},{"StatementName":"SIGNON","StatementHelp":{"#cdata":"Syntax: SIGNON <options> ;\n    \nInitiates a connection between a client session and a server session."},"StatementOptions":null},{"StatementName":"SIGNOFF","StatementHelp":{"#cdata":"Syntax: SIGNOFF <options> \n    \nEnds the connection between a client session and a server session."},"StatementOptions":null},{"StatementName":"RSUBMIT","StatementHelp":{"#cdata":"Syntax: RSUBMIT <options>;  ENDRSUBMIT <CANCEL>;  \n   RDISPLAY <CONNECTREMOTE=><server-ID;>  \n   RGET <CONNECTREMOTE=><server-ID>;  \n   %SYSRPUT macro-variable=value;  \n   %SYSLPUT macro-variable=value </REMOTE=server-ID>;  \n   WAITFOR <_ANY_ | _ALL_> task1...taskn <TIMEOUT=seconds>;  \n   LISTTASK <_ALL_ | task>;  \n   KILLTASK <_ALL_ | task1...taskn>;  \n    \nMarks the beginning of a block of statements that a client session submits to a server\nsession for execution."},"StatementOptions":null},{"StatementName":"ENDRSUBMIT","StatementHelp":{"#cdata":"Marks the end of a block of statements that a client session submits to a server session \nfor execution."},"StatementOptions":null},{"StatementName":"SYSTASK","StatementHelp":{"#cdata":"Syntax: SYSTASK COMMAND \"operating system command\"\n  <WAIT | NOWAIT>\n  <TASKNAME=taskname>\n  <MNAME=name-var>\n  <STATUS=stat-var>\n  <SHELL<=\"shell-command\">>;  \n  SYSTASK LIST <_ALL_ | taskname> <STATE> <STATVAR>;  \n  SYSTASK KILL taskname <taskname...>;   \n    \nExecutes, lists, or terminates asynchronous tasks."},"StatementOptions":null},{"StatementName":"LISTTASK","StatementHelp":{"#cdata":"Syntax: LISTTASK <_ALL_|task> ; \n    \nLists all active connections or tasks and identifies the execution status of each connection or task."},"StatementOptions":null},{"StatementName":"KILLTASK","StatementHelp":{"#cdata":"Syntax: KILLTASK _ALL_ |task1...taskn ;\n    \nFor asynchronous tasks, forces one or more active tasks or server sessions to terminate immediately."},"StatementOptions":null},{"StatementName":"RDISPLAY","StatementHelp":{"#cdata":"Syntax: RDISPLAY <<CONNECTREMOTE=>server-ID >;\n    \nCreates a Log window to display the lines from the log and an Output window to list the output \ngenerated from the execution of the statements within an asynchronous RSUBMIT block."},"StatementOptions":null},{"StatementName":"RGET","StatementHelp":{"#cdata":"Syntax: RGET <<CONNECTREMOTE=>server-ID>;\n    \nRetrieves the log and output that are created by an asynchronous RSUBMIT and merges them into the\nLog and Output windows of the client session."},"StatementOptions":null},{"StatementName":"WAITFOR","StatementHelp":{"#cdata":"Syntax: WAITFOR<_ANY_ | _ALL_> taskname <taskname...><TIMEOUT=seconds>;\n    \nSuspends execution of the current SAS session until the specified tasks finish executing."},"StatementOptions":null},{"StatementName":"SYSECHO","StatementHelp":{"#cdata":"Syntax: SYSECHO <\"text\">; \n\nFires a global statement complete event and passes a text string back to the IOM client."},"StatementOptions":null},{"StatementName":"GOTO|GO TO","StatementHelp":{"#cdata":"Syntax: GOTO label;\n      \nJumps to a new statement."},"StatementOptions":null},{"StatementName":"%MEND","StatementHelp":{"#cdata":"Syntax: %MEND <macro-name>;]\n    \nEnds a macro definition."},"StatementOptions":null},{"StatementName":"IF","StatementHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions. \n\nSyntax: \n(1) IF expression THEN statement; \n    <ELSE statement;> \n(2) IF condition;"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"DO","StatementOptionHelp":{"#cdata":"DO statement in an IF-THEN-DO construct."},"StatementOptionType":"S"},{"StatementOptionName":"WHEN","StatementOptionHelp":{"#cdata":"WHEN statement in an IF-THEN-WHEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"ELSE","StatementHelp":{"#cdata":"If the condition in an IF-THEN statement is false and an ELSE statement is present, \nthen the ELSE action is carried out."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"IF","StatementOptionHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}}]}}}