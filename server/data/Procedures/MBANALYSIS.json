{"Procedure":{"Name":"MBANALYSIS","ProductGroup":"CAS|VIYA|DATA MINING AND MACHINE LEARNING","ProcedureHelp":{"#cdata":"Syntax: PROC MBANALYSIS options;\n    CUSTOMER variables;\n    HIERARCHY DATA=CAS-libref.data-table <CAS-libref.data-table...>;\n    OUTPUT options;\n    SAVESTATE RSTORE=CAS-libref.data-table;\n    TARGET variable;\n    \nThe MBANALYSIS (market basket analysis) procedure performs association rule mining on a transaction \ndatabase. Association rules are in the form of if A then B, where A and B are items in the transaction \ndatabase. Association rules helps determine association or correlation between various items in a database. \nThese rules are used for finding the latest trends and patterns in data and also help in business decision-\nmaking processes. The MBANALYSIS procedure uses the frequent-pattern growth (FP-growth) algorithm of \nHan, Pei, and Yin (2000) for finding frequent item sets and then generates rules that are based on \nthese frequent item sets."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=CAS-libref.data-table\n      \nNames the input data table for PROC MBANALYSIS to use. CAS-libref.data-table is a two-level name,\nwhere\n\n  CAS-libref refers to a collection of information that is defined in the LIBNAME statement and\n    includes the caslib, which includes a path to the data, and a session identifier, which\n    defaults to the active session but which can be explicitly defined in the LIBNAME\n    statement.\n    \n  data-table specifies the name of the input data table."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"PCTSUP=|SUPPCT=|SUP_PCT=|PCTSUPPORT=","ProcedureOptionHelp":{"#cdata":"Syntax: PCTSUP=number | SUPPCT=number | SUP_PCT=number | PCTSUPPORT=number\n      \nSpecifies the minimum level of support for a rule as a percentage of the number of baskets in the \ninput data table, where number must be a real number between 0 and 100, inclusive. This option is \nignored if the SUPPORT= option is specified."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ANTECEDENTLIST=","ProcedureOptionHelp":{"#cdata":"Syntax: ANTECEDENTLIST=(string <string...>)\n      \nSpecifies the regular expression strings to match in the antecedent (left-hand side) of a rule."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CONF=","ProcedureOptionHelp":{"#cdata":"Syntax: CONF=number\n      \nSpecifies the minimum confidence for the rules, where number must be a real number between 0 and 100.\n\nBy default, CONF=50."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CONSEQUENTLIST=","ProcedureOptionHelp":{"#cdata":"Syntax: CONSEQUENTLIST=(string <string...>)\n      \nSpecifies the regular expression strings to match in the consequent (right-hand side) of a rule."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ITEMS=","ProcedureOptionHelp":{"#cdata":"Syntax: ITEMS=number\n      \nSpecifies the number of items in a rule, where number must be an integer between 1 and 1,000. \nBy default, ITEMS=2 when you specify either an OUT= or OUTRULE= option in the OUTPUT statement; \notherwise, ITEMS=1 by default."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LIFT=","ProcedureOptionHelp":{"#cdata":"Syntax: LIFT=number\n      \nSpecifies the minimum lift value necessary to generate a rule, where number must be a positive, \nreal number between 0 and 100, inclusive.\n\nBy default, LIFT=1."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXBSKTSZ=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXBSKTSZ=number\n      \nSpecifies the maximum basket size, where number must be a positive integer between 0 and 1,000, \ninclusive. Baskets whose size is larger than number are rejected.\n\nBy default, MAXBSKTSZ=1000."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MINBSKTSZ=","ProcedureOptionHelp":{"#cdata":"Syntax: MINBSKTSZ=number\n      \nSpecifies the minimum basket size, where number must be a positive integer between 0 and 20, \ninclusive. Baskets whose size is smaller than number are rejected.\n\nBy default, MINBSKTSZ=1."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NLHS_RANGE=","ProcedureOptionHelp":{"#cdata":"Syntax: NLHS_RANGE=(number, number)\n      \nSpecifies the range of number of items in the left-hand side (LHS) of a rule.\n\nBy default, NLHS_RANGE=(1,1000)."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NORM=","ProcedureOptionHelp":{"#cdata":"Syntax: NORM=TRUE | FALSE\n      \nSpecifies whether to normalize the values of the items in the output tables that are specified \nin the OUTPUT statement.\n\nBy default, NORM=FALSE."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"","@Value2":""},"ProcedureOptionToolTips":{"@ToolTip1":"","@ToolTip2":""}},{"ProcedureOptionName":"NRHS_RANGE=","ProcedureOptionHelp":{"#cdata":"Syntax: NRHS_RANGE=(number, number)\n      \nSpecifies the range of number of items in the right-hand side (RHS) of a rule.\n\nBy default, NRHS_RANGE=(1,1000)."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SEPARATOR=","ProcedureOptionHelp":{"#cdata":"Syntax: SEPARATOR=string\n      \nSpecifies the separator character in the antecedent (left-hand side) or consequent (right-hand side) \nof a rule.\n\nBy default, SEPARATOR=\"&\"."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SUP_LIFT=","ProcedureOptionHelp":{"#cdata":"Syntax: SUP_LIFT=number\n      \nSpecifies the minimum support lift necessary to generate a rule, where number must be a positive, \nreal number.\n\nBy default, SUP_LIFT=0."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"CUSTOMER","StatementHelp":{"#cdata":"Syntax: CUSTOMER statement\n\nCUSTOMER statement groups one or more specified target variables into a basket. You can also specify \nthis statement as ID variables."},"StatementOptions":null},{"StatementName":"ID","StatementHelp":{"#cdata":"Syntax: ID variables;\n\nThe optional ID statement lists one or more variables from the input data set to be copied to the \nprediction output data set. The ID statement accepts both numeric and character variables. The \nvariables in an ID statement can also appear in any other statements."},"StatementOptions":null},{"StatementName":"HIERARCHY","StatementHelp":{"#cdata":"Syntax: HIERARCHY DATA=CAS-libref.data-table <CAS-libref.data-table...>;\n\nThe HIERARCHY statement specifies one or more hierarchical input data tables. If this statement \nis not specified, then PROC MBANALYSIS performs simple association analysis without a hierarchy. \nA maximum of five levels of hierarchy is supported. Each level of hierarchy is specified in a \nseparate data table."},"StatementOptions":{"StatementOption":{"StatementOptionName":"DATA=","StatementOptionHelp":{"#cdata":"Syntax: DATA=CAS-libref.data-table <CAS-libref.data-table...>\n          \nSpecifies one or more data tables that contain the hierarchy data. A maximum of five levels \nof hierarchy is supported. Each level of hierarchy is specified in a separate data table. \nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session \nidentifier, and data-table specifies the name of the input data table."},"StatementOptionType":"V"}}},{"StatementName":"OUTPUT","StatementHelp":{"#cdata":"Syntax: OUTPUT options;\n\nThe OUTPUT statement specifies output tables that contain result of the MBANALYSIS procedure."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"Syntax: OUT=CAS-libref.data-table\n          \nCreates a data table that contains information about frequent item sets with their transaction \ncounts and support. CAS-libref.data-table is a two-level name, where CAS-libref refers to the \ncaslib and session identifier, and data-table specifies the name of the output data table."},"StatementOptionType":"V"},{"StatementOptionName":"OUTFREQ=","StatementOptionHelp":{"#cdata":"Syntax: OUTFREQ=CAS-libref.data-table\n          \nCreates a data table that contains information about the unique frequent items with their transaction \ncounts and support. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib \nand session identifier, and data-table specifies the name of the output data table."},"StatementOptionType":"V"},{"StatementOptionName":"OUTRULE=","StatementOptionHelp":{"#cdata":"Syntax: OUTRULE=CAS-libref.data-table\n          \nCreates a data table that contains information about the rules. This table includes variables \nthat identify the left-hand side and right-hand sides of the rule, the support, and the lift. \nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session \nidentifier, and data-table specifies the name of the output data table."},"StatementOptionType":"V"}]}},{"StatementName":"SAVESTATE","StatementHelp":{"#cdata":"Syntax: SAVESTATE RSTORE=CAS-libref.data-table;  \n      \nThe SAVESTATE statement creates an analytic store for the model and saves it as a binary object \nin a data table. You can use the analytic store in the ASTORE procedure to score new data."},"StatementOptions":{"StatementOption":{"StatementOptionName":"RSTORE=","StatementOptionHelp":{"#cdata":"Syntax: RSTORE=CAS-libref.data-table \n          \nSpecifies a data table in which to save the analytic store for the model. CAS-libref.data-table \nis a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table \nspecifies the name of the output data table."},"StatementOptionType":"V"}}},{"StatementName":"TARGET","StatementHelp":{"#cdata":"Syntax: TARGET variable;\n\nThe TARGET statement specifies a single nominal variable to use as the target variable. If this \nvariable is not present in the input data table, then PROC MBANALYSIS exits with an error."},"StatementOptions":null}]}}}