{"Procedure":{"Name":"MBC","ProductGroup":"CAS|VIYA|VISUAL STATISTICS","ProcedureHelp":{"#cdata":"Syntax: PROC MBC <options>;\n    BY variables;\n    VAR variables;\n    INIT variables;\n    OUTPUT OUT=CAS-libref.data-table < <=name>>\u2026<keyword <=name>> <options>;\n    DISPLAY <options>;\n    DISPLAYOUT <options>;\n    STORE <options>;\n    \nThe MBC procedure fits mixtures of multivariate Gaussian and uniform distributions to achieve \nunsupervised and semisupervised clustering of data. It treats the cluster memberships as missing \ndata and uses the expectation-maximization (EM) algorithm to maximize the likelihood. The procedure \ncan produce output data tables that contain cluster membership weights and component log likelihoods. \nPROC MBC can also store the fitted model for scoring subsequent input data."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"COVSTRUCT=","ProcedureOptionHelp":{"#cdata":"Syntax: COVSTRUCT=EEE | EEI | EEV | EII | EVI | EVV | VII | VVI | VVV | (name <name \u2026name>)\nSpecifies the covariance structure for the Gaussian components. By default, COVSTRUCT=VVV."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"EEE","@Value2":"EEI","@Value3":"EEV","@Value4":"EII","@Value5":"EVI","@Value6":"EVV","@Value7":"VII","@Value8":"VVI","@Value9":"VVV"},"ProcedureOptionToolTips":{"@ToolTip1":"Co","@ToolTip2":"Equal volume, Equal shape, Equal orientation","@ToolTip3":"Equal volume, Equal shape, Coordinate axes orientation","@ToolTip4":"Equal volume, Equal shape, Variable orientation","@ToolTip5":"Equal volume, Spherical shape, Coordinate axes orientation","@ToolTip6":"Equal volume, Variable shape, Variable orientation","@ToolTip7":"Variable volume, Spherical shape, Coordinate axes orientation","@ToolTip8":"Variable volume, Variable shape, Coordinate axes orientation","@ToolTip9":"Variable volume, Variable shape, Variable orientation"}},{"ProcedureOptionName":"CRITERION=","ProcedureOptionHelp":{"#cdata":"Specifies the model fit criterion to use in model selection.\n \n By default, CRITERION=BIC."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"AIC","@Value2":"AICC","@Value3":"BIC","@Value4":"LOGL"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies Akaike\u2019s information criterion.","@ToolTip2":"Specifies Akaike\u2019s information criterion (corrected).","@ToolTip3":"Specifies the Bayesian information criterion.","@ToolTip4":"Specifies the log likelihood."}},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=CAS-libref.data-table \n\nNames the input data table for PROC MBC to use. The default is the most recently created data \ntable. CAS-libref.data-table is a two-level name, where \n\nCAS-libref\n  refers to a collection of information that is defined in the LIBNAME statement and includes \n  the caslib, which includes a path to the data, and a session identifier, which defaults to \n  the active session but which can be explicitly defined in the LIBNAME statement.\n  \ndata-table\n  specifies the name of the input data table."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"MCRITERION=","ProcedureOptionHelp":{"#cdata":"Syntax: MCRITERION=number\n      \nSpecifies the convergence criterion for the expectation-maximization (EM) technique."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NIT=","ProcedureOptionHelp":{"#cdata":"Syntax: NIT=KMEANS | RANDOM\n      \nSpecifies which method to use to initialize cluster membership. This option is ignored if you \nspecify initial weights in the INIT statement.\n\nBy default, INIT=RANDOM.\n\nIf you use the INIT statement to specify initialization variables, the procedure uses those \nvariables for initialization and ignores any INIT= option."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"KMEANS","@Value2":"RANDOM"},"ProcedureOptionToolTips":{"@ToolTip1":"Uses k-means clustering to generate starting values. BY-group processing is not available when you specify this method.","@ToolTip2":"Specifies the random weight method."}},{"ProcedureOptionName":"ITHIST","ProcedureOptionHelp":{"#cdata":"Produces the \"Iteration History\" table with basic information about each iteration.\n      \nThis is equivalent to specifying ITHIST=SUMMARY."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"ITHIST=","ProcedureOptionHelp":{"#cdata":"Syntax: ITHIST <=DETAILS | NONE | SUMMARY>\n      \nProduces the \"Iteration History\" table."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"DETAILS","@Value2":"NONE","@Value3":"SUMMARY"},"ProcedureOptionToolTips":{"@ToolTip1":"Produces a table that contains expanded information about each iteration.","@ToolTip2":"Suppresses the production of the table.","@ToolTip3":"Produces a table that contains basic information about each iteration."}},{"ProcedureOptionName":"MAXITER=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXITER=number\n      \nSpecifies the maximum number of expectation-maximization (EM) iterations before termination. \nThe EM process terminates after the specified number of iterations, even if the process has \nnot converged. By default, MAXITER=500."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NCLUSTERS=","ProcedureOptionHelp":{"#cdata":"Syntax: NCLUSTERS=number | (number <number \u2026number>) | (number to number <by number>)\n      \nSpecifies the number of Gaussian components in the model. By default, NCLUSTERS=2. If you specify \na list of numbers or a range of numbers, PROC MBC fits a separate model for each value in the list \nor range and for all values of the NOISE= and COVSTRUCT= options. The procedure identifies the model \nthat has the best fit, where the fit is computed according to the value of the CRITERION= option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NOISE=","ProcedureOptionHelp":{"#cdata":"Syntax: NOISE=YES | NO | (value <value \u2026value>)\n      \nSpecifies whether to include a noise component. By default, NOISE=NO. If you specify \na list of values, PROC MBC fits a separate model for each distinct value in the list \nand for all values of the COVSTRUCT= and NCLUSTERS= options. The procedure identifies \nthe model that has the best fit, where the fit is computed according to the value of \nthe CRITERION= option."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"YES","@Value2":"NO"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies to include a noise component.","@ToolTip2":"Specifies not to include a noise component."}},{"ProcedureOptionName":"SEED=","ProcedureOptionHelp":{"#cdata":"Syntax: SEED=integer\n      \nSpecifies the pseudorandom number seed for generating random starting weights. Random starting \nweights are used only when you do not specify starting weight variables in the INIT statement \nand when you do not specify INIT=RANDOM."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SINGPARM=","ProcedureOptionHelp":{"#cdata":"Syntax: SINGPARM=number\n      \nSpecifies the parameter singularity criterion. If the mixing estimate for a model component \nis less than or equal to number, it is considered to be zero. In models that have noise \ncomponents, if the computed noise volume is less than or equal to number, the procedure \nwill not fit the model. The value of number must be greater than zero. \n\nBy default, SINGPARM=1E\u20138."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SINGULAR=","ProcedureOptionHelp":{"#cdata":"Syntax: SINGULAR=number\n      \nSpecifies the general singularity criterion to use in matrix operations. The value of number \nmust be greater than or equal to zero. By default, SINGULAR=1E\u20138."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"TECHNIQUE=","ProcedureOptionHelp":{"#cdata":"Syntax: TECHNIQUE=EM | CEM\n      \nSpecifies the expectation-maximization (EM) technique to use.\n\nBy default, TECHNIQUE=EM."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"EM","@Value2":"CEM"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies the traditional EM technique.","@ToolTip2":"Specifies the classification EM technique."}},{"ProcedureOptionName":"TOPMODELS=","ProcedureOptionHelp":{"#cdata":"Syntax: TOPMODELS=number\n      \nSpecifies the maximum number of models to include in the FitSummary table. The value of number \nmust be an integer greater than or equal to 1. This option is applicable only when at least one \nof the NCLUSTERS=, NOISE=, or COVSTRUCT= options has multiple values. The FitSummary table displays \nsummary information for number of models or for as many models as were fit, whichever is smaller. \n\nBy default, TOPMODELS=10."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"BY","StatementHelp":{"#cdata":"Syntax: BY variables;\n\nYou can specify a BY statement in PROC MBC to obtain separate analyses of observations in groups that \nare defined by the values of the BY variables. If you specify more than one BY statement, only the last \none specified is used."},"StatementOptions":null},{"StatementName":"DISPLAY","StatementHelp":{"#cdata":"Syntax: DISPLAY <table-list> </ options>;\n      \nThe DISPLAY statement enables you to specify a list of display tables to display or exclude. This statement \nis similar to the ODS SELECT, ODS EXCLUDE, and ODS TRACE statements. However, the DISPLAY statement can improve \nperformance when a large number of tables could be generated (such as in BY-group processing). The procedure \nprocesses the DISPLAY statement on a CAS server and thus sends only a subset of ODS tables to the SAS client. \nBecause ODS statements are processed on a SAS client, all the display tables generated are first sent to the \nclient and then the client creates a subset. If both DISPLAY and ODS statements are used together, the DISPLAY \nstatement takes precedence over the ODS statements."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"CASESENSITIVE","StatementOptionHelp":{"#cdata":"Performs a case-sensitive comparison of table names in the table-list to display table names when \ntables are subsetted for display. To preserve case, you must enclose table names in the table-list \nin quotation marks."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDE","StatementOptionHelp":{"#cdata":"Displays all display tables except those specified in the table-list."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDEALL","StatementOptionHelp":{"#cdata":"Suppresses display of all tables. This option takes precedence over the other options."},"StatementOptionType":"S"},{"StatementOptionName":"TRACE","StatementOptionHelp":{"#cdata":"Displays the display table names, labels, and paths."},"StatementOptionType":"S"}]}},{"StatementName":"DISPLAYOUT","StatementHelp":{"#cdata":"Syntax: DISPLAYOUT table-spec-list < / options > ;\n      \nThe DISPLAYOUT statement enables you to create CAS output tables from your displayed output. This\nstatement is similar to the ODS OUTPUT statement.\n\nThe table-spec-list specifies a list of CAS output tables to create. Each entry in the list has either a key or a\nkey=value format:\n\n  key=value specifies key as the ODS table name, path, or partial pathname, and specifies value as the\n    CAS output table name.\n  key specifies key as the ODS table name and also as the CAS output table name.\n  \nTable names and partial pathnames are discussed under the DISPLAY statement. The DISPLAYOUT\nstatement does not support regular expressions."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"INCLUDEALL","StatementOptionHelp":{"#cdata":"Creates output CAS tables for all display tables. The name of the created output CAS table is the same \nas the corresponding display table name. If you specify this option, the table-spec-list specification \nis ignored."},"StatementOptionType":"S"},{"StatementOptionName":"NOREPLACE","StatementOptionHelp":{"#cdata":"Does not replace an existing CAS output table of the same name."},"StatementOptionType":"S"},{"StatementOptionName":"REPEATED","StatementOptionHelp":{"#cdata":"Replicates all CAS output tables on all nodes."},"StatementOptionType":"S"}]}},{"StatementName":"INIT","StatementHelp":{"#cdata":"Syntax: INIT variables;\n\nThe INIT statement specifies the variables that contain initial weights for the mixture components. \nBy convention, if the model includes a noise component, the first variable in the INIT statement \nlist defines the observation\u2019s initial weight for the noise component. If you are fitting many \ndifferent models by using the NCLUSTERS=, NOISE=, or COVSTRUCT= option, you must supply enough \nINIT variables for the model combination that has the most components. The INIT statement is not \nrequired. Without an INIT statement, PROC MBC uses the default initialization method."},"StatementOptions":null},{"StatementName":"OUTPUT","StatementHelp":{"#cdata":"Syntax: OUTPUT OUT=CAS-libref.data-table <options>;\n\nThe OUTPUT statement creates a data table that contains observationwise statistics that PROC MBC \ncomputes after fitting the model. The variables in the input data table are not included in the \noutput data table, in order to avoid data duplication for large data tables; however, variables \nthat you specify in the COPYVAR= option are included. The output statistics are computed on the \nbasis of the final parameter estimates. If no model converges, then the output data table is not \ncreated."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"Syntax: OUT=CAS-libref.data-table\n          \nNames the output data table for PROC MBC to use. You must specify this option before any other options. \n\nCAS-libref.data-table is a two-level name, where\n\n  CAS-libref refers to a collection of information that is defined in the LIBNAME statement and\n    includes the caslib, which includes a path to where the data table is to be stored, and\n    a session identifier, which defaults to the active session but which can be explicitly\n    defined in the LIBNAME statement. \n    \n  data-table specifies the name of the output data table."},"StatementOptionType":"V"},{"StatementOptionName":"ALL|ALLSTAT","StatementOptionHelp":{"#cdata":"Syntax: ALL | ALLSTAT\n          \nAdds all available statistics to the output data table."},"StatementOptionType":"S"},{"StatementOptionName":"COPYVAR=|COPYVARS=","StatementOptionHelp":{"#cdata":"Syntax: COPYVAR=variable | COPYVARS=(variables) \n          \nTransfers one or more variables from the input data table to the output data table."},"StatementOptionType":"S"},{"StatementOptionName":"CURRCLUS","StatementOptionHelp":{"#cdata":"Syntax: CURRCLUS <=name>\n          \nSpecifies the cluster weights that produce the final parameter estimates. The default name is CURRn, \nwhere n indicates the cluster index. You can modify the name by specifying the name option."},"StatementOptionType":"S|V"},{"StatementOptionName":"LOGLIK","StatementOptionHelp":{"#cdata":"Syntax: LOGLIK <=name>\n          \nSpecifies the component and total log likelihood by using the final parameter estimates. The default \nname for the component log likelihoods is LOGLIKn, where n indicates the cluster index. The default \nname for the total log likelihood is LOGLIK. You can modify this name by specifying the name option."},"StatementOptionType":"S|V"},{"StatementOptionName":"MAXPOST","StatementOptionHelp":{"#cdata":"Syntax: MAXPOST <=name>\n          \nSpecifies the identification of the cluster that has the maximum posterior weight by using the final \nparameter estimates. The default name is MAXPOST. You can modify this name by specifying the name option."},"StatementOptionType":"S|V"},{"StatementOptionName":"NEXTCLUS","StatementOptionHelp":{"#cdata":"Syntax: NEXTCLUS <=name>\n          \nSpecifies the cluster weights that the final parameter estimates produce. The default name is NEXTn, \nwhere n indicates the cluster index. You can modify the name by specifying the name option."},"StatementOptionType":"S|V"}]}},{"StatementName":"STORE","StatementHelp":{"#cdata":"Syntax: STORE <OUT=>CAS-libref.data-table;\n\nThe STORE statement enables you to save the fitted model to a store. You can then use this store \nwith PROC CAS and an appropriate scoring action to score other data. CAS-libref.data-table is a \ntwo-level name, where CAS-libref refers to the caslib and session identifier, and data-table \nspecifies the name of the input data table."},"StatementOptions":{"StatementOption":{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"Syntax: OUT=CAS-libref.data-table\n          \nNames the data table for saving the fitted model.\n\nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and \nsession identifier.\n    \ndata-table specifies the name of the input data table."},"StatementOptionType":"V"}}},{"StatementName":"VAR","StatementHelp":{"#cdata":"Syntax: VAR variables;\n\nThe VAR statement specifies the variables that you want to cluster. This statement is required."},"StatementOptions":null}]}}}