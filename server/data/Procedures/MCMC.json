{"Procedure":{"Name":"MCMC","#comment":{},"ProductGroup":"SAS/STAT","ProcedureHelp":{"#cdata":"Syntax: PROC MCMC <options> ;   \n    ARRAY arrayname [ dimensions ] <$> <variables-and-constants>; \n    BEGINCNST/ENDCNST ; \n    BEGINNODATA/ENDNODATA ; \n    BY variables ; \n    MODEL variable ~distribution <options>;  \n    PARMS parameter <=> number </options> ; \n    PREDDIST <'label'> OUTPRED=SAS-data-set <options> ; \n    PRIOR/HYPERPRIOR parameter ~ distribution ; \n    Programning statements ; \n    RANDOM random-effects-specification </ options>; \n    UDS subroutine-name ( subroutine-argument-list) ; \n\nThe MCMC procedure is a general purpose Markov chain Monte Carlo (MCMC) simulation procedure \nthat is designed to fit Bayesian models. Bayesian statistics is different from traditional \nstatistical methods such as frequentist or classical methods. \n\nIn essence, Bayesian statistics treats parameters as unknown random variables, and it makes \ninferences based on the posterior distributions of the parameters. There are several advantages \nassociated with this approach to statistical inference. Some of the advantages include its ability \nto use prior information and to directly answer specific scientific questions that can be easily \nunderstood."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"ACCEPTTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ACCEPTTOL=n] \n      \nSpecifies a tolerance for acceptance probabilities. By default, ACCEPTTOL=0.075."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ALG=|PROPDIST=","ProcedureOptionHelp":{"#cdata":"Specifies a proposal distribution for the Metropolis algorithm. "},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"HMC","@Value2":"NORMAL|N","@Value3":"NUTS","@Value4":"T<(df)>"},"ProcedureOptionToolTips":{"@ToolTip1":"Syntax: HMC<(hmc-options)>           Specifies the Hamiltonian Monte Carlo algorithm with a fixed step size and predetermined number of steps.  You can specify the following hmc-options:    NSTEPS=value   N=value     specifies the number of steps in the HMC algorithm. By default, N=15.   SAVEGRAD    saves the gradient calculation in the OUTPOST= data set.   STEPSIZE=value    specifies the step size in the HMC algorithm. By default, STEPSIZE=0.1.","@ToolTip2":"Specifies a normal distribution as the proposal distribution. This is the default.","@ToolTip3":"Syntax: NUTS <(nuts-options)>                                 Specifies the No-U-Turn Sampler of the Hamiltonian algorithm. You can specify the following nuts-options:    DELTA=value    specifies the target acceptance rate during the tuning process. By default, DELTA=0.6.  FCALLS    outputs the number of function evaluations at each iteration.   MAXHEIGHT=value    specifies the maximum height of the NUTS tree.  MAXTIME=value    specifies the maximum number of iterations that it takes the algorithm to surpass the MAXHEIGHT of the    NUTS tree before the procedure stops. By default, MAXTIME=1.   NTU=value    specifies the number of tuning iterations used by NUTS. By default, NTU=1000.   SAVEGRAD    saves the gradient calculation in the OUTPOST= data set.","@ToolTip4":"Specifies a t-distribution with the degrees of freedom df. By default, df=3. If df > 100, the                                 normal distribution is used since the two distributions are almost identical."},"SubOptionsKeywords":"NSTEPS=|N=|SAVEGRAD|STEPSIZE=|DELTA=|FCALLS|MAXHEIGHT=|MAXTIME=|NTU="},{"ProcedureOptionName":"AUTOCORLAG=|ACLAG=","ProcedureOptionHelp":{"#cdata":"[Syntax: AUTOCORLAG=n] \n      \nSpecifies the maximum number of autocorrelation lags used in computing the effective \nsample size."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"BINARYJOINT","ProcedureOptionHelp":{"#cdata":"Jointly samples binary parameters in a block. Binary parameters in a block are sampled separately \nin SAS/STAT 13.2 and later. This option reverts to the behavior in SAS/STAT 13.1 and earlier."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"DISCRETE=","ProcedureOptionHelp":{"#cdata":"Specifies the proposal distribution used in sampling discrete parameters. The default \nis DISCRETE=BINNING."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"BINNING","@Value2":"GEO"},"ProcedureOptionToolTips":{"@ToolTip1":"Uses continuous proposal distributions for all discrete parameter blocks.","@ToolTip2":"Uses independent symmetric geometric proposal distributions for all discrete parameter blocks."}},{"ProcedureOptionName":"DIAGNOSTICS=|DIAG=","ProcedureOptionHelp":{"#cdata":"[Syntax: DIAGNOSTICS=NONE | (keyword-list)] \n      \nSpecifies options for MCMC convergence diagnostics."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"NONE","@Value2":"<(keyword-list)>"},"ProcedureOptionToolTips":{"@ToolTip1":"Suppress all the tests.","@ToolTip2":"The following keywords are available:  ALL -- computes all diagnostic tests and statistics. You can combine the option ALL with any other  specific tests to modify test options.  AUTOCORR <(autocorr-options)> -- computes default autocorrelations at lags 1, 5, 10, and 50 for each variable.  ESS -- computes the effective sample sizes (Kass et al. (1998)) of the posterior samples of each parameter.  GEWEKE <(FRAC1=value FRAC2=value)>  computes the Geweke spectral density diagnostics, where FRAC1 and FRAC2 specify the beginning FRAC1  and end FRAC2 proportion of the Markov chain, respectively.  HEIDELBERGER <(SALPHA=value value EPS=value)>  computes the Heidelberger and Welch diagnostic (which consists of a stationarity test and a halfwidth  test) for each variable.      SALPHA= -- specifies the \u03b1 level (0 < a < 1) for the stationarity test. By default, SALPHA=0.05   HALPHA= -- specifies the \u03b1 level (0 < a < 1) for the halfwidth test. By default, HALPHA=0.05.   EPS= -- specifies a small positive number \u03b5 such that if the halfwidth is less than \u03b5 times    the sample mean of the retaining iterates, the halfwidth test is passed.     MCSE -- computes the Monte Carlo standard error for the posterior samples of each parameter. NONE -- suppresses all of the diagnostic tests and statistics. This is not recommended.  RAFTERY <(QUANTILE=value ACCURACY=value PROB=value EPS=value)> -- computes the Raftery and Lewis diagnostics."},"SubOptionsKeywords":"RAFTERY|QUANTILE=|ACCURACY=|PROB=|EPS=|NONE|MCSE|SALPHA=|HEIDELBERGER|HALPHA=|GEWEKE|FRAC1=|F1=|FRAC2=|F2=ESS|AUTOCORR|ALL"},{"ProcedureOptionName":"DIC","ProcedureOptionHelp":{"#cdata":"Computes the Deviance Information Criterion (DIC). DIC is calculated using the posterior \nmean estimates of the parameters."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"[Syntax: DATA=SAS-data-set] \n      \nSpecifies the input data set."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"INF=","ProcedureOptionHelp":{"#cdata":"[Syntax: INF=value] \n      \nSpecifies the numerical definition of infinity in the procedure."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"INIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: INIT=(keyword-list)] \n      \nSpecifies options for generating the initial values for the parameters.\n\nThe following keywords are used: \n\n MODE \n  uses the mode of the prior density as the initial value of the parameter, if you did not provide one.\n PINIT \n  tabulates parameter values after the tuning phase.\n RANDOM \n  generates a random number from the prior density and uses it as the initial value of the parameter, \n  if you did not provide one.\n REINIT \n  resets the parameters, after the tuning phase, with the initial values that you provided explicitly \n  or that were assigned by PROC MCMC."},"ProcedureOptionType":"V","SubOptionsKeywords":"MODE|PINIT|RANDOM|REINIT"},{"ProcedureOptionName":"LIST","ProcedureOptionHelp":{"#cdata":"Displays the model program and variable lists. The LIST option is a debugging feature and \nis not normally needed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LISTCODE","ProcedureOptionHelp":{"#cdata":"Displays the compiled program code. The LISTCODE option is a debugging feature and is not \nnormally needed."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"JOINTMODEL|JOINTLLIKE","ProcedureOptionHelp":{"#cdata":"Specifies how the likelihood function is calculated."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"MAXTUNE=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXTUNE=n] \n      \nSpecifies an upper limit for the number of proposal tuning loops. By default, MAXTUNE=24."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXINDEXPRINT=|MAXIPRINT=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXINDEXPRINT=number | ALL | MAXIPRINT=number | ALL ]\n      \nSpecifies the maximum number of observation indices to print in the ODS tables \"Missing Response Information\" \ntable and \"Missing Covariates Information\" table. This option applies only to programs that model missing data. \nThe default value is 20. MAXINDEXPRINT=ALL prints all observation indices for every missing variable that is \nmodeled in PROC MCMC."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXSUBVALUEPRINT=|MAXSVPRINT=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXSUBVALUEPRINT=number | ALL |  MAXSVPRINT=number | ALL ]\n      \nSpecifies the maximum number of subject values to display in the \"Subject Values\" column of the ODS table \n\"Random Effects Parameters.\" This option applies only to programs that have RANDOM statements. The default \nvalue is 20. MAXSUBVALUEPRINT=ALL prints all subject values for every random effect in the program."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MCHISTORY=|MCHIST=","ProcedureOptionHelp":{"#cdata":"Syntax: MCHISTORY=BRIEF | DETAILED | NONE \nSyntax: MCHIST=BRIEF | DETAILED | NONE \n\nControls the display of the Metropolis sampling history. This option is ignored for nested logit and probit models."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"BRIEF","@Value2":"DETAILED","@Value3":"NONE"},"ProcedureOptionToolTips":{"@ToolTip1":"Produces a summary output for the tuning, burn-in, and sampling history tables. No tuning history table  is produced if there is no tuning stage. The tables show the following when applicable:    o Scale shows the scale, or the range of the scales, that is used in each random walk Metropolis block that      has a normal distribution.   o Acceptance Rate shows the acceptance rate, or the range of the acceptance rates, for each Metropolis block.","@ToolTip2":"","@ToolTip3":""}},{"ProcedureOptionName":"MINTUNE=","ProcedureOptionHelp":{"#cdata":"[Syntax: MINTUNE=n] \n      \nSpecifies a lower limit for the number of proposal tuning loops. By default, MINTUNE=2."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MISSING=|MISS=","ProcedureOptionHelp":{"#cdata":"Specifies how missing values are handled."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"ALLCASE|AC","@Value2":"COMPLETECASE|CC"},"ProcedureOptionToolTips":{"@ToolTip1":"Gives you the option to model the missing values in an all-case analysis.","@ToolTip2":"Assumes a complete case analysis, so all observations with missing variable values are  discarded prior to the simulation."}},{"ProcedureOptionName":"MONITOR=","ProcedureOptionHelp":{"#cdata":"[Syntax: MONITOR= (symbol-list)] \n      \nSpecifies a list of program symbols for which a posterior analysis is to be done. \nThe symbols can be any of the following: model parameters (symbols in the PARMS \nstatement), secondary parameters (assigned using the operator \"=\"), the log of the \nposterior density (LOGPOST), the log of the prior density (LOGPRIOR), the log of \nthe hyperprior density (LOGHYPER), if the HYPER statement is used, or the log of \nthe likelihood function (LOGLIKE)."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NBI=","ProcedureOptionHelp":{"#cdata":"[Syntax: NBI=n] \n      \nSpecifies the number of burn-in iterations to perform before beginning to save \nparameter estimate chains. By default, NBI=1000."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NMC=","ProcedureOptionHelp":{"#cdata":"[Syntax: NMC=n] \n      \nSpecifies the number of iterations in the main simulation loop. This is the MCMC \nsample size if THIN=1. By default, NMC=1000."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NOLOGDIST","ProcedureOptionHelp":{"#cdata":"Omits the calculation of the logarithm of the joint distribution of the model parameters at each \niteration. The option applies only if all parameters in the model are updated directly from \ntheir target distribution, either from the full conditional posterior via conjugacy or from \nthe marginal distribution."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NTHREADS=","ProcedureOptionHelp":{"#cdata":"[Syntax: NTHREADS=n ]\n      \nSpecifies the number of threads for simulation. PROC MCMC performs two types of threading."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NTU=","ProcedureOptionHelp":{"#cdata":"[Syntax: NTU=n] \n      \nSpecifies the number of iterations to use in each proposal tuning phase. \nBy default, NTU=500."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUTPOST=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUTPOST=SAS-data-set] \n      \nSpecifies an output data set that contains the posterior samples of all model parameters, \nthe iteration numbers (variable name ITERATION), the log of the posterior density (LOGPOST), \nthe log of the prior density (LOGPRIOR), the log of the hyperprior density (LOGHYPER), if \nthe HYPER statement is used, and the log likelihood (LOGLIKE)."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"PLOTS=|PLOT=","ProcedureOptionHelp":{"#cdata":"Controls the display of diagnostic plots.\n      \nSyntax: \n(1) PLOTS<(global-plot-options)>=(plot-request <...plot-request>)\n(2) PLOTS<(global-plot-options)>=(plot-request <...plot-request>) \n\nThe global-plot-options include the following: \n\nFRINGE -- adds a fringe plot to the horizontal axis of the density plot. \n\nGROUPBY|GROUP=PARAMETER | TYPE \nspecifies how the plots are grouped when there is more than one type of plot. GROUPBY=PARAMETER \nis the default. The choices are as follows: \n\n  TYPE -- specifies that the plots are grouped by type. \n\n  PARAMETER -- specifies that the plots are grouped by parameter. \n\nLAGS=n \nspecifies the number of autocorrelation lags used in plotting the ACF graph. By default, LAGS=50. \n\nSMOOTH \nsmoothes the trace plot with a fitted penalized B-spline curve (Eilers and Marx; 1996). \n\nUNPACKPANEL | UNPACK \nspecifies that all paneled plots are to be unpacked, so that each plot in a panel is displayed separately."},"ProcedureOptionType":"S|V","ProcedureOptionValues":{"@Value1":"ALL","@Value2":"AUTOCORR|ACF","@Value3":"DENSITY |D|KERNEL|K","@Value4":"NONE","@Value5":"TRACE|T"},"ProcedureOptionToolTips":{"@ToolTip1":"Requests all types of plots. PLOTS=ALL is equivalent to specifying PLOTS=(TRACE AUTOCORR DENSITY).","@ToolTip2":"Displays the autocorrelation function plots for the parameters.","@ToolTip3":"Displays the kernel density plots for the parameters.","@ToolTip4":"Suppresses the display of all plots.","@ToolTip5":"Displays the trace plots for the parameters."}},{"ProcedureOptionName":"PROPCOV=","ProcedureOptionHelp":{"#cdata":"Specifies the method used in constructing the initial covariance matrix for the Metropolis-Hastings \nalgorithm."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"IND","@Value2":"CONGRA","@Value3":"DBLDOG","@Value4":"QUANEW","@Value5":"NMSIMP"},"ProcedureOptionToolTips":{"@ToolTip1":"Uses the identity covariance matrix.","@ToolTip2":"Syntax: CONGRA <(optimize-options)>                                  Performs a conjugate-gradient optimization.   The optimize-options are as follows:    ITPRINT    prints optimization iteration steps and results.","@ToolTip3":"Syntax: DBLDOG <(optimize-options)>                                  Performs a double-dogleg optimization.   The optimize-options are as follows:    ITPRINT    prints optimization iteration steps and results.","@ToolTip4":"Syntax: QUANEW <(optimize-options)>                                 Performs a quasi-Newton optimization.   The optimize-options are as follows:                                    ITPRINT   prints optimization iteration steps and results.","@ToolTip5":"Syntax: NMSIMP | SIMPLEX <(optimize-options)>                                 Performs a Nelder-Mead simplex optimization.   The optimize-options are as follows:     ITPRINT   prints optimization iteration steps and results."}},{"ProcedureOptionName":"REOBSINFO","ProcedureOptionHelp":{"#cdata":"[Syntax: REOBSINFO <(display-options)> ]\n      \nDisplays the ODS table \"Random Effect Observation Information.\" The table lists the name of each random \neffect, the unique values in the corresponding subject variable, the number of observations in each subject, \nand the observation indices for each subject value.\n\nThe display-options are as follows: \n\n MAXVALUEPRINT=number | ALL | MAXVPRINT=number | ALL  \n  prints the number of subject values for each random effect.\n \n MAXOBSPRINT=number | ALL | MAXOPRINT=number | ALL  \n  prints the number of observation indices for each subject value of every random effect."},"ProcedureOptionType":"S","SubOptionsKeywords":"MAXVALUEPRINT=|MAXOBSPRINT="},{"ProcedureOptionName":"SCALE=","ProcedureOptionHelp":{"#cdata":"[Syntax: SCALE=value] \n      \nControls the initial multiplicative scale to the covariance matrix of the proposal \ndistribution. By default, SCALE=2.38."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SEED=","ProcedureOptionHelp":{"#cdata":"[Syntax: SEED=n] \n      \nSpecifies the random number seed. By default, SEED=0, and PROC MCMC gets a random \nnumber seed from the clock."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SIMREPORT=","ProcedureOptionHelp":{"#cdata":"[Syntax: SIMREPORT=n] \n      \nControls the number of times that PROC MCMC reports the expected run time \nof the simulation."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SINGDEN=","ProcedureOptionHelp":{"#cdata":"[Syntax: SINGDEN=value] \n      \nDefines the singularity criterion in the procedure. By default, SINGDEN=1E-11."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"STATISTICS=|STATS=","ProcedureOptionHelp":{"#cdata":"Specifies options for posterior statistics.\n      \nSyntax: STATISTICS<(global-stats-options)> =  NONE | ALL |stats-request]\n\nThe global-stats-options includes the following:\n      \n  ALPHA=numeric-list\n  specifies the \u03b1 level for the equal-tail and HPD intervals. The value \u03b1 must be between 0 and 0.5. \n  By default, ALPHA=0.05\n\n  PERCENTAGE | PERCENT=numeric-list\n  calculates the posterior percentages. The numeric-list contains values between 0 and 100. By default, \n  PERCENTAGE=(25 50 75)."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"ALL","@Value2":"","@Value3":"CORR","@Value4":"COV","@Value5":"SUMMARY|SUM","@Value6":"INTERVAL|INT","@Value7":"NONE"},"ProcedureOptionToolTips":{"@ToolTip1":"Computes all posterior statistics.","@ToolTip2":"Computes the posterior means, standard deviations, and the $00(1 - \u03b1)%  equal-tail intervals for each variable.","@ToolTip3":"Computes the posterior correlation matrix.","@ToolTip4":"Computes the posterior covariance matrix.","@ToolTip5":"Computes the posterior means, standard deviations, and percentile points for each variable.  By default, the 25th, 50th, and 75th percentile points are produced, but you can use the  global PERCENT= option to request specific percentile points.","@ToolTip6":"Computes the 100(1 - \u03b1)% equal-tail and HPD credible intervals for each variable.","@ToolTip7":"Suppresses all of the statistics."},"SubOptionsKeywords":"ALPHA=|PERCENTAGE=|PERCENT="},{"ProcedureOptionName":"TARGACCEPT=","ProcedureOptionHelp":{"#cdata":"[Syntax: TARGACCEPT=value] \n      \nSpecifies the target acceptance rate for the random walk based Metropolis algorithm. \nThe numeric value must be between 0.01 and 0.99. By default, TARGACCEPT=0.45 for models \nwith 1 parameter; TARGACCEPT=0.35 for models with 2, 3, or 4 parameters; and TARGACCEPT=0.234 \nfor models with more than 4 parameters."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"TARGACCEPTI=","ProcedureOptionHelp":{"#cdata":"[Syntax: TARGACCEPTI=value] \n      \nSpecifies the target acceptance rate for the independence sampler algorithm. \nThe independence sampler is used for blocks of binary parameters. The numeric \nvalue must be between 0 and 1. By default, TARGACCEPTI=0.6."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"THIN=|NTHIN=","ProcedureOptionHelp":{"#cdata":"[Syntax: THIN=n] \n      \nControls the thinning rate of the simulation. PROC MCMC keeps every n-th simulation \nsample and discards the rest."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"TRACE","ProcedureOptionHelp":{"#cdata":"Displays the result of each operation in each statement in the model program as \nit is executed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"TUNEWT=","ProcedureOptionHelp":{"#cdata":"[Syntax: TUNEWT=value] \n      \nSpecifies the multiplicative weight used in updating the covariance matrix of \nthe proposal distribution. The numeric value must be between 0 and 1. By default, \nTUNEWT=0.75."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"ARRAY","StatementHelp":{"#cdata":"Syntax: ARRAY arrayname [ dimensions ] <$> <variables-and-constants> ; \n      \nThe ARRAY statement associates a name (of no more than eight characters) with a list of variables \nand constants. The ARRAY statement is similar to, but not the same as, the ARRAY statement in the \nDATA step, and it is the same as the ARRAY statements in the NLIN, NLP, NLMIXED, and MODEL procedures. \nThe array name is used with subscripts in the program to refer to the array elements, as illustrated in \nthe following statements: \n\n  array r[8] r1-r8;\n   \n  do i = 1 to 8;\n     r[i] = 0;\n  end;\n\nThe ARRAY statement does not support all the features of the ARRAY statement in the \nDATA step. Implicit indexing of variables cannot be used; all array references must \nhave explicit subscript expressions. Only exact array dimensions are allowed; lower-\nbound specifications are not supported. A maximum of six dimensions is allowed."},"StatementOptions":null},{"StatementName":"BEGINCNST","StatementHelp":{"#cdata":"Syntax: BEGINCNST ;\n      \nThe BEGINCNST statement indicates that PROC MCMC processes the programming \nstatements that follow it once for every observation in the input data set \nbefore the first iteration."},"StatementOptions":null},{"StatementName":"ENDCNST","StatementHelp":{"#cdata":"Syntax: ENDCNST ; \n      \nEnds a BEGINCNST block, and indicates a return to normal processing."},"StatementOptions":null},{"StatementName":"BEGINNODATA|BEGINPRIOR","StatementHelp":{"#cdata":"Syntax: BEGINNODATA ; | BEGINPRIOR ; \n      \nThe BEGINNODATA and ENDNODATA statements define a block within which PROC MCMC \nprocesses the programming statements without stepping through the entire data set. \nThe programming statements are executed only twice: at the first and the last \nobservation of the data set. The BEGINNODATA and ENDNODATA statements are best \nused to reduce unnecessary observation-level computations. Any computations that \nare identical to every observation, such as transformation of parameters, should \nbe enclosed in these statements. \n\nThe BEGINPRIOR and ENDPRIOR statements are aliases for the BEGINNODATA and ENDNODATA \nstatements, respectively. You can enclose PRIOR statements in the BEGINNODATA and \nENDNODATA statements."},"StatementOptions":null},{"StatementName":"ENDNODATA|ENDPRIOR","StatementHelp":{"#cdata":"Syntax: ENDNODATA | ENDPRIOR ; \n      \nEnds a BEGINNODATA block."},"StatementOptions":null},{"StatementName":"BY","StatementHelp":{"#cdata":"Syntax: BY variables; \n\nYou can specify a BY statement with PROC MCMC to obtain separate analyses of observations in groups that \nare defined by the BY variables. When a BY statement appears, the procedure expects the input data set to be \nsorted in order of the BY variables. If you specify more than one BY statement, only the last one specified is used. \n\nIf your input data set is not sorted in ascending order, use one of the following alternatives: \n\n  \u2022 Sort the data by using the SORT procedure with a similar BY statement. \n  \u2022 Specify the NOTSORTED or DESCENDING option in the BY statement for the BCHOICE procedure. The NOTSORTED \n    option does not mean that the data are unsorted but rather that the data are arranged in groups (according to values \n    of the BY variables) and that these groups are not necessarily in alphabetical or increasing numeric order. \n  \u2022 Create an index on the BY variables by using the DATASETS procedure (in Base SAS software)."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DESCENDING","StatementOptionHelp":{"#cdata":"Specifies that the observations are sorted in descending order by the variable that \nimmediately follows the word DESCENDING in the BY statement."},"StatementOptionType":"S"},{"StatementOptionName":"NOTSORTED","StatementOptionHelp":{"#cdata":"Specifies that observations are not necessarily sorted in alphabetic or numeric order."},"StatementOptionType":"S"}]}},{"StatementName":"MODEL","StatementHelp":{"#cdata":"Syntax: MODEL dependent-variable-list ~ distribution <options>;  \n      \nThe MODEL statement specifies the conditional distribution of the data given the parameters (the likelihood \nfunction). You specify a single dependent variable or a list of dependent variables, a tilde ~, and then a \ndistribution with its arguments. The dependent variables can be variables from the input data set or functions \nof the symbols in the program. You must specify the dependent variables unless you use the GENERAL function \nor the DGENERAL function."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"BETA","StatementOptionHelp":{"#cdata":"[Syntax: beta(<a=>\u03b1, <b=>\u03b2)] \n          \nBeta distribution with shape parameters \u03b1 and \u03b2."},"StatementOptionType":"S"},{"StatementOptionName":"BINARY","StatementOptionHelp":{"#cdata":"[Syntax: binary(<prob|p=>p)] \n          \nBinary (Bernoulli) distribution with probability of success p."},"StatementOptionType":"S"},{"StatementOptionName":"BINOMIAL","StatementOptionHelp":{"#cdata":"Syntax: binomial(<n=>n, <prob|p=>p) \n          \nBinomial distribution with count n and probability of success p."},"StatementOptionType":"S"},{"StatementOptionName":"CAUCHY","StatementOptionHelp":{"#cdata":"Syntax: cauchy(<location|loc|l=>\u03b8, <scale|s=>\u03bb) \n          \nCauchy distribution with location \u03b8 and scale parameter \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"CHISQ","StatementOptionHelp":{"#cdata":"[Syntax: chisq(<df=>v)] \n          \nChi-square \u03c7\u00b2 distribution with v degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"DGENERAL","StatementOptionHelp":{"#cdata":"[Syntax: dgeneral(ll)] \n          \nGeneral log-likelihood function that you construct using SAS programming \nstatements for single or multiple discrete variables."},"StatementOptionType":"S"},{"StatementOptionName":"EXPCHISQ","StatementOptionHelp":{"#cdata":"[Syntax: expchisq(<df=>v)] \n          \nLog transformation of a \u03c7\u00b2 distribution with v degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"EXPEXPON","StatementOptionHelp":{"#cdata":"Syntax:  expexpon(scale|s=\u03bb) | expexpon(iscale|is=\u03bb) \n          \nLog transformation of an exponential distribution with scale or inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"EXPGAMMA","StatementOptionHelp":{"#cdata":"Syntax: expGamma(<shape|sp=>\u03b1, scale|s=\u03bb) | expGamma(<shape|sp=>\u03b1, isscale|is=\u03bb) \n          \nLog transformation of a gamma distribution with shape \u03b1 and scale or inverse-scale \nparameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"EXPICHISQ","StatementOptionHelp":{"#cdata":"Syntax: expichisq(<df=>v)] \n          \nLog transformation of an inverse \u03c7\u00b2 distribution with v degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"EXPIGAMMA","StatementOptionHelp":{"#cdata":"Syntax: expiGamma(<shape|sp=>\u03b1, scale|s=\u03bb) | expGamma(<shape|sp=>\u03b1, isscale|is=\u03bb) \n          \nLog transformation of an inverse-gamma distribution with shape \u03b1 and scale or \ninverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"EXPSICHISQ","StatementOptionHelp":{"#cdata":"Syntax: expsichisq(<df=>v), scale|s=s] \n          \nLog transformation of a scaled inverse \u03c7\u00b2 distribution with v degrees of freedom \nand scale parameter s."},"StatementOptionType":"S"},{"StatementOptionName":"EXPON","StatementOptionHelp":{"#cdata":"Syntax: expon(scale|s=\u03bb) | expon(iscale|is=\u03bb) \n          \nExponential distribution with scale or inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"GAMMA","StatementOptionHelp":{"#cdata":"Syntax: gamma(<shape|sp=>\u03b1, scale|s=\u03bb)  | gamma(<shape|sp=>\u03b1, isscale|is=\u03bb) \n          \nGamma distribution with shape \u03b1 and scale or inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"GENERAL","StatementOptionHelp":{"#cdata":"[Syntax: general(ll)] \n          \nGeneral log-likelihood function that you construct using SAS programming \nstatements for single or multiple continuous variables."},"StatementOptionType":"S"},{"StatementOptionName":"ICHISQ","StatementOptionHelp":{"#cdata":"[Syntax: ichisq(<df=>v)] \n          \nInverse \u03c7\u00b2 distribution with v degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"IGAMMA","StatementOptionHelp":{"#cdata":"Syntax: igamma(<shape|sp=>\u03b1, scale|s=\u03bb)  | igamma(<shape|sp=>\u03b1, isscale|is=\u03bb)] \n          \nInverse gamma distribution with shape \u03b1 and scale or inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"LAPLACE","StatementOptionHelp":{"#cdata":"Syntax: laplace(<location|loc|l=>\u03b8, <scale|s=>\u03bb) | laplace(<location|loc|l=>\u03b8, <iscale|is=>\u03bb) \n          \nLaplace distribution with location \u03b8 and scale or inverse-scale parameter \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"LOGISTIC","StatementOptionHelp":{"#cdata":"Syntax: logistic(<location|loc|l=>a, <scale|s=>b) \n          \nLogistic distribution with location a and scale parameter b"},"StatementOptionType":"S"},{"StatementOptionName":"LOGNORMAL","StatementOptionHelp":{"#cdata":"Syntax: lognormal(<mean=>\u00b5, <sd=>\u03bb) | lognormal(<mean=>\u00b5, <var=>\u03bb) |  lognormal(<mean=>\u00b5, <prec=>\u03bb)\n          \nLog-normal distribution with mean \u00b5 and standard deviation or variance or precision \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"NEGBIN","StatementOptionHelp":{"#cdata":"Syntax: negbin(<n=>n, <prob|p=>p)] \n          \nNegative binomial distribution with count n and probability of success p."},"StatementOptionType":"S"},{"StatementOptionName":"NORMAL|N","StatementOptionHelp":{"#cdata":"Syntax: normal(<mean=>\u00b5, <sd=>\u03bb) | normal(<mean=>\u00b5, <var=>\u03bb) | normal(<mean=>\u00b5, <prec=>\u03bb) \n          \nNormal (Gaussian) distribution with mean \u00b5 and standard deviation or variance \nor precision \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"PARETO","StatementOptionHelp":{"#cdata":"Syntax: pareto(<shape|sp=>\u03b1, scale|s=b) \n          \nPareto distribution with shape \u03b1 and scale parameter b."},"StatementOptionType":"S"},{"StatementOptionName":"POISSON","StatementOptionHelp":{"#cdata":"Syntax: poisson(<mean|m=>\u03bb)] \n          \nPoisson distribution with mean \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"SICHISQ","StatementOptionHelp":{"#cdata":"Syntax: sichisq(<df=>v, scale|s=s) \n          \nScaled inverse \u03c7\u00b2 distribution with v degrees of freedom and scale parameter s."},"StatementOptionType":"S"},{"StatementOptionName":"T","StatementOptionHelp":{"#cdata":"Syntax: t(<mean|m=\u00b5, <sd=>\u03bb, <df=>v) | t(<mean|m=\u00b5, <var=>\u03bb, <df=>v) | t(<mean|m=\u00b5, <sd=>\u03bb, <df=>v) \n          \nT distribution with mean \u00b5, standard deviation or variance or precision \u03bb, and \nv degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"TABLE|CAT","StatementOptionHelp":{"#cdata":"Syntax: table (<p=> p)  \n          \nTable (categorical) distribution with probability vector p. You can also use the alias cat for this \ndistribution."},"StatementOptionType":"S"},{"StatementOptionName":"UNIFORM","StatementOptionHelp":{"#cdata":"Syntax: uniform(<left}l=>a, right|r=>b) \n          \nUniform distribution with range a and b."},"StatementOptionType":"S"},{"StatementOptionName":"WALD","StatementOptionHelp":{"#cdata":"Syntax: wald(<mean|m=>\u00b5, <iscale|is=>\u03bb) \n          \nWald distribution with mean \u00b5 and inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"WEIBULL","StatementOptionHelp":{"#cdata":"Syntax: weibull(\u00b5, c, \u03c3)] \n          \nWeibull distribution with location (threshold) parameter \u00b5, shape parameter c, and \nscale parameter \u03c3."},"StatementOptionType":"S"},{"StatementOptionName":"DIRICHLET","StatementOptionHelp":{"#cdata":"Syntax: dirichlet (<alpha=\u03b1>) \n        \nDirichlet distribution with parameter vector \u03b1, where \u03b1 must be a one-dimensional array of length greater than 1."},"StatementOptionType":"S"},{"StatementOptionName":"IWISH","StatementOptionHelp":{"#cdata":"Syntax: iwish (<df=v>, <scale=>S)\n        \nInverse Wishart distribution with v degrees of freedom and symmetric positive definite scale array S."},"StatementOptionType":"S"},{"StatementOptionName":"MULTINOM","StatementOptionHelp":{"#cdata":"Syntax: multinom (<p=>p) \n \nMultinomial distribution with probability vector p."},"StatementOptionType":"S"},{"StatementOptionName":"MVN","StatementOptionHelp":{"#cdata":"Syntax: mvn (<mu=>\u00b5, <cov=>\u2211)\n        \nMultivariate normal distribution with mean vector  and covariance matrix \u2211."},"StatementOptionType":"S"},{"StatementOptionName":"MVNAR","StatementOptionHelp":{"#cdata":"Syntax: MVNAR (<mu=\u00b5, sd=|var=|prec= \u03bb, <rho=>\u03c1)\n        \nMultivariate normal distribution with mean vector \u00b5 and a covariance matrix \u2211. The covariance matrix \u2211 \nis a multiple of the scale and a matrix with a first-order autoregressive structure. When RHO=0, this \ndistribution becomes a multivariate normal distribution with shared variance."},"StatementOptionType":"S"},{"StatementOptionName":"ICOND=","StatementOptionHelp":{"#cdata":"Syntax: ICOND=variable-list | numeric-list \n        \nSpecifies the initial conditions (or initial states) of the lag or lead variables for the response variable \nwhen the observation indices are out of the range."},"StatementOptionType":"V"},{"StatementOptionName":"INITIAL=","StatementOptionHelp":{"#cdata":"Syntax: INITIAL=SAS-data-set | constant | numeric-list \n        \nSpecifies the initial values of the missing values. By default, PROC MCMC uses a sample average of the \nnonmissing values of a response variable as the starting values for all missing values in the simulation \nfor that variable. You can use the INITIAL= option to start the Markov chain at a different place."},"StatementOptionType":"V"},{"StatementOptionName":"MONITOR=","StatementOptionHelp":{"#cdata":"Syntax: MONITOR= (symbol-list | number-list | RANDOM(number)) \n        \nOutputs analysis for selected missing data variables. You can choose to monitor the missing values \nby listing the response variable names, the missing data variable names, or indices, or you can have \nthem randomly selected by PROC MCMC.\n\nWith the RANDOM keyword, PROC MCMC can randomly choose a subset of the variables to monitor. The following \nstatement randomly selects 3 variables to monitor: \n\n  model y ~ normal(0,var=s2u) monitor=(random(3));"},"StatementOptionType":"V","SubOptionsKeywords":"RANDOM"},{"StatementOptionName":"NAMESUFFIX=","StatementOptionHelp":{"#cdata":"Syntax: NAMESUFFIX=OBSERVATION | POSITION | ORDER \n          \nSpecifies how the names of the missing data variables are created. By default, the names \nare created by concatenating the response variable symbol, an underscore (\u201c_\u201d), and the\nobservation number of the missing value."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"OBSERVATION","@Value2":"POSITION|ORDER"},"StatementOptionToolTips":{"@ToolTip1":"Constructs the parameter names by appending the observation number to the response variable symbol.  This is the default.","@ToolTip2":"Construct the parameter names by appending the numbers 1, 2, 3, and so on, where the number indicates  the order in which the missing values appear in the data set."}},{"StatementOptionName":"NOOUTPOST","StatementOptionHelp":{"#cdata":"Suppresses the output of the posterior samples of missing data variables to the posterior output data \nset (which is specified in the OUTPOST= option in the PROC MCMC statement). In models with a large \nnumber of missing values (for example, tens of thousands), PROC MCMC can run faster if it does not \nsave the posterior samples."},"StatementOptionType":"S"}],"#comment":[{},{}]}},{"StatementName":"PARMS","StatementHelp":{"#cdata":"Syntax: PARMS  name |(name-list)<=> <{> number |number-list <}> <name |(name-list)<=> <{> number |number-list <}> \u2026> </ options>;  \n      \nThe PARMS statement lists the names of the parameters in the model and specifies optional initial \nvalues for these parameters. These parameters are referred to as the model parameters. You can specify \nmultiple PARMS statements."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"NORMAL","StatementOptionHelp":{"#cdata":"Specifies a normal proposal distribution in the random walk Metropolis. This is the default."},"StatementOptionType":"S"},{"StatementOptionName":"T","StatementOptionHelp":{"#cdata":"[Syntax: T<(df)>] \n          \nUses the t distribution with df degrees of freedom as an alternative proposal distribution."},"StatementOptionType":"S"},{"StatementOptionName":"SLICE","StatementOptionHelp":{"#cdata":"Applies the slice sampler to each parameter in the PARMS statement individually."},"StatementOptionType":"S"},{"StatementOptionName":"UDS","StatementOptionHelp":{"#cdata":"Implements a user-defined sampler for any of the parameters in the block."},"StatementOptionType":"S"}]}},{"StatementName":"PREDDIST","StatementHelp":{"#cdata":"Syntax: PREDDIST <'label'> OUTPRED=SAS-data-set <NSIM=n> <COVARIATES=SAS-data-set> <STATISTICS=options> ; \n      \nThe PREDDIST statement creates a new SAS data set that contains random samples \nfrom the posterior predictive distribution of the response variable. The posterior \npredictive distribution is the distribution of unobserved observations (prediction) \nconditional on the observed data."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"COVARIATES=","StatementOptionHelp":{"#cdata":"[Syntax: COVARIATES=SAS-data-set] \n          \nNames the SAS data set that contains the sets of explanatory variable values \nfor which the predictions are established. This data set must contain data with \nthe same variable names as are used in the likelihood function. If you omit the \nCOVARIATES= option, the DATA= data set specified in the PROC MCMC statement is \nused instead."},"StatementOptionType":"V"},{"StatementOptionName":"NSIM=","StatementOptionHelp":{"#cdata":"[Syntax: NSIM=n] \n          \nSpecifies the number of simulated predicted values. By default, NSIM= uses the \nNMC= option value specified in the PROC MCMC statement."},"StatementOptionType":"V"},{"StatementOptionName":"OUTPRED=","StatementOptionHelp":{"#cdata":"[Syntax: OUTPRED=SAS-data-set] \n          \nCreates an output data set to contain the samples from the posterior predictive \ndistribution. The output variable names are listed as resp_1\u2013resp_m, where resp \nis the name of the response variable and m is the number of observations in the \nCOVARIATES= data set in the PREDDIST statement. If the COVARIATES= data set is \nnot specified, m is the number of observations in the DATA= data set specified \nin the PROC statement."},"StatementOptionType":"V"},{"StatementOptionName":"SAVEPARM","StatementOptionHelp":{"#cdata":"Outputs to the OUTPRED= data set sampled parameter values that are used in each predictive draw."},"StatementOptionType":"V"},{"StatementOptionName":"STATISTICS|STATS","StatementOptionHelp":{"#cdata":"Syntax: STATISTICS<(global-stats-options)> =  NONE | ALL |stats-request \n          \nSpecifies options for calculating posterior statistics. This option works identically \nto the STATISTICS= option in the PROC statement. By default, this option takes the \nspecification of the STATISTICS= option in the PROC MCMC statement. \n\nThe global-stats-options includes the following:\n      \n  ALPHA=numeric-list\n  specifies the \u03b1 level for the equal-tail and HPD intervals. The value \u03b1 must be between 0 and 0.5. \n  By default, ALPHA=0.05\n\n  PERCENTAGE | PERCENT=numeric-list\n  calculates the posterior percentages. The numeric-list contains values between 0 and 100. By default, \n  PERCENTAGE=(25 50 75)."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ALL","@Value2":"CORR","@Value3":"COV","@Value4":"SUMMARY|SUM","@Value5":"INTERVAL|INT","@Value6":"NONE"},"StatementOptionToolTips":{"@ToolTip1":"Computes all posterior statistics.","@ToolTip2":"Computes the posterior correlation matrix.","@ToolTip3":"Computes the posterior covariance matrix.","@ToolTip4":"Computes the posterior means, standard deviations, and percentile points for each variable.  By default, the 25th, 50th, and 75th percentile points are produced, but you can use the  global PERCENT= option to request specific percentile points.","@ToolTip5":"Computes the 100(1 - \u03b1)% equal-tail and HPD credible intervals for each variable.","@ToolTip6":"Suppresses all of the statistics."},"SubOptionsKeywords":"ALPHA=|PERCENTAGE=|PERCENT="}]}},{"StatementName":"HYPERPRIOR|HYPER","StatementHelp":{"#cdata":"Syntax: HYPERPRIOR parameter-list ~ distribution ;\n      \nThe HYPERPRIOR statement is internally treated the same as the PRIOR statement. It provides a \nnotational convenience in case you wish to fit a multilevel hierarchical model. It is used to \nspecify the hyperprior distribution of the prior distribution parameters. The log of the hyperprior \nis the sum of the log hyperprior values from each of the HYPERPRIOR statements. \n\nIf you want to specify a multilevel hierarchical model, you can use either a PRIOR or a HYPERPRIOR \nstatement as if it were a hyper-HYPERPRIOR statement. Your model can have as many hierarchical levels \nas desired."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"BETA","StatementOptionHelp":{"#cdata":"[Syntax: beta(<a=>\u03b1, <b=>\u03b2)] \n          \nBeta distribution with shape parameters \u03b1 and \u03b2."},"StatementOptionType":"S"},{"StatementOptionName":"BINARY","StatementOptionHelp":{"#cdata":"[Syntax: binary(<prob|p=>p)] \n          \nBinary (Bernoulli) distribution with probability of success p."},"StatementOptionType":"S"},{"StatementOptionName":"BINOMIAL","StatementOptionHelp":{"#cdata":"Syntax: binomial(<n=>n, <prob|p=>p) \n          \nBinomial distribution with count n and probability of success p."},"StatementOptionType":"S"},{"StatementOptionName":"CAUCHY","StatementOptionHelp":{"#cdata":"Syntax: cauchy(<location|loc|l=>\u03b8, <scale|s=>\u03bb) \n          \nCauchy distribution with location \u03b8 and scale parameter \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"CHISQ","StatementOptionHelp":{"#cdata":"[Syntax: chisq(<df=>v)] \n          \nChi-square \u03c7\u00b2 distribution with v degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"DGENERAL","StatementOptionHelp":{"#cdata":"[Syntax: dgeneral(ll)] \n          \nGeneral log-likelihood function that you construct using SAS programming \nstatements for single or multiple discrete variables."},"StatementOptionType":"S"},{"StatementOptionName":"EXPCHISQ","StatementOptionHelp":{"#cdata":"[Syntax: expchisq(<df=>v)] \n          \nLog transformation of a \u03c7\u00b2 distribution with v degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"EXPEXPON","StatementOptionHelp":{"#cdata":"Syntax:  expexpon(scale|s=\u03bb) | expexpon(iscale|is=\u03bb) \n          \nLog transformation of an exponential distribution with scale or inverse-scale \nparameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"EXPGAMMA","StatementOptionHelp":{"#cdata":"Syntax: expGamma(<shape|sp=>\u03b1, scale|s=\u03bb) | expGamma(<shape|sp=>\u03b1, isscale|is=\u03bb) \n          \nLog transformation of a gamma distribution with shape \u03b1 and scale or inverse-scale \nparameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"EXPICHISQ","StatementOptionHelp":{"#cdata":"Syntax: expichisq(<df=>v)] \n          \nLog transformation of an inverse \u03c7\u00b2 distribution with v degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"EXPIGAMMA","StatementOptionHelp":{"#cdata":"Syntax: expiGamma(<shape|sp=>\u03b1, scale|s=\u03bb) | expGamma(<shape|sp=>\u03b1, isscale|is=\u03bb) \n          \nLog transformation of an inverse-gamma distribution with shape \u03b1 and scale \nor inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"EXPSICHISQ","StatementOptionHelp":{"#cdata":"Syntax: expsichisq(<df=>v), scale|s=s] \n          \nLog transformation of a scaled inverse \u03c7\u00b2 distribution with v degrees of freedom \nand scale parameter s."},"StatementOptionType":"S"},{"StatementOptionName":"EXPON","StatementOptionHelp":{"#cdata":"Syntax: expon(scale|s=\u03bb) | expon(iscale|is=\u03bb) \n          \nExponential distribution with scale or inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"GAMMA","StatementOptionHelp":{"#cdata":"Syntax: gamma(<shape|sp=>\u03b1, scale|s=\u03bb)  | gamma(<shape|sp=>\u03b1, isscale|is=\u03bb) \n          \nGamma distribution with shape \u03b1 and scale or inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"GENERAL","StatementOptionHelp":{"#cdata":"[Syntax: general(ll)] \n          \nGeneral log-likelihood function that you construct using SAS programming \nstatements for single or multiple continuous variables."},"StatementOptionType":"S"},{"StatementOptionName":"ICHISQ","StatementOptionHelp":{"#cdata":"[Syntax: ichisq(<df=>v)] \n          \nInverse \u03c7\u00b2 distribution with v degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"IGAMMA","StatementOptionHelp":{"#cdata":"Syntax: igamma(<shape|sp=>\u03b1, scale|s=\u03bb)  | igamma(<shape|sp=>\u03b1, isscale|is=\u03bb)] \n          \nInverse gamma distribution with shape \u03b1 and scale or inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"LAPLACE","StatementOptionHelp":{"#cdata":"Syntax: laplace(<location|loc|l=>\u03b8, <scale|s=>\u03bb) | laplace(<location|loc|l=>\u03b8, <iscale|is=>\u03bb) \n          \nLaplace distribution with location \u03b8 and scale or inverse-scale parameter \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"LOGISTIC","StatementOptionHelp":{"#cdata":"Syntax: logistic(<location|loc|l=>a, <scale|s=>b) \n          \nLogistic distribution with location a and scale parameter b"},"StatementOptionType":"S"},{"StatementOptionName":"LOGNORMAL","StatementOptionHelp":{"#cdata":"Syntax: lognormal(<mean=>\u00b5, <sd=>\u03bb) | lognormal(<mean=>\u00b5, <var=>\u03bb) |  lognormal(<mean=>\u00b5, <prec=>\u03bb)\n          \nLog-normal distribution with mean \u00b5 and standard deviation or variance or precision \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"NEGBIN","StatementOptionHelp":{"#cdata":"Syntax: negbin(<n=>n, <prob|p=>p)] \n          \nNegative binomial distribution with count n and probability of success p."},"StatementOptionType":"S"},{"StatementOptionName":"NORMAL","StatementOptionHelp":{"#cdata":"Syntax: normal(<mean=>\u00b5, <sd=>\u03bb) | normal(<mean=>\u00b5, <var=>\u03bb) | normal(<mean=>\u00b5, <prec=>\u03bb) \n          \nNormal (Gaussian) distribution with mean \u00b5 and standard deviation or variance \nor precision \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"PARETO","StatementOptionHelp":{"#cdata":"Syntax: pareto(<shape|sp=>\u03b1, scale|s=b) \n          \nPareto distribution with shape \u03b1 and scale parameter b."},"StatementOptionType":"S"},{"StatementOptionName":"POISSON","StatementOptionHelp":{"#cdata":"Syntax: poisson(<mean|m=>\u03bb)] \n          \nPoisson distribution with mean \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"SICHISQ","StatementOptionHelp":{"#cdata":"Syntax: sichisq(<df=>v, scale|s=s) \n          \nScaled inverse \u03c7\u00b2 distribution with v degrees of freedom and scale parameter s."},"StatementOptionType":"S"},{"StatementOptionName":"T","StatementOptionHelp":{"#cdata":"Syntax: t(<mean|m=\u00b5, <sd=>\u03bb, <df=>v) | t(<mean|m=\u00b5, <var=>\u03bb, <df=>v) | t(<mean|m=\u00b5, <sd=>\u03bb, <df=>v) \n          \nT distribution with mean \u00b5, standard deviation or variance or precision \u03bb, \nand v degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"UNIFORM","StatementOptionHelp":{"#cdata":"Syntax: uniform(<left}l=>a, right|r=>b) \n          \nUniform distribution with range a and b."},"StatementOptionType":"S"},{"StatementOptionName":"WALD","StatementOptionHelp":{"#cdata":"Syntax: wald(<mean|m=>\u00b5, <iscale|is=>\u03bb) \n          \nWald distribution with mean \u00b5 and inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"WEIBULL","StatementOptionHelp":{"#cdata":"Syntax: weibull(\u00b5, c, \u03c3)] \n          \nWeibull distribution with location (threshold) parameter \u00b5, shape parameter c, \nand scale parameter \u03c3."},"StatementOptionType":"S"}]}},{"StatementName":"PRIOR","StatementHelp":{"#cdata":"Syntax: PRIOR parameter-list ~ distribution ;\n      \nThe PRIOR statement is used to specify the prior distribution of the model parameters. \nYou must specify a single parameter or a list of parameters, a tilde ~, and then a \ndistribution with its parameters. Multiple PRIOR statements are allowed for defining \nmodels with multiple independent prior components. The log of the prior is the sum of \nthe log prior values from each of the PRIOR statements. \n\nThe PRIOR statements are processed twice at every Markov chain simulation\u2014that is, \ntwice per pass through the data set. The statements are called at the first and the \nlast observation of the data set. This is the same as how the BEGINNODATA and ENDNODATA \nstatements are processed."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"BETA","StatementOptionHelp":{"#cdata":"[Syntax: beta(<a=>\u03b1, <b=>\u03b2)] \n          \nBeta distribution with shape parameters \u03b1 and \u03b2."},"StatementOptionType":"S"},{"StatementOptionName":"BINARY","StatementOptionHelp":{"#cdata":"[Syntax: binary(<prob|p=>p)] \n          \nBinary (Bernoulli) distribution with probability of success p."},"StatementOptionType":"S"},{"StatementOptionName":"BINOMIAL","StatementOptionHelp":{"#cdata":"Syntax: binomial(<n=>n, <prob|p=>p) \n          \nBinomial distribution with count n and probability of success p."},"StatementOptionType":"S"},{"StatementOptionName":"CAUCHY","StatementOptionHelp":{"#cdata":"Syntax: cauchy(<location|loc|l=>\u03b8, <scale|s=>\u03bb) \n          \nCauchy distribution with location \u03b8 and scale parameter \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"CHISQ","StatementOptionHelp":{"#cdata":"[Syntax: chisq(<df=>v)] \n          \nChi-square \u03c7\u00b2 distribution with v degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"DGENERAL","StatementOptionHelp":{"#cdata":"[Syntax: dgeneral(ll)] \n          \nGeneral log-likelihood function that you construct using SAS programming \nstatements for single or multiple discrete variables."},"StatementOptionType":"S"},{"StatementOptionName":"EXPCHISQ","StatementOptionHelp":{"#cdata":"[Syntax: expchisq(<df=>v)] \n          \nLog transformation of a \u03c7\u00b2 distribution with v degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"EXPEXPON","StatementOptionHelp":{"#cdata":"Syntax:  expexpon(scale|s=\u03bb) | expexpon(iscale|is=\u03bb) \n          \nLog transformation of an exponential distribution with scale or inverse-scale \nparameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"EXPGAMMA","StatementOptionHelp":{"#cdata":"Syntax: expGamma(<shape|sp=>\u03b1, scale|s=\u03bb) | expGamma(<shape|sp=>\u03b1, isscale|is=\u03bb) \n          \nLog transformation of a gamma distribution with shape \u03b1 and scale or \ninverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"EXPICHISQ","StatementOptionHelp":{"#cdata":"Syntax: expichisq(<df=>v)] \n          \nLog transformation of an inverse \u03c7\u00b2 distribution with v degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"EXPIGAMMA","StatementOptionHelp":{"#cdata":"Syntax: expiGamma(<shape|sp=>\u03b1, scale|s=\u03bb) | expGamma(<shape|sp=>\u03b1, isscale|is=\u03bb) \n          \nLog transformation of an inverse-gamma distribution with shape \u03b1 and scale or \ninverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"EXPSICHISQ","StatementOptionHelp":{"#cdata":"Syntax: expsichisq(<df=>v), scale|s=s] \n          \nLog transformation of a scaled inverse \u03c7\u00b2 distribution with v degrees of freedom and scale parameter s."},"StatementOptionType":"S"},{"StatementOptionName":"EXPON","StatementOptionHelp":{"#cdata":"Syntax: expon(scale|s=\u03bb) | expon(iscale|is=\u03bb) \n          \nExponential distribution with scale or inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"GAMMA","StatementOptionHelp":{"#cdata":"Syntax: gamma(<shape|sp=>\u03b1, scale|s=\u03bb)  | gamma(<shape|sp=>\u03b1, isscale|is=\u03bb) \n          \nGamma distribution with shape \u03b1 and scale or inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"GENERAL","StatementOptionHelp":{"#cdata":"[Syntax: general(ll)] \n          \nGeneral log-likelihood function that you construct using SAS programming \nstatements for single or multiple continuous variables."},"StatementOptionType":"S"},{"StatementOptionName":"ICHISQ","StatementOptionHelp":{"#cdata":"[Syntax: ichisq(<df=>v)] \n          \nInverse \u03c7\u00b2 distribution with v degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"IGAMMA","StatementOptionHelp":{"#cdata":"Syntax: igamma(<shape|sp=>\u03b1, scale|s=\u03bb)  | igamma(<shape|sp=>\u03b1, isscale|is=\u03bb)] \n          \nInverse gamma distribution with shape \u03b1 and scale or inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"LAPLACE","StatementOptionHelp":{"#cdata":"Syntax: laplace(<location|loc|l=>\u03b8, <scale|s=>\u03bb) | laplace(<location|loc|l=>\u03b8, <iscale|is=>\u03bb) \n          \nLaplace distribution with location \u03b8 and scale or inverse-scale parameter \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"LOGISTIC","StatementOptionHelp":{"#cdata":"Syntax: logistic(<location|loc|l=>a, <scale|s=>b) \n          \nLogistic distribution with location a and scale parameter b"},"StatementOptionType":"S"},{"StatementOptionName":"LOGNORMAL","StatementOptionHelp":{"#cdata":"Syntax: lognormal(<mean=>\u00b5, <sd=>\u03bb) | lognormal(<mean=>\u00b5, <var=>\u03bb) |  lognormal(<mean=>\u00b5, <prec=>\u03bb)\n          \nLog-normal distribution with mean \u00b5 and standard deviation or variance \nor precision \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"NEGBIN","StatementOptionHelp":{"#cdata":"Syntax: negbin(<n=>n, <prob|p=>p)] \n          \nNegative binomial distribution with count n and probability of success p."},"StatementOptionType":"S"},{"StatementOptionName":"NORMAL","StatementOptionHelp":{"#cdata":"Syntax: normal(<mean=>\u00b5, <sd=>\u03bb) | normal(<mean=>\u00b5, <var=>\u03bb) | normal(<mean=>\u00b5, <prec=>\u03bb) \n          \nNormal (Gaussian) distribution with mean \u00b5 and standard deviation or variance \nor precision \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"PARETO","StatementOptionHelp":{"#cdata":"Syntax: pareto(<shape|sp=>\u03b1, scale|s=b) \n          \nPareto distribution with shape \u03b1 and scale parameter b."},"StatementOptionType":"S"},{"StatementOptionName":"POISSON","StatementOptionHelp":{"#cdata":"Syntax: poisson(<mean|m=>\u03bb)] \n          \nPoisson distribution with mean \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"SICHISQ","StatementOptionHelp":{"#cdata":"Syntax: sichisq(<df=>v, scale|s=s) \n          \nScaled inverse \u03c7\u00b2 distribution with v degrees of freedom and scale parameter s."},"StatementOptionType":"S"},{"StatementOptionName":"T","StatementOptionHelp":{"#cdata":"Syntax: t(<mean|m=\u00b5, <sd=>\u03bb, <df=>v) | t(<mean|m=\u00b5, <var=>\u03bb, <df=>v) | t(<mean|m=\u00b5, <sd=>\u03bb, <df=>v) \n          \nT distribution with mean \u00b5, standard deviation or variance or precision \u03bb, and \nv degrees of freedom."},"StatementOptionType":"S"},{"StatementOptionName":"UNIFORM","StatementOptionHelp":{"#cdata":"Syntax: uniform(<left}l=>a, right|r=>b) \n          \nUniform distribution with range a and b."},"StatementOptionType":"S"},{"StatementOptionName":"WALD","StatementOptionHelp":{"#cdata":"Syntax: wald(<mean|m=>\u00b5, <iscale|is=>\u03bb) \n          \nWald distribution with mean \u00b5 and inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"WEIBULL","StatementOptionHelp":{"#cdata":"Syntax: weibull(\u00b5, c, \u03c3)] \n          \nWeibull distribution with location (threshold) parameter \u00b5, shape parameter c, \nand scale parameter \u03c3."},"StatementOptionType":"S"}]}},{"StatementName":"BEGINHYPER","StatementHelp":{"#cdata":"Syntax: BEGINHYPER ;\n      \nThe BEGINHYPER statement is an alias for the BEGINPRIOR statement, and they \nare treated the same."},"StatementOptions":null},{"StatementName":"ENDHYPER","StatementHelp":{"#cdata":"Syntax: ENDHYPER ;\n      \nThe ENDHYPER statement is an alias for the ENDPRIOR statement, and they are \ntreated the same."},"StatementOptions":null},{"StatementName":"RANDOM","StatementHelp":{"#cdata":"Syntax: RANDOM random-effect ~ distribution SUBJECT=variable <options> ; \n      \nThe RANDOM statement defines a single random effect and its prior distribution or an array \nof random effects and their prior distribution. The random-effect must be represented by \neither a symbol or an array that appears in your SAS programming statements. The RANDOM \nstatement must consist of a symbol for a random effect (or an array for multivariate random \neffects), a tilde (~), the distribution for the random effect, and then a SUBJECT= variable. \n\nWith SAS/STAT 12.1, the RANDOM statement now supports multilevel hierarchical modeling to an \narbitrary depth; a random effect can appear in the distributional hierarchy of other random \neffects."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"BETA","StatementOptionHelp":{"#cdata":"[Syntax: beta(<a=>\u03b1, <b=>\u03b2)] \n          \nBeta distribution with shape parameters \u03b1 and \u03b2."},"StatementOptionType":"S"},{"StatementOptionName":"BINARY","StatementOptionHelp":{"#cdata":"[Syntax: binary(<prob|p=>p)] \n          \nBinary (Bernoulli) distribution with probability of success p."},"StatementOptionType":"S"},{"StatementOptionName":"GAMMA","StatementOptionHelp":{"#cdata":"Syntax: gamma(<shape|sp=>\u03b1, scale|s=\u03bb)  | gamma(<shape|sp=>\u03b1, isscale|is=\u03bb) \n          \nGamma distribution with shape \u03b1 and scale or inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"IGAMMA","StatementOptionHelp":{"#cdata":"Syntax: igamma(<shape|sp=>\u03b1, scale|s=\u03bb)  | igamma(<shape|sp=>\u03b1, isscale|is=\u03bb)] \n          \nInverse gamma distribution with shape \u03b1 and scale or inverse-scale parameter \u03bb."},"StatementOptionType":"S"},{"StatementOptionName":"NORMAL|N","StatementOptionHelp":{"#cdata":"Syntax: normal(<mean=>\u00b5, <sd=>\u03bb) | normal(<mean=>\u00b5, <var=>\u03bb) | normal(<mean=>\u00b5, <prec=>\u03bb) \n          \nNormal (Gaussian) distribution with mean \u00b5 and standard deviation or variance \nor precision \u03bb"},"StatementOptionType":"S"},{"StatementOptionName":"MVN","StatementOptionHelp":{"#cdata":"Syntax: mvn(mu=>\u00b5, <cov=>\u03a3) \n          \nMultivariate normal distribution with mean vector \u00b5 and covariance matrix \u03a3."},"StatementOptionType":"S"},{"StatementOptionName":"MVNAR","StatementOptionHelp":{"#cdata":"Syntax: MVNAR (<mu=\u00b5, sd=|var=|prec= \u03bb, <rho=>\u03c1)\n        \nMultivariate normal distribution with mean vector \u00b5 and a covariance matrix \u2211. The covariance matrix \u2211 \nis a multiple of the scale and a matrix with a first-order autoregressive structure. When RHO=0, this \ndistribution becomes a multivariate normal distribution with shared variance."},"StatementOptionType":"S"},{"StatementOptionName":"SUBJECT=","StatementOptionHelp":{"#cdata":"Syntax: SUBJECT=variable  |  _OBS_ \n          \nIdentifies the subjects in the random-effects model. The variable must be part of the input data set, \nand it can be either a numeric variable or character literal. The variable does not need to be sorted, \nand the input data set does not need to be clustered according to it. SUBJECT=_OBS_ enables you fit an \nobservation-level random-effects model (each observation has its own random effect) without specifying \na subject variable in the input data set."},"StatementOptionType":"V"},{"StatementOptionName":"ALGORITHM=|ALG=","StatementOptionHelp":{"#cdata":"Syntax: ALGORITHM=RWM | SLICE | GEO\n\nSpecifies the algorithm to use to sample the posterior distribution."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"RWM","@Value2":"SLICE","@Value3":"GEO"},"StatementOptionToolTips":{"@ToolTip1":"Uses the random-walk Metropolis algorithm with normal proposal. ","@ToolTip2":"Uses the slice sampling algorithm.","@ToolTip3":"Uses the discrete random-walk Metropolis with symmetric geometric proposal. "}},{"StatementOptionName":"ZERO=|CONSTRAINT(VALUE=value)=","StatementOptionHelp":{"#cdata":"Syntax: CONSTRAINT(VALUE=value) = FIRST | LAST | NONE | 'formatted-value' \nSyntax: ZERO=FIRST | LAST | NONE | 'formatted-value'  \n \nSets one of the random-effects parameters to a fixed value. The default is ZERO=NONE, which does not fix any \nof the parameters to be a constant. This option enables you to eliminate one of the parameters."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"FIRST","@Value2":"LAST","@Value3":"NONE","@Value4":"'formatted-value'"},"StatementOptionToolTips":{"@ToolTip1":"The specification ZERO=FIRST sets the first random-effects parameter to 0.","@ToolTip2":"The specification ZERO=LAST sets the last random-effects parameter to be 0.","@ToolTip3":"The default is ZERO=NONE, which does not fix any of the parameters to be a constant.","@ToolTip4":"The specification ZERO='formatted-value' sets the random-effects parameter for the category (in the  SUBJECT= variable) with a formatted value that matches 'formatted-value' to 0."}},{"StatementOptionName":"ICOND=|ISTATES=","StatementOptionHelp":{"#cdata":"Syntax: ICOND=variable-list | numeric-list \nSyntax:  ISTATES=variable-list | numeric-list  \n\nSpecifies the initial conditions (or initial states) of the lag or lead variable of the random effect \nwhen the subject indices are out of the range of the subjects."},"StatementOptionType":"V"},{"StatementOptionName":"INITIAL=","StatementOptionHelp":{"#cdata":"Syntax: INITIAL=SAS-data-set | constant | numeric-list \n          \nSpecifies the initial values of the random-effects parameters. By default, PROC MCMC uses the same option \nas specified in the INIT= option to generate initial values for the random-effects parameter: either it uses \nthe mode of the prior density or it randomly draws a sample from that distribution."},"StatementOptionType":"V"},{"StatementOptionName":"MONITOR=","StatementOptionHelp":{"#cdata":"Syntax: MONITOR= (symbol-list | number-list | RANDOM(number)) \n        \nOutputs analysis for selected random-effects parameters. You can choose to monitor the random-effects parameters \nby listing the effect names or effect indices, or you can have them randomly selected by PROC MCMC. \n\nWith the RANDOM keyword, PROC MCMC can randomly choose a subset of the parameters to monitor. \n\n  random u ~ normal(0,var=s2u) subject=index monitor=(random(12));"},"StatementOptionType":"V","SubOptionsKeywords":"RANDOM"},{"StatementOptionName":"NAMESUFFIX=","StatementOptionHelp":{"#cdata":"Syntax: NAMESUFFIX=value \n\nSpecifies how the names of the random-effects parameters are internally created. \nPROC MCMC creates the names by concatenating the random-effect symbol with an \nunderscore and a series of numbers."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"SUBJECT","@Value2":"POSITION"},"StatementOptionToolTips":{"@ToolTip1":"Constructs the parameter names by appending the values of the SUBJECT= variable  in the input data set.","@ToolTip2":"Constructs the parameter names by appending the numbers 1, 2, 3, and so on, where  the number indicates the order in which the SUBJECT= variable appears in the  data set."}},{"StatementOptionName":"NOOUTPOST","StatementOptionHelp":{"#cdata":"Suppresses the output of the posterior samples of random-effects parameters to the OUTPOST= data set.\nIn models with a large number of random-effects parameters (for example, tens of thousands), PROC MCMC \ncan run faster if it does not save the posterior samples of the random-effects parameters."},"StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"UDS","StatementHelp":{"#cdata":"Syntax: UDS subroutine-name ( subroutine-argument-list) ; \n      \nUDS stands for user defined sampler. The UDS statement allows you to use a separate algorithm, \nother than the default random walk Metropolis, to update parameters in the model. The purpose \nof the UDS statement is to give you a greater amount of flexibility and better control over the \nupdating schemes of the Markov chain. Multiple UDS statements are allowed. \n\nFor the UDS statement to work properly, you have to do the following: \n\n  o write a subroutine by using PROC FCMP. The subroutine must update some parameters in the \n    model. These are the UDS parameters. The subroutine is called the UDS subroutine. \n\n  o declare any UDS parameters in the PARMS statement with a sampling option, as in </ UDS> \n\n  o specify the prior distributions for all UDS parameters, using the PRIOR statements. \n\nNote: All UDS parameters must appear in three places: the UDS statement, the PARMS statement, \nand the PRIOR statement. Otherwise, PROC MCMC exits."},"StatementOptions":null},{"StatementName":"ABORT","StatementHelp":{"#cdata":"Syntax: ABORT <ABEND | CANCEL <FILE> | RETURN | > <n> <NOLIST>; \n      \nStops executing the current DATA step, SAS job, or SAS session."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ABEND","StatementOptionHelp":{"#cdata":"Causes abnormal termination of the current SAS job or session. Results depend on the method \nof operation: \n\no batch mode and noninteractive mode \n\n  o stops processing immediately\n  o sends an error message to the SAS log that states that execution was terminated by the ABEND option \n    of the ABORT macro statement\n  o does not execute any subsequent statements or check syntax\n  o returns control to the operating environment; further action is based on how your operating environment \n    and your site treat jobs that end abnormally.\n\no windowing environment and interactive line mode \n\n  o causes your windowing environment and interactive line mode to stop processing immediately \n    and return you to your operating environment."},"StatementOptionType":"S"},{"StatementOptionName":"CANCEL","StatementOptionHelp":{"#cdata":"Causes the cancellation of the current submitted statements. The results depend on the method \nof operation:\n\no batch mode and noninteractive mode\n\n  o The entire SAS program and SAS system are terminated.\n  o The error message is written to the SAS log.\n\no windowing environment and interactive line mode \n\n  o It only clears the current submitted program.\n  o Other subsequent submitted programs are not affected.\n  o The error message is written to the SAS log.\n\no workspace server and stored process server \n\n  o It only clears currently submitted program.\n  o Other subsequent submit calls are not affected.\n  o The error message is written to the SAS log.\n\no SAS IntrNet application server \n\n  o A separate execution is created for each request. The execution submits the request code. A CANCEL \n    argument in the request code clears the current submitted code but does not terminate the execution \n    of the SAS session."},"StatementOptionType":"S"},{"StatementOptionName":"CANCEL FILE","StatementOptionHelp":{"#cdata":"Causes only the contents of the autoexec file or %INCLUDE file to be cleared by the %ABORT statement. \nOther submitted source statements will be executed after the autoexec or %INCLUDE file."},"StatementOptionType":"S"},{"StatementOptionName":"RETURN","StatementOptionHelp":{"#cdata":"Causes abnormal termination of the current SAS job or session. Results depend on the method \nof operation: \n\no batch mode and noninteractive mode \n\n  o stops processing immediately\n  o sends an error message to the SAS log that states that execution was terminated by the RETURN option \n    in the ABORT macro statement\n  o does not execute any subsequent statements or check syntax\n  o returns control to the operating environment with a condition code indicating an error.\n\no windowing environment and interactive line mode \n\n  o causes your windowing environment and interactive line mode to stop processing immediately \n    and return you to your operating environment."},"StatementOptionType":"S"},{"StatementOptionName":"NOLIST","StatementOptionHelp":{"#cdata":"suppresses the output of all variables to the SAS log."},"StatementOptionType":"S"}]}},{"StatementName":"CALL","StatementHelp":{"#cdata":"Syntax: CALL routine(parameter-1<, ...parameter-n>);  \n      \nInvokes a SAS CALL routine."},"StatementOptions":null},{"StatementName":"DELETE","StatementHelp":{"#cdata":"Syntax: DELETE; \n      \nStops processing the current observation."},"StatementOptions":null},{"StatementName":"DO","StatementHelp":{"#cdata":"Specifies a group of statements to be executed as a unit.\n      \nSyntax: \n(1) DO; \n...more SAS statements...  \nEND;  \n\n(2) DO index-variable=specification-1 <, ... specification-n>; \n... more SAS statements ...  \nEND;  \n\n(3) DO UNTIL (expression); \n...more SAS statements...  \nEND \n\n(4) DO WHILE (expression); \n...more SAS statements...  \nEND;"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"UNTIL","StatementOptionHelp":{"#cdata":"Executes statements in a DO loop repetitively until a condition is true.\n          \nSyntax: \nDO UNTIL (expression); \n...more SAS statements...  \nEND"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Executes statements in a DO-loop repetitively while a condition is true. \n          \nSyntax: \nDO WHILE (expression); \n...more SAS statements...  \nEND;"},"StatementOptionType":"S"},{"StatementOptionName":"OVER","StatementOptionType":"S"},{"StatementOptionName":"TO","StatementOptionHelp":{"#cdata":"Separates the start and stop integers or expressions that control the number of times the \nportion of the DATA step between the iterative DO and END statements is processed."},"StatementOptionType":"S"},{"StatementOptionName":"BY","StatementOptionHelp":{"#cdata":"Precedes an increment integer (other than 0) or an expression that generates an integer to be \nadded to the value of the index variable in each iteration of the DO loop."},"StatementOptionType":"S"}]}},{"StatementName":"END","StatementHelp":{"#cdata":"Syntax: END; \n      \nEnds a DO group or SELECT group processing."},"StatementOptions":null},{"StatementName":"GOTO","StatementHelp":{"#cdata":"Syntax: GOTO label;\n      \nJumps to a new statement."},"StatementOptions":null},{"StatementName":"IF","StatementHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions. \n\nSyntax: \n(1) IF expression THEN statement; \n    <ELSE statement;> \n(2) IF condition;"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"DO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"WHEN","StatementOptionHelp":{"#cdata":"WHEN statement in an IF-THEN-WHEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"OUTPUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"GO TO|GOTO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct. \n          \nSyntax: ... GO TO label; | ... GOTO label;\n      \nJumps to a new statement."},"StatementOptionType":"S"},{"StatementOptionName":"PUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"STOP","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct. \n          \nStops execution of the current DATA step."},"StatementOptionType":"S"},{"StatementOptionName":"SET","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct.\n          \nSyntax: SET <SAS-data-set(s) <(data-set-options(s) )>>; \n      \nReads an observation from one or more SAS data sets."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"ELSE","StatementHelp":{"#cdata":"If the condition in an IF-THEN statement is false and an ELSE statement is present, \\\nthen the ELSE action is carried out."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"IF","StatementOptionHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions."},"StatementOptionType":"S"},{"StatementOptionName":"DO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN-ELSE construct."},"StatementOptionType":"S"},{"StatementOptionName":"OUTPUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN-ELSE construct."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"LINK","StatementHelp":{"#cdata":"Syntax: LINK statement-label; \n      \nDirects program execution immediately to the statement label that is specified and, if followed \nby a RETURN statement, returns execution to the statement that follows the LINK statement."},"StatementOptions":null},{"StatementName":"RETURN","StatementHelp":{"#cdata":"Syntax: RETURN; \n      \nStops executing statements at the current point in the DATA step and returns to a predetermined \npoint in the step."},"StatementOptions":null},{"StatementName":"SELECT","StatementHelp":{"#cdata":"Executes one of several statements or groups of statements.\n      \nSyntax: \nSELECT <(select-expression)>;  \n  WHEN-1 (when-expression-1 <..., when-expression-n>) statement;  \n    <... WHEN-n (when-expression-1 <..., when-expression-n>) statement;>  \n      <OTHERWISE statement;> \nEND;"},"StatementOptions":null},{"StatementName":"WHEN","StatementHelp":{"#cdata":"SELECT groups contain WHEN statements that identify SAS statements that are executed when a particular \ncondition is true. Use at least one WHEN statement in a SELECT group.\n      \nSyntax: WHEN-1 (when-expression-1 <..., when-expression-n>) statement; "},"StatementOptions":{"StatementOption":{"StatementOptionName":"DO","StatementOptionType":"S"}}},{"StatementName":"OTHERWISE","StatementHelp":{"#cdata":"An optional OTHERWISE statement specifies a statement to be executed if no WHEN condition is met. \nAn END statement ends a SELECT group.\n\n      \nSyntax: \n  <... WHEN-n (when-expression-1 <..., when-expression-n>) statement;>  \n    <OTHERWISE statement;>"},"StatementOptions":null},{"StatementName":"STOP","StatementHelp":{"#cdata":"Syntax: STOP ;\n\nThe STOP statement halts the execution of all statements that contain it, including \nDO statements and other control or looping statements. Execution continues with the \nnext top-level source statement."},"StatementOptions":null},{"StatementName":"PUT","StatementHelp":{"#cdata":"Syntax: PUT print-item ...< @ > < @@ > ;\n\nThe PUT statement writes text data to the current output file."},"StatementOptions":{"StatementOption":{"StatementOptionName":"_PAGE_","StatementOptionHelp":{"#cdata":"Outputs any pending line data and moves to the top of the next page."},"StatementOptionType":"S"}}}],"#comment":{}}}}