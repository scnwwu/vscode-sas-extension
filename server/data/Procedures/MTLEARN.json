{"Procedure":{"Name":"MTLEARN","ProductGroup":"CAS|VIYA|DATA MINING AND MACHINE LEARNING","ProcedureHelp":{"#cdata":"Syntax: PROC MTLEARN <options>;\n    DISPLAY <table-list> </ options>;\n    DISPLAYOUT table-spec-list </ options>;\n    INPUT variables <LEVEL=INTERVAL>;\n    TARGET variables <LEVEL=INTERVAL>;\n    OUTPUT OUT=CAS-libref.data-table <options>;\n    SAVESTATE RSTORE=CAS-libref.data-table <options>;\n    \nThe MTLEARN procedure implements the multitask learning technique for least squares loss with \u21131 \nand graph structure penalizations. It solves multiple related sparse linear regression problems \nsimultaneously. A graph structure encodes the relationships between the problems. PROC MTLEARN \nshares the data and model parameters among different regression problems and solves the problems \nsimultaneously in order to produce a more robust and accurate predictive model. When used with \nindependent graph tables, PROC MTLEARN also serves as an elastic net regularization solver, which \nis widely used in feature selection."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=CAS-libref.data-table \n\nNames the input data table for PROC MTLEARN to use. The default is the most recently created data \ntable. CAS-libref.data-table is a two-level name, where \n\nCAS-libref\n  refers to a collection of information that is defined in the LIBNAME statement and includes \n  the caslib, which includes a path to the data, and a session identifier, which defaults to \n  the active session but which can be explicitly defined in the LIBNAME statement.\n  \ndata-table\n  specifies the name of the input data table."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"GRAPHOUT=","ProcedureOptionHelp":{"#cdata":"Syntax: GRAPHOUT=CAS-libref.data-table\n      \nSpecifies the output data table in which to save the graph table. CAS-libref.data-table is a two-level \nname, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name \nof the output data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"GRAPHTABLE=","ProcedureOptionHelp":{"#cdata":"Syntax: GRAPHTABLE=CAS-libref.data-table\n      \nSpecifies the user-defined graph table. The first column of the graph table must contain the row ID \nvariable. The graph table must also include all target variables that you specify in the TARGET statement. \nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, \nand data-table specifies the name of the input data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"GRAPHTYPE=","ProcedureOptionHelp":{"#cdata":"Syntax: GRAPHTYPE=CLUSTER |CUSTOM |FUSE |INDEP\n      \nSpecifies the type of graph table.\n\nIf you specify the GRAPHTABLE= option, the value of the GRAPHTYPE= option is automatically \noverwritten with CUSTOM.\n\nBy default, GRAPHTYPE=CLUSTER."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"CLUSTER","@Value2":"CUSTOM","@Value3":"FUSE","@Value4":"INDEP"},"ProcedureOptionToolTips":{"@ToolTip1":"Generates a cluster graph table, where all tasks are connected (to a virtual mean task).","@ToolTip2":"Uses the graph table that you specify.","@ToolTip3":"Generates a fuse graph table, where each task is connected to the next task in the target list.","@ToolTip4":"Generates an independent graph table, where all tasks are independent."}},{"ProcedureOptionName":"MAXITERS=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXITERS=number\n      \nSpecifies the maximum number of iterations for the algorithm to perform, where number is an integer \ngreater than or equal to 1.\n\nBy default, MAXITERS=100."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MODELOUT=","ProcedureOptionHelp":{"#cdata":"Syntax: MODELOUT=CAS-libref.data-table\n      \nSpecifies the output data table in which to save the estimated multitask regression weights. \nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session \nidentifier, and data-table specifies the name of the output data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NTHREADS=","ProcedureOptionHelp":{"#cdata":"Syntax: NTHREADS=number\n      \nSpecifies the number of threads to use for the computation, where number is an integer greater \nthan 0. The default value is the maximum number of available threads per computer."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"REGL1=","ProcedureOptionHelp":{"#cdata":"Syntax: REGL1=number\n      \nSpecifies the \u21131 (LASSO) penalization weight, where number is greater than or equal to 0. \n\nThe default value is 0.01."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"REGL2=","ProcedureOptionHelp":{"#cdata":"Syntax: REGL2=number\n      \nSpecifies the \u21132 graph penalization weight, where number is greater than or equal to 0. \n\nThe default value is 0.01."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SEED=","ProcedureOptionHelp":{"#cdata":"Syntax: SEED=random-seed\n      \nSpecifies an integer that is used to start the pseudorandom number generator. This option enables \nyou to reproduce the same sample output, but only when NTHREADS=1. If you do not specify a seed, \nor if you specify a value less than or equal to 0, the seed is generated from reading the time of \nday from the computer\u2019s clock."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"TOLERANCE=","ProcedureOptionHelp":{"#cdata":"Syntax: TOLERANCE=number\n      \nSpecifies the optimization tolerance (absolute \u21132 difference of solution) as a stopping criterion, \nwhere number is greater than 0. The default value is 1E\u20136."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"DISPLAY","StatementHelp":{"#cdata":"Syntax: DISPLAY <table-list> </ options>;\n      \nThe DISPLAY statement enables you to specify a list of display tables to display or exclude. This statement \nis similar to the ODS SELECT, ODS EXCLUDE, and ODS TRACE statements. However, the DISPLAY statement can improve \nperformance when a large number of tables could be generated (such as in BY-group processing). The procedure \nprocesses the DISPLAY statement on a CAS server and thus sends only a subset of ODS tables to the SAS client. \nBecause ODS statements are processed on a SAS client, all the display tables generated are first sent to the \nclient and then the client creates a subset. If both DISPLAY and ODS statements are used together, the DISPLAY \nstatement takes precedence over the ODS statements."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"CASESENSITIVE","StatementOptionHelp":{"#cdata":"Performs a case-sensitive comparison of table names in the table-list to display table names when \ntables are subsetted for display. To preserve case, you must enclose table names in the table-list \nin quotation marks."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDE","StatementOptionHelp":{"#cdata":"Displays all display tables except those specified in the table-list."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDEALL","StatementOptionHelp":{"#cdata":"Suppresses display of all tables. This option takes precedence over the other options."},"StatementOptionType":"S"},{"StatementOptionName":"TRACE","StatementOptionHelp":{"#cdata":"Displays the display table names, labels, and paths."},"StatementOptionType":"S"}]}},{"StatementName":"DISPLAYOUT","StatementHelp":{"#cdata":"Syntax: DISPLAYOUT table-spec-list < / options > ;\n      \nThe DISPLAYOUT statement enables you to create CAS output tables from your displayed output. This\nstatement is similar to the ODS OUTPUT statement.\n\nThe table-spec-list specifies a list of CAS output tables to create. Each entry in the list has either a key or a\nkey=value format:\n\n  key=value specifies key as the ODS table name, path, or partial pathname, and specifies value as the\n    CAS output table name.\n  key specifies key as the ODS table name and also as the CAS output table name.\n  \nTable names and partial pathnames are discussed under the DISPLAY statement. The DISPLAYOUT\nstatement does not support regular expressions."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"INCLUDEALL","StatementOptionHelp":{"#cdata":"Creates output CAS tables for all display tables. The name of the created output CAS table is the same \nas the corresponding display table name. If you specify this option, the table-spec-list specification \nis ignored."},"StatementOptionType":"S"},{"StatementOptionName":"NOREPLACE","StatementOptionHelp":{"#cdata":"Does not replace an existing CAS output table of the same name."},"StatementOptionType":"S"},{"StatementOptionName":"REPEATED","StatementOptionHelp":{"#cdata":"Replicates all CAS output tables on all nodes."},"StatementOptionType":"S"}]}},{"StatementName":"INPUT","StatementHelp":{"#cdata":"Syntax: INPUT variables / <LEVEL=INTERVAL | NOMINAL>;\n\nThe INPUT statement specifies the names of variables to be used in training. Only interval, binary, \nand nominal variables are accepted. If you want to use different options for different variables, \nyou can specify multiple INPUT statements."},"StatementOptions":{"StatementOption":{"StatementOptionName":"LEVEL=","StatementOptionHelp":{"#cdata":"Syntax: LEVEL=INTERVAL\n          \nSpecifies the level of measurement of the variables.\n\nYou must specify at least one interval input variable. PROC MTLEARN currently accepts only interval \ninput variables."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"INTERVAL"},"StatementOptionToolTips":{"@ToolTip1":"Specifies that the level of measurement of the variables is interval."}}}},{"StatementName":"SAVESTATE","StatementHelp":{"#cdata":"Syntax: SAVESTATE RSTORE=CAS-libref.data-table;  \n      \nThe SAVESTATE statement creates an analytic store for the model and saves it as a binary object \nin a data table. You can use the analytic store in the ASTORE procedure to score new data."},"StatementOptions":{"StatementOption":{"StatementOptionName":"RSTORE=","StatementOptionHelp":{"#cdata":"Syntax: RSTORE=CAS-libref.data-table \n          \nSpecifies a data table in which to save the analytic store for the model. CAS-libref.data-table \nis a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table \nspecifies the name of the output data table."},"StatementOptionType":"V"}}},{"StatementName":"OUTPUT","StatementHelp":{"#cdata":"Syntax: OUTPUT OUT=CAS-libref.data-table < options > ;\n      \nThe OUTPUT statement creates an output data table to contain the results of the procedure run."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"Syntax: OUT=CAS-libref.data-table\n          \nNames the output data table for PROC MTLEARN to use. You must specify this option before any other options. \n\nCAS-libref.data-table is a two-level name, where\n\n  CAS-libref refers to a collection of information that is defined in the LIBNAME statement and\n    includes the caslib, which includes a path to where the data table is to be stored, and\n    a session identifier, which defaults to the active session but which can be explicitly\n    defined in the LIBNAME statement. \n    \n  data-table specifies the name of the output data table."},"StatementOptionType":"V"},{"StatementOptionName":"COPYVAR=|COPYVARS=","StatementOptionHelp":{"#cdata":"Syntax: COPYVAR=variable | COPYVARS=(variables) \n          \nCopies one or more variables from the input data table to the output data table."},"StatementOptionType":"V"}]}},{"StatementName":"TARGET","StatementHelp":{"#cdata":"Syntax: TARGET variables <LEVEL=INTERVAL>;\n\nThe TARGET statement names the target variables. The targets must be of interval type and must \nbe different from the variables in the INPUT statement. You must specify at least one target \nvariable. Missing values in the target variables are allowed."},"StatementOptions":{"StatementOption":{"StatementOptionName":"LEVEL=","StatementOptionHelp":{"#cdata":"Syntax: LEVEL=INTERVAL\n          \nSpecifies the level of measurement of the variables.\n\nYou must specify at least one interval input variable. PROC MTLEARN currently accepts only interval \ninput variables."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"INTERVAL"},"StatementOptionToolTips":{"@ToolTip1":"Specifies that the level of measurement of the variables is interval."}}}}]}}}