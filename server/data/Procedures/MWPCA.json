{"Procedure":{"Name":"MWPCA","ProductGroup":"CAS|VIYA|DATA MINING AND MACHINE LEARNING","ProcedureHelp":{"#cdata":"Syntax: PROC MWPCA <options>; \n    ID variable; \n    INPUT variables; \n    RPCA <options>; \n    SVD <options>; \n    OUTPUT OUT=CAS-libref.data-table <options>; \n    DISPLAY <table-list> </ options>; \n    DISPLAYOUT table-spec-list </ options>; \n\nThe MWPCA procedure implements moving windows robust principal component analysis. You can use \nthis procedure to capture changes in principal components over time by using sliding windows. \nAlso, you can choose to perform robust principal component analysis on each window; that is, \nthe outliers and noise would be excluded from each window before the analysis is performed. \n\nOne important application of MWPCA is for detecting relative changes in parts of a system \ncompared to the overall system. By tracing the principal components over time, you can \ndetermine whether significant changes in the principal components can be a cause for concern."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"CENTER","ProcedureOptionHelp":{"#cdata":"Centers the observations by the mean of each column for each window."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=CAS-libref.data-table \n\nNames the input data table for PROC MWPCA to use. The default is the most recently created data \ntable. CAS-libref.data-table is a two-level name, where \n\nCAS-libref\n  refers to a collection of information that is defined in the LIBNAME statement and includes \n  the caslib, which includes a path to the data, and a session identifier, which defaults to \n  the active session but which can be explicitly defined in the LIBNAME statement.\n  \ndata-table\n  specifies the name of the input data table."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"NTHREADS=","ProcedureOptionHelp":{"#cdata":"Syntax: NTHREADS=number-of-threads \n      \nSpecifies the number of threads to use in the computation. The default value is the lesser of the \nnumber of threads available per computation node and 16."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ROBUST","ProcedureOptionHelp":{"#cdata":"Uses the robust principal component analysis (RPCA) method to obtain principal components for each \nwindow. You can specify the RPCA options in the RPCA Statement."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"STEPSIZE=","ProcedureOptionHelp":{"#cdata":"Syntax: STEPSIZE=number \n      \nSpecifies the step size, which is the number of observations between the beginnings of two consecutive \nwindows. This option is required."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"WINDOWSIZE=","ProcedureOptionHelp":{"#cdata":"Syntax: WINDOWSIZE=number \n      \nSpecifies the number of observations in each window. This option is required."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"DISPLAY","StatementHelp":{"#cdata":"Syntax: DISPLAY <table-list> </ options>;\n      \nThe DISPLAY statement enables you to specify a list of display tables to display or exclude. This statement \nis similar to the ODS SELECT, ODS EXCLUDE, and ODS TRACE statements. However, the DISPLAY statement can improve \nperformance when a large number of tables could be generated (such as in BY-group processing). The procedure \nprocesses the DISPLAY statement on a CAS server and thus sends only a subset of ODS tables to the SAS client. \nBecause ODS statements are processed on a SAS client, all the display tables generated are first sent to the \nclient and then the client creates a subset. If both DISPLAY and ODS statements are used together, the DISPLAY \nstatement takes precedence over the ODS statements."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"CASESENSITIVE","StatementOptionHelp":{"#cdata":"Performs a case-sensitive comparison of table names in the table-list to display table names when \ntables are subsetted for display. To preserve case, you must enclose table names in the table-list \nin quotation marks."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDE","StatementOptionHelp":{"#cdata":"Displays all display tables except those specified in the table-list."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDEALL","StatementOptionHelp":{"#cdata":"Suppresses display of all tables. This option takes precedence over the other options."},"StatementOptionType":"S"},{"StatementOptionName":"TRACE","StatementOptionHelp":{"#cdata":"Displays the display table names, labels, and paths."},"StatementOptionType":"S"}]}},{"StatementName":"DISPLAYOUT","StatementHelp":{"#cdata":"Syntax: DISPLAYOUT table-spec-list < / options > ;\n      \nThe DISPLAYOUT statement enables you to create CAS output tables from your displayed output. This\nstatement is similar to the ODS OUTPUT statement.\n\nThe table-spec-list specifies a list of CAS output tables to create. Each entry in the list has either a key or a\nkey=value format:\n\n  key=value specifies key as the ODS table name, path, or partial pathname, and specifies value as the\n    CAS output table name.\n  key specifies key as the ODS table name and also as the CAS output table name.\n  \nTable names and partial pathnames are discussed under the DISPLAY statement. The DISPLAYOUT\nstatement does not support regular expressions."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"NOREPLACE","StatementOptionHelp":{"#cdata":"Does not replace an existing CAS output table of the same name."},"StatementOptionType":"S"},{"StatementOptionName":"REPEATED","StatementOptionHelp":{"#cdata":"Replicates the CAS output tables on all nodes."},"StatementOptionType":"S"}]}},{"StatementName":"ID","StatementHelp":{"#cdata":"Syntax: ID variable;\n\nThe ID statement lists one variable from the data set that specifies the order of the observations \nin the input data set. This variable is not being considered as part of the analysis to compute the \nprincipal components. Also, the values of variable should be unique with common difference."},"StatementOptions":null},{"StatementName":"INPUT","StatementHelp":{"#cdata":"Syntax: INPUT variables;\n\nThe INPUT statement specifies the names of variables to be considered in the MWPCA procedure. Only numeric \nvariables are accepted. If you do not specify the INPUT Statement, all numeric variables in the input data \nset (except the one used in the ID Statement statement) are considered."},"StatementOptions":null},{"StatementName":"OUTPUT","StatementHelp":{"#cdata":"Syntax: OUTPUT OUT=CAS-libref.data-table <options>;\n\nThe OUTPUT statement creates an output data table to contain the results of the procedure run."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"Syntax: OUT=CAS-libref.data-table\n          \nNames the output data table for PROC MWPCA to use. You must specify this option before any other options. \nCAS-libref.data-table is a two-level name, where\n\n  CAS-libref refers to a collection of information that is defined in the LIBNAME statement and\n    includes the caslib, which includes a path to where the data table is to be stored, and\n    a session identifier, which defaults to the active session but which can be explicitly\n    defined in the LIBNAME statement.\n\n  data-table specifies the name of the output data table."},"StatementOptionType":"V"},{"StatementOptionName":"NPC=","StatementOptionHelp":{"#cdata":"Syntax: NPC=number \n          \nSpecifies the number of principal components to display for each window."},"StatementOptionType":"V"},{"StatementOptionName":"STANDARDPC","StatementOptionHelp":{"#cdata":"Standardizes the output principal components."},"StatementOptionType":"S"}]}},{"StatementName":"RPCA","StatementHelp":{"#cdata":"Syntax: RPCA <options>;\n\nIf you specify the ROBUST option in the PROC MWPCA statement, then you can use this statement to specify \nthe following RPCA options: \n\n  FIXEDMU \n  LAMBDA=\n  LAMBDAWEIGHT=\n  MAXITER=\n  METHOD=\n  MU=\n  TOLERANCE="},"StatementOptions":{"StatementOption":[{"StatementOptionName":"FIXEDMU","StatementOptionHelp":{"#cdata":"If specified, uses a fixed value for \u00b5 in each iteration of RPCA when METHOD=APG. Otherwise, \nis updated dynamically in each iteration."},"StatementOptionType":"S"},{"StatementOptionName":"LAMBDA=","StatementOptionHelp":{"#cdata":"Syntax: LAMBDA=number specifies a value for \u019b, where number is a positive real number."},"StatementOptionType":"V"},{"StatementOptionName":"LAMBDAWEIGHT=","StatementOptionHelp":{"#cdata":"Syntax: LAMBDAWEIGHT=number \n\nSpecifies the value of \u019bweight. The final value of the \u019b that is used in the RPCA algorithm is calculated by multiplying \n\u019bweigth by \u019b. You can use this value to control the sparsity of the sparse matrix."},"StatementOptionType":"V"},{"StatementOptionName":"MAXITER=","StatementOptionHelp":{"#cdata":"Syntax: MAXITER=number \n          \nSpecifies the maximum number of iterations before the RPCA algorithm stops, where number is a positive \ninteger. By default, MAXITER=1000."},"StatementOptionType":"V"},{"StatementOptionName":"METHOD=","StatementOptionHelp":{"#cdata":"Syntax: METHOD=ALM | APG \n          \nSpecifies the method to perform RPCA. By default, METHOD=ALM."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"ALM","@Value2":"APG"},"StatementOptionToolTips":{"@ToolTip1":"Specifies the augmented Lagrange multiplier method.","@ToolTip2":"Specifies the accelerated proximal gradient method. "}},{"StatementOptionName":"MU=","StatementOptionHelp":{"#cdata":"Syntax: MU=number \n          \nSpecifies an initial value of \u00b5 when METHOD=APG. By default, MU= 10^-3."},"StatementOptionType":"V"},{"StatementOptionName":"TOLERANCE=","StatementOptionHelp":{"#cdata":"Syntax: TOLERANCE=number \n          \nSpecifies the convergence criterion for the RPCA algorithm on each window. By default, TOLERANCE=10^-7."},"StatementOptionType":"V"}]}},{"StatementName":"SVD","StatementHelp":{"#cdata":"Syntax: SVD <option>;\n\nTo calculate the principal components for each window, a singular value decomposition (SVD) solver is called."},"StatementOptions":{"StatementOption":{"StatementOptionName":"MAXRANK=","StatementOptionHelp":{"#cdata":"Syntax: MAXRANK=number \n          \nSpecifies the maximum value for rank considered by the SVD solver. By default, number is the number \nof input variables. "},"StatementOptionType":"V"}}}]}}}