{"Procedure":{"Name":"NLIN","ProductGroup":"SAS/STAT","#comment":{},"ProcedureHelp":{"#cdata":"Syntax: PROC NLIN <options> ; \n    BOUNDS inequality <, ..., inequality> ; \n    BY variables ; \n    CONTROL variable <=values> <...variable <=values>> ; \n    DER.parameter=expression ; \n    DER.parameter.parameter=expression ; \n    ID variables ; \n    MODEL dependent=expression ; \n    OUTPUT OUT=SAS-data-set keyword=names <...keyword=names> ; \n    PARAMETERS <parameter-specification> <,..., parameter-specification> \n      < / PDATA=SAS-data-set> ; \n    PROFILE parameter < . . . parameter > < / options > ;\n    RETAIN variable <=values> <...variable <=values>> ; \n    Programming Statements ;\n\nThe NLIN procedure fits nonlinear regression models and estimates the parameters \nby nonlinear least squares or weighted nonlinear least squares. You specify the \nmodel with programming statements. This gives you great flexibility in modeling \nthe relationship between the response variable and independent (regressor) variables. \nIt does, however, require additional coding compared to model specifications in \nlinear modeling procedures such as the REG, GLM, and MIXED procedures. \n\nEstimating parameters in a nonlinear model is an iterative process that commences \nfrom starting values. You need to declare the parameters in your model and supply \ntheir initial values for the NLIN procedure. You do not need to specify derivatives \nof the model equation with respect to the parameters. Although facilities for \nspecifying first and second derivatives exist in the NLIN procedure, it is not \nrecommended that you specify derivatives this way. Obtaining derivatives from \nuser-specified expressions predates the high-quality automatic differentiator that \nis now used by the NLIN procedure."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"ALPHA=","ProcedureOptionHelp":{"#cdata":"[Syntax: ALPHA=\u03b1] \n      \nSpecifies the level of significance \u03b1 used in the construction of 100(1 - \u03b1)% \nconfidence intervals. The value must be strictly between 0 and 1; the default \nvalue of \u03b1=0.05 results in 95% intervals."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"BEST=","ProcedureOptionHelp":{"#cdata":"[Syntax: BEST=n] \n      \nRequests that PROC NLIN display the residual sums of squares only for the best n \ncombinations of possible starting values from the grid."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"BIAS","ProcedureOptionHelp":{"#cdata":"[Experimental under SAS 9.3]\n      \n Adds Box\u2019s bias and percentage bias measures to the \"Parameter Estimates\" table (Box 1971). \n Box\u2019s bias measure, along with Hougaard\u2019s measure of skweness, is used for assessing a \n parameter estimator\u2019s close-to-linear behavior (Ratkowsky 1983, 1990). Hence, it is \n useful for identifying problematic parameters (Seber and Wild 1989, sec. 4.7.1). \n \n When you specify the BIAS option, Box\u2019s bias measure (Box 1971) and the percentage \n bias (the bias expressed as a percentage of the least-squares estimator) are added \n for each parameter to the \"Parameter Estimates\" table. Ratkowsky (1983, p. 21) takes \n a percentage bias in excess of 1% to be a good rule of thumb for indicating nonlinear \n behavior."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"CONVERGE=","ProcedureOptionHelp":{"#cdata":"[Syntax: CONVERGE=c] \n      \nSpecifies the convergence criterion for PROC NLIN. For all iterative methods the \nrelative offset convergence measure of Bates and Watts is used by default to determine \nconvergence."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CONVERGEOBJ=","ProcedureOptionHelp":{"#cdata":"[Syntax: CONVERGEOBJ=c] \n      \nUses the change in the LOSS function as the convergence criterion and tunes the criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CONVERGEPARM=","ProcedureOptionHelp":{"#cdata":"[Syntax: CONVERGEPARM=c] \n      \nUses the maximum change among parameter estimates as the convergence criterion \nand tunes the criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"[Syntax: DATA=SAS-data-set] \n      \nSpecifies the input SAS data set to be analyzed by PROC NLIN. If you omit the \nDATA= option, the most recently created SAS data set is used."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"FLOW","ProcedureOptionHelp":{"#cdata":"Displays a message for each statement in the model program as it is executed. This \ndebugging option is rarely needed, and it produces large amounts of output."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"G4","ProcedureOptionHelp":{"#cdata":"Uses a Moore-Penrose inverse (-inverse) in parameter estimation. See Kennedy and Gentle (1980) \nfor details."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"HOUGAARD","ProcedureOptionHelp":{"#cdata":"Adds Hougaard\u2019s measure of skewness to the \"Parameter Estimates\" table (Hougaard 1982, 1985)."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LIST","ProcedureOptionHelp":{"#cdata":"Displays the model program and variable lists. The LIST option is a debugging feature and is not \nnormally needed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LISTCODE","ProcedureOptionHelp":{"#cdata":"Displays the derivative tables and the compiled program code. The LISTCODE option is a debugging \nfeature and is not normally needed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LISTDEP","ProcedureOptionHelp":{"#cdata":"Produces a report that lists, for each variable in the program, the variables that depend on it and \non which it depends. The LISTDEP option is a debugging feature and is not normally needed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LISTDER","ProcedureOptionHelp":{"#cdata":"Displays a table of derivatives. This table lists each nonzero derivative computed for the problem. \nThe LISTDER option is a debugging feature and is not normally needed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"MAXITER=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXITER= | MAXIT=i <n>] \n      \nSpecifies the maximum number i of iterations in the optimization process. The default \nvalues are: \n\n  o For TECH= NEWRAP, NRRIDG, TRUREG: i=50 \n  o For TECH= DBLDOG, QUANEW: i=200 \n  o For TECH= CONGRA: i=400\n  o For TECH= NMSIMP: i=1000"},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXSUBIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXSUBIT=n] \n      \nPlaces a limit on the number of step halvings. The value of MAXSUBIT must be \na positive integer and the default value is n=30."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"METHOD=","ProcedureOptionHelp":{"#cdata":"Specifies the iterative method employed by the NLIN procedure in solving the nonlinear \nleast-squares problem."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"GAUSS","@Value2":"MARQUARDT","@Value3":"NEWTON","@Value4":"GRADIENT"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies the Gauss method","@ToolTip2":"Specifies the Marquardt method.","@ToolTip3":"Specifies the Newton method.","@ToolTip4":"Specifies the gradient method"}},{"ProcedureOptionName":"NLINMEASURES","ProcedureOptionHelp":{"#cdata":"[Experimental under SAS 9.3]\n      \n Displays the global nonlinearity measures table. These measures include the maximum \n intrinsic and parameter-effects curvatures (Bates and Watts 1980), the root mean square \n (RMS) intrinsic and parameter-effects curvatures and the critical curvature value \n (Bates and Watts 1980). In addition, the variances of the ordinary and projected \n residuals are included. According to Bates and Watts (1980), both intrinisic and \n parameter-effects curvatures are deemed negligible if they are less than the critical \n curvature value."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOITPRINT","ProcedureOptionHelp":{"#cdata":"Suppresses the display of the \"Iteration History\" table."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOHALVE","ProcedureOptionHelp":{"#cdata":"Removes the restriction that the objective value must decrease at every iteration."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOPRINT","ProcedureOptionHelp":{"#cdata":"Suppresses the normal display of results."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OUTEST=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUTEST=SAS-data-set] \n      \nSpecifies an output data set that contains the parameter estimates produced \nat each iteration."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"PLOTS=","ProcedureOptionHelp":{"#cdata":"Syntax: PLOTS <(global-plot-option)> <= plot-request <(options)>> Experimental \nPLOTS <(global-plot-option)> <= (plot-request <(options)> <... plot-request <(options)>>)> \n\nControls the plots produced through ODS Graphics. When you specify only one plot request, \nyou can omit the parentheses around the plot request. \n\nThe following global-plot-options are available: \n\n  RESIDUALTYPE=RAW | PROJ | BOTH \n  specifies the residual type to be plotted in the fit diagnostics and residual plots. \n  RESIDUALTYPE=RAW requests that only the ordinary residuals be included in the plots; \n  RESIDUALTYPE=PROJ sets the choice to projected residuals. By default, both residual \n  types are included, which can also be effected by setting RESIDUALTYPE=BOTH. \n  \n  STATS=ALL | DEFAULT | NONE | (plot-statistics) \n  requests the statistics to be included in all plots, except the ResidualPlots and the \n  unpacked diagnostics plots. \n  \n  UNPACK suppresses paneling."},"ProcedureOptionType":"S|V","SubOptionsKeywords":"RESIDUALTYPE=|LEVERAGETYPE=|LABELOBS|STATS=|UNPACK|NOCLI|NOCLM|NOLIMITS|OBS=|CONTLEG|STATS=","ProcedureOptionValues":{"@Value1":"ALL","@Value2":"NONE","@Value3":"DIAGNOSTIC","@Value4":"FITPLOT|FIT","@Value5":"RESIDUALS"},"ProcedureOptionToolTips":{"@ToolTip1":"Produces all appropriate plots.","@ToolTip2":"Suppresses all plots.","@ToolTip3":"Syntax: DIAGNOSTICS <(diagnostics-options)>                                 Produces a summary panel of fit diagnostics, leverage plots, and local-influence plots. The fit  diagnostics panel includes:     o histogram of the ordinary residuals    o histogram of the projected residuals    o response variable values versus the predicted values    o expectation or mean of the ordinary residuals versus the predicted values    o ordinary and projected residuals versus the predicted values    o standardized ordinary and projected residuals versus the predicted values    o standardized ordinary and projected residuals versus the tangential leverage    o standardized ordinary and projected residuals versus the Jacobian leverage    o box plot of the ordinary and projected residuals if you specify the STATS=NONE suboption   The leverage and local influence plots are produced separately. The leverage plot is an index  plot of the tangential and Jacobian leverages (by observation), and the local-influence plot  contains the local influence by observation for a perturbation of the response variable.   You can specify the following diagnostics-options:    RESIDUALTYPE=RAW | PROJ | BOTH    specifies the residual type to be plotted in the panel.      LEVERAGETYPE=TAN | JAC | BOTH    specifies the leverage type to be plotted in the leverage plot. LEVERAGETYPE=TAN specifies    that only the tangential leverage be included in the leverage plot, and LEVERAGETYPE=JAC    specifies that only the Jacobian leverage be included.     LABELOBS    specifies that the leverage and local-infuence plots be labeled with the observation number.    Only these two plots are affected by this option.     STATS=stats-options    determines which statistics are included in the panel.      UNPACK    produces the plots in the diagnostics panel as individual plots. The statistics panel    is not included in the individual plots, even if STATS= global-plot-option or STATS=    diagnostics-option or both are specified.","@ToolTip4":"Syntax: FITPLOT | FIT <(fit-options)>   Produces, depending on the number of regressors, a scatter or contour fit plot. For a single-regressor  model, a scatter plot of the data overlaid with the regression curve, confidence, and prediction bands  is produced. For two-regressor models, a contour fit plot of the model with overlaid data is produced.  If the model contains more than two regressors, no fit plot is produced.     You can specify the following fit-options:    NOCLI    suppresses the prediction limits for single-regressor models.     NOCLM    suppresses the confidence limits for single-regressor models.     NOLIMITS    suppresses the confidence and prediction limits for single-regressor models.     OBS=GRADIENT | NONE | OUTLINE | OUTLINEGRADIENT    controls how the observations are displayed. The suboptions are as follows:       OBS=GRADIENT specifies that observations be displayed as circles colored by the observed response.      The same color gradient is used to display the fitted surface and the observations.      OBS=NONE suppresses the observations.       OBS=OUTLINE specifies that observations be displayed as circles with a border but with a      completely transparent fill.       OBS=OUTLINEGRADIENT is the same as OBS=GRADIENT except that a border is shown around each      observation. This option is useful for identifying the location observations for which the      residuals are small, because at these points the color of the observations and the color      of the surface are indistinguishable.     CONTLEG    specifies that a continous legend be included in the contour fit plot of a two-regressor model.     STATS=stats-options    determines which model fit statistics are included in the panel."}},{"ProcedureOptionName":"PRINT","ProcedureOptionHelp":{"#cdata":"Displays the result of each statement in the program as it is executed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"RHO=","ProcedureOptionHelp":{"#cdata":"[Syntax: RHO=value] \n      \nSpecifies a value that controls the step-size search. By default RHO=0.1, except when \nMETHOD=MARQUARDT."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SAVE","ProcedureOptionHelp":{"#cdata":"Specifies that, when the iteration limit is exceeded, the parameter estimates from the final \niteration be output to the OUTEST= data set."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"SIGSQ=","ProcedureOptionHelp":{"#cdata":"[Syntax: SIGSQ=value] \n      \nSpecifies a value to use as the estimate of the residual variance in lieu of the \nestimated mean-squared error."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SINGULAR=","ProcedureOptionHelp":{"#cdata":"[Syntax: SINGULAR=s] \n      \nSpecifies the singularity criterion, s, which is the absolute magnitude of the smallest \npivot value allowed when inverting the Hessian or the approximation to the Hessian."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SMETHOD=","ProcedureOptionHelp":{"#cdata":"Specifies the step-size search method. The default is SMETHOD=HALVE."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"HALVE","@Value2":"GOLDEN","@Value3":"CUBIC"},"ProcedureOptionToolTips":{"@ToolTip1":"The default method of finding the step size k is step halving.","@ToolTip2":"The step size k is determined by a golden section search.","@ToolTip3":"Performs a cubic interpolation to estimate the step size."}},{"ProcedureOptionName":"TAU=","ProcedureOptionHelp":{"#cdata":"[Syntax: TAU=value] \n      \nSpecifies a value that is used to control the step-size search. The default is TAU=1, \nexcept when METHOD=MARQUARDT."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"TOTALSS","ProcedureOptionHelp":{"#cdata":"Adds to the analysis of variance table the uncorrected total sum of squares in models that have an \n(implied) intercept, and adds the corrected total sum of squares in models that do not have an \n(implied) intercept."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"TRACE","ProcedureOptionHelp":{"#cdata":"Displays the result of each operation in each statement in the model program as it is executed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"XREF","ProcedureOptionHelp":{"#cdata":"Displays a cross-reference of the variables in the program showing where each variable is \nreferenced or given a value."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"UNCORRECTEDDF","ProcedureOptionHelp":{"#cdata":"Specifies that no degrees of freedom be lost when a bound is active."},"ProcedureOptionType":"S"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"BY","StatementHelp":{"#cdata":"Syntax: BY <DESCENDING> variable-1 <...<DESCENDING> variable-n> <NOTSORTED>; \n      \nObtains separate analyses on observations in groups defined by the BY variables."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DESCENDING","StatementOptionHelp":{"#cdata":"Specifies that the observations are sorted in descending order by the variable that immediately \nfollows the word DESCENDING in the BY statement."},"StatementOptionType":"S"},{"StatementOptionName":"NOTSORTED","StatementOptionHelp":{"#cdata":"Specifies that observations are not necessarily sorted in alphabetic or numeric order."},"StatementOptionType":"S"}]}},{"StatementName":"ID","StatementHelp":{"#cdata":"Syntax: ID variables ; \n    \nThe ID statement specifies additional variables to place in the output data set created by the \nOUTPUT statement."},"StatementOptions":null},{"StatementName":"BOUNDS","StatementHelp":{"#cdata":"Syntax: BOUNDS inequality <, ..., inequality> ;\n      \nThe BOUNDS statement restricts the parameter estimates so that they lie within specified regions."},"StatementOptions":null},{"StatementName":"CONTROL","StatementHelp":{"#cdata":"Syntax: CONTROL variable <=values> <...variable <=values>> ;\n      \nThe CONTROL statement declares control variables and specifies their values. A control variable \nis like a retained variable (see the section RETAIN Statement) except that it is retained across \niterations, and the derivative of the model with respect to a control variable is always zero."},"StatementOptions":null},{"StatementName":"DER","StatementHelp":{"#cdata":"Syntax: \n(1) DER. parameter=expression ; \n(2) DER. parameter.parameter=expression ; \n\nThe DER statement specifies first or second partial derivatives. By default, analytical derivatives \nare automatically computed. However, you can specify the derivatives yourself by using the DER.parm \nsyntax. Use the first form shown to specify first partial derivatives, and use the second form to \nspecify second partial derivatives. Note that the DER.parm syntax is retained for backward compatibility. \nThe automatic analytical derivatives are, in general, a better choice."},"StatementOptions":null},{"StatementName":"MODEL","StatementHelp":{"#cdata":"Syntax: MODEL dependent=expression ;\n      \nThe MODEL statement defines the prediction equation by declaring the dependent variable and \ndefining an expression that evaluates predicted values."},"StatementOptions":null},{"StatementName":"OUTPUT","StatementHelp":{"#cdata":"Syntax: OUTPUT OUT= SAS-data-set keyword=names <...keyword=names> </ options> ; \n\nThe OUTPUT statement specifies an output data set to contain statistics calculated for \neach observation."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"[Syntax: OUT=SAS-data-set] \n          \nSpecifies the SAS data set to be created by PROC NLIN when an OUTPUT statement \nis included."},"StatementOptionType":"RV|DV"},{"StatementOptionName":"H=","StatementOptionHelp":{"#cdata":"[Syntax: H=name] \n          \nSpecifies a variable that contains the leverage."},"StatementOptionType":"RV"},{"StatementOptionName":"L95=","StatementOptionHelp":{"#cdata":"[Syntax: L95=name] \n          \nSpecifies a variable that contains the lower bound of an approximate 95% confidence \ninterval for an individual prediction."},"StatementOptionType":"RV"},{"StatementOptionName":"L95M=","StatementOptionHelp":{"#cdata":"[Syntax: L95M=name] \n          \nSpecifies a variable that contains the lower bound of an approximate 95% \nconfidence interval for the expected value (mean)."},"StatementOptionType":"RV"},{"StatementOptionName":"LCL=","StatementOptionHelp":{"#cdata":"[Syntax: LCL=name] \n          \nSpecifies a variable that contains the lower bound of an approximate 100(1 - \u03b1)% \nconfidence interval for an individual prediction."},"StatementOptionType":"RV"},{"StatementOptionName":"LCLM=","StatementOptionHelp":{"#cdata":"[Syntax: LCLM=name] \n          \nSpecifies a variable that contains the lower bound of an approximate 100(1 - \u03b1)% \nconfidence interval for the expected value (mean)."},"StatementOptionType":"RV"},{"StatementOptionName":"PARMS=","StatementOptionHelp":{"#cdata":"[Syntax: PARMS==name] \n          \nSpecifies variables in the output data set that contains parameter estimates."},"StatementOptionType":"RV"},{"StatementOptionName":"PREDICTED=|P=","StatementOptionHelp":{"#cdata":"[Syntax: PREDICTED==name] \n          \nSpecifies a variable in the output data set that contains the predicted values \nof the dependent variable."},"StatementOptionType":"RV"},{"StatementOptionName":"RESIDUAL=|R=","StatementOptionHelp":{"#cdata":"[Syntax: RESIDUAL==name] \n          \nSpecifies a variable in the output data set that contains the residuals (observed \nminus predicted values)."},"StatementOptionType":"RV"},{"StatementOptionName":"SSE=|ESS=","StatementOptionHelp":{"#cdata":"[Syntax: SSE==name] \n          \nSpecifies a variable in the output data set that contains the residual sum of \nsquares finally determined by the procedure."},"StatementOptionType":"RV"},{"StatementOptionName":"STDI=","StatementOptionHelp":{"#cdata":"[Syntax: STDI=name] \n          \nSpecifies a variable that contains the standard error of the individual predicted value."},"StatementOptionType":"RV"},{"StatementOptionName":"STDP=","StatementOptionHelp":{"#cdata":"[Syntax: STDP=name] \n          \nSpecifies a variable that contains the standard error of the mean predicted value."},"StatementOptionType":"RV"},{"StatementOptionName":"STDR=","StatementOptionHelp":{"#cdata":"[Syntax: STDR=name] \n          \nSpecifies a variable that contains the standard error of the residual."},"StatementOptionType":"RV"},{"StatementOptionName":"STUDENT=","StatementOptionHelp":{"#cdata":"[Syntax: STUDENT=name] \n          \nSpecifies a variable that contains the studentized residuals. These are residuals \ndivided by their estimated standard deviation."},"StatementOptionType":"RV"},{"StatementOptionName":"U95=","StatementOptionHelp":{"#cdata":"[Syntax: U95=name] \n          \nSpecifies a variable that contains the upper bound of an approximate 95% confidence \ninterval for an individual prediction."},"StatementOptionType":"RV"},{"StatementOptionName":"U95M=","StatementOptionHelp":{"#cdata":"[Syntax: U95M=name] \n          \nSpecifies a variable that contains the upper bound of an approximate 95% confidence \ninterval for the expected value (mean)."},"StatementOptionType":"RV"},{"StatementOptionName":"UCLM=","StatementOptionHelp":{"#cdata":"[Syntax: UCLM=name] \n          \nSpecifies a variable that contains the upper bound of an approximate 100(1 - \u03b1)% confidence \ninterval for the expected value (mean)."},"StatementOptionType":"RV"},{"StatementOptionName":"UCL=","StatementOptionHelp":{"#cdata":"[Syntax: UCL=name] \n          \nSpecifies a variable that contains the upper bound of an approximate 100(1 - \u03b1)% confidence \ninterval an individual prediction."},"StatementOptionType":"RV"},{"StatementOptionName":"WEIGHT=","StatementOptionHelp":{"#cdata":"[Syntax: WEIGHT=name] \n          \nSpecifies a variable in the output data set that contains values of the special \nvariable _WEIGHT_."},"StatementOptionType":"RV"},{"StatementOptionName":"ALPHA=","StatementOptionHelp":{"#cdata":"[Syntax: ALPHA=\u03b1] \n          \nSpecifies the level of significance \u03b1 for 100( 1- \u03b1)% confidence intervals."},"StatementOptionType":"V"},{"StatementOptionName":"DER","StatementOptionHelp":{"#cdata":"Saves the first derivatives of the model with respect to the parameters to the OUTPUT data set."},"StatementOptionType":"S"}]}},{"StatementName":"PARAMETERS|PARMS","StatementHelp":{"#cdata":"Syntax: PARAMETERS <parameter-specification> <,..., parameter-specification> </ PDATA=SAS-data-set> ; \n\nA PARAMETERS (or PARMS) statement is required. The purpose of this statement is to provide \nstarting values for the NLIN procedure."},"StatementOptions":{"StatementOption":{"StatementOptionName":"PDATA=","StatementOptionHelp":{"#cdata":"[Syntax: PDATA=SAS-data-set] \n          \nEnables you to assign starting values for parameters through a SAS data set. The \ndata set must contain at least two variables that identify the parameter and contain \nstarting values, respectively. The character variable identifying the parameters must \nbe named Parameter or Parm. The numeric variable containing the starting value must \nbe named Estimate or Est. This enables you, for example, to use the contents of the \n\"ParameterEstimates\" table from one PROC NLIN run to supply starting values for a \nsubsequent run."},"StatementOptionType":"DV"}}},{"StatementName":"PROFILE","StatementHelp":{"#cdata":"Syntax: PROFILE parameter < . . . parameter > < / options > ;\n      \nA PROFILE statement selects parameters for profiling to assess their nonlinear characteristics. It can also\ngauge the influence of each observation on the selected parameters. To produce the plots that are controlled\nby the PROFILE statement, ODS Graphics must be enabled. PROC NLIN ignores PROFILE statements for\nnonconvergent and singular models."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ALL","StatementOptionHelp":{"#cdata":"produces all appropriate plots for the parameters that are listed in the PROFILE statement. This option\noverrides all other options. If the PROFDATA= option is specified, the values of the corresponding\nstatistics are written to the data set."},"StatementOptionType":"S"},{"StatementOptionName":"CONFCURV","StatementOptionHelp":{"#cdata":"Produces confidence curves for each parameter listed in the PROFILE statement. If the PROFDATA=\noption is specified, the values of the corresponding statistics are written to the data set."},"StatementOptionType":"S"},{"StatementOptionName":"JACKKNIFE","StatementOptionHelp":{"#cdata":"Produces, for each parameter listed in the PROFILE statement, plots of absolute relative percentage\nchange in the value of the parameter that results from a fit to a jackknife-resampled datum versus\nobservation number. The jackknife resampling is performed with a leave-one-out method. If the\nPROFDATA= option is specified, the values of the corresponding statistics are written to the data\nset."},"StatementOptionType":"S"},{"StatementOptionName":"PROFDATA=","StatementOptionHelp":{"#cdata":"Syntax:  PROFDATA=SAS-data-set \n          \nSpecifies the SAS data set to be created by PROC NLIN when a PROFILE statement is included."},"StatementOptionType":"V"},{"StatementOptionName":"RANGE=","StatementOptionHelp":{"#cdata":"Syntax:  RANGE=\u03b2f to \u03b2t by \u03b2b \n          \nSpecifies a profiling range for each parameter listed in the PROFILE statement. \u03b2f , \u03b2t and \u03b2b represent\nthe starting, final, and consecutive incremental values of the range in terms of the standard errors of the\nparameters to be profiled. If you do not specify the RANGE= option, PROC NLIN uses \u20132, 2, and\n0.2 as default values for \u03b2f , \u03b2t , and \u03b2b, respectively."},"StatementOptionType":"V"},{"StatementOptionName":"TPLOT","StatementOptionHelp":{"#cdata":"Produces profile t plots for each parameter listed in the PROFILE statement. If the PROFDATA=\noption is specified, the values of the corresponding statistics are written to the data set."},"StatementOptionType":"S"}]}},{"StatementName":"RETAIN","StatementHelp":{"#cdata":"Syntax: RETAIN  variable <=values> <...variable <=values>> ;\n      \nThe RETAIN statement declares retained variables and specifies their values. A \nretained variable is like a control variable (see the CONTROL Statement) except \nthat it is retained only within iterations. An iteration involves a single pass \nthrough the data set."},"StatementOptions":null},{"StatementName":"CALL","StatementHelp":{"#cdata":"Syntax: CALL name ( argument-1 [, ...argument-n] );\n\nThe CALL statement invokes the named library subroutine. The values that are determined for \neach argument expression are passed to the subroutine when the subroutine is invoked. The \nsubroutine can update the values of PROC OPTMODEL parameters and variables when an argument \nis an identifier-expression."},"StatementOptions":null},{"StatementName":"PUT","StatementHelp":{"#cdata":"Syntax: PUT print-item ...< @ > < @@ > ;\n\nThe PUT statement writes text data to the current output file."},"StatementOptions":{"StatementOption":{"StatementOptionName":"_PAGE_","StatementOptionHelp":{"#cdata":"Outputs any pending line data and moves to the top of the next page."},"StatementOptionType":"S"}}},{"StatementName":"ARRAY","StatementHelp":{"#cdata":"Syntax: ARRAY array-name { subscript } <$><length> \n  <array-elements> <(initial-value-list)>; \n  \nDefines the elements of an array."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"_ALL_","StatementOptionHelp":{"#cdata":"Specifies all variables."},"StatementOptionType":"S"},{"StatementOptionName":"_TEMPORARY_","StatementOptionHelp":{"#cdata":"Creates a list of temporary data elements."},"StatementOptionType":"S"},{"StatementOptionName":"_NUMERIC_","StatementOptionHelp":{"#cdata":"Specifies all numeric variables."},"StatementOptionType":"S"},{"StatementOptionName":"_CHARACTER_","StatementOptionHelp":{"#cdata":"Specifies all character variables."},"StatementOptionType":"S"}]}},{"StatementName":"DO","StatementHelp":{"#cdata":"Specifies a group of statements to be executed as a unit.\n      \nSyntax: \n(1) DO; \n...more SAS statements...  \nEND;  \n\n(2) DO index-variable=specification-1 <, ... specification-n>; \n... more SAS statements ...  \nEND;  \n\n(3) DO UNTIL (expression); \n...more SAS statements...  \nEND \n\n(4) DO WHILE (expression); \n...more SAS statements...  \nEND;"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"UNTIL","StatementOptionHelp":{"#cdata":"Executes statements in a DO loop repetitively until a condition is true.\n          \nSyntax: \nDO UNTIL (expression); \n...more SAS statements...  \nEND"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Executes statements in a DO-loop repetitively while a condition is true. \n          \nSyntax: \nDO WHILE (expression); \n...more SAS statements...  \nEND;"},"StatementOptionType":"S"},{"StatementOptionName":"OVER","StatementOptionType":"S"},{"StatementOptionName":"TO","StatementOptionHelp":{"#cdata":"Separates the start and stop integers or expressions that control the number of times the \nportion of the DATA step between the iterative DO and END statements is processed."},"StatementOptionType":"S"},{"StatementOptionName":"BY","StatementOptionHelp":{"#cdata":"Precedes an increment integer (other than 0) or an expression that generates an integer to be \nadded to the value of the index variable in each iteration of the DO loop."},"StatementOptionType":"S"}]}},{"StatementName":"END","StatementHelp":{"#cdata":"Syntax: END; \n      \nEnds a DO group or SELECT group processing."},"StatementOptions":null},{"StatementName":"GOTO","StatementHelp":{"#cdata":"Syntax: GOTO label;\n      \nJumps to a new statement."},"StatementOptions":null},{"StatementName":"IF","StatementHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions. \n\nSyntax: \n(1) IF expression THEN statement; \n    <ELSE statement;> \n(2) IF condition;"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"DO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"WHEN","StatementOptionHelp":{"#cdata":"WHEN statement in an IF-THEN-WHEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"OUTPUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"GO TO|GOTO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct. \n          \nSyntax: ... GO TO label; | ... GOTO label;\n      \nJumps to a new statement."},"StatementOptionType":"S"},{"StatementOptionName":"PUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"STOP","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct. \n          \nStops execution of the current DATA step."},"StatementOptionType":"S"},{"StatementOptionName":"SET","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct.\n          \nSyntax: SET <SAS-data-set(s) <(data-set-options(s) )>>; \n      \nReads an observation from one or more SAS data sets."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"ELSE","StatementHelp":{"#cdata":"If the condition in a IF-THEN statement is false and an ELSE statement is present, then the ELSE \naction is carried out."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"IF","StatementOptionHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions."},"StatementOptionType":"S"},{"StatementOptionName":"DO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN-ELSE construct."},"StatementOptionType":"S"},{"StatementOptionName":"OUTPUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN-ELSE construct."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"LINK","StatementHelp":{"#cdata":"Syntax: LINK statement-label; \n      \nDirects program execution immediately to the statement label that is specified and, if followed \nby a RETURN statement, returns execution to the statement that follows the LINK statement."},"StatementOptions":null},{"StatementName":"RETURN","StatementHelp":{"#cdata":"Syntax: RETURN; \n      \nStops executing statements at the current point in the DATA step and returns to a predetermined \npoint in the step."},"StatementOptions":null},{"StatementName":"SELECT","StatementHelp":{"#cdata":"Executes one of several statements or groups of statements.\n      \nSyntax: \nSELECT <(select-expression)>;  \n  WHEN-1 (when-expression-1 <..., when-expression-n>) statement;  \n    <... WHEN-n (when-expression-1 <..., when-expression-n>) statement;>  \n      <OTHERWISE statement;> \nEND;"},"StatementOptions":null}],"#comment":{}}}}