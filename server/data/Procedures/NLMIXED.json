{"Procedure":{"Name":"NLMIXED","ProductGroup":"SAS/STAT","ProcedureHelp":{"#cdata":"Syntax: PROC NLMIXED <options> ; \n    ARRAY array specification ; \n    BOUNDS boundary constraints ; \n    BY variables ; \n    CONTRAST \u2019label\u2019 expression <,expression><options> ; \n    ESTIMATE \u2019label\u2019 expression <options> ; \n    ID names ; \n    MODEL model specification ; \n    PARMS parameters and starting values ; \n    PREDICT expression OUT=SAS-data-set <options> ; \n    RANDOM random effects specification ; \n    REPLICATE variable ; \n    Program statements ; \n\nThe NLMIXED procedure fits nonlinear mixed models\u2014-that is, models in which both fixed and \nrandom effects enter nonlinearly. These models have a wide variety of applications, two of \nthe most common being pharmacokinetics and overdispersed binomial data. PROC NLMIXED enables \nyou to specify a conditional distribution for your data (given the random effects) having \neither a standard form (normal, binomial, Poisson) or a general distribution that you code \nusing SAS programming statements. \n\nPROC NLMIXED fits nonlinear mixed models by maximizing an approximation to the likelihood \nintegrated over the random effects. Different integral approximations are available, the \nprincipal ones being adaptive Gaussian quadrature and a first-order Taylor series approximation. \nA variety of alternative optimization techniques are available to carry out the maximization; \nthe default is a dual quasi-Newton algorithm."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"ABSCONV=|ABSTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSCONV= | ABSTOL=r] \n      \nSpecifies an absolute function convergence criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSFCONV=|ABSFTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSFCONV=r <n>  | ABSFTOL=r<n>] \n      \nSpecifies an absolute function convergence criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSGCONV=|ABSGTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSGCONV= | ABSGTOL=r <n>] \n      \nSpecifies an absolute gradient convergence criterion. Termination requires the maximum \nabsolute gradient element to be small."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSXCONV=|ABSXTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSXCONV= | ABSXTOL=r <n>] \n      \nSpecifies the absolute parameter convergence criterion. Termination requires a small \nEuclidean distance between successive parameter vectors."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ALPHA=","ProcedureOptionHelp":{"#cdata":"[Syntax: ALPHA=\u03b1] \n      \nSpecifies the \u03b1 level to be used in computing confidence limits. The default value is 0.05."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ASINGULAR=|ASING=","ProcedureOptionHelp":{"#cdata":"[Syntax: ASINGULAR | ASING=r] \n      \nSpecifies an absolute singularity criterion r, r > 0, for the inversion of the \ninformation matrix, which is needed to compute the covariance matrix."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CFACTOR=","ProcedureOptionHelp":{"#cdata":"[Syntax: CFACTOR=f] \n      \nSpecifies a multiplication factor f for the estimated covariance matrix of the \nparameter estimates."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"COV","ProcedureOptionHelp":{"#cdata":"Requests the approximate covariance matrix for the parameter estimates."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"CORR","ProcedureOptionHelp":{"#cdata":"Requests the approximate correlation matrix for the parameter estimates."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"COVSING=","ProcedureOptionHelp":{"#cdata":"[Syntax: COVSING=r > 0] \n      \nSpecifies a nonnegative threshold that determines whether the eigenvalues of a \nsingular Hessian matrix are considered to be zero."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"DAMPSTEP=|DS=","ProcedureOptionHelp":{"#cdata":"[Syntax: DAMPSTEP | DS  <=r>] \n      \nSpecifies that the initial step-size value a\u2070 for each line search (used by the \nQUANEW, CONGRA, or NEWRAP technique) cannot be larger than r times the step-size value \nused in the former iteration."},"ProcedureOptionType":"S|V"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"[Syntax: DATA=SAS-data-set] \n      \nSpecifies the input data set."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"DF=","ProcedureOptionHelp":{"#cdata":"[Syntax: DF=d] \n      \nSpecifies the degrees of freedom to be used in computing p values and confidence limits. \nThe default value is the number of subjects minus the number of random effects for random \neffects models, and the number of observations otherwise."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"DIAHES","ProcedureOptionHelp":{"#cdata":"Specifies that only the diagonal of the Hessian is used."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"EBOPT","ProcedureOptionHelp":{"#cdata":"Requests that a more comprehensive optimization be carried out if the default empirical \nBayes optimization fails to converge."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"EBSSFRAC=","ProcedureOptionHelp":{"#cdata":"[Syntax: EBSSFRAC=r > 0] \n      \nSpecifies the step-shortening fraction to be used while computing empirical Bayes \nestimates of the random effects. The default value is 0.8."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"EBSSTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: EBSSTOL=r \u2265 0] \n      \nSpecifies the objective function tolerance for determining the cessation of \nstep-shortening while computing empirical Bayes estimates of the random effects. \nThe default value is r = 1E-8."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"EBSTEPS=","ProcedureOptionHelp":{"#cdata":"[Syntax: EBSTEPS=n \u2265 0] \n      \nSpecifies the maximum number of Newton steps for computing empirical Bayes \nestimates of random effects. The default value is n=50."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"EBSUBSTEPS=","ProcedureOptionHelp":{"#cdata":"[Syntax: EBSUBSTEPS=n \u2265 0] \n      \nSpecifies the maximum number of step-shortenings for computing empirical \nBayes estimates of random effects. The default value is n=20."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"EBTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: EBTOL=r \u2265 0] \n      \nSpecifies the convergence tolerance for empirical Bayes estimation."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"EBZSTART","ProcedureOptionHelp":{"#cdata":"Requests that a zero be used as starting values during empirical Bayes estimation."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"ECOV","ProcedureOptionHelp":{"#cdata":"Requests the approximate covariance matrix for all expressions specified in ESTIMATE statements."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"ECORR","ProcedureOptionHelp":{"#cdata":"Requests the approximate correlation matrix for all expressions specified in ESTIMATE statements."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"EDER","ProcedureOptionHelp":{"#cdata":"Requests the derivatives of all expressions specified in ESTIMATE statements with respect \nto each of the model parameters."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"EMPIRICAL","ProcedureOptionHelp":{"#cdata":"Requests that the covariance matrix of the parameter estimates be computed as a \nlikelihood-based empirical (\"sandwich\") estimator."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"FCONV=|FTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: FCONV=r<[n]> | FTOL=r<[n]>] \n      \nSpecifies the relative function convergence criterion. The optional integer value\nn specifies the number of successive iterations for which the criterion must be \nsatisfied before the process can terminate."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"FCONV2=|FTOL2=","ProcedureOptionHelp":{"#cdata":"[Syntax: FCONV2=r<[n]> | FTOL2=r<[n]>] \n      \nSpecifies a second function convergence criterion. The optional integer value \nn specifies the number of successive iterations for which the criterion must be \nsatisfied before the process can terminate."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FD=","ProcedureOptionHelp":{"#cdata":"Specifies that all derivatives be computed using finite difference approximations."},"ProcedureOptionType":"S|V","ProcedureOptionValues":{"@Value1":"CENTRAL","@Value2":"FORWARD","@Value3":"100","@Value4":"r"},"ProcedureOptionToolTips":{"@ToolTip1":"Uses central differences.","@ToolTip2":"Uses forward differences.","@ToolTip3":"Is equivalent to specifying FD (without the equal sign)","@ToolTip4":"Uses central differences for the initial and final evaluations of the gradient and for the Hessian."}},{"ProcedureOptionName":"FDHESSIAN=|FDHES=|FDH=","ProcedureOptionHelp":{"#cdata":"Specifies that second-order derivatives be computed using finite difference approximations \nbased on evaluations of the gradients."},"ProcedureOptionType":"S|V","ProcedureOptionValues":{"@Value1":"FORWARD","@Value2":"CENTRAL"},"ProcedureOptionToolTips":{"@ToolTip1":"Uses forward differences.","@ToolTip2":"Uses central differences."}},{"ProcedureOptionName":"FDIGITS=","ProcedureOptionHelp":{"#cdata":"[Syntax: FDIGITS=r] \n      \nSpecifies the number of accurate digits in evaluations of the objective function."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FLOW","ProcedureOptionHelp":{"#cdata":"Displays a message for each statement in the model program as it is executed. This debugging \noption is very rarely needed and produces voluminous output."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"FSIZE=","ProcedureOptionHelp":{"#cdata":"[Syntax:FSIZE=r] \n      \nSpecifies the FSIZE parameter of the relative function and relative gradient termination \ncriteria. The default value is r=0."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"G4=","ProcedureOptionHelp":{"#cdata":"[Syntax: G4=n > 0] \n      \nSpecifies a dimension to determine the type of generalized inverse to use when the \napproximate covariance matrix of the parameter estimates is singular. The default \nvalue of n is 60."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"GCONV=|GTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: GCONV=r<[n]> | GTOL=r<[n]>] \n      \nSpecifies the relative gradient convergence criterion. The optional integer value \nn specifies the number of successive iterations for which the criterion must be \nsatisfied before the process can terminate."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"HESCAL=|HS=","ProcedureOptionHelp":{"#cdata":"Specifies the scaling version of the Hessian or crossproduct Jacobian matrix used in NRRIDG, \nTRUREG, LEVMAR, NEWRAP, or DBLDOG optimization."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"0","@Value2":"1","@Value3":"2","@Value4":"3"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies that no scaling is done.","@ToolTip2":"Specifies the Mor\u00e9 (1978) scaling update","@ToolTip3":"Specifies the Dennis, Gay, and Welsch (1981) scaling update","@ToolTip4":"Specifies that di is reset in each iteration"}},{"ProcedureOptionName":"HESS","ProcedureOptionHelp":{"#cdata":"Requests the display of the final Hessian matrix after optimization."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"INHESSIAN=|INHESS=","ProcedureOptionHelp":{"#cdata":"[Syntax: INHESSIAN<=r>] \n      \nSpecifies how the initial estimate of the approximate Hessian is defined for the \nquasi-Newton techniques QUANEW and DBLDOG."},"ProcedureOptionType":"S|V"},{"ProcedureOptionName":"INSTEP=|SALPHA=|RADIUS=","ProcedureOptionHelp":{"#cdata":"[Syntax: INSTEP=r] \n      \nReduces the length of the first trial step during the line search of the first iterations."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ITDETAILS","ProcedureOptionHelp":{"#cdata":"Requests a more complete iteration history, including the current values of the parameter \nestimates, their gradients, and additional optimization statistics."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LCDEACT=|LCD=","ProcedureOptionHelp":{"#cdata":"[Syntax: LCDEACT= | LCD=r] \n      \nSpecifies a threshold r for the Lagrange multiplier that decides whether \nan active inequality constraint remains active or can be deactivated."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LCEPSILON=|LCEPS=|LCE=","ProcedureOptionHelp":{"#cdata":"[Syntax: LCEPSILON= | LCEPS= | LCE=r] \n      \nSpecifies the range r, r \u2265 0, for active and violated boundary and linear constraints."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LCSINGULAR=|LCSING=|LCS=","ProcedureOptionHelp":{"#cdata":"[Syntax: LCSINGULAR= | LCSING= | LCS=r] \n      \nSpecifies a criterion r, r \u2265 0, used in the update of the QR decomposition that \ndecides whether an active constraint is linearly dependent on a set of other \nactive constraints."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LINESEARCH=|LIS=|SMETHOD=|SM=","ProcedureOptionHelp":{"#cdata":"[Syntax: LINESEARCH | LIS | SMETHOD | SM=i] \n      \nSpecifies the line-search method for the CONGRA, QUANEW, and NEWRAP optimization techniques."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"1","@Value2":"2","@Value3":"3","@Value4":"4","@Value5":"5","@Value6":"6","@Value7":"7","@Value8":"8"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies a line-search method that needs the same number of function and gradient calls for cubic  interpolation and cubic extrapolation;  this method is similar to one used by the Harwell subroutine library.","@ToolTip2":"Specifies a line-search method that needs more function calls than gradient calls for quadratic and  cubic interpolation and cubic extrapolation; this method is implemented as shown in Fletcher (1987) and can be modified to an exact line search by using the LSPRECISION= option.","@ToolTip3":"Specifies a line-search method that needs the same number of function and gradient calls for cubic  interpolation and cubic extrapolation; this method is implemented as shown in Fletcher (1987) and can be modified to an exact line search by using the LSPRECISION= option.","@ToolTip4":"Specifies a line-search method that needs the same number of function and gradient calls for stepwise  extrapolation and cubic interpolation","@ToolTip5":"Specifies a line-search method that is a modified version of LIS=4.","@ToolTip6":"Specifies golden section line search (Polak 1971), which uses only function values for linear approximation.","@ToolTip7":"Specifies bisection line search (Polak 1971), which uses only function values for linear approximation.","@ToolTip8":"Specifies Armijo line-search technique (Polak 1971), which uses only function values for linear approximation."}},{"ProcedureOptionName":"LIST","ProcedureOptionHelp":{"#cdata":"Displays the model program and variable lists. The LIST option is a debugging feature \nand is not normally needed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LISTCODE","ProcedureOptionHelp":{"#cdata":"Displays the derivative tables and the compiled program code. The LISTCODE option is a \ndebugging feature and is not normally needed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LISTDEP","ProcedureOptionHelp":{"#cdata":"Produces a report that lists, for each variable in the program, the variables that depend on \nit and on which it depends. The LISTDEP option is a debugging feature and is not normally \nneeded."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LISTDER","ProcedureOptionHelp":{"#cdata":"Displays a table of derivatives. This table lists each nonzero derivative computed for the \nproblem. The LISTDER option is a debugging feature and is not normally needed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LOGNOTE","ProcedureOptionHelp":{"#cdata":"[Syntax: LOGNOTE<=n>] \n      \nWrites periodic notes to the log that describe the current status of computations."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LSPRECISION=|LSP=|SPRECISION=|SP=","ProcedureOptionHelp":{"#cdata":"[Syntax: LSPRECISION=r | LSP=r | SPRECISION=r | SP=r] \n      \nSpecifies the degree of accuracy that should be obtained by the line-search algorithms \nLIS=2 and LIS=3. The default LSPRECISION= values are: \n\n  o For TECH=QUANEW UPDATE=DBFGS, BFGS: r = 0.4\n  o For TECH=QUANEW UPDATE=DDFP, DFP: r = 0.06 \n  o For TECH=CONGRA UPDATE=all r = 0.1\n  o For TECH=NEWRAP NO UPDATE: r = 0.9"},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXFUNC=|MAXFU=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXFUNC=i | MAXFU=i] \n      \nSpecifies the maximum number i of function calls in the optimization process. \nThe default values are: \n\n  o For TECH= NEWRAP, NRRIDG, TRUREG: i=125 \n  o For TECH= DBLDOG, QUANEW: i=500 \n  o For TECH= CONGRA: i=1000\n  o For TECH= NMSIMP: i=3000"},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXITER=|MAXIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXITER= | MAXIT=i <n>] \n      \nSpecifies the maximum number i of iterations in the optimization process. \nThe default values are: \n\n  o For TECH= NEWRAP, NRRIDG, TRUREG: i=50 \n  o For TECH= DBLDOG, QUANEW: i=200 \n  o For TECH= CONGRA: i=400\n  o For TECH= NMSIMP: i=1000"},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXSTEP=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXSTEP=r<n>] \n      \nSpecifies an upper bound for the step length of the line-search algorithms during \nthe first n iterations."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXTIME=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXTIME=r] \n      \nRequires the CPU time to be no larger than . The default value of the MAXTIME= option \nis the largest double floating-point number on your computer."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"METHOD=","ProcedureOptionHelp":{"#cdata":"Specifies the method for approximating the integral of the likelihood over the random effects."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"FIRO","@Value2":"GAUSS","@Value3":"HARDY","@Value4":"ISAMP"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies the first-order method of Beal and Sheiner (1982).","@ToolTip2":"Specifies adaptive Gauss-Hermite quadrature (Pinheiro and Bates 1995).","@ToolTip3":"Specifies Hardy quadrature based on an adaptive trapezoidal rule. This method is available only for  one-dimensional integrals; that is, you must specify only one random effect.","@ToolTip4":"Specifies adaptive importance sampling (Pinheiro and Bates 1995)."}},{"ProcedureOptionName":"MINITER=|MINIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: MINITER= | MINIT=i] \n      \nSpecifies the minimum number of iterations. The default value is 0."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MSINGULAR=|MSING=","ProcedureOptionHelp":{"#cdata":"[Syntax: MSINGULAR= | MSING=r > 0] \n      \nSpecifies a relative singularity criterion for the computation of the inertia \n(number of positive, negative, and zero eigenvalues) of the Hessian and its \nprojected forms."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NOAD","ProcedureOptionHelp":{"#cdata":"Requests that the Gaussian quadrature be nonadaptive; that is, the quadrature points \nare centered at zero for each of the random effects and the current random-effects \nvariance matrix is used as the scale matrix."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOADSCALE","ProcedureOptionHelp":{"#cdata":"Requests nonadaptive scaling for adaptive Gaussian quadrature; that is, the quadrature \npoints are centered at the empirical Bayes estimates for the random effects, but the \ncurrent random-effects variance matrix is used as the scale matrix."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OPTCHECK","ProcedureOptionHelp":{"#cdata":"[Syntax: OPTCHECK<=r>] \n      \nComputes the function values f(\u03b8i) of a grid of points \u03b8i in a ball of radius of r about \u03b8."},"ProcedureOptionType":"S|V"},{"ProcedureOptionName":"OUTQ=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUTQ=SAS-data-set] \n      \nSpecifies an output data set containing the quadrature points used for numerical integration."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"QFAC=","ProcedureOptionHelp":{"#cdata":"[Syntax: QFAC=r > 0] \n      \nSpecifies the additive factor used to adaptively search for the number of quadrature points."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"QMAX=","ProcedureOptionHelp":{"#cdata":"[Syntax: QMAX=r > 0] \n      \nSpecifies the maximum number of quadrature points permitted before the adaptive search \nis aborted."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"QPOINTS=","ProcedureOptionHelp":{"#cdata":"[[Syntax: QPOINTS=n > 0] \n      \nSpecifies the number of quadrature points to be used during evaluation of integrals."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"QSCALEFAC=","ProcedureOptionHelp":{"#cdata":"[[Syntax: QSCALEFAC=r > 0] \n      \nSpecifies a multiplier for the scale matrix used during quadrature calculations. \nThe default value is 1.0."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"QTOL=","ProcedureOptionHelp":{"#cdata":"[[Syntax: QTOL=r > 0] \n      \nSpecifies the tolerance used to adaptively select the number of quadrature points."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"RESTART=|REST=","ProcedureOptionHelp":{"#cdata":"[Syntax: RESTART= | REST=i > 0] \n      \nSpecifies that the QUANEW or CONGRA algorithm is restarted with a steepest descent/ascent \nsearch direction after at most i iterations, i > 0."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SEED=","ProcedureOptionHelp":{"#cdata":"[[Syntax: SEED=i] \n      \nSpecifies the random number seed for METHOD=ISAMP."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SINGCHOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: SINGCHOL=r > 0] \n      \nSpecifies the singularity criterion r for Cholesky roots of the random-effects \nvariance matrix and scale matrix for adaptive Gaussian quadrature."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SINGHESS=","ProcedureOptionHelp":{"#cdata":"[[Syntax: SINGHESS=r > 0] \n      \nSpecifies the singularity criterion r for the inversion of the Hessian matrix. \nThe default value is 1E-8."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SINGSWEEP=","ProcedureOptionHelp":{"#cdata":"[Syntax: SINGSWEEP=r > 0] \n      \nSpecifies the singularity criterion r for inverting the variance matrix in the \nfirst-order method and the empirical Bayes Hessian matrix."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SINGVAR=","ProcedureOptionHelp":{"#cdata":"[Syntax: SINGVAR=r > 0] \n      \nSpecifies the singularity criterion r below which statistical variances are considered \nto equal zero."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"START","ProcedureOptionHelp":{"#cdata":"Requests that the gradient of the log likelihood at the starting values be displayed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"SUBGRADIENT=|SUBGRAD=","ProcedureOptionHelp":{"#cdata":"[Syntax: SUBGRADIENT=SAS-data-set] \n      \nSpecifies a SAS data set to save in models with RANDOM statement the subject-specific \ngradients of the integrated, marginal log-likelihood with respect to all parameters."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"TECHNIQUE=|TECH=","ProcedureOptionHelp":{"#cdata":"[Syntax: TECHNIQUE= | TECH=value] \n      \nSpecifies the optimization technique."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"CONGRA","@Value2":"DBLDOG","@Value3":"NMSIMP","@Value4":"NONE","@Value5":"NEWRAP","@Value6":"NRRIDG","@Value7":"QUANEW","@Value8":"TRUREG"},"ProcedureOptionToolTips":{"@ToolTip1":"Performs a conjugate-gradient optimization, which can be more precisely specified with the UPDATE=  option and modified with the LINESEARCH= option.","@ToolTip2":"Performs a version of double-dogleg optimization, which uses the gradient to update an approximation  of the Cholesky factor of the Hessian.","@ToolTip3":"Performs a Nelder-Mead simplex optimization.","@ToolTip4":"Does not perform any optimization.","@ToolTip5":"Performs a Newton-Raphson optimization combining a line-search algorithm with ridging.","@ToolTip6":"Performs a Newton-Raphson optimization with ridging.","@ToolTip7":"Performs a quasi-Newton optimization, which can be defined more precisely with the UPDATE= option and  modified with the LINESEARCH= option.","@ToolTip8":"Performs a trust region optimization."}},{"ProcedureOptionName":"TRACE","ProcedureOptionHelp":{"#cdata":"Displays the result of each operation in each statement in the model program as it is executed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"UPDATE=|UPD=","ProcedureOptionHelp":{"#cdata":"Specifies the update method for the quasi-Newton, double-dogleg, or conjugate-gradient \noptimization technique."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"BFGS","@Value2":"DBFGS","@Value3":"DDFP","@Value4":"DFP","@Value5":"PB","@Value6":"FR","@Value7":"PR","@Value8":"CD"},"ProcedureOptionToolTips":{"@ToolTip1":"Performs the original Broyden, Fletcher, Goldfarb, and Shanno (BFGS) update of the  inverse Hessian matrix.","@ToolTip2":"Performs the dual BFGS update of the Cholesky factor of the Hessian matrix. This is the  default update method.","@ToolTip3":"Performs the dual Davidon, Fletcher, and Powell (DFP) update of the Cholesky factor  of the Hessian matrix.","@ToolTip4":"Performs the original DFP update of the inverse Hessian matrix.","@ToolTip5":"Performs the automatic restart update method of Powell (1977) and Beale (1972).","@ToolTip6":"Performs the Fletcher-Reeves update (Fletcher 1987).","@ToolTip7":"Performs the Polak-Ribiere update (Fletcher 1987).","@ToolTip8":"Performs a conjugate-descent update of Fletcher (1987)."}},{"ProcedureOptionName":"VSINGULAR=|VSING=","ProcedureOptionHelp":{"#cdata":"[Syntax: VSINGULAR= | VSING=r > 0] \n      \nSpecifies a relative singularity criterion for the computation of the inertia \n(number of positive, negative, and zero eigenvalues) of the Hessian and its \nprojected forms."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"XCONV=|XTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: XCONV= | XTOL=r <n>] \n      \nSpecifies the relative parameter convergence criterion. Termination requires \na small relative parameter change in subsequent iterations."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"XREF","ProcedureOptionHelp":{"#cdata":"Displays a cross-reference of the variables in the program showing where each variable \nis referenced or given a value."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"XSIZE=","ProcedureOptionHelp":{"#cdata":"[Syntax: XSIZE=r > 0] \n      \nSpecifies the XSIZE parameter of the relative function and relative gradient termination \ncriteria. The default value is r=0."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"BY","StatementHelp":{"#cdata":"Syntax: BY <DESCENDING> variable-1 <...<DESCENDING> variable-n> <NOTSORTED>; \n      \nYou can use a BY statement with the NLMIXED procedure to obtain separate analyses on \nDATA= data set observations in groups defined by the BY variables. This means that, \nunless TECH=NONE, an optimization problem is solved for each BY group separately. \nWhen a BY statement appears, the procedure expects the input DATA= data set to be \nsorted in the order of the BY variables."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DESCENDING","StatementOptionHelp":{"#cdata":"Specifies that the observations are sorted in descending order by the variable that \nimmediately follows the word DESCENDING in the BY statement."},"StatementOptionType":"S"},{"StatementOptionName":"NOTSORTED","StatementOptionHelp":{"#cdata":"Specifies that observations are not necessarily sorted in alphabetic or numeric order."},"StatementOptionType":"S"}]}},{"StatementName":"ID","StatementHelp":{"#cdata":"Syntax: ID names ; \n    \nThe ID statement identifies additional quantities to be included in the OUT= data set \nof the PREDICT statement. These can be any symbols you have defined with SAS programming \nstatements."},"StatementOptions":null},{"StatementName":"ARRAY","StatementHelp":{"#cdata":"Syntax: ARRAY arrayname [{ dimensions }] [$] [variables and constants] ;\n      \nThe ARRAY statement is similar to, but not exactly the same as, the ARRAY statement \nin the SAS DATA step, and it is exactly the same as the ARRAY statements in the NLIN, \nNLP, and MODEL procedures. The ARRAY statement is used to associate a name (of no more \nthan eight characters) with a list of variables and constants. The array name is used \nwith subscripts in the program to refer to the array elements. The following statements \nillustrate this: \n\n      array r[8] r1-r8;\n\n      do i = 1 to 8;\n         r[i] = 0;\n      end;\n\nThe ARRAY statement does not support all the features of the ARRAY statement in the DATA \nstep. It cannot be used to assign initial values to array elements. Implicit indexing of \nvariables cannot be used; all array references must have explicit subscript expressions. \nOnly exact array dimensions are allowed; lower-bound specifications are not supported. \nA maximum of six dimensions is allowed."},"StatementOptions":null},{"StatementName":"BOUNDS","StatementHelp":{"#cdata":"Syntax: BOUNDS b_con [ , b_con...] ; \n\nwhere b_con := number operator parameter_list operator number \n \nor \n b_con := number operator parameter_list \n \nor \n b_con := parameter_list operator number \n \nand operator := \u2264, <, \u2265, or > \n \n\nBoundary constraints are specified with a BOUNDS statement. One- or two-sided boundary constraints \nare allowed."},"StatementOptions":null},{"StatementName":"CONTRAST","StatementHelp":{"#cdata":"Syntax: CONTRAST \u2019label\u2019 expression <, expression> <options> ;\n      \nThe CONTRAST statement enables you to conduct a statistical test that several expressions simultaneously \nequal zero."},"StatementOptions":{"StatementOption":{"StatementOptionName":"DF=","StatementOptionHelp":{"#cdata":"[Syntax: DF=n] \n          \nSpecifies the denominator degrees of freedom to be used in computing p values for \nthe F statistics."},"StatementOptionType":"V"}}},{"StatementName":"ESTIMATE","StatementHelp":{"#cdata":"Syntax: ESTIMATE \u2019label\u2019 expression <options> ;\n      \nThe ESTIMATE statement enables you to compute an additional estimate that is a function \nof the parameter values. You must provide a quoted string to identify the estimate and \nthen a valid SAS expression. Multiple ESTIMATE statements are permitted, and results from \nall statements are listed in a common table. PROC NLMIXED computes approximate standard \nerrors for the estimates using the delta method (Billingsley 1986). It uses these standard \nerrors to compute corresponding t statistics, p-values, and confidence limits"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ALPHA=","StatementOptionHelp":{"#cdata":"[Syntax: ALPHA=\u03b1] \n          \nSpecifies the \u03b1 level to be used in computing confidence limits."},"StatementOptionType":"V"},{"StatementOptionName":"DF=","StatementOptionHelp":{"#cdata":"[Syntax: DF=n] \n          \nSpecifies the denominator degrees of freedom to be used in computing p values and \nconfidence limits."},"StatementOptionType":"V"}]}},{"StatementName":"MODEL","StatementHelp":{"#cdata":"Syntax: MODEL dependent-variable ~ distribution ;\n      \nThe MODEL statement is the mechanism for specifying the conditional distribution \nof the data given the random effects. You must specify a single dependent variable \nfrom the input data set, a tilde ~, and then a distribution with its parameters."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"NORMAL","StatementOptionHelp":{"#cdata":"Syntax: NORMAL(m,v) \n          \nSpecifies a normal (Gaussian) distribution with mean m and variance v."},"StatementOptionType":"S"},{"StatementOptionName":"BINARY","StatementOptionHelp":{"#cdata":"Syntax: BINARY(p) \n          \nSpecifies a binary (Bernoulli) distribution with probability p."},"StatementOptionType":"S"},{"StatementOptionName":"BINOMIAL","StatementOptionHelp":{"#cdata":"Syntax: BINOMIAL(n,p) \n          \nSpecifies a binomial distribution with count n and probability p."},"StatementOptionType":"S"},{"StatementOptionName":"GAMMA","StatementOptionHelp":{"#cdata":"Syntax: GAMMA(a,b) \n          \nSpecifies a gamma distribution with shape a and scale b."},"StatementOptionType":"S"},{"StatementOptionName":"NEGBIN","StatementOptionHelp":{"#cdata":"Syntax: NEGBIN(n,p) \n          \nSpecifies a negative binomial distribution with count n and probability p."},"StatementOptionType":"S"},{"StatementOptionName":"POISSON","StatementOptionHelp":{"#cdata":"Syntax: POISSON(m) \n          \nSpecifies a Poisson distribution with mean m."},"StatementOptionType":"S"},{"StatementOptionName":"GENERAL","StatementOptionHelp":{"#cdata":"Syntax: GENERAL(ll) \n          \nSpecifies a general log likelihood function that you construct using SAS programming statements."},"StatementOptionType":"S"}]}},{"StatementName":"PARMS|PARM|PARAMETERS|PARAMETER","StatementHelp":{"#cdata":"Syntax: PARMS <name_list [=numbers] [, name_list [=numbers] ... ]> </ options> ;\n        \nThe PARMS statement lists names of parameters and specifies initial values, possibly over a grid. \nYou can specify the parameters and values directly in a list, or you can provide the name of a SAS \ndata set that contains them by using the DATA= option."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"BEST=","StatementOptionHelp":{"#cdata":"[Syntax: BEST=i > 0] \n          \nSpecifies the maximum number of points displayed in the \"Parameters\" table, selected as \nthe points with the maximum likelihood values. By default, all grid values are displayed."},"StatementOptionType":"V"},{"StatementOptionName":"BYDATA","StatementOptionHelp":{"#cdata":"Enables you to assign different starting values for each BY group by using the DATA=SAS-data-set \noption during BY processing."},"StatementOptionType":"S"},{"StatementOptionName":"DATA=","StatementOptionHelp":{"#cdata":"[Syntax: DATA=SAS-data-set] \n          \nSpecifies a SAS data set containing parameter names and starting values."},"StatementOptionType":"DV"}]}},{"StatementName":"PREDICT","StatementHelp":{"#cdata":"Syntax: PREDICT expression OUT=SAS-data-set <options> ;\n      \nThe PREDICT statement enables you to construct predictions of an expression across all of the \nobservations in the input data set."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"[Syntax: OUT=SAS-data-set] \n          \nResults are placed in an output data set that you specify with the OUT= option."},"StatementOptionType":"RV|DV"},{"StatementOptionName":"ALPHA=","StatementOptionHelp":{"#cdata":"[Syntax: ALPHA=\u03b1] \n          \nSpecifies the \u03b1 level to be used in computing t statistics and intervals."},"StatementOptionType":"V"},{"StatementOptionName":"DER","StatementOptionHelp":{"#cdata":"Requests that derivatives of the predicted expression with respect to all parameters be included \nin the OUT= data set."},"StatementOptionType":"S"},{"StatementOptionName":"DF=","StatementOptionHelp":{"#cdata":"[Syntax: DF=d] \n          \nSpecifies the denominator degrees of freedom to be used in computing t statistics and \nintervals in the OUT= data set."},"StatementOptionType":"V"}]}},{"StatementName":"RANDOM","StatementHelp":{"#cdata":"Syntax: RANDOM random-effects ~ distribution SUBJECT=variable <options> ;\n      \nThe RANDOM statement defines the random effects and their distribution. The random effects must \nbe represented by symbols that appear in your SAS programming statements. The random effects must \nbe represented by symbols that appear in your SAS programming statements. They typically influence \nthe mean value of the distribution specified in the MODEL statement. The RANDOM statement consists \nof a list of the random effects (usually just one or two symbols), a tilde ~, the distribution for \nthe random effects, and then a SUBJECT= variable.\n\nOnly one RANDOM statement is permitted, so multilevel nonlinear mixed models are not accommodated. \nHowever, you can specify certain nested random effects structure with a single RANDOM statement."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"SUBJECT=","StatementOptionHelp":{"#cdata":"[Syntax: SUBJECT= variable] \n          \nDetermines when new realizations of the random effects are assumed to occur. PROC NLMIXED \nassumes that a new realization occurs whenever the value of the SUBJECT= variable changes \nfrom the previous observation, so your input data set should be clustered according to this \nvariable. One easy way to accomplish this is to run PROC SORT prior to calling PROC NLMIXED \nby using the SUBJECT= variable as the BY variable."},"StatementOptionType":"V"},{"StatementOptionName":"NORMAL","StatementOptionHelp":{"#cdata":"Syntax: NORMAL(m,v) \n          \nSpecifies a normal (Gaussian) distribution with mean m and variance v."},"StatementOptionType":"S"},{"StatementOptionName":"ALPHA=","StatementOptionHelp":{"#cdata":"[Syntax: ALPHA=\u03b1] \n          \nSpecifies the \u03b1 level to be used in computing t statistics and intervals."},"StatementOptionType":"V"},{"StatementOptionName":"DF=","StatementOptionHelp":{"#cdata":"[Syntax: DF=d] \n          \nSpecifies the denominator degrees of freedom to be used in computing t statistics and \nintervals in the OUT= data set."},"StatementOptionType":"V"},{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"[Syntax: OUT=SAS-data-set] \n          \nRequests an output data set containing empirical Bayes estimates of the random \neffects and their approximate standard errors of prediction."},"StatementOptionType":"DV"}]}},{"StatementName":"REPLICATE","StatementHelp":{"#cdata":"Syntax: REPLICATE variable ; \n      \nThe REPLICATE statement provides a way to accommodate models in which different subjects \nhave identical data. This occurs most commonly when the dependent variable is binary. When \nyou specify a REPLICATE variable, PROC NLMIXED assumes that its value indicates the number \nof subjects having data identical to those for the current value of the SUBJECT= variable \n(specified in the RANDOM statement). Only the last observation of the REPLICATE variable \nfor each subject is used, and the replicate variable must have only positive integer values. \n\nNote that the REPLICATE mechanism is different from using a FREQ statement in other statistical \nmodeling procedures, such as PROC GLM, GENMOD, GLIMMIX, and LOGISTIC. A FREQ variable is used \nto identify grouped values for observations, essentially multiplying the log likelihood or sum \nof squares contribution for the observation. A REPLICATE variable is used to multiply the \ncontribution of a subject that comprises one or more observations."},"StatementOptions":null},{"StatementName":"ABORT","StatementHelp":{"#cdata":"Syntax: ABORT <ABEND | CANCEL <FILE> | RETURN | > <n> <NOLIST>; \n      \nStops executing the current DATA step, SAS job, or SAS session."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ABEND","StatementOptionHelp":{"#cdata":"Causes abnormal termination of the current SAS job or session. Results depend on the method \nof operation: \n\no batch mode and noninteractive mode \n\n  o stops processing immediately\n  o sends an error message to the SAS log that states that execution was terminated by the ABEND option \n    of the ABORT macro statement\n  o does not execute any subsequent statements or check syntax\n  o returns control to the operating environment; further action is based on how your operating environment \n    and your site treat jobs that end abnormally.\n\no windowing environment and interactive line mode \n\n  o causes your windowing environment and interactive line mode to stop processing immediately \n    and return you to your operating environment."},"StatementOptionType":"S"},{"StatementOptionName":"CANCEL","StatementOptionHelp":{"#cdata":"Causes the cancellation of the current submitted statements. The results depend on the method \nof operation:\n\no batch mode and noninteractive mode\n\n  o The entire SAS program and SAS system are terminated.\n  o The error message is written to the SAS log.\n\no windowing environment and interactive line mode \n\n  o It only clears the current submitted program.\n  o Other subsequent submitted programs are not affected.\n  o The error message is written to the SAS log.\n\no workspace server and stored process server \n\n  o It only clears currently submitted program.\n  o Other subsequent submit calls are not affected.\n  o The error message is written to the SAS log.\n\no SAS IntrNet application server \n\n  o A separate execution is created for each request. The execution submits the request code. A CANCEL \n    argument in the request code clears the current submitted code but does not terminate the execution \n    of the SAS session."},"StatementOptionType":"S"},{"StatementOptionName":"CANCEL FILE","StatementOptionHelp":{"#cdata":"Causes only the contents of the autoexec file or %INCLUDE file to be cleared by the %ABORT statement. \nOther submitted source statements will be executed after the autoexec or %INCLUDE file."},"StatementOptionType":"S"},{"StatementOptionName":"RETURN","StatementOptionHelp":{"#cdata":"Causes abnormal termination of the current SAS job or session. Results depend on the method \nof operation: \n\no batch mode and noninteractive mode \n\n  o stops processing immediately\n  o sends an error message to the SAS log that states that execution was terminated by the RETURN option \n    in the ABORT macro statement\n  o does not execute any subsequent statements or check syntax\n  o returns control to the operating environment with a condition code indicating an error.\n\no windowing environment and interactive line mode \n\n  o causes your windowing environment and interactive line mode to stop processing immediately \n    and return you to your operating environment."},"StatementOptionType":"S"},{"StatementOptionName":"NOLIST","StatementOptionHelp":{"#cdata":"suppresses the output of all variables to the SAS log."},"StatementOptionType":"S"}]}},{"StatementName":"CALL","StatementHelp":{"#cdata":"Syntax: CALL routine(parameter-1<, ...parameter-n>);  \n      \nInvokes a SAS CALL routine."},"StatementOptions":null},{"StatementName":"DELETE","StatementHelp":{"#cdata":"Syntax: DELETE; \n      \nStops processing the current observation."},"StatementOptions":null},{"StatementName":"DO","StatementHelp":{"#cdata":"Specifies a group of statements to be executed as a unit.\n      \nSyntax: \n(1) DO; \n...more SAS statements...  \nEND;  \n\n(2) DO index-variable=specification-1 <, ... specification-n>; \n... more SAS statements ...  \nEND;  \n\n(3) DO UNTIL (expression); \n...more SAS statements...  \nEND \n\n(4) DO WHILE (expression); \n...more SAS statements...  \nEND;"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"UNTIL","StatementOptionHelp":{"#cdata":"Executes statements in a DO loop repetitively until a condition is true.\n          \nSyntax: \nDO UNTIL (expression); \n...more SAS statements...  \nEND"},"StatementOptionType":"S"},{"StatementOptionName":"WHILE","StatementOptionHelp":{"#cdata":"Executes statements in a DO-loop repetitively while a condition is true. \n          \nSyntax: \nDO WHILE (expression); \n...more SAS statements...  \nEND;"},"StatementOptionType":"S"},{"StatementOptionName":"OVER","StatementOptionType":"S"},{"StatementOptionName":"TO","StatementOptionHelp":{"#cdata":"Separates the start and stop integers or expressions that control the number of times the \nportion of the DATA step between the iterative DO and END statements is processed."},"StatementOptionType":"S"},{"StatementOptionName":"BY","StatementOptionHelp":{"#cdata":"Precedes an increment integer (other than 0) or an expression that generates an integer to be \nadded to the value of the index variable in each iteration of the DO loop."},"StatementOptionType":"S"}]}},{"StatementName":"END","StatementHelp":{"#cdata":"Syntax: END; \n      \nEnds a DO group or SELECT group processing."},"StatementOptions":null},{"StatementName":"GOTO","StatementHelp":{"#cdata":"Syntax: GOTO label;\n      \nJumps to a new statement."},"StatementOptions":null},{"StatementName":"IF","StatementHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions. \n\nSyntax: \n(1) IF expression THEN statement; \n    <ELSE statement;> \n(2) IF condition;"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"DO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"WHEN","StatementOptionHelp":{"#cdata":"WHEN statement in an IF-THEN-WHEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"OUTPUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"GO TO|GOTO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct. \n          \nSyntax: ... GO TO label; | ... GOTO label;\n      \nJumps to a new statement."},"StatementOptionType":"S"},{"StatementOptionName":"PUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"STOP","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct. \n          \nStops execution of the current DATA step."},"StatementOptionType":"S"},{"StatementOptionName":"SET","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct.\n          \nSyntax: SET <SAS-data-set(s) <(data-set-options(s) )>>; \n      \nReads an observation from one or more SAS data sets."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"ELSE","StatementHelp":{"#cdata":"If the condition in a IF-THEN statement is false and an ELSE statement is present, then the ELSE \naction is carried out."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"IF","StatementOptionHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions."},"StatementOptionType":"S"},{"StatementOptionName":"DO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN-ELSE construct."},"StatementOptionType":"S"},{"StatementOptionName":"OUTPUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN-ELSE construct."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"LINK","StatementHelp":{"#cdata":"Syntax: LINK statement-label; \n      \nDirects program execution immediately to the statement label that is specified and, if followed \nby a RETURN statement, returns execution to the statement that follows the LINK statement."},"StatementOptions":null},{"StatementName":"RETURN","StatementHelp":{"#cdata":"Syntax: RETURN; \n      \nStops executing statements at the current point in the DATA step and returns to a predetermined \npoint in the step."},"StatementOptions":null},{"StatementName":"SELECT","StatementHelp":{"#cdata":"Executes one of several statements or groups of statements.\n      \nSyntax: \nSELECT <(select-expression)>;  \n  WHEN-1 (when-expression-1 <..., when-expression-n>) statement;  \n    <... WHEN-n (when-expression-1 <..., when-expression-n>) statement;>  \n      <OTHERWISE statement;> \nEND;"},"StatementOptions":null},{"StatementName":"WHEN","StatementHelp":{"#cdata":"SELECT groups contain WHEN statements that identify SAS statements that are executed when a particular \ncondition is true. Use at least one WHEN statement in a SELECT group.\n      \nSyntax: WHEN-1 (when-expression-1 <..., when-expression-n>) statement; "},"StatementOptions":{"StatementOption":{"StatementOptionName":"DO","StatementOptionType":"S"}}},{"StatementName":"OTHERWISE","StatementHelp":{"#cdata":"An optional OTHERWISE statement specifies a statement to be executed if no WHEN condition is met. \nAn END statement ends a SELECT group.\n\n      \nSyntax: \n  <... WHEN-n (when-expression-1 <..., when-expression-n>) statement;>  \n    <OTHERWISE statement;>"},"StatementOptions":null},{"StatementName":"STOP","StatementHelp":{"#cdata":"Syntax: STOP ;\n\nThe STOP statement halts the execution of all statements that contain it, including \nDO statements and other control or looping statements. Execution continues with the \nnext top-level source statement."},"StatementOptions":null},{"StatementName":"PUT","StatementHelp":{"#cdata":"Syntax: PUT print-item ...< @ > < @@ > ;\n\nThe PUT statement writes text data to the current output file."},"StatementOptions":{"StatementOption":{"StatementOptionName":"_PAGE_","StatementOptionHelp":{"#cdata":"Outputs any pending line data and moves to the top of the next page."},"StatementOptionType":"S"}}}],"#comment":{}}}}