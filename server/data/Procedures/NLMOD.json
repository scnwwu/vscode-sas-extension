{"Procedure":{"Name":"NLMOD","ProductGroup":"CAS","ProcedureHelp":{"#cdata":"Syntax: PROC NLMOD < options > ;\n    BOUNDS constraint < , constraint . . . > ;\n    BY variables ;\n    DISPLAY < table-list >< / options > ;\n    DISPLAYOUT table-spec-list< / options > ;\n    ESTIMATE 'label' expression < options > ;\n    ID variables ;\n    MODEL dependent-variable \u00cf distribution ;\n    PARAMETERS < parameter-specification > < ,. . . , parameter-specification > < / options > ;\n    PREDICT 'label' expression < options > ;\n    RESTRICT restriction1 < , restriction2 . . . > ;\n    Programming statements ;\n\nThe NLMOD procedure uses either nonlinear least squares or maximum likelihood to fit nonlinear regression\nmodels in SAS Viya. PROC NLMOD enables you to specify the model by using SAS programming statements, which \ngive you greater flexibility in modeling the relationship between the response variable and independent \n(regressor) variables than SAS procedures that use a more structured MODEL statement."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"ALPHA=","ProcedureOptionHelp":{"#cdata":"Syntax: ALPHA=\u03b1\n\nSpecifies the level of significance \u03b1 that is used in constructing 100(1-\u03b1)% confidence intervals. The\nvalue must be strictly between 0 and 1; the default value of \u03b1 = 0.05 results in 95% intervals. This\nvalue is used as the default confidence level for limits that are computed in the \u201cParameter Estimates\u201d\ntable and is used in the LOWER and UPPER options in the PREDICT statement."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CORR","ProcedureOptionHelp":{"#cdata":"Requests the approximate correlation matrix for the parameter estimates."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"COV","ProcedureOptionHelp":{"#cdata":"Requests the approximate covariance matrix for the parameter estimates."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=CAS-libref.data-table\n      \nNames the input data table to be used by PROC NLMOD. The default is the most recently created data\ntable. CAS-libref specifies the CAS library where the input data table resides, and data-table specifies\nthe name of the input data table."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"DF=","ProcedureOptionHelp":{"#cdata":"Syntax: DF=n\n      \nSpecifies the default number of degrees of freedom to use in the calculation of p-values and confidence\nlimits for additional parameter estimates."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ECORR","ProcedureOptionHelp":{"#cdata":"Requests the approximate correlation matrix for all expressions that are specified in ESTIMATE\nstatements."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"ECOV","ProcedureOptionHelp":{"#cdata":"Requests the approximate covariance matrix for all expressions that are specified in ESTIMATE\nstatements."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOITPRINT","ProcedureOptionHelp":{"#cdata":"Suppresses the display of the \u201cIteration History\u201d table."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOPRINT","ProcedureOptionHelp":{"#cdata":"Suppresses the generation of ODS output."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OUT=","ProcedureOptionHelp":{"#cdata":"Syntax: OUT=CAS-libref.data-table\n      \nNames the output data table to be created when one or more PREDICT statements are specified. CASlibref\nspecifies the CAS library where the output data table is to be created, and data-table specifies\nthe name of the output data table. A single OUT= data table is created to contain all predicted values\nwhen more than one PREDICT statement is specified. An error message is generated if a PREDICT\nstatement is specified and an OUT= data table is not specified. The variables in the input data table are\nnot included in the output data table, in order to avoid data duplication for large data tables; however,\nvariables that you specify in the ID statement are included."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SINGULAR=","ProcedureOptionHelp":{"#cdata":"Syntax: SINGULAR=number\n      \nTunes the general singularity criterion that is applied in sweeps and inversions. The default is 1E4\ntimes the machine epsilon; this product is approximately 1E-12 on most computers."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSCONV=|ABSTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSCONV=r | ABSTOL=r] \n          \nSpecifies an absolute function convergence criterion. The default value of r is the negative \nsquare root of the largest double-precision value, which serves only as a protection against \noverflows."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSFCONV=|ABSFTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSFCONV= r <n> | ABSFTOL=r <n>] \n          \nSpecifies an absolute function difference convergence criterion. For all techniques except NMSIMP,\ntermination requires a small change of the function value in successive iterations."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSGCONV=|ABSGTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSGCONV=r <n> | ABSGTOL=r <n>] \n          \nSpecifies an absolute gradient convergence criterion. This criterion is not used by the NMSIMP\ntechnique. The optional integer value n specifies the number of successive iterations for which the\ncriterion must be satisfied before the process can be terminated. By default, ABSGCONV=1E\u20135."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FCONV=|FTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: FCONV=r <n> | FTOL=r <n>] \n          \nSpecifies a relative function convergence criterion.\n\nThe optional integer value n specifies the number of successive iterations for which the criterion must\nbe satisfied before the process can terminate. The default value is r=2 x \u0404 where \u0404 is the machine\nprecision."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"GCONV=|GTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: GCONV=r <n> | GTOL=r <n>] \n          \nSpecifies a relative gradient convergence criterion.\n\nThis criterion is not used by the NMSIMP technique. The optional integer value n specifies the number\nof successive iterations for which the criterion must be satisfied before the process can terminate. By\ndefault, GCONV=1E\u20138."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXFUNC=|MAXFU=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXFUNC=n | MAXFU=n] \n          \nSpecifies the maximum number n of function calls in the optimization process. The default values are\nas follows, depending on the optimization technique:\n\n o TRUREG, NRRIDG, and NEWRAP: 125\n o QUANEW and DBLDOG: 500\n o CONGRA: 1,000\n o NMSIMP: 3,000\n\nThe optimization can terminate only after completing a full iteration. Therefore, the number of function\ncalls that are actually performed can exceed the number that is specified by this option. You can specify\nthe optimization technique in the TECHNIQUE= option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXITER=|MAXIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXITER=n | MAXIT=n ] \n          \nSpecifies the maximum number n of iterations in the optimization process. The default values are as\nfollows, depending on the optimization technique:\n\n o TRUREG, NRRIDG, and NEWRAP: 50\n o QUANEW and DBLDOG: 200\n o CONGRA: 400\n o NMSIMP: 1,000\n\nThese default values also apply when n is specified as a missing value. You can specify the optimization\ntechnique in the TECHNIQUE= option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXTIME=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXTIME=r] \n          \nSpecifies an upper limit of r seconds of CPU time for the optimization process. The time specified by r\nis checked only once at the end of each iteration. Therefore, the actual running time can be longer than\nr . The default value is the largest floating-point double representation of your computer."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MINITER=|MINIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: MINITER=n | MINIT=n] \n          \nSpecifies the minimum number of iterations. If you request more iterations than are actually needed\nfor convergence to a stationary point, the optimization algorithms can behave strangely. For example,\nthe effect of rounding errors can prevent the algorithm from continuing for the required number of\niterations. By default, MINITER=0."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"TECHNIQUE=|TECH=","ProcedureOptionHelp":{"#cdata":"[Syntax: TECHNIQUE= | TECH=technique] \n          \nSpecifies the optimization technique for obtaining maximum likelihood estimates."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"CONGRA","@Value2":"DBLDOG","@Value3":"LEVMAR","@Value4":"NEWRAP","@Value5":"NMSIMP","@Value6":"NRRIDG","@Value7":"QUANEW","@Value8":"TRUREG","@Value9":"NONE"},"ProcedureOptionToolTips":{"@ToolTip1":"Performs a conjugate-gradient optimization..","@ToolTip2":"Performs a version of double-dogleg optimization.","@ToolTip3":"Performs a Levenberg-Marquardt nonlinear least-squares minimization. This technique is available only with PROC NLMOD.","@ToolTip4":"Performs a Newton-Raphson optimization with line search.","@ToolTip5":"Performs a Nelder-Mead simplex optimization.","@ToolTip6":"Performs a Newton-Raphson optimization with ridging.","@ToolTip7":"Performs a dual quasi-Newton optimization.","@ToolTip8":"Performs a trust-region optimization","@ToolTip9":"Performs no optimization."}}],"#comment":{}},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"BOUNDS","StatementHelp":{"#cdata":"Syntax: BOUNDS constraint < , constraint . . . > ;\nwhere constraint represents\n\n  < number operator > parameter-list < operator number >\n  \nBoundary constraints are specified in a BOUNDS statement. One- or two-sided boundary constraints are\nallowed. Elements in a list of boundary constraints are separated by commas. For example:\n\n  bounds 0 <= a1-a9 X <= 1, -1 <= c2-c5;\n  bounds b1-b10 y >= 0;\n\nYou can specify more than one BOUNDS statement. If you specify more than one lower (or upper) bound for\nthe same parameter, the maximum (or minimum) of these is taken."},"StatementOptions":null},{"StatementName":"BY","StatementHelp":{"#cdata":"Syntax: BY variables ;\n      \nYou can specify a BY statement in PROC NLMOD to obtain separate analyses of observations in groups\nthat are defined by the BY variables. If you specify more than one BY statement, only the last one specified\nis used."},"StatementOptions":null},{"StatementName":"DISPLAY","StatementHelp":{"#cdata":"Syntax: DISPLAY < table-list > < / options > ;\n      \nThe DISPLAY statement enables you to specify a list of ODS tables to display or exclude. This statement\nis similar to the ODS SELECT, ODS EXCLUDE, and ODS TRACE statements. However, the DISPLAY\nstatement can improve performance when a large number of tables could be generated (such as in BY-group\nprocessing). The procedure processes the DISPLAY statement on a CAS server and thus sends only a subset\nof ODS tables to the SAS client. Because ODS statements are processed on a SAS client, all ODS tables\nare sent to the client and then the client creates a subset. If both DISPLAY and ODS statements are used\ntogether, the DISPLAY statement takes precedence over the ODS statements."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"CASESENSITIVE","StatementOptionHelp":{"#cdata":"Performs a case-sensitive comparison of table names in the table-list to ODS table names when tables\nare subsetted for display. To preserve case, you must enclose table names in the table-list in quotation\nmarks."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDE","StatementOptionHelp":{"#cdata":"Displays all ODS tables except those specified in the table-list."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDEALL","StatementOptionHelp":{"#cdata":"Suppresses display of all tables. This option takes precedence over the other options."},"StatementOptionType":"S"},{"StatementOptionName":"TRACE","StatementOptionHelp":{"#cdata":"Displays the ODS table names, labels, and paths."},"StatementOptionType":"S"}]}},{"StatementName":"DISPLAYOUT","StatementHelp":{"#cdata":"Syntax: DISPLAYOUT table-spec-list < / options > ;\n      \nThe DISPLAYOUT statement enables you to create CAS output tables from your displayed output. This\nstatement is similar to the ODS OUTPUT statement.\n\nThe table-spec-list specifies a list of CAS output tables to create. Each entry in the list has either a key or a\nkey=value format:\n\n  key=value specifies key as the ODS table name, path, or partial pathname, and specifies value as the\n    CAS output table name.\n  key specifies key as the ODS table name and also as the CAS output table name.\n  \nTable names and partial pathnames are discussed under the DISPLAY statement. The DISPLAYOUT\nstatement does not support regular expressions."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"NOREPLACE","StatementOptionHelp":{"#cdata":"Does not replace an existing CAS output table of the same name."},"StatementOptionType":"S"},{"StatementOptionName":"REPEATED","StatementOptionHelp":{"#cdata":"Replicates the CAS output tables on all nodes."},"StatementOptionType":"S"}]}},{"StatementName":"ESTIMATE","StatementHelp":{"#cdata":"Syntax: ESTIMATE 'label' expression < options > ;\n      \nThe ESTIMATE statement enables you to compute an additional estimate that is a function of the parameter\nvalues. You must provide a quoted string to identify the estimate and then provide a valid SAS expression.\nMultiple ESTIMATE statements are permitted, and results from all ESTIMATE statements are listed in a\ncommon table. PROC NLMOD computes approximate standard errors for the estimates by using the delta\nmethod (Billingsley 1986). It uses these standard errors to compute corresponding t statistics, p-values, and\nconfidence limits."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ALPHA=","StatementOptionHelp":{"#cdata":"Syntax: ALPHA=\u03b1\n          \nSpecifies the alpha level to be used to compute confidence limits. The default value corresponds to the\nALPHA= option in the PROC NLMOD statement."},"StatementOptionType":"V"},{"StatementOptionName":"DF=","StatementOptionHelp":{"#cdata":"Syntax: DF=d\n          \nSpecifies the degrees of freedom to be used to compute p-values and confidence limits. The default\nvalue corresponds to the DF= option in the PROC NLMOD statement."},"StatementOptionType":"V"}]}},{"StatementName":"ID","StatementHelp":{"#cdata":"Syntax: ID variables ;\n      \nThe ID statement lists one or more variables from the input data table that are transferred to output data\ntables that PROC NLMOD creates, provided that the output data table contains one or more records per input\nobservation. For example, when you use an OUT= option in PROC NLMOD statement to produce prediction\nstatistics, ID variables are added to the output data table.\n\nBy default, PROC NLMOD do not include all variables from the input data table in output data tables."},"StatementOptions":null},{"StatementName":"MODEL","StatementHelp":{"#cdata":"Syntax: MODEL dependent-variable ~ distribution ;\n      \nThe MODEL statement is the mechanism for either using a distribution specification to specify the distribution\nof the data or using the RESIDUAL distribution to specify a predicted value. You must specify a single\ndependent variable from the input data table, a tilde (~), and then a distribution and its parameters."},"StatementOptions":{"#comment":{},"StatementOption":[{"StatementOptionName":"RESIDUAL","StatementOptionHelp":{"#cdata":"Syntax: RESIDUAL(m) | LS(m)\n          \nSpecifies no particular distribution. Instead the sum of squares of the differences between m and \nthe dependent variable is minimized."},"StatementOptionType":"S"},{"StatementOptionName":"NORMAL","StatementOptionHelp":{"#cdata":"Syntax: NORMAL(m,v)\n          \nSpecifies a normal (Gaussian) distribution that has mean m and variance v."},"StatementOptionType":"S"},{"StatementOptionName":"BINARY","StatementOptionHelp":{"#cdata":"Syntax: BINARY(p)\n          \nSpecifies a binary (Bernoulli) distribution that has probability p."},"StatementOptionType":"S"},{"StatementOptionName":"BINOMIAL","StatementOptionHelp":{"#cdata":"Syntax: BINOMIAL(n, p)\n          \nSpecifies a binomial distribution that has count n and probability p."},"StatementOptionType":"S"},{"StatementOptionName":"GAMMA","StatementOptionHelp":{"#cdata":"Syntax: GAMMA(a, b)\n          \nSpecifies a gamma distribution that has shape a and scale b."},"StatementOptionType":"S"},{"StatementOptionName":"NEGBIN","StatementOptionHelp":{"#cdata":"Syntax: NEGBIN(n, p)\n          \nSpecifies a negative binomial distribution that has count n and probability p."},"StatementOptionType":"S"},{"StatementOptionName":"POISSON","StatementOptionHelp":{"#cdata":"Syntax: POISSON(m)\n          \nSpecifies a Poisson distribution that has mean m."},"StatementOptionType":"S"},{"StatementOptionName":"GENERAL","StatementOptionHelp":{"#cdata":"Syntax: GENERAL(ll)\n          \nSpecifies a general log-likelihood function that you construct by using SAS programming statements."},"StatementOptionType":"S"}]}},{"StatementName":"PARAMETERS|PARMS","StatementHelp":{"#cdata":"Syntax: PARAMETERS < parameter-specification > < ,. . . , parameter-specification > < / options > ;\nSyntax: PARMS < parameter-specification > < ,. . . , parameter-specification > < / options > ;\n\nThe purpose of the PARAMETERS statement is to provide starting values for the NLMOD procedure.\nYou can provide values that define a single point in the parameter space or that define a set of points."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"BEST=","StatementOptionHelp":{"#cdata":"Syntax: BEST=i > 0\n          \nSpecifies the maximum number of parameter grid points and the corresponding objective function\nvalues to display in the \u201cParameters\u201d table. If you specify this option, the parameter grid points are\nlisted in ascending order of objective function value. By default, all parameter grid points are displayed."},"StatementOptionType":"V"},{"StatementOptionName":"PDATA=|DATA=","StatementOptionHelp":{"#cdata":"Syntax: PDATA=CAS-libref.data-table | DATA=CAS-libref.data-table\n          \nSpecifies the data table that provides parameter starting values. CAS-libref specifies the CAS library\nwhere the input data table resides, and data-table specifies the name of the input data table."},"StatementOptionType":"V"},{"StatementOptionName":"START=|DEFSTART=","StatementOptionHelp":{"#cdata":"Syntax: START=value | DEFSTART=value\n          \nSpecifies a default starting value for all parameters."},"StatementOptionType":"V"}]}},{"StatementName":"PREDICT","StatementHelp":{"#cdata":"Syntax: PREDICT 'label' expression < options > ; | PREDICT 'label' MEAN < options > ;\n      \nThe PREDICT statement enables you to construct predictions of an expression across all the observations in\nthe input data table. Multiple PREDICT statements are permitted. Results for all PREDICT statements are\ndisplayed in the output data table that you specify in the OUT= option in the PROC NLMOD statement. The\nvariables in the input data table are not included in the output data table, in order to avoid data duplication for\nlarge data tables; however, variables that you specify in the ID statement are included. \n\nYou must specify the following arguments:\n  'label'\n    identifies the predicted expression.\n  expression | MEAN\n    provides the predicted value.You can specify the predicted value either by using a SAS programming\n    expression that contains the input data table variables and parameters or by using the keyword MEAN. If\n    you specify the keyword MEAN, the predicted mean value for the distribution specified in the MODEL\n    statement is used. Predicted"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"MEAN","StatementOptionHelp":{"#cdata":"If you specify the keyword MEAN, the predicted mean value for the distribution specified in the MODEL\nstatement is used."},"StatementOptionType":"V"},{"StatementOptionName":"ALPHA=","StatementOptionHelp":{"#cdata":"Syntax: ALPHA=\u03b1\n          \nSpecifies the alpha level to be used to compute confidence limits. The default value corresponds to the\nALPHA= option in the PROC NLMOD statement."},"StatementOptionType":"V"},{"StatementOptionName":"DF=","StatementOptionHelp":{"#cdata":"Syntax: DF=d\n          \nSpecifies the degrees of freedom to be used to compute confidence limits. The default value corresponds\nto the DF= option in the PROC NLMOD statement."},"StatementOptionType":"V"},{"StatementOptionName":"LOWER=","StatementOptionHelp":{"#cdata":"Syntax: LOWER=name\n          \nSpecifies a variable that contains the lower confidence limit of the predicted value."},"StatementOptionType":"V"},{"StatementOptionName":"PRED=","StatementOptionHelp":{"#cdata":"Syntax: PRED=name\n          \nSpecifies a variable that contains the predicted value."},"StatementOptionType":"V"},{"StatementOptionName":"PROBT=","StatementOptionHelp":{"#cdata":"Syntax: PROBT=name\n          \nSpecifies a variable that contains the p-value of the predicted value."},"StatementOptionType":"V"},{"StatementOptionName":"STDERR=","StatementOptionHelp":{"#cdata":"Syntax: STDERR=name\n          \nSpecifies a variable that contains the standard error of the predicted value."},"StatementOptionType":"V"},{"StatementOptionName":"TVALUE=","StatementOptionHelp":{"#cdata":"Syntax: TVALUE=name\n          \nSpecifies a variable that contains the t statistic for the predicted value."},"StatementOptionType":"V"},{"StatementOptionName":"UPPER=","StatementOptionHelp":{"#cdata":"Syntax: UPPER=name\n          \nSpecifies a variable that contains the upper confidence limit of the predicted value."},"StatementOptionType":"V"}]}},{"StatementName":"RESTRICT","StatementHelp":{"#cdata":"Syntax: RESTRICT restriction1 < , restriction2 . . . > ;\n      \nThe RESTRICT statement imposes linear restrictions on the model\u2019s parameters estimates. You can specify\nany number of RESTRICT statements.\n\nEach restriction is written as an expression, optionally followed by an equality operator (=) or an inequality\noperator (<, >, <=, >=), followed by a second expression:\n\n  expression < operator expression >\n  \nThe operator can be =, <, >, <= , or >=. The operator and second expression are optional. When they are\nomitted, the operator defaults to = and the second expression defaults to the value 0."},"StatementOptions":null},{"StatementName":"ABORT","StatementHelp":{"#cdata":"Syntax: ABORT; \n\nStops executing the current procedure, SAS job, or SAS session.\n\nThe ABORT statement does not allow any arguments."},"StatementOptions":null},{"StatementName":"CALL","StatementHelp":{"#cdata":"Syntax: CALL name [ ( expression [, expression ... ] ) ]; \n      \nInvokes a function or routine."},"StatementOptions":null},{"StatementName":"DELETE","StatementHelp":{"#cdata":"Syntax: DELETE; \n      \nStops processing the current observation."},"StatementOptions":null},{"StatementName":"DO","StatementHelp":{"#cdata":"Syntax: DO[variable = expression\n    [TO expression] [BY expression]\n    [, expression [ TO expression] [ BY expression ] ... ]\n    ]\n    [ WHILE expression ] [ UNTIL expression ] ; \n    \nThe DO statement does not allow a character index variable. Thus\n\n    do i = 1,2,3; \n    \nis supported, but the following statement is not supported:\n\n    do i = 'A','B','C';"},"StatementOptions":null},{"StatementName":"END","StatementHelp":{"#cdata":"Syntax: END; \n      \nEnds a DO group or SELECT group processing."},"StatementOptions":null},{"StatementName":"GOTO","StatementHelp":{"#cdata":"Syntax: GOTO statement_label; \n      \nJumps to a new statement."},"StatementOptions":null},{"StatementName":"IF","StatementHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions. \n\nSyntax: \n(1) IF expression THEN statement; \n    <ELSE statement;> \n(2) IF condition;"},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"DO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"WHEN","StatementOptionHelp":{"#cdata":"WHEN statement in an IF-THEN-WHEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"OUTPUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"GO TO|GOTO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct. \n          \nSyntax: ... GO TO label; | ... GOTO label;\n      \nJumps to a new statement."},"StatementOptionType":"S"},{"StatementOptionName":"PUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct."},"StatementOptionType":"S"},{"StatementOptionName":"STOP","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct. \n          \nStops execution of the current DATA step."},"StatementOptionType":"S"},{"StatementOptionName":"SET","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN construct.\n          \nSyntax: SET <SAS-data-set(s) <(data-set-options(s) )>>; \n      \nReads an observation from one or more SAS data sets."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"LINK","StatementHelp":{"#cdata":"Syntax: LINK statement_label; \n      \nDirects program execution immediately to the statement label that is specified and, if followed \nby a RETURN statement, returns execution to the statement that follows the LINK statement."},"StatementOptions":null},{"StatementName":"PUT","StatementHelp":{"#cdata":"Syntax: PUT [variable] [=] [...];\n\nThe PUT statement, used mostly for program debugging in PROC NLMOD, supports only some of\nthe features of the DATA step PUT statement, and it has some new features that the DATA step PUT\nstatement does not have:\n\n  o The PROC HPNLIN PUT statement does not support line pointers, factored lists, iteration factors,\n    overprinting, _INFILE_, the colon (:) format modifier, or \u201c$\u201d.\n  \n  o The PROC HPNLIN PUT statement supports expressions, but the expression must be enclosed\n    in parentheses. For example, the following statement displays the square root of x:\n    put (sqrt(x));\n  \n  o The PROC HPNLIN PUT statement supports the item _PDV_ to display a formatted listing\n    of all variables in the program. For example, the following statement displays a much more\n    readable listing of the variables than the _ALL_ print item:\n    \n    put _pdv_;"},"StatementOptions":{"StatementOption":{"StatementOptionName":"_PDV_","StatementOptionHelp":{"#cdata":"Displays a formatted listing of all variables in the program."},"StatementOptionType":"S"}}},{"StatementName":"RETURN","StatementHelp":{"#cdata":"Syntax: RETURN; \n      \nStops executing statements at the current point and returns to a predetermined point in the step."},"StatementOptions":null},{"StatementName":"SELECT","StatementHelp":{"#cdata":"Executes one of several statements or groups of statements.\n      \nSyntax: \nSELECT <(select-expression)>;  \n  WHEN-1 (when-expression-1 <..., when-expression-n>) statement;  \n    <... WHEN-n (when-expression-1 <..., when-expression-n>) statement;>  \n      <OTHERWISE statement;> \nEND;"},"StatementOptions":null},{"StatementName":"STOP","StatementHelp":{"#cdata":"Syntax: STOP ;\n\nThe STOP statement halts the execution of all statements that contain it, including \nDO statements and other control or looping statements. Execution continues with the \nnext top-level source statement."},"StatementOptions":null},{"StatementName":"WHEN","StatementHelp":{"#cdata":"SELECT groups contain WHEN statements that identify SAS statements that are executed when a particular \ncondition is true. Use at least one WHEN statement in a SELECT group.\n      \nSyntax: WHEN-1 (when-expression-1 <..., when-expression-n>) statement; "},"StatementOptions":{"StatementOption":{"StatementOptionName":"DO","StatementOptionType":"S"}}},{"StatementName":"OTHERWISE","StatementHelp":{"#cdata":"An optional OTHERWISE statement specifies a statement to be executed if no WHEN condition is met. \nAn END statement ends a SELECT group.\n      \nSyntax: \n  <... WHEN-n (when-expression-1 <..., when-expression-n>) statement;>  \n    <OTHERWISE statement;>"},"StatementOptions":null},{"StatementName":"ELSE","StatementHelp":{"#cdata":"If the condition in an IF-THEN statement is false and an ELSE statement is present, \nthen the ELSE action is carried out."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS \nstatement for observations that are read from a SAS data set, for records in an external file, or \nfor computed values."},"StatementOptionType":"S"},{"StatementOptionName":"IF","StatementOptionHelp":{"#cdata":"Executes a SAS statement for observations that meet specific conditions."},"StatementOptionType":"S"},{"StatementOptionName":"DO","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN-ELSE construct."},"StatementOptionType":"S"},{"StatementOptionName":"OUTPUT","StatementOptionHelp":{"#cdata":"Action statement in an IF-THEN-ELSE construct."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionType":"S"}],"#comment":{}}},{"StatementName":"SUBSTR","StatementHelp":{"#cdata":"Syntax: SUBSTR( variable, index, length )= expression; \n      \nThe SUBSTR function used as a programming statement in PROC HPNLIN."},"StatementOptions":null}],"#comment":{}}}}