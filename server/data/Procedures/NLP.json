{"Procedure":{"Name":"NLP","ProductGroup":"SAS/OR","ProcedureHelp":{"#cdata":"Syntax: PROC NLP options ; \n    ARRAY function names ; \n    BOUNDS boundary constraints ; \n    BY variables ; \n    CRPJAC variables ; \n    DECVAR function names ; \n    GRADIENT variables ; \n    HESSIAN variables ; \n    INCLUDE model files ; \n    JACNLC variables ; \n    JACOBIAN function names ; \n    LABEL decision variable labels ; \n    LINCON linear constraints ; \n    MATRIX matrix specification ; \n    MIN, MAX, or LSQ function names ; \n    MINQUAD or MAXQUAD matrix, vector, or number ; \n    NLINCON nonlinear constraints ; \n    PROFILE profile specification ; \n    Program Statements ; \n\nThe NLP procedure (NonLinear Programming) offers a set of optimization techniques for minimizing \nor maximizing a continuous nonlinear function f(x) of n decision variables, with lower and upper \nbound, linear and nonlinear, equality and inequality constraints."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"ABSCONV=|ABSTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSCONV= | ABSTOL=r] \n      \nSpecifies an absolute function convergence criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSFCONV=|ABSFTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSFCONV=r <n>  | ABSFTOL=r<n>] \n      \nSpecifies an absolute function convergence criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSGCONV=|ABSGTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSGCONV= | ABSGTOL=r <n>] \n      \nSpecifies an absolute gradient convergence criterion. Termination requires the maximum absolute \ngradient element to be small."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ABSXCONV=|ABSXTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: ABSXCONV= | ABSXTOL=r <n>] \n      \nSpecifies the absolute parameter convergence criterion. Termination requires a small Euclidean \ndistance between successive parameter vectors."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ASINGULAR=|ASING=","ProcedureOptionHelp":{"#cdata":"[Syntax: ASINGULAR | ASING=r] \n      \nSpecifies an absolute singularity criterion for measuring singularity of Hessian and crossproduct \nJacobian and their projected forms, which may have to be converted to compute the covariance matrix."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"BEST=","ProcedureOptionHelp":{"#cdata":"[Syntax: BEST=i] \n      \nProduces the i best grid points only. This option not only restricts the output, it also can \nsignificantly reduce the computation time needed for sorting the grid point information."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CDIGITS=","ProcedureOptionHelp":{"#cdata":"[Syntax: CDIGITS=r] \n      \nSpecifies the number of accurate digits in nonlinear constraint evaluations. Fractional values \nsuch as CDIGITS=4.7 are allowed."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"CLPARM=","ProcedureOptionHelp":{"#cdata":"Is similar to but not the same as that used by other SAS procedures. Using CLPARM=BOTH is equivalent \nto specifying \n\n    PROFILE / ALPHA=0.5 0.1 0.05 0.01 OUTTABLE;"},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"PL","@Value2":"WALD","@Value3":"BOTH"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies that profile confidence limits (PL CLs) for all parameters be computed and displayed  or written to the OUTEST= data set.","@ToolTip2":"Specifies that the Wald confidence limits be computed and displayed or written to the OUTEST= data set.","@ToolTip3":"Specifies that profile confidence limits (PL CLs) for all parameters and for \u03b1=.5, .1, .05, .01 are  computed and displayed or written to the OUTEST= data set."}},{"ProcedureOptionName":"COVARIANCE=","ProcedureOptionHelp":{"#cdata":"Specifies one of six formulas for computing the covariance matrix."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"1","@Value2":"2","@Value3":"3","@Value4":"4","@Value5":"5","@Value6":"6","@Value7":"M","@Value8":"H","@Value9":"J","@Value10":"B","@Value11":"E","@Value12":"U"},"ProcedureOptionToolTips":{"@ToolTip1":"MIN or MAX Statement: (_NOBS_/d)G\u207b\u00b9 JJ(f)G\u207b\u00b9       LSQ Statement: (_NOBS_/d)G\u207b\u00b9 VG\u207b\u00b9","@ToolTip2":"MIN or MAX Statement: (_NOBS_/d)G\u207b\u00b9                LSQ Statement: \u03c3\u00b2G\u207b\u00b9","@ToolTip3":"MIN or MAX Statement: (1/d)W\u207b\u00b9                     LSQ Statement: \u03c3\u00b2JJ(f)\u207b\u00b9","@ToolTip4":"MIN or MAX Statement: (1/d)G\u207b\u00b91WG\u207b\u00b9                LSQ Statement: \u03c3\u00b2G\u207b\u00b9JJ(f)G\u207b\u00b9","@ToolTip5":"MIN or MAX Statement: (_NOBS_/d)JJ(f)\u207b\u00b9            LSQ Statement: (1/d)V\u207b\u00b9","@ToolTip6":"MIN or MAX Statement: (_NOBS_/d)W\u207b\u00b9 JJ(f)W\u207b\u00b9       LSQ Statement: (_NOBS_/d)JJ(f)\u207b\u00b9VJJ(f)\u207b\u00b9","@ToolTip7":"MIN or MAX Statement: (_NOBS_/d)G\u207b\u00b9 JJ(f)G\u207b\u00b9       LSQ Statement: (_NOBS_/d)G\u207b\u00b9 VG\u207b\u00b9","@ToolTip8":"MIN or MAX Statement: (_NOBS_/d)G\u207b\u00b9                LSQ Statement: \u03c3\u00b2G\u207b\u00b9","@ToolTip9":"MIN or MAX Statement: (1/d)W\u207b\u00b9                     LSQ Statement: \u03c3\u00b2JJ(f)\u207b\u00b9","@ToolTip10":"MIN or MAX Statement: (1/d)G\u207b\u00b9WG\u207b\u00b9                LSQ Statement: \u03c3\u00b2G\u207b\u00b9JJ(f)G\u207b\u00b9","@ToolTip11":"MIN or MAX Statement: (_NOBS_/d)JJ(f)\u207b\u00b9           LSQ Statement: (1/d)V\u207b\u00b9","@ToolTip12":"MIN or MAX Statement: (_NOBS_/d)W\u207b\u00b9 JJ(f)W\u207b\u00b9      LSQ Statement: (_NOBS_/d)JJ(f)\u207b\u00b9VJJ(f)\u207b\u00b9"}},{"ProcedureOptionName":"COVSING=","ProcedureOptionHelp":{"#cdata":"[Syntax: COVSING=r] \n      \nSpecifies a threshold r > 0 that determines whether the eigenvalues of a singular Hessian matrix \nor crossproduct Jacobian matrix are considered to be zero."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"DAMPSTEP=|DS=","ProcedureOptionHelp":{"#cdata":"[Syntax: DAMPSTEP | DS  <=r>] \n      \nSpecifies that the initial step-size value a\u2070 for each line search (used by the QUANEW, CONGRA, \nor NEWRAP technique) cannot be larger than r times the step-size value used in the former iteration."},"ProcedureOptionType":"S|V"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"[Syntax: DATA=SAS-data-set] \n      \nAllows variables from the specified data set to be used in the specification of the objective function f."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"DIAHES","ProcedureOptionHelp":{"#cdata":"Specifies that only the diagonal of the Hessian or crossproduct Jacobian is used."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FCONV=|FTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: FCONV=r | FTOL=r] \n      \nSpecifies the relative function convergence criterion."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"FCONV2=|FTOL2=","ProcedureOptionHelp":{"#cdata":"[Syntax: FCONV2= | FTOL2=r <n>] \n      \nSpecifies another function convergence criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FD=","ProcedureOptionHelp":{"#cdata":"Specifies that all derivatives be computed using finite-difference approximations. Spefiying FD by \nitself is equivalent to FD=100."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"FORWARD","@Value2":"CENTRAL","@Value3":"number"},"ProcedureOptionToolTips":{"@ToolTip1":"Uses forward differences.","@ToolTip2":"Uses central differences.","@ToolTip3":"Uses central differences for the initial and final evaluations of the gradient, Jacobian, and Hessian."}},{"ProcedureOptionName":"FDHESSIAN=","ProcedureOptionHelp":{"#cdata":"Specifies that second-order derivatives be computed using finite-difference approximations based on \nevaluations of the gradients. Specifying FDHESSIAN by itself means to use forward differences for \nthe Hessian except for the initial and final output."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"FORWARD","@Value2":"CENTRAL"},"ProcedureOptionToolTips":{"@ToolTip1":"Uses forward differences.","@ToolTip2":"Uses central differences."}},{"ProcedureOptionName":"FDIGITS=","ProcedureOptionHelp":{"#cdata":"[Syntax: FDIGITS=r] \n      \nSpecifies the number of accurate digits in evaluations of the objective function. Fractional values \nsuch as FDIGITS=4.7 are allowed."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"FDINT=","ProcedureOptionHelp":{"#cdata":"Specifies how the finite-difference intervals h should be computed."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"OBJ","@Value2":"CON","@Value3":"ALL"},"ProcedureOptionToolTips":{"@ToolTip1":"The interval h is based on the behavior of the objective function.","@ToolTip2":"The interval h is based on the behavior of the nonlinear constraints functions.","@ToolTip3":"The interval h is based on the behavior of the objective function and the nonlinear  constraints functions."}},{"ProcedureOptionName":"FSIZE=","ProcedureOptionHelp":{"#cdata":"[Syntax:FSIZE=r] \n      \nSpecifies the FSIZE parameter of the relative function and relative gradient termination criteria. \nThe default value is r=0."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"G4=","ProcedureOptionHelp":{"#cdata":"[Syntax: G4=n] \n      \nIs used when the covariance matrix is singular."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"GCONV=|GTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: GCONV=r | GTOL=r] \n      \nSpecifies the relative gradient convergence criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"GCONV2=","ProcedureOptionHelp":{"#cdata":"[Syntax: GCONV2=r | GTOL2=r] \n      \nSpecifies another relative gradient convergence criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"GRADCHECK=|GC=","ProcedureOptionHelp":{"#cdata":"Specifies whether or not to compute a test vector and test matrix to check whether the gradient g \nspecified by a GRADIENT statement (or indirectly by a JACOBIAN statement) is appropriate for the \nfunction f computed by the program statements."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"NONE","@Value2":"FAST","@Value3":"DETAIL"},"ProcedureOptionToolTips":{"@ToolTip1":"Suppresses the default derivative test.","@ToolTip2":"A fast derivative test is performed. This is the default.","@ToolTip3":"Computes a test vector and test matrix to check whether the gradient g specified by a GRADIENT  statement (or indirectly by a JACOBIAN statement) is appropriate for the function f computed  by the program statements."}},{"ProcedureOptionName":"HESCAL=|HS=","ProcedureOptionHelp":{"#cdata":"Specifies the scaling version of the Hessian or crossproduct Jacobian matrix used in NRRIDG, TRUREG, \nLEVMAR, NEWRAP, or DBLDOG optimization."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"0","@Value2":"1","@Value3":"2","@Value4":"3"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies that no scaling is done.","@ToolTip2":"Specifies the Mor\u00e9 (1978) scaling update","@ToolTip3":"Specifies the Dennis, Gay, and Welsch (1981) scaling update","@ToolTip4":"Specifies that di is reset in each iteration"}},{"ProcedureOptionName":"INEST=","ProcedureOptionHelp":{"#cdata":"[Syntax: INEST=SAS-data-set] \n      \nCan be used to specify the initial values of the parameters defined in a DECVAR statement \nas well as simple boundary constraints and general linear constraints."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"INFEASIBLE","ProcedureOptionHelp":{"#cdata":"Specifies that the function values of both feasible and infeasible grid points are to be computed, \ndisplayed, and written to the OUTEST= data set. If the =r specification is not used, the initial \nestimate of the approximate Hessian is set to the true Hessian or crossproduct Jacobian at x\u2070."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"INHESSIAN=","ProcedureOptionHelp":{"#cdata":"[Syntax: INHESSIAN<=r>] \n      \nSpecifies how the initial estimate of the approximate Hessian is defined for the quasi-Newton \ntechniques QUANEW and DBLDOG."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"INITIAL=","ProcedureOptionHelp":{"#cdata":"[Syntax: INITIAL=r] \n      \nSpecifies a value r as the common initial value for all parameters for which no other initial value \nassignments by the DECVAR statement or an INEST= data set are made."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"INQUAD=","ProcedureOptionHelp":{"#cdata":"[Syntax: INQUAD=SAS-data-set] \n      \nCan be used to specify (the nonzero elements of) the matrix H, the vector g, and the scalar c \nof a quadratic programming problem."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"INSTEP=|SALPHA=|RADIUS=","ProcedureOptionHelp":{"#cdata":"[Syntax: INSTEP=r] \n      \nReduces the length of the first trial step during the line search of the first iterations."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LCDEACT=|LCD=","ProcedureOptionHelp":{"#cdata":"[Syntax: LCDEACT= | LCD=r] \n      \nSpecifies a threshold r for the Lagrange multiplier that decides whether an active inequality \nconstraint remains active or can be deactivated."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LCEPSILON=|LCEPS=|LCE=","ProcedureOptionHelp":{"#cdata":"[Syntax: LCEPSILON= | LCEPS= | LCE=r] \n      \nSpecifies the range r, r \u2265 0, for active and violated boundary and linear constraints."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LCSINGULAR=|LCSING=|LCS=","ProcedureOptionHelp":{"#cdata":"[Syntax: LCSINGULAR= | LCSING= | LCS=r] \n      \nSpecifies a criterion r, r \u2265 0, used in the update of the QR decomposition that decides\nwhether an active constraint is linearly dependent on a set of other active constraints. "},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LINESEARCH=|LIS=|SMETHOD=|SM=","ProcedureOptionHelp":{"#cdata":"[Syntax: LINESEARCH | LIS | SMETHOD | SM=i] \n      \nSpecifies the line-search method for the CONGRA, QUANEW, and NEWRAP optimization techniques."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"1","@Value2":"2","@Value3":"3","@Value4":"4","@Value5":"5","@Value6":"6","@Value7":"7","@Value8":"8"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies a line-search method that needs the same number of function and gradient calls for cubic  interpolation and cubic extrapolation; this method is similar to one used by the Harwell subroutine  library.","@ToolTip2":"Specifies a line-search method that needs more function calls than gradient calls for quadratic and  cubic interpolation and cubic extrapolation; this method is implemented as shown in Fletcher (1987)  and can be modified to an exact line search by using the LSPRECISION= option.","@ToolTip3":"Specifies a line-search method that needs the same number of function and gradient calls for cubic  interpolation and cubic extrapolation; this method is implemented as shown in Fletcher (1987) and  can be modified to an exact line search by using the LSPRECISION= option.","@ToolTip4":"Specifies a line-search method that needs the same number of function and gradient calls for stepwise  extrapolation and cubic interpolation","@ToolTip5":"Specifies a line-search method that is a modified version of LIS=4.","@ToolTip6":"Specifies golden section line search (Polak 1971), which uses only function values for linear approximation.","@ToolTip7":"Specifies bisection line search (Polak 1971), which uses only function values for linear approximation.","@ToolTip8":"Specifies Armijo line-search technique (Polak 1971), which uses only function values for linear approximation."}},{"ProcedureOptionName":"LIST","ProcedureOptionHelp":{"#cdata":"Displays the model program and variable lists. The LIST option is a debugging feature and is not \nnormally needed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LISTCODE","ProcedureOptionHelp":{"#cdata":"Displays the derivative tables and the compiled program code. The LISTCODE option is a debugging \nfeature and is not normally needed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LSPRECISION=|LSP=|SPRECISION=|SP=","ProcedureOptionHelp":{"#cdata":"[Syntax: LSPRECISION=r | LSP=r | SPRECISION=r | SP=r] \n      \nSpecifies the degree of accuracy that should be obtained by the line-search algorithms LIS=2 \nand LIS=3. The default LSPRECISION= values are:\n\n  o For TECH=QUANEW UPDATE=DBFGS, BFGS: r = 0.4\n  o For TECH=QUANEW UPDATE=DDFP, DFP: r = 0.06 \n  o For TECH=HYQUAN UPDATE=DBFGS: r = 0.1\n  o For TECH=HYQUAN UPDATE=DDFP: r = 0.06 \n  o For TECH=CONGRA UPDATE=all r = 0.1\n  o For TECH=NEWRAP NO UPDATE: r = 0.9"},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXFUNC=|MAXFU=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXFUNC=i | MAXFU=i] \n      \nSpecifies the maximum number i of function calls in the optimization process. The default \nvalues are:\n\n  o For TECH= TRUREG, LEVMAR, NRRIDG, NEWRAP: i=125 \n  o For TECH= QUANEW, HYQUAN, DBLDOG: i=500 \n  o For TECH= CONGRA, QUADAS: i=1000\n  o For TECH= NMSIMP: i=3000"},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXITER=|MAXIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXITER= | MAXIT=i <n>] \n      \nSpecifies the maximum number n of iterations in the optimization process. The default values are:\n\n  o For TECH= TRUREG, LEVMAR, NRRIDG, NEWRAP: i=50 \n  o For TECH= QUANEW, HYQUAN, DBLDOG: i=200 \n  o For TECH= CONGRA, QUADAS: i=400\n  o For TECH= NMSIMP: i=1000"},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXSTEP=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXSTEP=r<n>] \n      \nSpecifies an upper bound for the step length of the line-search algorithms during the first \nn iterations."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXTIME=","ProcedureOptionHelp":{"#cdata":"[Syntax: MAXTIME=r] \n      \nSpecifies an upper limit of r seconds of real time for the optimization process."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MINITER=|MINIT=","ProcedureOptionHelp":{"#cdata":"[Syntax: MINITER= | MINIT=i] \n      \nSpecifies the minimum number of iterations. The default value is 0."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MODEL=","ProcedureOptionHelp":{"#cdata":"[Syntax: MODEL=model-name, model-list] \n      \nReads the program statements from one or more input model files created by previous PROC NLP \nsteps using the OUTMODEL= option."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MSINGULAR=|MSING=","ProcedureOptionHelp":{"#cdata":"[Syntax: MSINGULAR= | MSING=r] \n      \nSpecifies a relative singularity criterion r, r > 0, for measuring singularity of Hessian \nand crossproduct Jacobian and their projected forms."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NOEIGNUM","ProcedureOptionHelp":{"#cdata":"Suppresses the computation and output of the determinant and the inertia of the Hessian, crossproduct \nJacobian, and covariance matrices."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOMISS","ProcedureOptionHelp":{"#cdata":"Is valid only for those variables of the DATA= data set that are referred to in program statements."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOPRINT","ProcedureOptionHelp":{"#cdata":"Suppresses output."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OPTCHECK=","ProcedureOptionHelp":{"#cdata":"[Syntax: OPTCHECK[=r]] \n      \nComputes the function values f(xl) of a grid of points xl in a small neighborhood of x*. \nThe xl are located in a ball of radius r about x*. If the OPTCHECK option is specified \nwithout r, the default value is r=0.1 at the starting point and r=0.01 at the terminating \npoint."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUT=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUT=SAS-data-set] \n      \nCreates an output data set that contains those variables of a DATA= input data set referred \nto in the program statements plus additional variables computed by performing the program \nstatements of the objective function, derivatives, and nonlinear constraints."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"OUTALL","ProcedureOptionHelp":{"#cdata":"If an OUTEST= data set is specified, this option sets the OUTHESSIAN option if the MIN or MAX \nstatement is used. If the LSQ statement is used, the OUTALL option sets the OUTCRPJAC option. \nIf nonlinear constraints are specified using the NLINCON statement, the OUTALL option sets the\nOUTNLCJAC option."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OUTCRPJAC","ProcedureOptionHelp":{"#cdata":"If an OUTEST= data set is specified, the crossproduct Jacobian matrix of the m functions composing \nthe least-squares function is written to the OUTEST= data set."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUTEST=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUTEST=SAS-data-set] \n      \nCreates an output data set that contains the results of the optimization."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"OUTGRID","ProcedureOptionHelp":{"#cdata":"Writes the grid points and their function values to the OUTEST= data set. By default, only the \nfeasible grid points are saved; however, if the INFEASIBLE option is specified, all feasible \nand infeasible grid points are saved."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OUTHESSIAN","ProcedureOptionHelp":{"#cdata":"Writes the Hessian matrix of the objective function to the OUTEST= data set."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OUTITER","ProcedureOptionHelp":{"#cdata":"Writes during each iteration the parameter estimates, the value of the objective function, the \ngradient (if available), and (if OUTTIME is specified) the time in seconds from the start of \nthe optimization to the OUTEST= data set."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OUTJAC","ProcedureOptionHelp":{"#cdata":"Writes the Jacobian matrix of the m functions composing the least-squares function to the OUTEST= \ndata set."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OUTMODEL=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUTMODEL=model-name] \n      \nSpecifies the name of an output model file to which the program statements are to be written."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUTNLCJAC","ProcedureOptionHelp":{"#cdata":"If an OUTEST= data set is specified, the Jacobian matrix of the nonlinear constraint functions \nspecified by the NLINCON statement is written to the OUTEST= data set. If the Jacobian matrix \nof the nonlinear constraint functions is computed for some other reason (if, for example, the \nPNLCJAC option is specified), the OUTNLCJAC option is set by default."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OUTTIME","ProcedureOptionHelp":{"#cdata":"Is used if an OUTEST= data set is specified and if the OUTITER option is specified. If OUTTIME \nis specified, the time in seconds from the start of the optimization to the start of each \niteration is written to the OUTEST= data set."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PALL|ALL","ProcedureOptionHelp":{"#cdata":"Displays all optional output except the output generated by the PSTDERR, PCOV, LIST, or \nLISTCODE option."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PCOV","ProcedureOptionHelp":{"#cdata":"Displays the covariance matrix specified by the COV= option. The PCOV option is set automatically \nif the PALL and COV= options are set."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PCRPJAC|PJTJ","ProcedureOptionHelp":{"#cdata":"Displays the n x n crossproduct Jacobian matrix J^T J. If the PALL option is specified and the LSQ \nstatement is used, this option is set automatically."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PEIGVAL","ProcedureOptionHelp":{"#cdata":"Displays the distribution of eigenvalues if a G4 inverse is computed for the covariance matrix."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PERROR","ProcedureOptionHelp":{"#cdata":"Specifies additional output for such applications where the program code for objective function or \nnonlinear constraints cannot be evaluated during the iteration process."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PFUNCTION","ProcedureOptionHelp":{"#cdata":"Displays the values of all functions specified in a LSQ, MIN, or MAX statement for each observation \nread fom the DATA= input data set. The PALL option sets the PFUNCTION option automatically."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PGRID","ProcedureOptionHelp":{"#cdata":"Displays the function values from the grid search."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PHESSIAN","ProcedureOptionHelp":{"#cdata":"Displays the nxn Hessian matrix G."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PHISTORY|PHIS","ProcedureOptionHelp":{"#cdata":"Displays the optimization history. No optimization history is displayed for TECH=LICOMP. This output \nis included in both the default output and the output specified by the PALL option."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PINIT|PIN","ProcedureOptionHelp":{"#cdata":"Displays the initial values and derivatives (if available). This output is included in both the default \noutput and the output specified by the PALL option."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PJACOBI","ProcedureOptionHelp":{"#cdata":"Displays the mxn Jacobian matrix J."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PNLCJAC","ProcedureOptionHelp":{"#cdata":"Displays the Jacobian matrix of nonlinear constraints specified by the NLINCON statement. The PNLCJAC \noption is set automatically if the PALL option is specified."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PSHORT","ProcedureOptionHelp":{"#cdata":"Restricts the amount of default output."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PSTDERR","ProcedureOptionHelp":{"#cdata":"Computes standard errors that are defined as square roots of the diagonal elements of the \ncovariance matrix."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PSUMMARY","ProcedureOptionHelp":{"#cdata":"Restricts the amount of default displayed output to a short form of iteration history and notes, \nwarnings, and errors."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PTIME","ProcedureOptionHelp":{"#cdata":"Specifies the output of four different but partially overlapping differences of real time."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"RANDOM=","ProcedureOptionHelp":{"#cdata":"[Syntax: RANDOM=i] \n      \nSpecifies a positive integer as a seed value for the pseudorandom number generator."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"RESTART=|REST=","ProcedureOptionHelp":{"#cdata":"[Syntax: RESTART= | REST=i] \n      \nSpecifies that the QUANEW, HYQUAN, or CONGRA algorithm is restarted with a steepest descent/ascent \nsearch direction after at most i > 0 iterations."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"SIGSQ=","ProcedureOptionHelp":{"#cdata":"[Syntax: SIGSQ=sq] \n      \nSpecifies a scalar factor sq > 0 for computing the covariance matrix."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SINGULAR=|SING=","ProcedureOptionHelp":{"#cdata":"[Syntax: SINGULAR= | SING=r] \n      \nSpecifies the singularity criterion r, 0 < r < 1, for the inversion of the Hessian matrix and \ncrossproduct Jacobian."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"TECHNIQUE=|TECH=|OMETHOD=|OM=","ProcedureOptionHelp":{"#cdata":"[Syntax: TECHNIQUE= | TECH=name | OMETHOD= | OM=name] \n      \nSpecifies the optimization technique."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"CONGRA","@Value2":"DBLDOG","@Value3":"LEVMAR","@Value4":"NEWRAP","@Value5":"NRRIDG","@Value6":"QUANEW","@Value7":"TRUREG","@Value8":"HYQUAN","@Value9":"LICOMP","@Value10":"NMSIMP","@Value11":"QUADAS","@Value12":"NONE"},"ProcedureOptionToolTips":{"@ToolTip1":"Chooses one of four different conjugate-gradient optimization algorithms, which can be more precisely  defined with the UPDATE= option and modified with the LINESEARCH= option.","@ToolTip2":"Performs a version of double-dogleg optimization, which uses the gradient to update an approximation  of the Cholesky factor of the Hessian.","@ToolTip3":"Performs a highly stable but, for large problems, memory- and time-consuming Levenberg-Marquardt  optimization technique, a slightly improved variant of the Mor\u00e9 (1978) implementation. This is  the default optimization technique if there are fewer than 40 parameters to estimate.","@ToolTip4":"Performs a usually stable but, for large problems, memory- and time-consuming Newton-Raphson  optimization technique. The algorithm combines a line-search algorithm with ridging, and it  can be modified with the LINESEARCH= option.","@ToolTip5":"Performs a usually stable but, for large problems, memory- and time-consuming Newton-Raphson  optimization technique. This algorithm does not perform a line search.","@ToolTip6":"Chooses one of four different quasi-Newton optimization algorithms that can be more precisely  defined with the UPDATE= option and modified with the LINESEARCH= option.","@ToolTip7":"Performs a usually very stable but, for large problems, memory- and time-consuming trust-region  optimization technique. The algorithm is implemented similar to Gay (1983) and Mor\u00e9 and Sorensen  (1983).","@ToolTip8":"Chooses one of three different hybrid quasi-Newton optimization algorithms which can be more  precisely defined with the VERSION= option and modified with the LINESEARCH= option.","@ToolTip9":"Solves a quadratic program as a linear complementarity problem.","@ToolTip10":"Performs the Nelder-Mead simplex optimization method.","@ToolTip11":"Performs a special quadratic version of the active set strategy.","@ToolTip12":"Does not perform any optimization."}},{"ProcedureOptionName":"UPDATE=","ProcedureOptionHelp":{"#cdata":"Specifies the update method for the quasi-Newton, double-dogleg, or conjugate-gradient optimization technique."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"BFGS","@Value2":"DBFGS","@Value3":"DDFP","@Value4":"DFP","@Value5":"PB","@Value6":"FR","@Value7":"PR","@Value8":"CD"},"ProcedureOptionToolTips":{"@ToolTip1":"Performs the original Broyden, Fletcher, Goldfarb, and Shanno (BFGS) update of the inverse  Hessian matrix.","@ToolTip2":"Performs the dual BFGS update of the Cholesky factor of the Hessian matrix. This is the default  update method.","@ToolTip3":"Performs the dual Davidon, Fletcher, and Powell (DFP) update of the Cholesky factor of the  Hessian matrix.","@ToolTip4":"Performs the original DFP update of the inverse Hessian matrix.","@ToolTip5":"Performs the automatic restart update method of Powell (1977) and Beale (1972).","@ToolTip6":"Performs the Fletcher-Reeves update (Fletcher 1987).","@ToolTip7":"Performs the Polak-Ribiere update (Fletcher 1987).","@ToolTip8":"Performs a conjugate-descent update of Fletcher (1987)."}},{"ProcedureOptionName":"VARDEF=","ProcedureOptionHelp":{"#cdata":"Specifies the divisor d used in the calculation of the covariance matrix and approximate standard errors."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"DF","@Value2":"N"},"ProcedureOptionToolTips":{"@ToolTip1":"Degrees of freedom","@ToolTip2":"Number of parameters"}},{"ProcedureOptionName":"VERSION=|VS=","ProcedureOptionHelp":{"#cdata":"Specifies the version of the hybrid quasi-Newton optimization technique or the version \nof the quasi-Newton optimization technique with nonlinear constraints."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"1","@Value2":"2","@Value3":"3"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies version HY1 of Fletcher and Xu (1987), or update of the \u03bc vector like Powell (1978a,b) (update like VF02AD).","@ToolTip2":"Specifies version HY2 of Fletcher and Xu (1987), or update of the \u03bc vector like Powell (1982b) (update like VMCWD).","@ToolTip3":"Specifies version HY3 of Fletcher and Xu (1987)."}},{"ProcedureOptionName":"VSINGULAR=|VSING=","ProcedureOptionHelp":{"#cdata":"[Syntax: VSINGULAR= | VSING=r] \n      \nSpecifies a relative singularity criterion r, r > 0, for measuring singularity of Hessian and \ncrossproduct Jacobian and their projected forms, which may have to be converted to compute the \ncovariance matrix."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"XCONV=|XTOL=","ProcedureOptionHelp":{"#cdata":"[Syntax: XCONV= | XTOL=r <n>] \n      \nSpecifies the relative parameter convergence criterion."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"XSIZE=","ProcedureOptionHelp":{"#cdata":"[Syntax: XSIZE=r] \n      \nSpecifies the parameter r > 0 of the relative parameter termination criterion. The default \nvalue is r=0."},"ProcedureOptionType":"V"}],"StatementOption":{"StatementOptionName":"OUTDER=","StatementOptionHelp":{"#cdata":"Specifies whether or not derivatives are written to the OUT= data set."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"0","@Value2":"1","@Value3":"2"},"StatementOptionToolTips":{"@ToolTip1":"No derivatives are written to the data set. This is the default.","@ToolTip2":"Only first-order derivatives are written.","@ToolTip3":"First- and second-order derivatives are written to the data set."}}},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"ARRAY","StatementHelp":{"#cdata":"Syntax: ARRAY arrayname [{ dimensions }] [$] [variables and constants] ;\n\nThe ARRAY statement is similar to, but not the same as, the ARRAY statement in the SAS DATA step. \nThe ARRAY statement is used to associate a name (of no more than eight characters) with a list of \nvariables and constants. The array name is used with subscripts in the program to refer to the array \nelements."},"StatementOptions":null},{"StatementName":"BOUNDS","StatementHelp":{"#cdata":"Syntax: BOUNDS b_con [ , b_con... ] ;\n\nwhere b_con is given in one of the following formats: \n\n    o number operator parameter_list operator number \n    o number operator parameter_list \n    o parameter_list operator number \nand operator is \u2264, <, \u2265, > or =.\n\nBoundary constraints are specified with a BOUNDS statement. One- or two-sided boundary constraints \nare allowed. The list of boundary constraints are separated by commas."},"StatementOptions":null},{"StatementName":"BY","StatementHelp":{"#cdata":"Syntax: BY <DESCENDING> variable-1 <...<DESCENDING> variable-n> <NOTSORTED>; \n      \nA BY statement can be used with PROC NLP to obtain separate analyses on DATA= data set \nobservations in groups defined by the BY variables. That means, for values of the TECH= \noption other than NONE, an optimization problem is solved for each BY group separately."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DESCENDING","StatementOptionHelp":{"#cdata":"Specifies that the observations are sorted in descending order by the variable that immediately \nfollows the word DESCENDING in the BY statement."},"StatementOptionType":"S"},{"StatementOptionName":"NOTSORTED","StatementOptionHelp":{"#cdata":"Specifies that observations are not necessarily sorted in alphabetic or numeric order."},"StatementOptionType":"S"}]}},{"StatementName":"CRPJAC","StatementHelp":{"#cdata":"Syntax: CRPJAC variables ;\n\nThe CRPJAC statement defines the crossproduct Jacobian matrix J^T J used in solving \nleast-squares problems."},"StatementOptions":null},{"StatementName":"DECVAR|VAR|PARMS|PARAMETERS","StatementHelp":{"#cdata":"Syntax: DECVAR name_list [=numbers] [, name_list [=numbers] ...] ;\n      \nThe DECVAR statement lists the names of the n > 0 decision variables and specifies grid \nsearch and initial values for an iterative optimization process."},"StatementOptions":null},{"StatementName":"GRADIENT","StatementHelp":{"#cdata":"Syntax: GRADIENT variables ;\n\nThe GRADIENT statement defines the gradient vector which contains the first-order derivatives \nof the objective function f with respect to x1,...,xn."},"StatementOptions":null},{"StatementName":"HESSIAN","StatementHelp":{"#cdata":"Syntax: HESSIAN variables ;\n\nThe HESSIAN statement defines the Hessian matrix G containing the second-order derivatives \nof the objective function f with respect to x1,...,xn."},"StatementOptions":null},{"StatementName":"INCLUDE","StatementHelp":{"#cdata":"Syntax: INCLUDE model files ;\n\nThe INCLUDE statement can be used to append model code to the current model code. The contents \nof included model files, created using the OUTMODEL= option, are inserted into the model program \nat the position in which the \nINCLUDE statement appears."},"StatementOptions":null},{"StatementName":"JACNLC","StatementHelp":{"#cdata":"Syntax: JACNLC variables ;\n\nThe JACNLC statement defines the Jacobian matrix for the system of constraint functions \nc-1(x),...,c-mc(x)."},"StatementOptions":null},{"StatementName":"JACOBIAN","StatementHelp":{"#cdata":"Syntax: JACOBIAN variables ;\n\nThe JACOBIAN statement defines the JACOBIAN matrix J for a system of objective functions."},"StatementOptions":null},{"StatementName":"LABEL","StatementHelp":{"#cdata":"Syntax: LABEL variable='label' [ ,variable='label'... ] ;\n\nThe LABEL statement can be used to assign labels (up to 40 chararcters) to the decision \nvariables listed in the DECVAR statement."},"StatementOptions":null},{"StatementName":"LINCON","StatementHelp":{"#cdata":"Syntax: LINCON l_con [ , l_con ... ] ;\n\nwhere l_con is given in one of the following formats: \n\n    olinear_term operator number \n    o number operator linear_term \n\nand linear_term is of the following form: \n\n<+|-><number*>variable<+|-<number*>variable...>\n\nThe value of operator can be one of the following: \u2264, <, \u2265, >, or =.\n\nThe LINCON statement specifies equality or inequality constraints separated by commas."},"StatementOptions":null},{"StatementName":"MATRIX","StatementHelp":{"#cdata":"Syntax: MATRIX M_name pattern_definitions ;\n\nThe MATRIX statement defines a matrix H and the vector g, which can be given in the MINQUAD \nor MAXQUAD statement."},"StatementOptions":null},{"StatementName":"MIN","StatementHelp":{"#cdata":"Syntax: MIN variables ;\n      \nThe MIN, MAX, or LSQ statement specifies the objective functions. Only one of the \nthree statements can be used at a time and at least one must be given."},"StatementOptions":null},{"StatementName":"MAX","StatementHelp":{"#cdata":"Syntax: MAX variables ;\n      \nThe MIN, MAX, or LSQ statement specifies the objective functions. Only one of the \nthree statements can be used at a time and at least one must be given."},"StatementOptions":null},{"StatementName":"LSQ","StatementHelp":{"#cdata":"Syntax: LSQ variables ;\n      \nThe MIN, MAX, or LSQ statement specifies the objective functions. Only one of the \nthree statements can be used at a time and at least one must be given."},"StatementOptions":null},{"StatementName":"MINQUAD","StatementHelp":{"#cdata":"Syntax: MINQUAD H_name [ , g_name [ , c_number ] ] ;\n\nSpecifies the matrix H, vector g, and scalar c that define a quadratic objective function. \nThe MINQUAD statement is for minimizing the objective function."},"StatementOptions":null},{"StatementName":"MAXQUAD","StatementHelp":{"#cdata":"Syntax: MAXQUAD H_name [ , g_name [ , c_number ] ] ;\n\nSpecifies the matrix H, vector g, and scalar c that define a quadratic objective function. \nThe MAXQUAD statement is for maximizing the objective function."},"StatementOptions":null},{"StatementName":"NLINCON|NLC","StatementHelp":{"#cdata":"Syntax: NLINCON nlcon [ , nlcon ...] [ / option ] ;  \n\nwhere nlcon is given in one of the following formats: \n\n    o number operator variable_list operator number \n    o-number operator variable_list \n    o variable_list operator number \n\nand operator is \u2264, <, \u2265, >, or =. The value of option can be SUMOBS or EVERYOBS. \n\nGeneral nonlinear equality and inequality constraints are specified with the NLINCON \nstatement. One- or two-sided constraints can be specified in the NLINCON statement. \nHowever, equality constraints must be one-sided. "},"StatementOptions":null},{"StatementName":"PROFILE","StatementHelp":{"#cdata":"Syntax: PROFILE parms [ / [ ALPHA= values ] [ options ] ] ;\n\nwhere parms is given in the format pnam_1 pnam_2 ... pnam_n, and values is the list of \u03b1 values in (0,1). \n\nThe PROFILE statement (1) writes the (x,y) coordinates of profile points for each of the \nlisted parameters to the OUTEST= data set and (2) displays, or writes to the OUTEST= data \nset, the profile likelihood confidence limits (PL CLs) for the listed parameters for the \nspecified \u03b1 values."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ALPHA=","StatementOptionHelp":{"#cdata":"[Syntax: ALPHA=values] \n          \nThe list of \u03b1 values may contain TO and BY keywords."},"StatementOptionType":"V"},{"StatementOptionName":"FFACTOR=","StatementOptionHelp":{"#cdata":"[Syntax: FFACTOR=r] \n          \nSpecifies the factor relating the discrepancy function f(\u03b8) to the chi-square quantile. \nThe default value is r=2."},"StatementOptionType":"V"},{"StatementOptionName":"FORCHI=","StatementOptionHelp":{"#cdata":"Defines the scale for the y values written to the OUTEST= data set."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"F","@Value2":"CHI"},"StatementOptionToolTips":{"@ToolTip1":"The y values are scaled to the values of the log likelihood function f=f(\u03b8).  This is the default value.","@ToolTip2":"The y values are scaled so that y-hat = \u03c7\u00b2."}},{"StatementOptionName":"FEASRATIO=","StatementOptionHelp":{"#cdata":"[Syntax: FEASRATIO=r] \n          \nSpecifies a factor of the Wald confidence limit (or an approximation of it if standard errors \nare not computed) defining an upper bound for the search for confidence limits."},"StatementOptionType":"V"},{"StatementOptionName":"OUTTABLE","StatementOptionHelp":{"#cdata":"Specifies that the complete set \u03b8 of parameter estimates rather than only x = \u03b8-j for each \nconfidence limit is written to the OUTEST= data set."},"StatementOptionType":"S"}]}}]}}}