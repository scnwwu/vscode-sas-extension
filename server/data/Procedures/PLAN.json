{"Procedure":{"Name":"PLAN","ProductGroup":"SAS/STAT","ProcedureHelp":{"#cdata":"Syntax: PROC PLAN <options> ; \n    FACTORS factor-selections </ NOPRINT> ; \n    OUTPUT OUT=SAS-data-set <factor-value-settings> ; \n    TREATMENTS factor-selections ;\n\nThe PLAN procedure constructs designs and randomizes plans for factorial experiments, especially nested and\ncrossed experiments and randomized block designs."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"SEED=","ProcedureOptionHelp":{"#cdata":"[Syntax: SEED=number] \n      \nSpecifies an integer used to start the pseudo-random number generator for selecting factor levels randomly."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"ORDERED","ProcedureOptionHelp":{"#cdata":"Selects the levels of the factor as the integers 1,2,...,m, in order."},"ProcedureOptionType":"S"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"FACTORS","StatementHelp":{"#cdata":"[Syntax: FACTORS factor-selections </ NOPRINT> ;]\n      \nThe FACTORS statement specifies the factors of the plan and generates the plan.\n\nThe form of a factor-selection is\n\n      name = m <OF n> <selection-type> ; \n\nwhere: \n\nname \nis a valid SAS name. This gives the name of a factor in the design.\n \nm\nis a positive integer that gives the number of values to be selected. \n\nn \nis a positive integer that gives the number of values to be selected from. \n\nselection-type \nspecifies one of five methods for selecting m values. Possible values are COMB, CYCLIC, ORDERED, PERM, and RANDOM."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"NOPRINT","StatementOptionHelp":{"#cdata":"Suppresses the display of the plan."},"StatementOptionType":"S"},{"StatementOptionName":"RANDOM","StatementOptionHelp":{"#cdata":"[selection-type] \n          \nSelects the levels of the factor randomly without replacement from the integers 1,2,...,n."},"StatementOptionType":"RS"},{"StatementOptionName":"ORDERED","StatementOptionHelp":{"#cdata":"[selection-type] \n          \nSelects the levels of the factor as the integers 1,2,...,m, in that order."},"StatementOptionType":"RS"},{"StatementOptionName":"PERM","StatementOptionHelp":{"#cdata":"[selection-type] \n          \nSelects the m levels of the factor as a permutation of the integers 1,...,m according to an algorithm \nthat cycles through all m! permutations."},"StatementOptionType":"RS"},{"StatementOptionName":"COMB","StatementOptionHelp":{"#cdata":"[selection-type] \n          \nSelects the m levels of the factor as a combination of the integers 1,...,n taken m at a time, \naccording to an algorithm that cycles through all n!/(m!(n-m)! combinations."},"StatementOptionType":"RS"},{"StatementOptionName":"CYCLIC","StatementOptionHelp":{"#cdata":"[selection-type][Syntax: CYCLIC <(initial-block) > <increment>] \n          \nSelects the levels of the factor by cyclically permuting the integers 1,2,...,n. \n\nWrapping occurs at m if n is not specified, and at n if n is specified. Additional optional \nspecifications are as follows:\n\nWith the selection-type CYCLIC, you can optionally specify an initial-block and an increment. \nThe initial-block must be specified within parentheses, and it specifies the block of numbers \nto permute. The first permutation is the block you specify, the second is the block permuted \nby 1 (or by the increment you specify), and so on. By default, the initial-block is the integers \n1,...,m. If you specify an initial-block, it must have m values. Values specified in the initial-\nblock do not have to be given in increasing order. \n\nThe increment specifies the increment by which to permute the block of numbers. By default, the increment is 1."},"StatementOptionType":"RS"},{"StatementOptionName":"OF","StatementOptionType":"S"}]}},{"StatementName":"OUTPUT","StatementHelp":{"#cdata":"[Syntax: OUTPUT OUT=SAS-data-set <DATA=SAS-data-set> <factor-value-settings> ;] \n      \nThe OUTPUT statement applies only to the last plan generated."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"[Syntax: OUT=SAS-data-set] \n          \nWhen you specify only the OUT= option in the OUTPUT statement, PROC PLAN saves the last plan generated \nto the specified data set."},"StatementOptionType":"RV|DV"},{"StatementOptionName":"DATA=","StatementOptionHelp":{"#cdata":"[Syntax: OUT=SAS-data-set] \n          \nWhen you specify both the DATA= and OUT= options in the OUTPUT statement, then PROC PLAN uses the last \nplan generated to randomize the input data set (DATA=), saving the results to the output data set (OUT=)."},"StatementOptionType":"DV"},{"StatementOptionName":"NVALS=","StatementOptionHelp":{"#cdata":"Lists n numeric values for the factor. By default, the procedure uses NVALS=(1 2 3...n)."},"StatementOptionType":"V"},{"StatementOptionName":"CVALS=","StatementOptionHelp":{"#cdata":"Lists n character strings for the factor. Each string can have up to 40 characters, and each string \nmust be enclosed in quotes. Warning:When you use the CVALS= option, the variable created in the output \ndata set has a length equal to the length of the longest string given as a value; shorter strings are \npadded with trailing blanks. For example, the values output for the first level of a two-level factor \nwith the following two different specifications are not the same. \n\n   CVALS=('String 1' \"String 2\")\n   \n   CVALS=('String 1' \"A longer string\")\n\nThe value output with the second specification is \u2019String 1\u2019 followed by seven blanks. In order to match \ntwo such values (for example, when merging two plans), you must use the TRIM function in the DATA step"},"StatementOptionType":"V"},{"StatementOptionName":"ORDERED","StatementOptionHelp":{"#cdata":"The default association type is ORDERED, for which the first value specified is output for a factor \nlevel setting of 1, the second value specified is output for a level of 2, and so on."},"StatementOptionType":"V"},{"StatementOptionName":"RANDOM","StatementOptionHelp":{"#cdata":"You can also specify an association type of RANDOM, for which the levels are associated with the \nvalues in a random order."},"StatementOptionType":"V"}]}},{"StatementName":"TREATMENTS","StatementHelp":{"#cdata":"[Syntax: TREATMENTS factor-selections ;]\n      \nThe TREATMENTS statement specifies the treatments of the plan to generate, but it does not generate a plan. \n\nThe form of a factor-selection is\n\n      name = m <OF n> <selection-type> ; \n\nwhere: \n\nname \nis a valid SAS name. This gives the name of a factor in the design.\n \nm\nis a positive integer that gives the number of values to be selected.\n\nn \nis a positive integer that gives the number of values to be selected from. \n\nselection-type \nspecifies one of five methods for selecting m values. Possible values are COMB, CYCLIC, ORDERED, PERM, and RANDOM."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"RANDOM","StatementOptionHelp":{"#cdata":"[selection-type] \n          \nSelects the levels of the factor randomly without replacement from the integers 1,2,...,n."},"StatementOptionType":"RS"},{"StatementOptionName":"ORDERED","StatementOptionHelp":{"#cdata":"[selection-type] \n          \nSelects the levels of the factor as the integers 1,2,...,m, in that order."},"StatementOptionType":"RS"},{"StatementOptionName":"PERM","StatementOptionHelp":{"#cdata":"[selection-type] \n          \nSelects the m levels of the factor as a permutation of the integers 1,...,m according to an algorithm \nthat cycles through all m! permutations."},"StatementOptionType":"RS"},{"StatementOptionName":"COMB","StatementOptionHelp":{"#cdata":"[selection-type] \n          \nSelects the m levels of the factor as a combination of the integers 1,...,n taken m at a time, \naccording to an algorithm that cycles through all n!/(m!(n-m)! combinations."},"StatementOptionType":"RS"},{"StatementOptionName":"CYCLIC","StatementOptionHelp":{"#cdata":"[selection-type][Syntax: CYCLIC <(initial-block) > <increment>] \n          \nSelects the levels of the factor by cyclically permuting the integers 1,2,...,n. \n\nWrapping occurs at m if n is not specified, and at n if n is specified. Additional optional \nspecifications are as follows:\n\nWith the selection-type CYCLIC, you can optionally specify an initial-block and an increment. \nThe initial-block must be specified within parentheses, and it specifies the block of numbers \nto permute. The first permutation is the block you specify, the second is the block permuted \nby 1 (or by the increment you specify), and so on. By default, the initial-block is the integers \n1,...,m. If you specify an initial-block, it must have m values. Values specified in the initial-\nblock do not have to be given in increasing order. \n\nThe increment specifies the increment by which to permute the block of numbers. By default, the increment is 1."},"StatementOptionType":"RS"},{"StatementOptionName":"OF","StatementOptionType":"S"}]}}]}}}