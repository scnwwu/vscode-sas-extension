{"Procedure":{"Name":"RPCA","ProductGroup":"CAS|VIYA|DATA MINING AND MACHINE LEARNING","ProcedureHelp":{"#cdata":"Syntax: PROC RPCA <options>; \n    ROWID variable; \n    INPUT variables; \n    SVD <options>; \n    OUTDECOMP <options>; \n    CODE FILE=filename; \n    DISPLAY <table-list> </ options>; \n    DISPLAYOUT table-spec-list </ options>; \n    \nThe RPCA procedure implements robust principal component analysis (RPCA) in SAS Viya. RPCA can be \nused in many areas, including image processing, latent semantic indexing, ranking, and matrix \ncompletion (Cand\u00e8s et\u00a0al. 2011). \n\nThe RPCA procedure decomposes an input matrix into a sum of two matrices: a low-rank matrix and \na sparse matrix. You can use the low-rank matrix to do feature extraction and use the sparse matrix\nto detect anomalies."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"CENTER","ProcedureOptionHelp":{"#cdata":"Centers the observations by the mean of each column."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"COLSTATISTICS=","ProcedureOptionHelp":{"#cdata":"Syntax: COLSTATISTICS=CAS-libref.data-table \n      \nSpecifies the name of the output table for the columStatistics table. This table contains simple \nstatistics for the variables of the input data set. \n\nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session \nidentifier, and data-table specifies the name of the output data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=CAS-libref.data-table \n\nNames the input data table for PROC RPCA to use. The default is the most recently created data \ntable. CAS-libref.data-table is a two-level name, where \n\nCAS-libref\n  refers to a collection of information that is defined in the LIBNAME statement and includes \n  the caslib, which includes a path to the data, and a session identifier, which defaults to \n  the active session but which can be explicitly defined in the LIBNAME statement.\n  \ndata-table\n  specifies the name of the input data table."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"DECOMP=","ProcedureOptionHelp":{"#cdata":"Syntax: DECOMP=SVD | PCA | NONE \n      \nSpecifies the type of analysis. If MAXITER=0, this step is applied to the original input data; \notherwise, it is applied to the low-rank matrix.\n\nBy default, DECOMP=NONE."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"SVD","@Value2":"PCA","@Value3":"NONE"},"ProcedureOptionToolTips":{"@ToolTip1":"Performs singular value decomposition.","@ToolTip2":"Performs principal component analysis.","@ToolTip3":"Performs none of the above two analysis."}},{"ProcedureOptionName":"FIXEDMU","ProcedureOptionHelp":{"#cdata":"If specified, uses a fixed value for \u00b5 in each iteration of RPCA when METHOD=APG. Otherwise, \nis updated dynamically in each iteration."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LAMBDA=","ProcedureOptionHelp":{"#cdata":"Syntax: LAMBDA=number specifies a value for \u019b, where number is a positive real number."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LAMBDAWEIGHT=","ProcedureOptionHelp":{"#cdata":"Syntax: LAMBDAWEIGHT=number \n\nSpecifies the value of \u019bweight. The final value of the \u019b that is used in the RPCA algorithm is calculated by multiplying \n\u019bweigth by \u019b. You can use this value to control the sparsity of the sparse matrix."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXITER=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXITER=number \n          \nSpecifies the maximum number of iterations before the RPCA algorithm stops, where number is a positive \ninteger. By default, MAXITER=1000."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"METHOD=","ProcedureOptionHelp":{"#cdata":"Syntax: METHOD=ALM | APG \n          \nSpecifies the method to perform RPCA. By default, METHOD=ALM."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"ALM","@Value2":"APG"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies the augmented Lagrange multiplier method.","@ToolTip2":"Specifies the accelerated proximal gradient method. "}},{"ProcedureOptionName":"MU=","ProcedureOptionHelp":{"#cdata":"Syntax: MU=number \n          \nSpecifies an initial value of \u00b5 when METHOD=APG. By default, MU=0.001."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NTHREADS=","ProcedureOptionHelp":{"#cdata":"Syntax: NTHREADS=number-of-threads \n      \nSpecifies the number of threads per computation node. The default value is the lesser of 16 and the \nnumber of threads available per computation node."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUTERROR=","ProcedureOptionHelp":{"#cdata":"Syntax: OUTERROR=CAS-libref.data-table \n      \nSpecifies the name of the output table for the error matrix. It contains the noise in the input data. \nThis option can be specified when METHOD=APG. \n\nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, \nand data-table specifies the name of the output data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUTLOWRANK=","ProcedureOptionHelp":{"#cdata":"Syntax: OUTLOWRANK=CAS-libref.data-table \n      \nSpecifies the name of the output table for the low-rank matrix. \nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, \nand data-table specifies the name of the output data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"OUTSPARSE=","ProcedureOptionHelp":{"#cdata":"Syntax: OUTSPARSE=CAS-libref.data-table \n      \nSpecifies the name of the output table for the sparse matrix. \n\nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, \nand data-table specifies the name of the output data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"SCALE","ProcedureOptionHelp":{"#cdata":"Scales the observations by the standard deviation of each column. If a constant variable exists \n(where all observations have the same value), the observations of this column are not scaled."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"TOLERANCE=","ProcedureOptionHelp":{"#cdata":"Syntax: TOLERANCE=number \nspecifies the convergence criterion for the RPCA algorithm. The default value is 10^-7."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"CODE","StatementHelp":{"#cdata":"Syntax: CODE FILE=filename; \n      \nThe CODE statement generates SAS DATA step code that mimics the computations that are performed. The\ngenerated SAS DATA step code can be used for scoring new observations. Only one CODE statement is\nprocessed. If you specify multiple CODE statements, only the first one is used. \n\nThe CODE statement is optional. If you do not include a CODE statement, no score code is generated."},"StatementOptions":{"StatementOption":{"StatementOptionName":"FILE=","StatementOptionHelp":{"#cdata":"Syntax: FILE=filename \n          \nSpecifies the filename of the file to write the SAS score code to."},"StatementOptionType":"V"}}},{"StatementName":"DISPLAY","StatementHelp":{"#cdata":"Syntax: DISPLAY <table-list> </ options>;\n      \nThe DISPLAY statement enables you to specify a list of display tables to display or exclude. This statement \nis similar to the ODS SELECT, ODS EXCLUDE, and ODS TRACE statements. However, the DISPLAY statement can improve \nperformance when a large number of tables could be generated (such as in BY-group processing). The procedure \nprocesses the DISPLAY statement on a CAS server and thus sends only a subset of ODS tables to the SAS client. \nBecause ODS statements are processed on a SAS client, all the display tables generated are first sent to the \nclient and then the client creates a subset. If both DISPLAY and ODS statements are used together, the DISPLAY \nstatement takes precedence over the ODS statements."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"CASESENSITIVE","StatementOptionHelp":{"#cdata":"Performs a case-sensitive comparison of table names in the table-list to display table names when \ntables are subsetted for display. To preserve case, you must enclose table names in the table-list \nin quotation marks."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDE","StatementOptionHelp":{"#cdata":"Displays all display tables except those specified in the table-list."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDEALL","StatementOptionHelp":{"#cdata":"Suppresses display of all tables. This option takes precedence over the other options."},"StatementOptionType":"S"},{"StatementOptionName":"TRACE","StatementOptionHelp":{"#cdata":"Displays the display table names, labels, and paths."},"StatementOptionType":"S"}]}},{"StatementName":"DISPLAYOUT","StatementHelp":{"#cdata":"Syntax: DISPLAYOUT table-spec-list < / options > ;\n      \nThe DISPLAYOUT statement enables you to create CAS output tables from your displayed output. This\nstatement is similar to the ODS OUTPUT statement.\n\nThe table-spec-list specifies a list of CAS output tables to create. Each entry in the list has either a key or a\nkey=value format:\n\n  key=value specifies key as the ODS table name, path, or partial pathname, and specifies value as the\n    CAS output table name.\n  key specifies key as the ODS table name and also as the CAS output table name.\n  \nTable names and partial pathnames are discussed under the DISPLAY statement. The DISPLAYOUT\nstatement does not support regular expressions."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"NOREPLACE","StatementOptionHelp":{"#cdata":"Does not replace an existing CAS output table of the same name."},"StatementOptionType":"S"},{"StatementOptionName":"REPEATED","StatementOptionHelp":{"#cdata":"Replicates the CAS output tables on all nodes."},"StatementOptionType":"S"}]}},{"StatementName":"INPUT","StatementHelp":{"#cdata":"Syntax: INPUT variables;\n\nThe INPUT statement specifies the names of variables to be considered in the RPCA procedure. Only numeric \nvariables are accepted. If you do not specify this statement, PROC RPCA considers all numeric variables in \nthe input data set."},"StatementOptions":null},{"StatementName":"OUTPUT","StatementHelp":{"#cdata":"Syntax: OUTPUT OUT=CAS-libref.data-table <options>;\n\nThe OUTPUT statement creates an output data table to contain the results of the procedure run."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"Syntax: OUT=CAS-libref.data-table\n          \nNames the output data table for PROC MWPCA to use. You must specify this option before any other options. \nCAS-libref.data-table is a two-level name, where\n\n  CAS-libref refers to a collection of information that is defined in the LIBNAME statement and\n    includes the caslib, which includes a path to where the data table is to be stored, and\n    a session identifier, which defaults to the active session but which can be explicitly\n    defined in the LIBNAME statement.\n\n  data-table specifies the name of the output data table."},"StatementOptionType":"V"},{"StatementOptionName":"NPC=","StatementOptionHelp":{"#cdata":"Syntax: NPC=number \n          \nSpecifies the number of principal components to display for each window."},"StatementOptionType":"V"},{"StatementOptionName":"STANDARDPC","StatementOptionHelp":{"#cdata":"Standardizes the output principal components."},"StatementOptionType":"S"}]}},{"StatementName":"OUTDECOMP","StatementHelp":{"#cdata":"Syntax: OUTDECOMP <options>;\n\nThe OUTDECOMP statement specifies output file names for the low-rank matrix decomposition tables."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"SVDDIAG=","StatementOptionHelp":{"#cdata":"Syntax: SVDDIAG=CAS-libref.data-table \n          \nSpecifies the name of the output table to contain the SVD diagonal vector. \n\nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, \nand data-table specifies the name of the output data table.\n          \n[This option is valid only if you specify DECOMP=SVD.]"},"StatementOptionType":"V"},{"StatementOptionName":"SVDLEFT=","StatementOptionHelp":{"#cdata":"Syntax: SVDLEFT=CAS-libref.data-table \n          \nSpecifies the name of the output table to contain the SVD left matrix. \n\nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, \nand data-table specifies the name of the output data table.\n          \n[This option is valid only if you specify DECOMP=SVD.]"},"StatementOptionType":"V"},{"StatementOptionName":"SVDRIGHT=","StatementOptionHelp":{"#cdata":"Syntax: SVDRIGHT=CAS-libref.data-table \n          \nSpecifies the name of the output table to contain the SVD right matrix. \n\nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, \nand data-table specifies the name of the output data table.\n          \n[This option is valid only if you specify DECOMP=SVD.]"},"StatementOptionType":"V"},{"StatementOptionName":"PCLOADINGS=","StatementOptionHelp":{"#cdata":"Syntax: PCLOADINGS=CAS-libref.data-table \n          \nSpecifies the name of the output table to contain the matrix of principal component loadings. \n\nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, \nand data-table specifies the name of the output data table.\n          \n[This option is valid only if you specify DECOMP=PCA.]"},"StatementOptionType":"V"},{"StatementOptionName":"PCSCORES=","StatementOptionHelp":{"#cdata":"Syntax: PCSCORES=CAS-libref.data-table \n          \nSpecifies the name of the output table to contain the matrix of principal component scores. \n\nCAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, \nand data-table specifies the name of the output data table.\n          \n[This option is valid only if you specify DECOMP=PCA.]"},"StatementOptionType":"V"}]}},{"StatementName":"ROWID","StatementHelp":{"#cdata":"Syntax: ROWID variable;\n\nIf your input data set has an index column for observations, you can specify an index variable in the \nROWID statement. When you specify this statement and the input data are distributed on multiple nodes, \nthe RPCA procedure preserves the order of observations in the OUTLOWRANK=, OUTSPARSE=, OUTERROR=, SVDLEFT=, \nand PCSCORES= output tables. The values of variable must be integer. If the values of variable are not \nunique across observations, the RPCA procedure does not keep the order of the observations in the output \ntables."},"StatementOptions":null},{"StatementName":"SVD","StatementHelp":{"#cdata":"Syntax: SVD <option>;\n\nTo calculate the principal components for each window, a singular value decomposition (SVD) solver is called."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"MAXRANK=","StatementOptionHelp":{"#cdata":"Syntax: MAXRANK=number \n          \nSpecifies the maximum value for rank considered by the SVD solver. By default, number is the number \nof input variables."},"StatementOptionType":"V"},{"StatementOptionName":"METHOD=","StatementOptionHelp":{"#cdata":"Syntax: METHOD=EIGEN | RANDOM \n          \nSpecifies the type of the SVD solver.\n\nWhen the number of variables in the input data set is very large, it is recommended that you use \nMETHOD=RANDOM. By default, METHOD=EIGEN."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"EIGEN","@Value2":"RANDOM"},"StatementOptionToolTips":{"@ToolTip1":"Uses the eigenvalue decomposition method.","@ToolTip2":"Uses the randomized SVD method. "}},{"StatementOptionName":"POWER=","StatementOptionHelp":{"#cdata":"Syntax: POWER=number \n          \nSpecifies the parameter power for the SVD solver if METHOD=RANDOM. By default POWER=0."},"StatementOptionType":"V"},{"StatementOptionName":"SEED=","StatementOptionHelp":{"#cdata":"Syntax: SEED=number \n          \nSpecifies the parameter seed for the SVD solver if METHOD=RANDOM. The default value is the current \nlocal time in SAS datetime format."},"StatementOptionType":"V"}]}}]}}}