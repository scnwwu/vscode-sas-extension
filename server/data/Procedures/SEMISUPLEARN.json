{"Procedure":{"Name":"SEMISUPLEARN","ProductGroup":"CAS|VIYA|DATA MINING AND MACHINE LEARNING","ProcedureHelp":{"#cdata":"Syntax: PROC SEMISUPLEARN <options>;\n    DISPLAY <table-list> </ options>;\n    DISPLAYOUT table-spec-list </ options>;\n    INPUT variables / <LEVEL=INTERVAL>;\n    OUTPUT OUT=CAS-libref.data-table <options>;\n    TARGET variables / <LEVEL=NOMINAL>;\n    \nThe SEMISUPLEARN procedure implements the graph-based semisupervised learning algorithm that relies \non label spreading in a distributed framework in SAS Viya. The semisupervised learning algorithm has \nnumerous applications, including web page classification, image recognition, medical imaging, natural \nlanguage processing, and action recognition.\n\nYou can use the SEMISUPLEARN procedure to read and write data in distributed form and to perform search \nin parallel by making full use of multicore computers or distributed computing environments."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"Syntax: DATA=CAS-libref.data-table \n\nNames the input data table for PROC SEMISUPLEARN to use. The default is the most recently created data \ntable. CAS-libref.data-table is a two-level name, where \n\nCAS-libref\n  refers to a collection of information that is defined in the LIBNAME statement and includes \n  the caslib, which includes a path to the data, and a session identifier, which defaults to \n  the active session but which can be explicitly defined in the LIBNAME statement.\n  \ndata-table\n  specifies the name of the input data table."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"GAMMA=","ProcedureOptionHelp":{"#cdata":"Syntax: GAMMA=number\n      \nSpecifies the number of the inverse of the variance for Gaussian kernels in order to calculate \nsimilarity between observations, where number is a positive real number. By default, GAMMA=20."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"LABEL","ProcedureOptionHelp":{"#cdata":"Syntax: LABEL=CAS-libref.data-table\n      \nSpecifies the input data table that contains the labeled data observations, which are the data \nwith target variables. CAS-libref.data-table is a two-level name, where CAS-libref refers to the \ncaslib and session identifier, and data-table specifies the name of the input data table."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"MAXITER=","ProcedureOptionHelp":{"#cdata":"Syntax: MAXITER=number\n      \nSpecifies the number of iterations for label predictions, where number is a positive integer. \nBy default, MAXITER=3."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NTHREADS=","ProcedureOptionHelp":{"#cdata":"Syntax: NTHREADS=number\n      \nSpecifies the number of threads to use for the computation, where number is an integer from 1 to 64, \ninclusive. The default value is the maximum number of available threads per computer."},"ProcedureOptionType":"V"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"DISPLAY","StatementHelp":{"#cdata":"Syntax: DISPLAY <table-list> </ options>;\n      \nThe DISPLAY statement enables you to specify a list of display tables to display or exclude. This statement \nis similar to the ODS SELECT, ODS EXCLUDE, and ODS TRACE statements. However, the DISPLAY statement can improve \nperformance when a large number of tables could be generated (such as in BY-group processing). The procedure \nprocesses the DISPLAY statement on a CAS server and thus sends only a subset of ODS tables to the SAS client. \nBecause ODS statements are processed on a SAS client, all the display tables generated are first sent to the \nclient and then the client creates a subset. If both DISPLAY and ODS statements are used together, the DISPLAY \nstatement takes precedence over the ODS statements."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"CASESENSITIVE","StatementOptionHelp":{"#cdata":"Performs a case-sensitive comparison of table names in the table-list to display table names when \ntables are subsetted for display. To preserve case, you must enclose table names in the table-list \nin quotation marks."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDE","StatementOptionHelp":{"#cdata":"Displays all display tables except those specified in the table-list."},"StatementOptionType":"S"},{"StatementOptionName":"EXCLUDEALL","StatementOptionHelp":{"#cdata":"Suppresses display of all tables. This option takes precedence over the other options."},"StatementOptionType":"S"},{"StatementOptionName":"TRACE","StatementOptionHelp":{"#cdata":"Displays the display table names, labels, and paths."},"StatementOptionType":"S"}]}},{"StatementName":"DISPLAYOUT","StatementHelp":{"#cdata":"Syntax: DISPLAYOUT table-spec-list < / options > ;\n      \nThe DISPLAYOUT statement enables you to create CAS output tables from your displayed output. This\nstatement is similar to the ODS OUTPUT statement.\n\nThe table-spec-list specifies a list of CAS output tables to create. Each entry in the list has either a key or a\nkey=value format:\n\n  key=value specifies key as the ODS table name, path, or partial pathname, and specifies value as the\n    CAS output table name.\n  key specifies key as the ODS table name and also as the CAS output table name.\n  \nTable names and partial pathnames are discussed under the DISPLAY statement. The DISPLAYOUT\nstatement does not support regular expressions."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"INCLUDEALL","StatementOptionHelp":{"#cdata":"Creates output CAS tables for all display tables. The name of the created output CAS table is the same \nas the corresponding display table name. If you specify this option, the table-spec-list specification \nis ignored."},"StatementOptionType":"S"},{"StatementOptionName":"NOREPLACE","StatementOptionHelp":{"#cdata":"Does not replace an existing CAS output table of the same name."},"StatementOptionType":"S"},{"StatementOptionName":"REPEATED","StatementOptionHelp":{"#cdata":"Replicates all CAS output tables on all nodes."},"StatementOptionType":"S"}]}},{"StatementName":"INPUT","StatementHelp":{"#cdata":"Syntax: INPUT variables / <LEVEL=INTERVAL | NOMINAL>;\n\nThe INPUT statement specifies the variables to use for calculating the similarity measure \nin the semisupervised learning algorithm. The variables must be of interval type. You must \nspecify at least one input variable."},"StatementOptions":{"StatementOption":{"StatementOptionName":"LEVEL=","StatementOptionHelp":{"#cdata":"Syntax: LEVEL=INTERVAL\n          \nSpecifies the level of measurement of the variables."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"INTERVAL"},"StatementOptionToolTips":{"@ToolTip1":"Specifies that the level of measurement is interval."}}}},{"StatementName":"OUTPUT","StatementHelp":{"#cdata":"Syntax: OUTPUT OUT=CAS-libref.data-table < options > ;\n      \nThe OUTPUT statement creates the predicted target variable data table for both the unlabeled data \nand the labeled data. For each row in the output data table, the WARN column indicates whether the \nrow of data is coming from labeled data or unlabeled data. The WARN value is 1 for labeled data and \n0 for unlabeled data. In the table, the formatted strings are provided in the predicted label."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"Syntax: OUT=CAS-libref.data-table\n          \nNames the output data table for PROC SEMISUPLEARN to use. You must specify this option before any other options. \n\nCAS-libref.data-table is a two-level name, where\n\n  CAS-libref refers to a collection of information that is defined in the LIBNAME statement and\n    includes the caslib, which includes a path to where the data table is to be stored, and\n    a session identifier, which defaults to the active session but which can be explicitly\n    defined in the LIBNAME statement. \n    \n  data-table specifies the name of the output data table."},"StatementOptionType":"V"},{"StatementOptionName":"COPYVAR=|COPYVARS=","StatementOptionHelp":{"#cdata":"Syntax: COPYVAR=variable | COPYVARS=(variables) \n          \nLists one or more variables from the unlabeled data table to be transferred to the output data table."},"StatementOptionType":"V"}]}},{"StatementName":"TARGET","StatementHelp":{"#cdata":"Syntax: TARGET variable / <LEVEL=NOMINAL>;\n\nThe TARGET statement lists the target variable to be considered from the labeled data table \nin the PROC SEMISUPLEARN statement. You must specify one variable, which must be nominal. \nThe default target variable type is nominal."},"StatementOptions":{"StatementOption":{"StatementOptionName":"LEVEL=","StatementOptionHelp":{"#cdata":"Syntax: LEVEL=NOMINAL"},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"NOMINAL"},"StatementOptionToolTips":{"@ToolTip1":"Specifies that the target variable type is interval."}}}}]}}}