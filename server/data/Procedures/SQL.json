{"Procedure":{"Name":"SQL","ProductGroup":"BASE","ProcedureHelp":{"#cdata":"Syntax: PROC SQL <option(s)>; \n      ...statements;\n    <QUIT;>\n    \nThe SQL procedure implements Structured Query Language (SQL) for SAS. SQL is a standardized, \nwidely used language that retrieves data from and updates data in tables and the views that \nare based on those tables. \n\nThe SAS SQL procedure enables you to:\n\n  o retrieve and manipulate data that is stored in tables or views. \n  o create tables, views, and indexes on columns in tables. \n  o create SAS macro variables that contain values from rows in a query's result. \n  o add or modify the data values in a table's columns or insert and delete rows. \n    You can also modify the table itself by adding, modifying, or dropping columns.\n  o send DBMS-specific SQL statements to a database management system (DBMS) and \n    retrieve DBMS data."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"BUFFERSIZE=","ProcedureOptionHelp":{"#cdata":"Specifies the permanent buffer page size for the output."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"n","@Value2":"nK","@Value3":"nM","@Value4":"nG"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies the permanent buffer page size for the output in multiples of 1 (bytes)","@ToolTip2":"Specifies the permanent buffer page size for the output in multiples of bytes),  1024 (kilobytes)","@ToolTip3":"Specifies the permanent buffer page size for the output in multiples of kilobytes),  1,048,576 (megabytes)","@ToolTip4":"Specifies the permanent buffer page size for the output in multiples of megabytes),  or 1,073,741,824 (gigabytes)"}},{"ProcedureOptionName":"CONSTDATETIME","ProcedureOptionHelp":{"#cdata":"Specifies that SQL procedure replaces references to the DATE, TIME, DATETIME, and TODAY functions\nin a query with their equivalent constant values before the query executes."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOCONSTDATETIME","ProcedureOptionHelp":{"#cdata":"Specifies that SQL procedure does not replaces references to the DATE, TIME, DATETIME, \nand TODAY functions in a query with their equivalent constant values before the query \nexecutes. When the NOCONSTDATETIME option is set, PROC SQL evaluates these functions\nin a query each time it processes an observation."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"DOUBLE","ProcedureOptionHelp":{"#cdata":"Double-spaces the report."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NODOUBLE","ProcedureOptionHelp":{"#cdata":"Specifies not to double-space the report."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"DQUOTE=","ProcedureOptionHelp":{"#cdata":"Specifies whether PROC SQL treats values within double quotation marks (\" \") as \nvariables or strings."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"ANSI","@Value2":"SAS"},"ProcedureOptionToolTips":{"@ToolTip1":"=Specifies that PROC SQL treats a quoted value as a variable.","@ToolTip2":"Specifies that values within double quotation marks are treated as strings."}},{"ProcedureOptionName":"ERRORSTOP","ProcedureOptionHelp":{"#cdata":"Instructs PROC SQL to stop executing the statements, but to continue checking the \n syntax after it has encountered an error."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOERRORSTOP","ProcedureOptionHelp":{"#cdata":"Instructs PROC SQL to execute the statements and to continue checking the syntax \nafter an error."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"EXEC","ProcedureOptionHelp":{"#cdata":"Specifies that a statement should be executed after its syntax is checked for accuracy."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOEXEC","ProcedureOptionHelp":{"#cdata":"Is useful if you want to check the syntax of your SQL statements without executing the statements."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"EXITCODE","ProcedureOptionHelp":{"#cdata":"Specifies whether PROC SQL clears an error code for any SQL statement. Error codes \nare assigned to the SQLEXITCODE macro variable."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"FEEDBACK","ProcedureOptionHelp":{"#cdata":"Specifies that PROC SQL displays, in the SAS log, PROC SQL statements after view \nreferences are expanded or certain other transformations of the statement are made."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOFEEDBACK","ProcedureOptionHelp":{"#cdata":"Specifies that PROC SQL does not display, in the SAS log, PROC SQL statements after view \nreferences are expanded or certain other transformations of the statement are made."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"FLOW","ProcedureOptionHelp":{"#cdata":"[Syntax: FLOW<=n <m>>|NOFLOW] \n      \nSpecifies that character columns longer than n are flowed to multiple lines."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"INOBS=","ProcedureOptionHelp":{"#cdata":"[Syntax: INOBS=n] \n      \nRestricts the number of rows (observations) that PROC SQL retrieves from any \nsingle source."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"IPASSTHRU","ProcedureOptionHelp":{"#cdata":"Specifies that implicit pass through is enabled."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOIPASSTHRU","ProcedureOptionHelp":{"#cdata":"Specifies that implicit pass through is disabled."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"LOOPS=","ProcedureOptionHelp":{"#cdata":"[Syntax: LOOPS=n] \n      \nRestricts PROC SQL to n iterations through its inner loop."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NUMBER","ProcedureOptionHelp":{"#cdata":"Specifies that the SELECT statement includes a column called ROW, which is the row \n(or observation) number of the data as the rows are retrieved."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NONUMBER","ProcedureOptionHelp":{"#cdata":"Specifies that the SELECT statement does not include a column called ROW, which \nis the row (or observation) number of the data as the rows are retrieved."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"OUTOBS=","ProcedureOptionHelp":{"#cdata":"[Syntax: OUTOBS=n] \n      \nRestricts the number of rows (observations) in the output."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"PRINT","ProcedureOptionHelp":{"#cdata":"Specifies that the output from a SELECT statement is printed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOPRINT","ProcedureOptionHelp":{"#cdata":"Specifies that the output from a SELECT statement is not printed."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"PROMPT","ProcedureOptionHelp":{"#cdata":"PROC SQL prompts you to stop or continue when you reach the limit specified by INOBS=, \nOUTOBS=, or LOOPS= options."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOPROMPT","ProcedureOptionHelp":{"#cdata":"PROC SQL does not prompt you to stop or continue when you reach the limit specified \nby INOBS=, OUTOBS=, or LOOPS= options."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"REDUCEPUT=","ProcedureOptionHelp":{"#cdata":"Specifies the engine type that a query uses for which optimization is performed by \nreplacing a PUT function in a query with a logically equivalent expression."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"ALL","@Value2":"NONE","@Value3":"DBMS","@Value4":"BASE"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies that optimization is performed on all PUT functions regardless of the engine  that is used by the query to access.","@ToolTip2":"Specifies that no optimization is to be performed.","@ToolTip3":"Specifies that optimization is performed on all PUT functions whose query is performed  by a SAS/ACCESS engine.","@ToolTip4":"Specifies that optimization is performed on all PUT functions whose query is performed  by a SAS/ACCESS engine or a Base SAS engine."}},{"ProcedureOptionName":"REDUCEPUTOBS=","ProcedureOptionHelp":{"#cdata":"Specifies the number of observations that must be in a table before the SQL procedure considers to optimize the PUT function."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"n","@Value2":"nK","@Value3":"nM","@Value4":"nG","@Value5":"nT","@Value6":"hexX","@Value7":"MIN","@Value8":"MAX"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies the number of observations that must be in a table before the SQL procedure  considers to optimize the PUT function, in multiples of 1 (bytes)","@ToolTip2":"Specifies the number of observations that must be in a table before the SQL procedure  considers to optimize the PUT function, in multiples of 1,024 (kilobytes)","@ToolTip3":"Specifies the number of observations that must be in a table before the SQL procedure  considers to optimize the PUT function, in multiples of 1,048,576 (megabytes)","@ToolTip4":"Specifies the number of observations that must be in a table before the SQL procedure  considers to optimize the PUT function, in multiples of 1,073,741,824 (gigabytes)","@ToolTip5":"Specifies the number of observations that must be in a table before the SQL procedure  considers to optimize the PUT function, in multiples of 1,099,511,627,776 (terabytes)","@ToolTip6":"Specifies the number of observations that must be in a table before the SQL procedure  considers to optimize the PUT function, function as a hexadecimal value.","@ToolTip7":"Specifies the number of observations that must be in a table before the SQL procedure  considers to optimize the PUT function, to 0","@ToolTip8":"Specifies the number of observations that must be in a table before the SQL procedure  considers to optimize the PUT function, to 2\u2076\u00b3-1 or approximately 9.2 quintillion."}},{"ProcedureOptionName":"REDUCEPUTVALUES=","ProcedureOptionHelp":{"#cdata":"When the REDUCEPUT= option is set to NONE, specifies the maximum number of SAS format \nvalues that can exist in a PUT function expression in order for PROC SQL to consider \noptimizing the PUT function in a query."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"n","@Value2":"nK","@Value3":"nM","@Value4":"nG","@Value5":"nT","@Value6":"hexX","@Value7":"MIN","@Value8":"MAX"},"ProcedureOptionToolTips":{"@ToolTip1":"Specifies the number of SAS format values that can exist in a PUT function expression,  in multiples of 1 (bytes)","@ToolTip2":"Specifies the number of SAS format values that can exist in a PUT function expression,  in multiples of 1,024 (kilobytes)","@ToolTip3":"Specifies the number of SAS format values that can exist in a PUT function expression,  in multiples of 1,048,576 (megabytes)","@ToolTip4":"Specifies the number of SAS format values that can exist in a PUT function expression,  in multiples of 1,073,741,824 (gigabytes)","@ToolTip5":"Specifies the number of observations that must be in a table before the SQL procedure  considers to optimize the PUT function, in multiples of 1,099,511,627,776 (terabytes)","@ToolTip6":"Specifies the number of SAS format values that can exist in a PUT function expression  as a hexadecimal value.","@ToolTip7":"Specifies the number of SAS format values that can exist in a PUT function expression, to 0","@ToolTip8":"Specifies the number of SAS format values that can exist in a PUT function expression, to 5000."}},{"ProcedureOptionName":"REMERGE","ProcedureOptionHelp":{"#cdata":"Specifies that PROC SQL can process queries that use remerging of data."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOREMERGE","ProcedureOptionHelp":{"#cdata":"Specifies that PROC SQL does not process queries that use remerging of data."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"SORTMSG","ProcedureOptionHelp":{"#cdata":"Certain operations, such as ORDER BY, can sort tables internally using PROC SORT. \nSpecifying SORTMSG requests information from PROC SORT about the sort and displays \nthe information in the log."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOSORTMSG","ProcedureOptionHelp":{"#cdata":"Certain operations, such as ORDER BY, can sort tables internally using PROC SORT. \nSpecifying NOSORTMSG means that information from PROC SORT about the sort are \nnot requested and not displayed in the log."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"SORTSEQ=","ProcedureOptionHelp":{"#cdata":"[Syntax: SORTSEQ=sort-table] \n      \nSpecifies the collating sequence to use when a query contains an ORDER BY clause."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"STIMER","ProcedureOptionHelp":{"#cdata":"Specifies that PROC SQL writes timing information to the SAS log for each statement, \nrather than as a cumulative value for the entire procedure."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOSTIMER","ProcedureOptionHelp":{"#cdata":"Specifies that PROC SQL does not write timing information to the SAS log for each \nstatement, but as a cumulative value for the entire procedure."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"STOPONTRUNC","ProcedureOptionHelp":{"#cdata":"Specifies to not insert or update a row that contains data larger than the column \nwhen a truncation error occurs. This applies only when using the SET clause in an INSERT \nor UPDATE statement."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"THREADS","ProcedureOptionHelp":{"#cdata":"Overrides the SAS system option THREADS for a particular invocation of PROC SQL \nunless the system option is restricted."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOTHREADS","ProcedureOptionHelp":{"#cdata":"Overrides the SAS system option NOTHREADS for a particular invocation of PROC SQL \nunless the system option is restricted."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"UNDO_POLICY=","ProcedureOptionHelp":{"#cdata":"Specifies how PROC SQL handles updated data if errors occur while you are updating data."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"NONE","@Value2":"OPTIONAL","@Value3":"REQUIRED"},"ProcedureOptionToolTips":{"@ToolTip1":"Keeps any updates or inserts.","@ToolTip2":"Reverses any updates or inserts that it can reverse reliably.","@ToolTip3":"Reverses all inserts or updates that have been done to the point of the error."}},{"ProcedureOptionName":"WARNRECURS","ProcedureOptionHelp":{"#cdata":"Specifies that a warning displays in the SAS log for recursive references."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"NOWARNRECURS","ProcedureOptionHelp":{"#cdata":"Specifies to display recursive references in a note, instead of as a warning in the SAS log."},"ProcedureOptionType":"S"}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"ALTER TABLE","StatementHelp":{"#cdata":"Syntax: ALTER TABLE table-name  \n    <ADD CONSTRAINT constraint-name constraint-clause<, ... constraint-name constraint-clause>>  \n    <ADD constraint-specification<, ... constraint-specification>>  \n    <ADD column-definition<, ... column-definition>>  \n    <DROP CONSTRAINT constraint-name <, ... constraint-name>>  \n    <DROP column<, ... column>>  \n    <DROP FOREIGN KEY constraint-name>  \n    <DROP PRIMARY KEY>  \n    <MODIFY column-definition<, ... column-definition>>  \n;\n      \nAdds columns to, drops columns from, and changes column attributes in an existing \ntable. Adds, modifies, and drops integrity constraints from an existing table."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"ADD CONSTRAINT","StatementOptionHelp":{"#cdata":"Syntax: <ADD CONSTRAINT constraint-name constraint-specification<, ... constraint-name constraint-specification\n          \nAdds the integrity constraint that is specified in constraint-specification and \nassigns constraint-name to it."},"StatementOptionType":"S","SubOptionsKeywords":"CHECK|WHERE|DISTINCT|REFERENCES|FOREIGN KEY|ON UPDATE|ON DELETE|NOT NULL|PRIMARY KEY|UNIQUE|CASCADE|RESTRICT|SET NULL"},{"StatementOptionName":"ADD","StatementOptionHelp":{"#cdata":"Syntax: <ADD constraint-specification<, ... constraint-specification\n<ADD column-definition<, ... column-definition>> \n          \nAdds the integrity constraint that is specified in constraint-specification and assigns \na default name to it."},"StatementOptionType":"S"},{"StatementOptionName":"DROP","StatementOptionHelp":{"#cdata":"Syntax: <DROP column<, ... column>>\n  | <DROP CONSTRAINT constraint-name <, ...constraint-name>> \n  | <DROP FOREIGN KEY constraint-name>\n  | <DROP PRIMARY KEY>\n  \n<DROP column<, ... column>>\n  Deletes each column from the table. \n\n<DROP CONSTRAINT constraint-name <, ...constraint-name>>\n  Deletes the integrity constraint that is referenced by each constraint-name.\n\n<DROP FOREIGN KEY constraint-name>\n  Removes the foreign key constraint that is referenced by constraint-name. \n  \n<DROP PRIMARY KEY>\n  Removes the primary key constraint from table-name."},"StatementOptionType":"S"},{"StatementOptionName":"DROP CONSTRAINT","StatementOptionHelp":{"#cdata":"Syntax: <DROP CONSTRAINT constraint-name <, ...constraint-name>> \n\nDeletes the integrity constraint that is referenced by each constraint-name."},"StatementOptionType":"S"},{"StatementOptionName":"DROP FOREIGN KEY","StatementOptionHelp":{"#cdata":"Syntax: <DROP FOREIGN KEY constraint-name>\n          \nRemoves the foreign key constraint that is referenced by constraint-name."},"StatementOptionType":"S"},{"StatementOptionName":"DROP PRIMARY KEY","StatementOptionHelp":{"#cdata":"Syntax: <DROP PRIMARY KEY>\n          \nRemoves the primary key constraint from table-name."},"StatementOptionType":"S"},{"StatementOptionName":"MODIFY","StatementOptionHelp":{"#cdata":"Syntax: <MODIFY column-definition<, ... column-definition>>\n          \nChanges one or more attributes of the column that is specified in each column-definition."},"StatementOptionType":"S"},{"StatementOptionName":"PRIMARY KEY","StatementOptionHelp":{"#cdata":"Syntax: <DROP PRIMARY KEY>\n          \nRemoves the primary key constraint from table-name."},"StatementOptionType":"S"},{"StatementOptionName":"FOREIGN KEY","StatementOptionHelp":{"#cdata":"Syntax: <DROP FOREIGN KEY constraint-name>\n          \nRemoves the foreign key constraint that is referenced by constraint-name."},"StatementOptionType":"S"},{"StatementOptionName":"CONSTRAINT","StatementOptionHelp":{"#cdata":"Syntax: <ADD | DROP CONSTRAINT constraint-name <, ...constraint-name>> \n\nAdds or deletes the integrity constraint that is referenced by each constraint-name."},"StatementOptionType":"S"}]}},{"StatementName":"CONNECT TO","StatementHelp":{"#cdata":"Syntax: CONNECT TO dbms-name <AS alias> \n  <(connect-statement-argument-1=value <... connect-statement-argument-n=value>)> \n  <(database-connection-argument-1=value <... database-connection-argument-n=value>)>; \n\nEstablishes a connection with a DBMS that SAS/ACCESS software supports."},"StatementOptions":{"StatementOption":{"StatementOptionName":"AS","StatementOptionHelp":{"#cdata":"[Syntax: CONNECT TO dbms-name <AS alias> ...] \n          \nSpecifies an alias that has 1 to 32 characters. The keyword AS must precede alias."},"StatementOptionType":"S"}}},{"StatementName":"CONNECT USING","StatementHelp":{"#cdata":"Syntax: CONNECT USING libref <AS alias>; \n\nEstablishes a connection with a DBMS that SAS/ACCESS software supports.\n\nlibref\nspecifies the libref for which a DBMS connection has already been established through the LIBNAME \nstatement. The libref connection parameters can be reused in the SQL procedure using the CONNECT \nstatement."},"StatementOptions":{"StatementOption":{"StatementOptionName":"AS","StatementOptionHelp":{"#cdata":"[Syntax: AS alias] \n          \nSpecifies an alias that has 1 to 32 characters. The keyword AS must precede alias."},"StatementOptionType":"S"}}},{"StatementName":"CREATE INDEX","StatementHelp":{"#cdata":"Syntax: CREATE <UNIQUE> INDEX index-name  ON table-name ( column <, ... column>);  \n\nCreates indexes on columns in tables."},"StatementOptions":{"StatementOption":{"StatementOptionName":"ON","StatementOptionHelp":{"#cdata":"[Syntax: ON table-name ( column <, ... column>)] \n          \nSpecifies a PROC SQL table."},"StatementOptionType":"S"}}},{"StatementName":"CREATE UNIQUE INDEX","StatementHelp":{"#cdata":"Syntax: CREATE <UNIQUE> INDEX index-name  ON table-name ( column <, ... column>);  \n\nCreates indexes on columns in tables. The UNIQUE keyword causes SAS to reject any \nchange to a table that would cause more than one row to have the same index value. \nUnique indexes guarantee that data in one column, or in a composite group of columns, \nremains unique for every row in a table. A unique index can be defined for a column \nthat includes NULL or missing values if each row has a unique index\nvalue."},"StatementOptions":{"StatementOption":{"StatementOptionName":"ON","StatementOptionHelp":{"#cdata":"[Syntax: ON table-name ( column <, ... column>)] \n          \nSpecifies a PROC SQL table."},"StatementOptionType":"S"}}},{"StatementName":"CREATE TABLE","StatementHelp":{"#cdata":"Syntax: (1) CREATE TABLE table-name  \n      (column-specification<, ...column-specification | constraint-specification>);  \n \n    (2) CREATE TABLE table-name LIKE table-name2;  \n    \n    (3) CREATE TABLE table-name AS query-expression  \n        <ORDER BY order-by-item<, ... order-by-item>>;  \n \nCreates PROC SQL tables."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"LIKE","StatementOptionHelp":{"#cdata":"[Syntax:...LIKE table-name2...] \n          \nSQL keyword.\n\nIf used as a SQL expression operator, LIKE  tests for a matching pattern. \n\nSyntax: \nsql-expression <NOT> LIKE sql-expression <ESCAPE character-expression>"},"StatementOptionType":"S"},{"StatementOptionName":"AS","StatementOptionHelp":{"#cdata":"[Syntax: ...AS query-expression ...] \n          \nSQL keyword"},"StatementOptionType":"S"},{"StatementOptionName":"SELECT","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"DISTINCT","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"INTO","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"FROM","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"WHERE","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"GROUP BY","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"HAVING","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"INTERSECT","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces rows that are common to both query results."},"StatementOptionType":"S"},{"StatementOptionName":"CORRESPONDING|CORR","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nCauses PROC SQL to match the columns in table-expressions by name and not by \nordinal position."},"StatementOptionType":"S"},{"StatementOptionName":"EXCEPT","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces rows that are part of the first query only."},"StatementOptionType":"S"},{"StatementOptionName":"ALL","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nThe set operators automatically eliminate duplicate rows from their output tables. \nThe optional ALL keyword preserves the duplicate rows, reduces the execution by one \nstep, and thereby improves the query-expression's performance."},"StatementOptionType":"S"},{"StatementOptionName":"UNION","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces all unique rows from both queries."},"StatementOptionType":"S"},{"StatementOptionName":"OUTER UNION","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nConcatenates the query results."},"StatementOptionType":"S"},{"StatementOptionName":"INNER JOIN","StatementOptionHelp":{"#cdata":"Returns a result table for all the rows in a table that have one or more matching \nrows in the other tables, as specified by the sql-expression."},"StatementOptionType":"S"},{"StatementOptionName":"LEFT JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from the first table that do not match any row in the second (RIGHTTAB) \ntable."},"StatementOptionType":"S"},{"StatementOptionName":"RIGHT JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from the second table that do not match any row in the first table."},"StatementOptionType":"S"},{"StatementOptionName":"FULL JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from each table that do not match any row in the other table."},"StatementOptionType":"S"},{"StatementOptionName":"CROSS JOIN","StatementOptionHelp":{"#cdata":"A cross join returns as its result table the product of the two tables being joined."},"StatementOptionType":"S"},{"StatementOptionName":"UNION JOIN","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nUsing a union join is similar to concatenating tables with the OUTER UNION set operator."},"StatementOptionType":"S"},{"StatementOptionName":"CHECK","StatementOptionHelp":{"#cdata":"[constraint][Syntax: CHECK (WHERE-clause)] \n          \nSpecifies that all rows in table-name satisfy the WHERE-clause."},"StatementOptionType":"S"},{"StatementOptionName":"NOT NULL","StatementOptionHelp":{"#cdata":"[constraint] \n          \nSpecifies that the column does not contain a null or missing value, including special \nmissing values."},"StatementOptionType":"S"},{"StatementOptionName":"PRIMARY KEY","StatementOptionHelp":{"#cdata":"[constraint] \n          \nSpecifies that the column is a primary key column, that is, a column that does \nnot contain missing values and whose values are unique."},"StatementOptionType":"S"},{"StatementOptionName":"UNIQUE","StatementOptionHelp":{"#cdata":"[constraint] \n          \nSpecifies that the values of the column must be unique. This constraint is identical \nto DISTINCT."},"StatementOptionType":"S"},{"StatementOptionName":"REFERENCES","StatementOptionHelp":{"#cdata":"[constraint]\n          \n[Syntax: REFERENCES table-name <ON DELETE referential-action > <ON UPDATE referential-action>\n            \nSpecifies that the column is a foreign key, that is, a column whose values are linked \nto the values of the primary key variable in another table (the table-name that is \nspecified for REFERENCES)."},"StatementOptionType":"S","SubOptionsKeywords":"ON DELETE|ON UPDATE"},{"StatementOptionName":"CONSTRAINT","StatementOptionHelp":{"#cdata":"[constraint-specification]\n          \n[Syntax: CONSTRAINT constraint-name constraint <MESSAGE='message-string' <MSGTYPE=message-type>>]"},"StatementOptionType":"S","SubOptionsKeywords":"MESSAGE=|MSGTYPE=|NEWLINE|USER|"},{"StatementOptionName":"ORDER BY","StatementOptionHelp":{"#cdata":"[Syntax: ORDER BY order-by-item] \n          \nSorts the rows in table-name by the values of each order-by-item."},"StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates logical OR."},"StatementOptionType":"S"},{"StatementOptionName":"ON","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  LEFT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"EQ","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates equals"},"StatementOptionType":"S"},{"StatementOptionName":"NE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates not equal"},"StatementOptionType":"S"},{"StatementOptionName":"GT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than"},"StatementOptionType":"S"},{"StatementOptionName":"LT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than"},"StatementOptionType":"S"},{"StatementOptionName":"GE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than or equal to"},"StatementOptionType":"S"},{"StatementOptionName":"LE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than or equal to"},"StatementOptionType":"S"},{"StatementOptionName":"EQT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates equal to truncated strings (use with character operands only)"},"StatementOptionType":"S"},{"StatementOptionName":"GTT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"LTT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"GET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than or equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"LET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than or equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"NET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates not equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"LEFT","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  LEFT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"RIGHT","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  RIGHT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"BETWEEN","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nSelects rows where column values are within a range of values. \n\nSyntax:\nsql-expression <NOT> BETWEEN sql-expression AND sql-expression"},"StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates logical AND."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"[SQL expression operator]           \n          \nIndicates logical NOT."},"StatementOptionType":"S"},{"StatementOptionName":"IS","StatementOptionHelp":{"#cdata":"SQL expression operator"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"SQL expression operator"},"StatementOptionType":"S"},{"StatementOptionName":"EXISTS","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nSyntax: <NOT> EXISTS (query-expression) \n          \nTests if a subquery returns one or more rows. "},"StatementOptionType":"S"},{"StatementOptionName":"IN","StatementOptionHelp":{"#cdata":"[SQL expression operator]\n          \nTests set membership. \n\nSyntax:\nsql-expression <NOT> IN (query-expression | constant <, ... constant>)"},"StatementOptionType":"S"},{"StatementOptionName":"ASC","StatementOptionHelp":{"#cdata":"[Syntax: ORDER BY order-by-item <ASC|DESC><, ... order-by-item <ASC|DESC>>;] \n          \nSorts the rows in table-name by the values of each order-by-item in ascending order."},"StatementOptionType":"S"},{"StatementOptionName":"DESC","StatementOptionHelp":{"#cdata":"[Syntax: ORDER BY order-by-item <ASC|DESC><, ... order-by-item <ASC|DESC>>;] \n          \nSorts the rows in table-name by the values of each order-by-item in descending order."},"StatementOptionType":"S"},{"StatementOptionName":"CASE","StatementOptionHelp":{"#cdata":"Selects result values that satisfy specified conditions. \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"},{"StatementOptionName":"WHEN","StatementOptionHelp":{"#cdata":"[Used in a CASE expression] \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"},{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"[Used in a CASE expression] \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"},{"StatementOptionName":"ELSE","StatementOptionHelp":{"#cdata":"[Used in a CASE expression] \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"},{"StatementOptionName":"END","StatementOptionHelp":{"#cdata":"[Used in a CASE expression] \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"}]}},{"StatementName":"CREATE VIEW","StatementHelp":{"#cdata":"Syntax: CREATE VIEW proc-sql-view <(column-name-list)> AS query-expression\n    <ORDER BY order-by-item<, ... order-by-item>>  \n    <USING libname-clause<, ... libname-clause>> ; \n\nCreates a PROC SQL view from a query-expression."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"AS","StatementOptionHelp":{"#cdata":"[Syntax: ...AS query-expression ...] \n          \nSQL keyword"},"StatementOptionType":"S"},{"StatementOptionName":"ORDER BY","StatementOptionHelp":{"#cdata":"[Syntax: <ORDER BY order-by-item<, ... order-by-item>> ] \n          \nSQL keyword"},"StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates logical OR."},"StatementOptionType":"S"},{"StatementOptionName":"EQ","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates equals"},"StatementOptionType":"S"},{"StatementOptionName":"NE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates not equal"},"StatementOptionType":"S"},{"StatementOptionName":"GT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than"},"StatementOptionType":"S"},{"StatementOptionName":"LT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than"},"StatementOptionType":"S"},{"StatementOptionName":"GE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than or equal to"},"StatementOptionType":"S"},{"StatementOptionName":"LE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than or equal to"},"StatementOptionType":"S"},{"StatementOptionName":"EQT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates equal to truncated strings (use with character operands only)"},"StatementOptionType":"S"},{"StatementOptionName":"GTT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"LTT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"GET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than or equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"LET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than or equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"NET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates not equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"BETWEEN","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nSelects rows where column values are within a range of values. \n\nSyntax:\nsql-expression <NOT> BETWEEN sql-expression AND sql-expression"},"StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates logical AND."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"[SQL expression operator]           \n          \nIndicates logical NOT."},"StatementOptionType":"S"},{"StatementOptionName":"IS","StatementOptionHelp":{"#cdata":"SQL expression operator"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"SQL expression operator"},"StatementOptionType":"S"},{"StatementOptionName":"EXISTS","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nSyntax: <NOT> EXISTS (query-expression) \n          \nTests if a subquery returns one or more rows. "},"StatementOptionType":"S"},{"StatementOptionName":"IN","StatementOptionHelp":{"#cdata":"[SQL expression operator]\n          \nTests set membership. \n\nSyntax:\nsql-expression <NOT> IN (query-expression | constant <, ... constant>)"},"StatementOptionType":"S"},{"StatementOptionName":"LIKE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nTests for a matching pattern. \n\nSyntax: \nsql-expression <NOT> LIKE sql-expression <ESCAPE character-expression>"},"StatementOptionType":"S"},{"StatementOptionName":"ASC","StatementOptionHelp":{"#cdata":"[Syntax: ORDER BY order-by-item <ASC|DESC><, ... order-by-item <ASC|DESC>>;] \n          \nSorts the rows by the values of each order-by-item in ascending order."},"StatementOptionType":"S"},{"StatementOptionName":"DESC","StatementOptionHelp":{"#cdata":"[Syntax: ORDER BY order-by-item <ASC|DESC><, ... order-by-item <ASC|DESC>>;] \n          \nSorts the rows by the values of each order-by-item in descending order."},"StatementOptionType":"S"},{"StatementOptionName":"USING","StatementOptionHelp":{"#cdata":"[Syntax: <USING libname-clause<, ... libname-clause>> ] \n          \nSQL keyword"},"StatementOptionType":"S","SubOptionsKeywords":"LIBNAME"},{"StatementOptionName":"SELECT","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"DISTINCT","StatementOptionHelp":{"#cdata":"SQL-expression keyword or constraint"},"StatementOptionType":"S"},{"StatementOptionName":"INTO","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"FROM","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"WHERE","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"GROUP BY","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"HAVING","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"INTERSECT","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces rows that are common to both query results."},"StatementOptionType":"S"},{"StatementOptionName":"UNION","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces all unique rows from both queries."},"StatementOptionType":"S"},{"StatementOptionName":"OUTER UNION","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nConcatenates the query results."},"StatementOptionType":"S"},{"StatementOptionName":"INNER JOIN","StatementOptionHelp":{"#cdata":"Returns a result table for all the rows in a table that have one or more matching \nrows in the other tables, as specified by the sql-expression."},"StatementOptionType":"S"},{"StatementOptionName":"LEFT JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from the first table that do not match any row in the second (RIGHTTAB) \ntable."},"StatementOptionType":"S"},{"StatementOptionName":"RIGHT JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from the second table that do not match any row in the first table."},"StatementOptionType":"S"},{"StatementOptionName":"FULL JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from each table that do not match any row in the other table."},"StatementOptionType":"S"},{"StatementOptionName":"CROSS JOIN","StatementOptionHelp":{"#cdata":"A cross join returns as its result table the product of the two tables being joined."},"StatementOptionType":"S"},{"StatementOptionName":"UNION JOIN","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nUsing a union join is similar to concatenating tables with the OUTER UNION set operator."},"StatementOptionType":"S"},{"StatementOptionName":"CORRESPONDING|CORR","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nCauses PROC SQL to match the columns in table-expressions by name and not by \nordinal position."},"StatementOptionType":"S"},{"StatementOptionName":"ON","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  LEFT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"LEFT","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  LEFT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"RIGHT","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  RIGHT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"EXCEPT","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces rows that are part of the first query only."},"StatementOptionType":"S"},{"StatementOptionName":"ALL","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nThe set operators automatically eliminate duplicate rows from their output tables. \nThe optional ALL keyword preserves the duplicate rows, reduces the execution by one \nstep, and thereby improves the query-expression's performance."},"StatementOptionType":"S"},{"StatementOptionName":"READ=","StatementOptionType":"V"},{"StatementOptionName":"WRITE=","StatementOptionType":"V"},{"StatementOptionName":"PW=","StatementOptionType":"V"}],"#comment":{}}},{"StatementName":"DELETE FROM","StatementHelp":{"#cdata":"[Syntax: DELETE FROM table-name|sas/access-view|proc-sql-view <AS alias>]\n    <WHERE sql-expression>;  \n \nRemoves one or more rows from a table or view that is specified in the FROM clause."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"WHERE","StatementOptionHelp":{"#cdata":"[WHERE sql-expression]\n          \nDeletes rows based on the condition(s) specified in the sql-expression."},"StatementOptionType":"S"},{"StatementOptionName":"AS","StatementOptionHelp":{"#cdata":"[Syntax: <AS alias>] \n          \nAssigns an alias to table-name, sas/access-view, or proc-sql-view."},"StatementOptionType":"S"}]}},{"StatementName":"DELETE","StatementHelp":{"#cdata":"Removes one or more rows from a table or view that is specified in the FROM clause."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"FROM","StatementOptionHelp":{"#cdata":"[FROM table-name|sas/access-view|proc-sql-view] \n          \nSpecifies the table/view that you are deleting rows from."},"StatementOptionType":"S"},{"StatementOptionName":"WHERE","StatementOptionHelp":{"#cdata":"[WHERE sql-expression]\n          \nDeletes rows based on the condition(s) specified in the sql-expression."},"StatementOptionType":"S"},{"StatementOptionName":"AS","StatementOptionHelp":{"#cdata":"[Syntax: <AS alias>] \n          \nAssigns an alias to table-name, sas/access-view, or proc-sql-view."},"StatementOptionType":"S"}]}},{"StatementName":"DESCRIBE TABLE","StatementHelp":{"#cdata":"Syntax: DESCRIBE TABLE table-name <, ... table-name>; \n      \nDisplays a PROC SQL definition in the SAS log."},"StatementOptions":null},{"StatementName":"DESCRIBE TABLE CONSTRAINTS","StatementHelp":{"#cdata":"Syntax: DESCRIBE TABLE CONSTRAINTS table-name <, ... table-name\n      \nDisplays a PROC SQL definition in the SAS log."},"StatementOptions":null},{"StatementName":"DESCRIBE VIEW","StatementHelp":{"#cdata":"Syntax: DESCRIBE VIEW proc-sql-view <, ... proc-sql-view>; \n      \nDisplays a PROC SQL definition in the SAS log."},"StatementOptions":null},{"StatementName":"DISCONNECT FROM","StatementHelp":{"#cdata":"Syntax: DISCONNECT FROM dbms-name|alias;\n      \nEnds the connection with a DBMS that a SAS/ACCESS interface supports."},"StatementOptions":null},{"StatementName":"DROP TABLE","StatementHelp":{"#cdata":"Syntax: DROP TABLE table-name <, ... table-name>;\n      \nDeletes tables."},"StatementOptions":null},{"StatementName":"DROP VIEW","StatementHelp":{"#cdata":"Syntax: DROP VIEW view-name <, ... view-name>;\n      \nDeletes views."},"StatementOptions":null},{"StatementName":"DROP INDEX","StatementHelp":{"#cdata":"Syntax: DROP INDEX index-name <, ... index-name> FROM table-name; \n      \nDeletes indices."},"StatementOptions":null},{"StatementName":"EXECUTE","StatementHelp":{"#cdata":"Syntax: EXECUTE (dbms-SQL-statement) BY dbms-name|alias; \n      \nSends a DBMS-specific SQL statement to a DBMS that a SAS/ACCESS interface supports."},"StatementOptions":{"StatementOption":{"StatementOptionName":"BY","StatementOptionHelp":{"#cdata":"[Syntax: ...BY dbms-name|alias] \n          \nIdentifies a DBMS to which you want to direct the DBMS statement, or specifies an \noptional alias that is defined in the CONNECT statement."},"StatementOptionType":"S"}}},{"StatementName":"INSERT INTO","StatementHelp":{"#cdata":"Syntax: INSERT INTO table-name|sas access-view|proc-sql-view <(column<, ... column>)> \n    SET column=sql-expression <, ... column=sql-expression>  \n    <SET column=sql-expression <, ... column=sql-expression>>;  \n \n  (2) INSERT INTO table-name|sas access-view|proc-sql-view <(column<, ... column>)> \n      VALUES (value <, ... value>) <... VALUES (value <, ... value>)>;  \n \n  (3) INSERT INTO table-name|sas access-view|proc-sql-view <(column<, ...column>)> query-expression \n\nAdds rows to a new or existing table or view."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"SET","StatementOptionHelp":{"#cdata":"...SET column=sql-expression <, ... column=sql-expression>...] \n          \nSpecifies or alters the values of a column. You can use more than one SET clause \nper INSERT statement, and each SET clause can set the values in more than one column. \nMultiple SET clauses are not separated by commas."},"StatementOptionType":"RS"},{"StatementOptionName":"VALUES","StatementOptionHelp":{"#cdata":"...VALUES (value <, ... value>) <... VALUES (value <, ... value>)>;] \n          \nThis clause can be used to insert lists of values into a table. You can either give \na value for each column in the table or give values just for the columns specified in\nthe list of column names. One row is inserted for each VALUES clause. Multiple VALUES \nclauses are not separated by commas."},"StatementOptionType":"RS"},{"StatementOptionName":"LIKE","StatementOptionHelp":{"#cdata":"[Syntax:...LIKE table-name2...] \n          \nSQL keyword.\n\nIf used as a SQL expression operator, LIKE  tests for a matching pattern. \n\nSyntax: \nsql-expression <NOT> LIKE sql-expression <ESCAPE character-expression>"},"StatementOptionType":"S"},{"StatementOptionName":"AS","StatementOptionHelp":{"#cdata":"[Syntax: ...AS query-expression ...] \n          \nSQL keyword"},"StatementOptionType":"S"},{"StatementOptionName":"SELECT","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"DISTINCT","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"INTO","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"FROM","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"WHERE","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"GROUP BY","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"HAVING","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"INTERSECT","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces rows that are common to both query results."},"StatementOptionType":"S"},{"StatementOptionName":"CORRESPONDING|CORR","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nCauses PROC SQL to match the columns in table-expressions by name and not by \nordinal position."},"StatementOptionType":"S"},{"StatementOptionName":"EXCEPT","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces rows that are part of the first query only."},"StatementOptionType":"S"},{"StatementOptionName":"ALL","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nThe set operators automatically eliminate duplicate rows from their output tables. \nThe optional ALL keyword preserves the duplicate rows, reduces the execution by one \nstep, and thereby improves the query-expression's performance."},"StatementOptionType":"S"},{"StatementOptionName":"UNION","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces all unique rows from both queries."},"StatementOptionType":"S"},{"StatementOptionName":"OUTER UNION","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nConcatenates the query results."},"StatementOptionType":"S"},{"StatementOptionName":"INNER JOIN","StatementOptionHelp":{"#cdata":"Returns a result table for all the rows in a table that have one or more matching \nrows in the other tables, as specified by the sql-expression."},"StatementOptionType":"S"},{"StatementOptionName":"LEFT JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from the first table that do not match any row in the second (RIGHTTAB) \ntable."},"StatementOptionType":"S"},{"StatementOptionName":"RIGHT JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from the second table that do not match any row in the first table."},"StatementOptionType":"S"},{"StatementOptionName":"FULL JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from each table that do not match any row in the other table."},"StatementOptionType":"S"},{"StatementOptionName":"CROSS JOIN","StatementOptionHelp":{"#cdata":"A cross join returns as its result table the product of the two tables being joined."},"StatementOptionType":"S"},{"StatementOptionName":"UNION JOIN","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nUsing a union join is similar to concatenating tables with the OUTER UNION set operator."},"StatementOptionType":"S"},{"StatementOptionName":"CHECK","StatementOptionHelp":{"#cdata":"[constraint][Syntax: CHECK (WHERE-clause)] \n          \nSpecifies that all rows in table-name satisfy the WHERE-clause."},"StatementOptionType":"S"},{"StatementOptionName":"NOT NULL","StatementOptionHelp":{"#cdata":"[constraint] \n          \nSpecifies that the column does not contain a null or missing value, including special \nmissing values."},"StatementOptionType":"S"},{"StatementOptionName":"PRIMARY KEY","StatementOptionHelp":{"#cdata":"[constraint] \n          \nSpecifies that the column is a primary key column, that is, a column that does \nnot contain missing values and whose values are unique."},"StatementOptionType":"S"},{"StatementOptionName":"UNIQUE","StatementOptionHelp":{"#cdata":"[constraint] \n          \nSpecifies that the values of the column must be unique. This constraint is identical \nto DISTINCT."},"StatementOptionType":"S"},{"StatementOptionName":"REFERENCES","StatementOptionHelp":{"#cdata":"[constraint]\n          \n[Syntax: REFERENCES table-name <ON DELETE referential-action > <ON UPDATE referential-action>\n            \nSpecifies that the column is a foreign key, that is, a column whose values are linked \nto the values of the primary key variable in another table (the table-name that is \nspecified for REFERENCES)."},"StatementOptionType":"S","SubOptionsKeywords":"ON DELETE|ON UPDATE"},{"StatementOptionName":"CONSTRAINT","StatementOptionHelp":{"#cdata":"[constraint-specification]\n          \n[Syntax: CONSTRAINT constraint-name constraint <MESSAGE='message-string' <MSGTYPE=message-type>>]"},"StatementOptionType":"S","SubOptionsKeywords":"MESSAGE=|MSGTYPE=|NEWLINE|USER|"},{"StatementOptionName":"ORDER BY","StatementOptionHelp":{"#cdata":"[Syntax: ORDER BY order-by-item] \n          \nSorts the rows in table-name by the values of each order-by-item."},"StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates logical OR."},"StatementOptionType":"S"},{"StatementOptionName":"ON","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  LEFT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"LEFT","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  LEFT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"RIGHT","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  RIGHT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"BETWEEN","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nSelects rows where column values are within a range of values. \n\nSyntax:\nsql-expression <NOT> BETWEEN sql-expression AND sql-expression"},"StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates logical AND."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"[SQL expression operator]           \n          \nIndicates logical NOT."},"StatementOptionType":"S"},{"StatementOptionName":"IS","StatementOptionHelp":{"#cdata":"SQL expression operator"},"StatementOptionType":"S"},{"StatementOptionName":"EQ","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates equals"},"StatementOptionType":"S"},{"StatementOptionName":"NE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates not equal"},"StatementOptionType":"S"},{"StatementOptionName":"GT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than"},"StatementOptionType":"S"},{"StatementOptionName":"LT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than"},"StatementOptionType":"S"},{"StatementOptionName":"GE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than or equal to"},"StatementOptionType":"S"},{"StatementOptionName":"LE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than or equal to"},"StatementOptionType":"S"},{"StatementOptionName":"EQT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates equal to truncated strings (use with character operands only)"},"StatementOptionType":"S"},{"StatementOptionName":"GTT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"LTT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"GET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than or equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"LET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than or equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"NET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates not equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"SQL expression operator"},"StatementOptionType":"S"},{"StatementOptionName":"EXISTS","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nSyntax: <NOT> EXISTS (query-expression) \n          \nTests if a subquery returns one or more rows. "},"StatementOptionType":"S"},{"StatementOptionName":"IN","StatementOptionHelp":{"#cdata":"[SQL expression operator]\n          \nTests set membership. \n\nSyntax:\nsql-expression <NOT> IN (query-expression | constant <, ... constant>)"},"StatementOptionType":"S"},{"StatementOptionName":"ASC","StatementOptionHelp":{"#cdata":"[Syntax: ORDER BY order-by-item <ASC|DESC><, ... order-by-item <ASC|DESC>>;] \n          \nSorts the rows in table-name by the values of each order-by-item in ascending order."},"StatementOptionType":"S"},{"StatementOptionName":"DESC","StatementOptionHelp":{"#cdata":"[Syntax: ORDER BY order-by-item <ASC|DESC><, ... order-by-item <ASC|DESC>>;] \n          \nSorts the rows in table-name by the values of each order-by-item in descending order."},"StatementOptionType":"S"},{"StatementOptionName":"CASE","StatementOptionHelp":{"#cdata":"Selects result values that satisfy specified conditions. \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"},{"StatementOptionName":"WHEN","StatementOptionHelp":{"#cdata":"[Used in a CASE expression] \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"},{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"[Used in a CASE expression] \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"},{"StatementOptionName":"ELSE","StatementOptionHelp":{"#cdata":"[Used in a CASE expression] \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"},{"StatementOptionName":"END","StatementOptionHelp":{"#cdata":"[Used in a CASE expression] \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"}]}},{"StatementName":"RESET","StatementHelp":{"#cdata":"Syntax: RESET <option(s)>;\n      \nResets PROC SQL options without restarting the procedure"},"StatementOptions":null},{"StatementName":"SELECT","StatementHelp":{"#cdata":"Syntax: SELECT <DISTINCT> object-item <, ...object-item>   <INTO macro-variable-specification \n    <, ... macro-variable-specification>>  \n    FROM from-list  \n    <WHERE sql-expression>  \n    <GROUP BY group-by-item <, ... group-by-item>>  \n    <HAVING sql-expression>  \n    <ORDER BY order-by-item <, ... order-by-item>>; \n    \nSelects columns and rows of data from tables and views."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DISTINCT","StatementOptionHelp":{"#cdata":"Eliminates duplicate rows."},"StatementOptionType":"S"},{"StatementOptionName":"INTO","StatementOptionHelp":{"#cdata":"Stores the value of one or more columns for use later in another PROC SQL query \nor SAS statement."},"StatementOptionType":"S"},{"StatementOptionName":"FROM","StatementOptionHelp":{"#cdata":"[FROM from-list] \n          \nSpecifies source tables or views."},"StatementOptionType":"S"},{"StatementOptionName":"WHERE","StatementOptionHelp":{"#cdata":"[WHERE sql-expression] \n          \nSubsets the output based on specified conditions. "},"StatementOptionType":"S"},{"StatementOptionName":"AS","StatementOptionHelp":{"#cdata":"[Syntax: ...AS query-expression ...] \n          \nSQL keyword"},"StatementOptionType":"S"},{"StatementOptionName":"GROUP BY","StatementOptionHelp":{"#cdata":"[Syntax: GROUP BY group-by-item <, ..., group-by-item] \n          \nSpecifies how to group the data for summarizing."},"StatementOptionType":"S"},{"StatementOptionName":"HAVING","StatementOptionHelp":{"#cdata":"[HAVING sql-expression] \n          \nSubsets grouped data based on specified conditions."},"StatementOptionType":"S"},{"StatementOptionName":"ORDER BY","StatementOptionHelp":{"#cdata":"[ORDER BY order-by-item <ASC|DESC><, ... order-by-item <ASC|DESC>>;]\n          \nSpecifies the order in which rows are displayed in a result table. "},"StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates logical OR."},"StatementOptionType":"S"},{"StatementOptionName":"ON","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  LEFT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"EQ","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates equals"},"StatementOptionType":"S"},{"StatementOptionName":"NE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates not equal"},"StatementOptionType":"S"},{"StatementOptionName":"GT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than"},"StatementOptionType":"S"},{"StatementOptionName":"LT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than"},"StatementOptionType":"S"},{"StatementOptionName":"GE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than or equal to"},"StatementOptionType":"S"},{"StatementOptionName":"LE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than or equal to"},"StatementOptionType":"S"},{"StatementOptionName":"EQT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates equal to truncated strings (use with character operands only)"},"StatementOptionType":"S"},{"StatementOptionName":"GTT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"LTT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"GET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than or equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"LET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than or equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"NET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates not equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"LEFT","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  LEFT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"RIGHT","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  RIGHT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"BETWEEN","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nSelects rows where column values are within a range of values. \n\nSyntax:\nsql-expression <NOT> BETWEEN sql-expression AND sql-expression"},"StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates logical AND."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"[SQL expression operator]           \n          \nIndicates logical NOT."},"StatementOptionType":"S"},{"StatementOptionName":"IS","StatementOptionHelp":{"#cdata":"SQL expression operator"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nTests whether a string is part of a column's value."},"StatementOptionType":"S"},{"StatementOptionName":"EXISTS","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nSyntax: <NOT> EXISTS (query-expression) \n          \nTests if a subquery returns one or more rows."},"StatementOptionType":"S"},{"StatementOptionName":"IN","StatementOptionHelp":{"#cdata":"[SQL expression operator]\n          \nTests set membership. \n\nSyntax:\nsql-expression <NOT> IN (query-expression | constant <, ... constant>)"},"StatementOptionType":"S"},{"StatementOptionName":"LIKE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nTests for a matching pattern. \n\nSyntax: \nsql-expression <NOT> LIKE sql-expression <ESCAPE character-expression>"},"StatementOptionType":"S"},{"StatementOptionName":"ASC","StatementOptionHelp":{"#cdata":"Orders the data in ascending order."},"StatementOptionType":"S"},{"StatementOptionName":"DESC","StatementOptionHelp":{"#cdata":"Orders the data in descending order."},"StatementOptionType":"S"},{"StatementOptionName":"INNER JOIN","StatementOptionHelp":{"#cdata":"Returns a result table for all the rows in a table that have one or more matching \nrows in the other tables, as specified by the sql-expression."},"StatementOptionType":"S"},{"StatementOptionName":"LEFT JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression  \nis true, plus rows from the first table that do not match any row in the second (RIGHTTAB) \ntable."},"StatementOptionType":"S"},{"StatementOptionName":"RIGHT JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from the second table that do not match any row in the first table."},"StatementOptionType":"S"},{"StatementOptionName":"FULL JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from each table that do not match any row in the other table."},"StatementOptionType":"S"},{"StatementOptionName":"CROSS JOIN","StatementOptionHelp":{"#cdata":"A cross join returns as its result table the product of the two tables being joined."},"StatementOptionType":"S"},{"StatementOptionName":"UNION JOIN","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \n Using a union join is similar to concatenating tables with the OUTER UNION set operator."},"StatementOptionType":"S"},{"StatementOptionName":"INTERSECT","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces rows that are common to both query results."},"StatementOptionType":"S"},{"StatementOptionName":"CORRESPONDING|CORR","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nCauses PROC SQL to match the columns in table-expressions by name and not by \nordinal position."},"StatementOptionType":"S"},{"StatementOptionName":"EXCEPT","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces rows that are part of the first query only."},"StatementOptionType":"S"},{"StatementOptionName":"ALL","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nThe set operators automatically eliminate duplicate rows from their output tables. \nThe optional ALL keyword preserves the duplicate rows, reduces the execution by one \nstep, and thereby improves the query-expression's performance."},"StatementOptionType":"S"},{"StatementOptionName":"UNION","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces all unique rows from both queries."},"StatementOptionType":"S"},{"StatementOptionName":"OUTER UNION","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nConcatenates the query results."},"StatementOptionType":"S"},{"StatementOptionName":"SELECT","StatementOptionHelp":{"#cdata":"[Nested SELECT statement] \n          \nSyntax: SELECT <DISTINCT> object-item <, ...object-item>   <INTO macro-variable-specification \n    <, ... macro-variable-specification>>  \n    FROM from-list  \n    <WHERE sql-expression>  \n    <GROUP BY group-by-item <, ... group-by-item>>  \n    <HAVING sql-expression>  \n    <ORDER BY order-by-item <, ... order-by-item>>; \n    \nSelects columns and rows of data from tables and views."},"StatementOptionType":"S"},{"StatementOptionName":"CASE","StatementOptionHelp":{"#cdata":"Selects result values that satisfy specified conditions. \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"},{"StatementOptionName":"WHEN","StatementOptionHelp":{"#cdata":"[Used in a CASE expression] \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"},{"StatementOptionName":"THEN","StatementOptionHelp":{"#cdata":"[Used in a CASE expression] \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"},{"StatementOptionName":"ELSE","StatementOptionHelp":{"#cdata":"[Used in a CASE expression] \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"},{"StatementOptionName":"END","StatementOptionHelp":{"#cdata":"[Used in a CASE expression] \n          \nSyntax:\n  CASE <case-operand>  \n    WHEN when-condition THEN result-expression  \n    <...WHEN when-condition THEN result-expression>  \n    <ELSE result-expression>  \n    END"},"StatementOptionType":"S"}]}},{"StatementName":"UPDATE","StatementHelp":{"#cdata":"Syntax: UPDATE table-name|sas/access-view|proc-sql-view <AS alias>  \n    SET column=sql-expression <, ... column=sql-expression>  \n    <SET column=sql-expression <, ... column=sql-expression>>  \n    <WHERE sql-expression>;  \n\nModifies a column's values in existing rows of a table or view."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"SET","StatementOptionHelp":{"#cdata":"SET column=sql-expression <, ... column=sql-expression>"},"StatementOptionType":"S"},{"StatementOptionName":"WHERE","StatementOptionHelp":{"#cdata":"<WHERE sql-expression>;"},"StatementOptionType":"S"}]}},{"StatementName":"VALIDATE","StatementHelp":{"#cdata":"Syntax: VALIDATE query-expression; \n      \nChecks the accuracy of a query-expression's syntax and semantics without executing \nthe expression."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"LIKE","StatementOptionHelp":{"#cdata":"[Syntax:...LIKE table-name2...] \n          \nSQL keyword.\n\nIf used as a SQL expression operator, LIKE  tests for a matching pattern. \n\nSyntax: \nsql-expression <NOT> LIKE sql-expression <ESCAPE character-expression>"},"StatementOptionType":"S"},{"StatementOptionName":"AS","StatementOptionHelp":{"#cdata":"[Syntax: ...AS query-expression ...] \n          \nSQL keyword"},"StatementOptionType":"S"},{"StatementOptionName":"SELECT","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"DISTINCT","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"INTO","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"FROM","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"WHERE","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"GROUP BY","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"HAVING","StatementOptionHelp":{"#cdata":"SQL-expression keyword"},"StatementOptionType":"S"},{"StatementOptionName":"INTERSECT","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces rows that are common to both query results."},"StatementOptionType":"S"},{"StatementOptionName":"CORRESPONDING|CORR","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nCauses PROC SQL to match the columns in table-expressions by name and not by \nordinal position."},"StatementOptionType":"S"},{"StatementOptionName":"EXCEPT","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces rows that are part of the first query only."},"StatementOptionType":"S"},{"StatementOptionName":"ALL","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nThe set operators automatically eliminate duplicate rows from their output tables. \nThe optional ALL keyword preserves the duplicate rows, reduces the execution by one \nstep, and thereby improves the query-expression's performance."},"StatementOptionType":"S"},{"StatementOptionName":"UNION","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nProduces all unique rows from both queries."},"StatementOptionType":"S"},{"StatementOptionName":"OUTER UNION","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nConcatenates the query results."},"StatementOptionType":"S"},{"StatementOptionName":"INNER JOIN","StatementOptionHelp":{"#cdata":"Returns a result table for all the rows in a table that have one or more matching \nrows in the other tables, as specified by the sql-expression."},"StatementOptionType":"S"},{"StatementOptionName":"LEFT JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from the first table that do not match any row in the second (RIGHTTAB) \ntable."},"StatementOptionType":"S"},{"StatementOptionName":"RIGHT JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from the second table that do not match any row in the first table."},"StatementOptionType":"S"},{"StatementOptionName":"FULL JOIN","StatementOptionHelp":{"#cdata":"Has all the rows from the Cartesian product of the two tables for which the sql-expression \nis true, plus rows from each table that do not match any row in the other table."},"StatementOptionType":"S"},{"StatementOptionName":"CROSS JOIN","StatementOptionHelp":{"#cdata":"A cross join returns as its result table the product of the two tables being joined."},"StatementOptionType":"S"},{"StatementOptionName":"UNION JOIN","StatementOptionHelp":{"#cdata":"[SQL set operator keyword] \n          \nUsing a union join is similar to concatenating tables with the OUTER UNION set operator."},"StatementOptionType":"S"},{"StatementOptionName":"OR","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates logical OR."},"StatementOptionType":"S"},{"StatementOptionName":"ON","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  LEFT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"EQ","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates equals"},"StatementOptionType":"S"},{"StatementOptionName":"NE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates not equal"},"StatementOptionType":"S"},{"StatementOptionName":"GT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than"},"StatementOptionType":"S"},{"StatementOptionName":"LT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than"},"StatementOptionType":"S"},{"StatementOptionName":"GE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than or equal to"},"StatementOptionType":"S"},{"StatementOptionName":"LE","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than or equal to"},"StatementOptionType":"S"},{"StatementOptionName":"EQT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates equal to truncated strings (use with character operands only)"},"StatementOptionType":"S"},{"StatementOptionName":"GTT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"LTT","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"GET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates greater than or equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"LET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates less than or equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"NET","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates not equal to truncated strings"},"StatementOptionType":"S"},{"StatementOptionName":"LEFT","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  LEFT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"RIGHT","StatementOptionHelp":{"#cdata":"[SQL expression keyword] \n          \nUsed in connection with JOIN expressions.\n\nExample:\nSELECT *  FROM   employee  RIGHT OUTER JOIN department  \n  ON employee.DepartmentID = department.DepartmentID;"},"StatementOptionType":"S"},{"StatementOptionName":"BETWEEN","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nSelects rows where column values are within a range of values. \n\nSyntax:\nsql-expression <NOT> BETWEEN sql-expression AND sql-expression"},"StatementOptionType":"S"},{"StatementOptionName":"AND","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nIndicates logical AND."},"StatementOptionType":"S"},{"StatementOptionName":"NOT","StatementOptionHelp":{"#cdata":"[SQL expression operator]           \n          \nIndicates logical NOT."},"StatementOptionType":"S"},{"StatementOptionName":"IS","StatementOptionHelp":{"#cdata":"SQL expression operator"},"StatementOptionType":"S"},{"StatementOptionName":"CONTAINS","StatementOptionHelp":{"#cdata":"SQL expression operator"},"StatementOptionType":"S"},{"StatementOptionName":"EXISTS","StatementOptionHelp":{"#cdata":"[SQL expression operator] \n          \nSyntax: <NOT> EXISTS (query-expression) \n          \nTests if a subquery returns one or more rows. "},"StatementOptionType":"S"},{"StatementOptionName":"IN","StatementOptionHelp":{"#cdata":"[SQL expression operator]\n          \nTests set membership. \n\nSyntax:\nsql-expression <NOT> IN (query-expression | constant <, ... constant>)"},"StatementOptionType":"S"}]}}]}}}