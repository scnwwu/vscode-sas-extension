{"Procedure":{"Name":"SURVEYIMPUTE","#comment":{},"ProductGroup":"SAS/STAT","ProcedureHelp":{"#cdata":"Syntax: PROC SURVEYIMPUTE <options>;\n    BY variables;\n    CELLS variables ;\n    CLASS variable <(options)> <\u2026variable <(options)>> </ options>;\n    CLUSTER variables;\n    ID variable;\n    IMPJOINT <variables>;\n    OUTPUT <OUT=SAS-data-set><OUTJKCOEFS=SAS-data-set><keyword=name \u2026keyword=name>;\n    REPWEIGHTS variables;\n    STRATA variables ;\n    VAR variables;\n    WEIGHT variable; \n    \nThe SURVEYIMPUTE procedure imputes missing values of an item in a data set by replacing them with observed \nvalues from the same item. The principles by which the imputation is performed are particularly useful for \nsurvey data. PROC SURVEYIMPUTE also computes replicate weights (such as jackknife weights) that account for \nthe imputation and that can be used for replication-based variance estimation for complex surveys. The procedure \nimplements a fractional hot-deck imputation technique (Kim and Fuller 2004; Fuller 2009; Kim and Shao 2014) \nin addition to some traditional hot-deck imputation techniques (Andridge and Little 2010).\n\nNonresponse is a common problem in almost all surveys of human populations. Estimators that are based on\nsurvey data that include nonresponse can suffer from nonresponse bias if the nonrespondents are different \nfrom the respondents. Estimators that use complete cases (only the observed units) might also be less precise. \nImputation techniques are important tools for reducing nonresponse bias and producing efficient estimators.\n\nThe main objectives of any imputation technique are to eliminate the nonresponse bias and to provide an imputed \ndata set that results in consistent analyses conducted with the imputed data. In addition, a variance estimator \nmust be available that accounts for both the sampling variance and the imputation variance. Imputation techniques \nuse implicit or explicit models. Some model-based imputation techniques include multiple imputation, mean imputation, \nand regression imputation."},"ProcedureOptions":{"ProcedureOption":[{"ProcedureOptionName":"DATA=","ProcedureOptionHelp":{"#cdata":"[Syntax: DATA=SAS-data-set] \n      \nNames the SAS data set that contains the data to be analyzed. If you omit the DATA= option, PROC SURVEYIMPUTE \nuses the most recently created SAS data set."},"ProcedureOptionType":"DV"},{"ProcedureOptionName":"METHOD=","ProcedureOptionHelp":{"#cdata":"Syntax: METHOD=FEFI | HOTDECK | HD <(method-option)>\n      \nSpecifies the imputation method to impute missing values for all variables in the VAR statement. By default, METHOD=FEFI."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"FEFI","@Value2":"HOTDECK|HD"},"ProcedureOptionToolTips":{"@ToolTip1":"Syntax: FEFI <(method-options)>  Requests the fully efficient fractional imputation (FEFI) method.   You can specify the following method-options:   ABSEMWTCONV=r     specifies the absolute weighted convergence criterion. The expectation maximization (EM) algorithm stops when      the maximum absolute difference between the fractional weights from the previous iteration and the fractional      weights from the current iteration is less than r. The default value of r is 0.00001.    RELEMWTCONV=r     specifies a relative weighted convergence criterion. The expectation maximization (EM) algorithm stops when      the maximum relative absolute difference between the weights from the previous iteration and the weights from      the current iteration is less than r. The default value of r is 0.001.    MAXDONORCELLS=i     specifies the maximum number (i) of donor cells allowed for a recipient unit. By default, MAXDONORCELLS=5000.   MAXEMITER=i     specifies the maximum number (i) of iterations for the expectation maximization (EM) algorithm. By default,      MAXEMITER=100.","@ToolTip2":"Syntax: HOTDECK < (SELECTION=selection-option) >  HD < (SELECTION=selection-option) >  Requests the hot-deck imputation method.   By default, SELECTION=SRSWR for METHOD=HOTDECK if you do not use the WEIGHT statement, and SELECTION=WEIGHTED for  METHOD=HOTDECK if you use the WEIGHT statement. You can specify one of the following donor selection selection-options:   ABB     requests donor selection by using the approximate Bayesian bootstrap method.    SRSWOR     requests donor selection by using simple random samples without replacement.     SRSWR     requests donor selection by using simple random samples with replacement.      WEIGHTED     requests donor selection by using probability proportional to respondent weights with replacement."},"SubOptionsKeywords":"ABSEMWTCONV=|RELEMWTCONV=|MAXDONORCELLS=|MAXEMITER=|ABB|SRSWOR|WEIGHTED"},{"ProcedureOptionName":"NDONORS=","ProcedureOptionHelp":{"#cdata":"Syntax: NDONORS=r\n      \nSpecifies the number of donor units to impute for a recipient unit when METHOD=HOTDECK. If you specify NDONORS=0, \nthen no imputation is performed. When METHOD=FEFI , the SURVEYIMPUTE procedure performs fully efficient fractional \nimputation, for which the NDONORS= option does not apply. When METHOD=HOTDECK, NDONORS=1 by default."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"NOPRINT","ProcedureOptionHelp":{"#cdata":"Suppresses all displayed output. This option temporarily disables the Output Delivery System (ODS)."},"ProcedureOptionType":"S"},{"ProcedureOptionName":"ORDER=","ProcedureOptionHelp":{"#cdata":"Specifies the sort order for the levels of the classification variables (which are specified in the CLASS statement).\n      \nThis option applies to the levels for all classification variables, except when you use the (default) \nORDER=FORMATTED option with numeric classification variables that have no explicit format. In that case, \nthe levels of such variables are ordered by their internal value."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"DATA","@Value2":"FORMATTED","@Value3":"FREQ","@Value4":"INTERNAL"},"ProcedureOptionToolTips":{"@ToolTip1":"Levels sorted by the order of appearance in the input data set.","@ToolTip2":"Levels sorted by the external formatted value, except for numeric variables with  no explicit format, which are sorted by their unformatted (internal) value.","@ToolTip3":"Levels sorted by the descending frequency count; levels with the most observations  come first in the order.","@ToolTip4":"Levels sorted by the unformatted value."}},{"ProcedureOptionName":"SEED=","ProcedureOptionHelp":{"#cdata":"Syntax: SEED=number \n      \nSpecifies the initial seed for random number generation that is used to select donor units for METHOD=HOTDECK . \nThe number should be a positive integer. If you do not specify this option or if number is 0, PROC SURVEYIMPUTE \nuses the time of day from the computer\u2019s clock to obtain the initial seed."},"ProcedureOptionType":"V"},{"ProcedureOptionName":"VARMETHOD=|REPWEIGHTSTYPE=","ProcedureOptionHelp":{"#cdata":"[Syntax: VARMETHOD=BRR < (method-options) > | JACKKNIFE | NONE \nREPWEIGHTSTYPE=BRR < (method-options) > | JACKKNIFE | NONE\n\nComputes imputation-adjusted replicate weights."},"ProcedureOptionType":"V","ProcedureOptionValues":{"@Value1":"BRR","@Value2":"JACKKNIFE|JK","@Value3":"NONE"},"ProcedureOptionToolTips":{"@ToolTip1":"BRR < (method-options) >  Computes the imputation-adjusted balanced repeated replication (BRR) weights. The BRR method requires  a stratified sample design with two primary sampling units (PSUs) in each stratum. If you specify the  VARMETHOD=BRR option, you must also use a STRATA statement unless you provide replicate weights by using  a REPWEIGHTS statement.                                   You can specify the following method-options in parentheses after the VARMETHOD=BRR option:       FAY <=value>    requests Fay\u2019s method, which is a modification of the BRR method.      HADAMARD=SAS-data-set    H=SAS-data-set    names a SAS data set that contains the Hadamard matrix for BRR replicate construction.     PRINTH    displays the Hadamard matrix used to construct replicates for BRR. When you provide the    Hadamard matrix in the HADAMARD= method-option, PROC SURVEYIMPUTE displays only the rows    and columns that are actually used to construct replicates.     REPS=number    specifies the number of replicates for BRR variance estimation. The value of number must    be an integer greater than 1.","@ToolTip2":"Computes the imputation-adjusted jackknife replicate weights. ","@ToolTip3":"Does not compute replicate weights."},"SubOptionsKeywords":"FAY|FAY=|PRINTH|HADAMARD=|PRINTH|REPS="}]},"ProcedureStatements":{"ProcedureStatement":[{"StatementName":"BY","StatementHelp":{"#cdata":"Syntax: BY variables;\n      \nYou can specify a BY statement with PROC SURVEYIMPUTE to obtain separate analyses of observations in groups \nthat are defined by the BY variables. When a BY statement appears, the procedure expects the input data set \nto be sorted in order of the BY variables. If you specify more than one BY statement, only the last one \nspecified is used."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DESCENDING","StatementOptionHelp":{"#cdata":"Specifies that the observations are sorted in descending order by the variable that \nimmediately follows the word DESCENDING in the BY statement."},"StatementOptionType":"S"},{"StatementOptionName":"NOTSORTED","StatementOptionHelp":{"#cdata":"Specifies that observations are not necessarily sorted in alphabetic or numeric order."},"StatementOptionType":"S"}]}},{"StatementName":"CELLS","StatementHelp":{"#cdata":"Syntax: CELLS variables ;\n      \nThe CELLS statement names the variables that identify the imputation cells. The imputation cells divide the data \ninto groups of similar units. The combination of levels of CELLS variables defines the imputation cells. If you do \nnot use this statement, then all observation units are assumed to be in one imputation cell."},"StatementOptions":null},{"StatementName":"CLASS","StatementHelp":{"#cdata":"Syntax: CLASS variable <(options)> \u2026<variable <(options)>> </ options>;\n      \nThe CLASS statement names the classification variables for the analysis. Most options can be specified either \nas individual variable options or as global options. You can specify options for each variable by enclosing the \noptions in parentheses after the variable name. You can also specify global options for the CLASS statement by \nplacing the options after a slash (/). Global options are applied to every variable that is specified without \nan option in the CLASS statement. However, individual CLASS variable options override the global options."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"DESCENDING|DESC","StatementOptionHelp":{"#cdata":"Reverses the sorting order of the classification variable. If you specify both the DESCENDING and ORDER= \noptions, PROC SURVEYIMPUTE orders the categories according to the ORDER= option and then reverses that order."},"StatementOptionType":"S"},{"StatementOptionName":"ORDER=","StatementOptionHelp":{"#cdata":"Specifies the sort order for the levels of classification variables."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"DATA","@Value2":"FORMATTED","@Value3":"FREQ","@Value4":"INTERNAL"},"StatementOptionToolTips":{"@ToolTip1":"Levels are sorted by the order of appearance in the input data set","@ToolTip2":"Levels are sorted by the external formatted value, except for numeric variables  with no explicit format, which are sorted by their unformatted (internal) value.","@ToolTip3":"Levels are sorted by the descending frequency count; levels with the most observations  come first in the order","@ToolTip4":"Levels are sorted by the unformatted value."}},{"StatementOptionName":"TRUNCATE=","StatementOptionHelp":{"#cdata":"[Syntax: TRUNCATE <=n> \n          \nSpecifies the length n of CLASS variable values to use in determining CLASS variable levels. The default \nis to use the full formatted length of the CLASS variable. If you specify the TRUNCATE option without the \nlength n, the first 16 characters of the formatted values are used. When formatted values are longer than \n16 characters, you can use this option to revert to the levels as determined in releases before SAS 9. The \nTRUNCATE option is available only as a global option."},"StatementOptionType":"V"}]}},{"StatementName":"CLUSTER","StatementHelp":{"#cdata":"Syntax: CLUSTER variables; \n      \nThe CLUSTER statement names variables that identify the first-stage clusters in a clustered sample design. \nFirst-stage clusters are also known as primary sampling units (PSUs). The combinations of categories of \nCLUSTER variables define the clusters in the sample. If you also use the STRATA statement, clusters are \nnested within strata. \n\nIf your sample design has clustering at multiple stages, you should specify only the first-stage clusters (PSUs) \nin the CLUSTER statement. For more information, see the section Specifying the Sample Design.\n\nIf you use a REPWEIGHTS statement to provide replicate weights for the BRR or jackknife variance estimation \nmethod, you do not need to use a CLUSTER statement."},"StatementOptions":null},{"StatementName":"ID","StatementHelp":{"#cdata":"Syntax: ID variable;\n      \nThe ID statement names a variable in the DATA= input data set to identify observation units. When you \nuse an OUTPUT statement, the OUT= data set includes the ID variable. PROC SURVEYIMPUTE uses the ID variable \nvalues to identify the donor observations. If you do not use an ID statement, the procedure creates a new \nvariable named UnitID that uses the observation numbers to identify the donor observations."},"StatementOptions":null},{"StatementName":"IMPJOINT","StatementHelp":{"#cdata":"Syntax: IMPJOINT <variables>; \n      \nThe IMPJOINT statement specifies the names of variables that are to be imputed jointly for the fully \nefficient fractional imputation (FEFI) method. If you do not use the IMPJOINT statement, then all the \nvariables that you specify in the VAR statement are imputed jointly. You can use multiple IMPJOINT \nstatements. The levels of the variables in the IMPJOINT statement describe a nonparametric imputation \nmodel for the expectation maximization (EM) step for the fractional imputation."},"StatementOptions":null},{"StatementName":"OUTPUT","StatementHelp":{"#cdata":"Syntax: OUTPUT <OUT=SAS-data-set> <OUTJKCOEFS=SAS-data-set> <keyword=name \u2026keyword=name> ;\n      \nThe OUTPUT statement creates a SAS data set that contains the imputed data. You must use the OUTPUT \nstatement to store the imputed data in a SAS data set. If you use multiple OUTPUT statements, then \nPROC SURVEYIMPUTE uses only the first OUTPUT statement and ignores the rest. The OUTPUT OUT= data \nset contains all the variables from the DATA= input data set, imputed values for missing values for \nthe variables in the VAR statement, and some observation-level quantities. These quantities can include \nthe fractionally adjusted weights, replicate weights, recipient numbers, and donor identifications."},"StatementOptions":{"StatementOption":[{"StatementOptionName":"OUT=","StatementOptionHelp":{"#cdata":"Syntax: OUT=SAS-data-set \n          \nNames the output data set. If you use the OUTPUT statement but omit the OUT= option, then the output \ndata set is named by using the DATAn convention"},"StatementOptionType":"DV"},{"StatementOptionName":"OUTJKCOEFS=","StatementOptionHelp":{"#cdata":"Syntax: OUTJKCOEFS=SAS-data-set\n          \nNames a SAS data set that contains the jackknife coefficients for VARMETHOD=JACKKNIFE."},"StatementOptionType":"V"},{"StatementOptionName":"DONORID","StatementOptionHelp":{"#cdata":"Syntax: DONORID<=name> \n          \nRequests a name for the identification variable for the donor units. If you do not specify this keyword, \nthe donor IDs are not saved in the output data set. If you specify this keyword but do not specify a name, \nthen the donor IDs are stored in a new variable named DonorID. This keyword is available only when METHOD=HOTDECK."},"StatementOptionType":"S|V"},{"StatementOptionName":"FRACTIONALWEIGHTS=","StatementOptionHelp":{"#cdata":"Syntax: FRACTIONALWEIGHTS=name\n          \nIncludes the fractional weights of donor cells in the output data set and specifies the corresponding \nvariable name. If you do not specify this keyword, the fractional weights are not saved in the output \ndata set. This keyword is available only when METHOD=FEFI."},"StatementOptionType":"V"},{"StatementOptionName":"IMPADJWEIGHTS=","StatementOptionHelp":{"#cdata":"Syntax: IMPADJWEIGHTS=name\n          \nIncludes the imputation-adjusted weights in the output data set and specifies the corresponding variable \nname. The imputation-adjusted weights are computed by multiplying the base weights by the fractional weights. \nIf you do not specify this keyword, then the imputation-adjusted weights are stored in a new variable named \nImpWt. This keyword is available only when METHOD=FEFI."},"StatementOptionType":"V"},{"StatementOptionName":"IMPSTATUS","StatementOptionHelp":{"#cdata":"Syntax: IMPSTATUS=index\n          \nIncludes an imputation status index."},"StatementOptionType":"V","StatementOptionValues":{"@Value1":"0","@Value2":"1","@Value3":"2","@Value4":"3","@Value5":"4"},"StatementOptionToolTips":{"@ToolTip1":"All items are observed.","@ToolTip2":"All missing items are imputed.","@ToolTip3":"No missing items are imputed.","@ToolTip4":"Some missing items are imputed but some missing items are not imputed.","@ToolTip5":"Invalid observation; observation is not used in the imputation."}},{"StatementOptionName":"OBSID=","StatementOptionHelp":{"#cdata":"Syntax: OBSID=name \n          \nIncludes an index variable to contain the unique numeric identification of every unit from the input data set \nin the output data and specifies the corresponding variable name. If you do not specify this keyword, then the \ndefault unit ID is stored in a new variable named UnitID. The OBSID= option is not applicable when the ID statement \nis specified."},"StatementOptionType":"V"},{"StatementOptionName":"RECIPIENT=","StatementOptionHelp":{"#cdata":"Syntax: RECIPIENT=name \n          \nIncludes the recipient index in the output data set and specifies the corresponding variable name. The recipient \nindex can be 0 (which indicates a nonmissing unit) or any positive integer (which represents multiple donor units \nfor a recipient unit). If you do not specify this keyword, then the recipient index is stored in a new variable \nnamed Recipient."},"StatementOptionType":"V"}]}},{"StatementName":"REPWEIGHTS","StatementHelp":{"#cdata":"Syntax: REPWEIGHTS variables;\n      \nThe REPWEIGHTS statement names variables that provide replicate weights.\n\nIf you use a REPWEIGHTS statement and you specify METHOD=HOTDECK in the PROC SURVEYIMPUTE statement, \nthe procedure does not adjust the replicate weights.\n\nIf you use a REPWEIGHTS statement and you specify METHOD=FEFI in the PROC SURVEYIMPUTE statement, the \nprocedure adjusts the replicate weights.\n\nEach REPWEIGHTS variable should contain the weights for a single replicate, and the number of replicates \nshould equal the number of REPWEIGHTS variables. The REPWEIGHTS variables must be numeric, and the variable \nvalues must be nonnegative numbers.\n\nIf you provide replicate weights in a REPWEIGHTS statement, you do not need to use a CLUSTER or STRATA \nstatement.\n\nIf you use a REPWEIGHTS statement but do not use a WEIGHT statement, PROC SURVEYIMPUTE uses the average \nof each observation\u2019s replicate weights as the observation\u2019s weight."},"StatementOptions":null},{"StatementName":"STRATA","StatementHelp":{"#cdata":"Syntax: STRATA variables;\n      \nThe STRATA statement names one or more variables that form the strata in a stratified sample design. The \ncombinations of levels of STRATA variables define the strata in the sample, where strata are nonoverlapping \nsubgroups that were sampled independently. \n\nIf your sample design has stratification at multiple stages, you should identify only the first-stage strata \nin the STRATA statement. For more information, see the section Specifying the Sample Design.\n\nIf you provide replicate weights in a REPWEIGHTS statement, you do not need to use a STRATA statement. \n\nThe STRATA variables are one or more variables in the DATA= input data set. These variables can be either \ncharacter or numeric, but PROC SURVEYIMPUTE treats them as categorical variables. The formatted values of the \nSTRATA variables determine the STRATA variable levels. Thus, you can use formats to group values into levels."},"StatementOptions":null},{"StatementName":"VAR","StatementHelp":{"#cdata":"Syntax: VAR variables; \n      \nThe VAR statement names the analysis variables to be imputed. The analysis variables can be either \ncharacter or numeric. The categorical variables in the VAR statement, which can be either character \nor numeric, must also be specified in the CLASS statement. Only variables that you specify in the \nVAR statement will be imputed. If you specify METHOD=FEFI , then all numeric variables that you \nspecify in the VAR statement must also be specified in the CLASS statement. METHOD=FEFI is not \navailable for continuous variables in SAS/STAT 14.1.\n\nA variable in the VAR statement should not appear in any of the BY, CLUSTER, REPWEIGHTS, STRATA, \nand WEIGHT statements."},"StatementOptions":null},{"StatementName":"WEIGHT","StatementHelp":{"#cdata":"Syntax: WEIGHT variable;\n      \nThe WEIGHT statement names the variable that contains the sampling weights. This variable must be numeric, \nand the sampling weights must be positive numbers. If an observation has a weight that is nonpositive or \nmissing, then PROC SURVEYIMPUTE omits that observation from the analysis. \n\nIf you do not use a WEIGHT statement but you provide replicate weights in a REPWEIGHTS statement, PROC \nSURVEYIMPUTE uses the average of each observation\u2019s replicate weights as the observation\u2019s weight. \n\nIf you use neither a WEIGHT statement nor a REPWEIGHTS statement, PROC SURVEYIMPUTE assigns all observations \na weight of 1."},"StatementOptions":null}]}}}