{"Keywords":{"Keyword":[{"Name":"%ARMEND","Type":"MACRO_ARM","Help":{"#cdata":"Indicates the termination of an application. \n    \nSyntax: %ARMEND< (option-1 <, ...option-n>)>; \n\nAvailable options are:\n\n  APPID=numeric variable or constant \n  is the application ID to use on the ARM_GETID function call. The value must be a numeric \n  variable or constant. \n\n  APPIDVAR=numeric variable \n  is the application ID. The value must be a numeric variable.\n\n  LEVEL=numeric variable or constant \n  is a variable that specifies the execution level. The value must be a numeric constant or variable.\n\n  MACONLY=NO | YES \n  enables the %ARMEND macro to be issued in open code. You set the value to YES if the macro can be \n  issued in open code, and NO if it can be issued only in a DATA step.\n\n  Default: NO \n\n  SCL=NO | YES \n  is used only in SCL programs and specifies whether the macro is in an SCL environment. Set the value\n  to YES if the macro is in an SCL environment, and NO if it is not. Default: NO"}},{"Name":"%ARMGTID","Type":"MACRO_ARM","Help":{"#cdata":"Assigns a unique identifier to a transaction class. \n    \nSyntax: %ARMGTID (TXNNAME='transaction-name' < option-1 <, ...option-n>>); \n\nUse the %ARMGTID macro to name a transaction class. Transaction classes are related \nunits of work within an application. One or more %ARMGTID macros are typically issued \nwhen the application starts to name each of the transaction classes used by the application. \nThe %ARMGTID macro produces only one \nrecord for each transaction class, even if there are multiple %ARMGTID macros for the \nsame transaction class."}},{"Name":"%ARMINIT","Type":"MACRO_ARM","Help":{"#cdata":"Signifies the initialization of an application. \n    \nSyntax: %ARMINIT (APPNAME='application-name' <, option-1 <, ...option-n>>); \n\nAvailable options are:\n\n  APPIDVAR=numeric variable -- is the application ID. The value must be a numeric variable. \n\n  APPUSER='application-userID' -- is the application user ID. The value is a SAS character variable or quoted literal. \n\n  GETID=NO | YES -- is optional and denotes whether to generate an ARM_GETID function call after ARM_INIT. Default: NO \n\n  LEVEL=numeric constant or variable -- is a variable that specifies the execution level. \n\n  MACONLY=NO | YES -- enables the %ARMINIT macro to be issued in open code. Default: NO \n\n  SCL=NO | YES -- is used only in SCL programs and specifies whether the macro is in an SCL environment. Default: NO \n\n  TXNIDVAR=numeric variable -- is a numeric variable that contains the value of the transaction ID. \n\n  TXNDET='name' -- is a transaction detail. The value is a SAS character variable or quoted literal. \n\n  TXNNAME='transaction-name' -- is the transaction name. The value is a SAS character variable or quoted literal value."}},{"Name":"%ARMSTOP","Type":"MACRO_ARM","Help":{"#cdata":"Marks the end of a transaction instance. \n    \nSyntax: %ARMSTOP (<option1 <, ...option-n>>);\n\nAvailable options are:\n\n  LEVEL=numeric constant or variable \n  is a variable that specifies the execution level. The value must be a numeric constant or variable.\n\n  MACONLY=NO | YES \n  enables the %ARMSTOP macro to be issued in open code. You set the value to YES if the macro can be \n  issued in open code, and NO if it can be issued only in a DATA step. \n\n  METRVAL1-7='name' \n  is the value of the user-defined metric. The value must be a SAS character variable or a quoted literal \n  value up to eight characters in length.\n\n  SCL=NO | YES \n  is used only in SCL programs and specifies whether the macro is in an SCL environment. Set the value \n  to YES if the macro is in an SCL environment, and NO if it is not. Default: NO \n\n  SHANDLE=numeric variable or constant \n  is the start handle to use on the ARM_UPDATE function call. The value must be a numeric variable or constant. \n\n  SHDLVAR=numeric variable \n  is a numeric variable that contains the value of the start handle. \n\n  STATUS=numeric variable or numeric constant \n  is a transaction status value to pass to the ARM_STOP function call. The value must be a numeric \n  variable or numeric constant 0, 1, or 2. The default is 0."}},{"Name":"%ARMSTRT","Type":"MACRO_ARM","Help":{"#cdata":"Signals the start of execution of a transaction instance and returns a unique handle that is passed \nto %ARMUPDT and %ARMSTOP. \n\nSyntax: %ARMSTRT (option-1 <, ...option-n>); \n\nAvailable options are: \n\n  APPID=numeric variable or constant -- is the application ID to use on the ARM_GETID function call. \n\n  APPIDVAR=numeric variable -- is the application ID. The value must be a numeric variable.\n\n  CORR=n -- defines the type of parent and child transactions. Default: 0 \n\n  GETID=NO | YES -- is optional and denotes whether to generate an ARM_GETID function call before ARM_START. Default: NO \n\n  LEVEL=numeric constant or variable \n  is a variable that specifies the execution level. The value must be a numeric constant or variable.\n\n  MACONLY=NO | YES -- enables the %ARMSTRT macro to be issued in open code. Default: NO \n\n  METRVAL1-7='name' -- is the value of the user-defined metric. The value must be a SAS character variable or a quoted literal.  \n\n  PARNTVAR=numeric variable -- is a numeric variable that contains the value of the parent transaction start handle. \n\n  SCL=NO | YES -- is used only in SCL programs and specifies whether the macro is in an SCL environment. Default: NO \n\n  SHDLVAR=numeric variable -- is a numeric variable that contains the value of the start handle. \n\n  TXNDET='name' -- is a transaction detail. The value is a SAS character variable or quoted literal.\n\n  TXNID=numeric variable or constant -- is the transaction ID to use in the ARM_START function call. \n\n  TXNIDVAR=numeric variable -- is a numeric variable that contains the value of the transaction ID when GETID=NO. . \n\n  TXNNAME='transaction-name' -- is the transaction name. The value is a SAS character variable or quoted literal."}},{"Name":"%ARMUPDT","Type":"MACRO_ARM","Help":{"#cdata":"Updates a transaction that has been previously started. \n    \nSyntax: %ARMUPDT (DATA='variable', <option-1 <, ...option-n>>); \n\nwhere: \n\n  DATA='variable' -- is a SAS character variable or a quoted literal from the user-supplied data buffer that \n  contains text to pass to the ARM_UPDATE function call. DATA= is not required, but it is highly recommended. \n\n  LEVEL=numeric constant or variable \n  is a variable that specifies the execution level. The value must be a numeric constant or variable.\n\n  MACONLY=NO | YES -- enables the %ARMUPDT macro to be issued in open code. Default: NO \n\n  METRVAL1-7='name' \n  is the value of the user-defined metric. The value must be a SAS character variable or a quoted literal. \n\n  SCL=NO | YES \n  is used only in SCL programs and specifies whether the macro is in an SCL environment. Default: NO \n\n  SHANDLE=numeric or constant \n  is the start handle to use on the ARM_UPDATE function call. The value must be a numeric or constant.\n\n  SHDLVAR=numeric variable -- is a numeric variable that contains the value of the start handle."}},{"Name":"%ARMCONV","Type":"MACRO_ARM","Help":{"#cdata":"Converts a SAS System 9 or later ARM log written in simple format to the more readable \nlabel=item ARM format used in Release 8.2."}},{"Name":"%ARMJOIN","Type":"MACRO_ARM","Help":{"#cdata":"Reads the six SAS data sets created by the %ARMPROC macro and creates SAS data sets and \nSQL views that contain common information about applications and transactions.\n\nSyntax: %ARMJOIN (<option-1 <, ...option-n>>); \n\nAvailable options are: \n\n  LIBIN=libref \n  is the libref for the SAS library that contains the six SAS data sets that are created \n  by the %ARMPROC macro. Default: WORK \n\n  LIBOUT=libref \n  is the libref for the SAS library that contains the application and transaction data sets. \n  Default: WORK \n  Restriction: If a Read-only library is specified in the LIBOUT= option, an error message \n  is written to the ARM log and processing is stopped. \n\n  TXNDS=YES | NO \n  specifies whether the transaction data sets are to be created. Default: YES \n\n  UPDTDS=YES | NO \n  specifies whether the update data sets are to be created. Default: YES"}},{"Name":"%ARMPROC","Type":"MACRO_ARM","Help":{"#cdata":"Processes an input ARM log and outputs six SAS data sets that contain the gathered \ninformation from the log. \n    \nSyntax: %ARMPROC (<option-1 <, ...option-n>>); \n\nAvailable options are:\n\n  LIB=libref \n  is the libref for the SAS library that contains the six SAS data sets. Default: WORK \n\n  LOG=pathname \n  is the pathname for the physical location of the ARM log. If a pathname is not specified, \n  you must pre-assign the ARMLOG fileref before calling the macro.\n\n  LOGNEW=pathname \n  is the pathname of the physical location of the new ARM log. It is used when ARM \n  processing is resumed."}},{"Name":"%PERFEND","Type":"MACRO_ARM","Help":{"#cdata":"Syntax: %PERFEND;\n    \nIndicates the termination of the application.\n\nUse the %PERFEND macro to terminate an application or user event. Each %PERFEND macro \nis paired with one %PERFINIT macro to mark the end of an application. The %PERFEND means \nthat the application does not issue any more ARM calls. ARM calls issued after an application \nhas been terminated with the %PERFEND macro result in an error. All transaction class \nidentifiers are cleared and are no longer available after the %PERFEND macro."}},{"Name":"%PERFINIT","Type":"MACRO_ARM","Help":{"#cdata":"Names the application instance and initializes the ARM interface. \n    \nSyntax: %PERFINIT(APPNAME='application-name'); \n    \nAPPNAME='application-name'; \nis the application name. The value is a SAS character variable or quoted literal. \n\nRestriction: The application name has a 127-character limit."}},{"Name":"%PERFSTOP","Type":"MACRO_ARM","Help":{"#cdata":"Specifies the end of a transaction. \n    \nSyntax: %PERFSTOP; \n\nThere are no input parameters for the %PERFSTOP macro. \n\nUse the %PERFSTOP macro to signal the end of a transaction that was started using \nthe %PERFSTRT macro. The %PERFSTOP macro contains default user metrics. To see the \nrelationships between %PERFSTOP and the default user metrics, see Default User \nMetrics and Performance Macros."}},{"Name":"%PERFSTRT","Type":"MACRO_ARM","Help":{"#cdata":"Syntax: %PERFSTRT(TXNNAME='transaction-name'); \n    \nUse the %PERFSTRT macro to signal the start of a transaction. The %PERFSTRT macro \ncontains default user metrics. "}}]}}