{"Keywords":{"Keyword":[{"Name":"ABORT","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: ABORT <ABEND | RETURN> <n>; \n    \nStops executing the current DATA step, SAS job, or SAS session."}},{"Name":"DECLARE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: DECLARE object variable<(<argument_tag-1: value-1<, ...argument_tag-n: value-n>>)>; \n    \nDeclares a DATA step component object; creates an instance of and initializes data \nfor a DATA step component object.\n\n"}},{"Name":"DELETE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Stops processing the current observation.\n\nSyntax: DELETE; "}},{"Name":"DESCRIBE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: DESCRIBE; \n    \nRetrieves source code from a stored compiled DATA step program or a DATA step view."}},{"Name":"ERROR","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: ERROR <message>; \n    \nSets _ERROR_ to 1 and, optionally, writes a message to the SAS log."}},{"Name":"EXECUTE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: EXECUTE; \n    \nExecutes a stored compiled DATA step program."}},{"Name":"LIST","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: LIST; \n    \nWrites to the SAS log the input data record for the observation that is being processed."}},{"Name":"LOSTCARD","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: LOSTCARD; \n    \nResynchronizes the input data when SAS encounters a missing or invalid record in data \nthat has multiple records per observation."}},{"Name":"OUTPUT","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: OUTPUT<data-set-name(s)>; \n    \nWrites the current observation to a SAS data set."}},{"Name":"PUTLOG","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: PUTLOG 'message'; \n    \nWrites a message to the SAS log."}},{"Name":"REDIRECT INPUT","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: REDIRECT INPUT old-name-1 = new-name-1<... old-name-n = new-name-n>; \n    \nThe REDIRECT statement associates the name of the input data set in the source program \nwith the name of another SAS data set."}},{"Name":"REDIRECT OUTPUT","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: REDIRECT OUTPUT old-name-1 = new-name-1<... old-name-n = new-name-n>; \n    \nThe REDIRECT statement associates the name of the output data set with the name of \nanother SAS data set."}},{"Name":"REMOVE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: REMOVE <data-set-name(s)>; \n    \n    \nDeletes an observation from a SAS data set."}},{"Name":"REPLACE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: REPLACE <data-set-name-1><...data-set-name-n>; \n    \nReplaces an observation in the same location."}},{"Name":"STOP","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: STOP; \n    \nStops execution of the current DATA step."}},{"Name":"WHERE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: WHERE where-expression-1 < logical-operator where-expression-n>; \n    \nwhere\n\nlogical-operator can be AND, AND NOT, OR, or OR NOT. \n\nSelects observations from SAS data sets that meet a particular condition."}},{"Name":"CONTINUE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: CONTINUE; \n    \nStops processing the current DO-loop iteration and resumes with the next iteration."}},{"Name":"THEN","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: IF expression THEN statement; \n    \nPart of an (IF expression THEN) statement."}},{"Name":"DO","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"[Iterative] Executes statements between DO and END repetitively based on the value \nof an index variable.\n\nSyntax:\nDO index-variable=specification-1 <, ... specification-n>;\n... more SAS statements ...\nEND; "}},{"Name":"UNTIL","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"DO UNTIL executes statements in a DO loop repetitively until a condition is true.\n\nSyntax:\nDO UNTIL (expression);\n...more SAS statements...\nEND; "}},{"Name":"WHILE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"DO WHILE executes statements repetitively while a condition is true.\n\nSyntax:\nDO WHILE (expression);\n...more SAS statements...\nEND; "}},{"Name":"END","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Ends a DO group or a SELECT group.\nSyntax: END; "}},{"Name":"GO TO","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Moves execution immediately to the statement label that is specified.\n\nSyntax: GO TO label; "}},{"Name":"GOTO","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"See GO TO statement"}},{"Name":"IF","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Executes a SAS statement for observations that meet specific conditions.\n\nSyntax: IF expression THEN statement;\n  <ELSE statement;>.\n\nSyntax: IF expression; \n\n[SUBSETTING] Continues processing only those observations that meet the condition"}},{"Name":"ELSE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Used in combination with an IF-THEN statement.      \n\nSyntax:\nIF expression THEN statement;\n<ELSE statement;> "}},{"Name":"LEAVE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: LEAVE; \n    \nStops processing the current loop and resumes with the next statement in sequence."}},{"Name":"LINK","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Jumps to a statement label.\n\nSyntax: LINK label; "}},{"Name":"RETURN","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: RETURN; \n    \nStops executing statements at the current point in the DATA step and returns to a \npredetermined point in the step."}},{"Name":"SELECT","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Executes one of several statements or groups of statements.\n\nSyntax:\nSELECT <(select-expression)>;\n   WHEN-1 (when-expression-1 <..., when-expression-n>) statement;\n   <... WHEN-n (when-expression-1 <..., when-expression-n>) statement;>\n       <OTHERWISE statement;>\nEND; "}},{"Name":"BY","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Controls the operation of a SET, MERGE, MODIFY, or UPDATE statement in the DATA step \nand sets up special grouping variables. \n\nSyntax: BY <DESCENDING> variable-1\n  <... <DESCENDING> variable-n > <NOTSORTED><GROUPFORMAT>; "}},{"Name":"CARDS","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: CARDS; \n    \nIndicates that data lines follow."}},{"Name":"CARDS4","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: CARDS4; \n    \nIndicates that data lines that contain semicolons follow."}},{"Name":"DATALINES","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: DATALINES; \n    \nIndicates that data lines follow."}},{"Name":"DATALINES4","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: DATALINES4; \n    \nIndicates that data lines that contain semicolons follow."}},{"Name":"FILE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: FILE file-specification <options> <operating-environment-options>; \n    \nSpecifies the current output file for PUT statements."}},{"Name":"FILE PRINT ODS","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: FILE PRINT ODS <=(ODS-suboption(s))><options> ; \n    \nCreates an ODS output object by binding the data component to the table definition \n(template). Optionally, lists the variables to include in the ODS output and \nspecifies options that control the way that the variables are formatted."}},{"Name":"INFILE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Identifies an external file to read with an INPUT statement.\n\nSyntax:\n(1) INFILE file-specification <options > <operating-environment-options>;\n\n(2) INFILE DBMS-specifications; "}},{"Name":"INPUT","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Describes the arrangement of values in the input data record and assigns input values \nto the corresponding SAS variables. Column INPUT reads input values from specified \ncolumns and assigns them to the corresponding SAS variables. Formatted INPUT reads \ninput values with specified informats and assigns them to the corresponding SAS \nvariables. List INPUT scans the input data record for input values and assigns them \nto the corresponding SAS variables. Named INPUT reads data values that appear after \na variable name that is followed by an equal sign and assigns them to corresponding \nSAS variables.\n\nSyntax:\n(1) INPUT <specification(s)><@|@@>;\n\n(2) [Column] INPUT variable <$> start-column <-- end-column> <.decimals> <@ | @@>;\n\n(3) [Formatted] INPUT <pointer-control> variable informat. <@ | @@>;\n\n(4) [Formatted] INPUT<pointer-control> (variable-list) (informat-list) <@ | @@>;\n\n(5) [Formatted] INPUT <pointer-control> (variable-list) (<n*> informat.) <@ | @@>;\n\n(6) [List] INPUT <pointer-control> variable <$> <&> <@ | @@>;\n\n(7) [List] INPUT <pointer-control> variable <:|&|~> <informat.> <@ | @@>;\n\n(8) [Named] INPUT <pointer-control> variable= <$> <@ | @@>;\n\n(9) [Named] INPUT <pointer-control> variable= informat. <@ | @@>; \n\n(10)[Named] INPUT variable= <$> start-column <-- end-column> <.decimals> <@ | @@>; "}},{"Name":"MERGE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Joins observations from two or more SAS data sets into single observations.\n\nSyntax:\nMERGE SAS-data-set-1 <(data-set-options)>\n  SAS-data-set-2 <(data-set-options) >\n  <... SAS-data-set-n<(data-set-options)>>\n  <END=variable>; "}},{"Name":"MODIFY","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Replaces, deletes, and appends observations in an existing SAS data set in place; \ndoes not create an additional copy.\n\nSyntax:\n(1) MODIFY master-data-set <(data-set-option(s))> transaction-data-set <(data-set-option(s))> \n    <NOBS=variable> <END=variable> <UPDATEMODE=MISSINGCHECK | NOMISSINGCHECK>; \n    BY by-variable; \n\n(2) MODIFY master-data-set <(data-set-option(s))> KEY=index </ UNIQUE> <NOBS=variable> <END=variable> ;\n\n(3) MODIFY master-data-set <(data-set-option(s))> <NOBS=variable> POINT=variable;\n\n(4) MODIFY master-data-set <(data-set-option(s))> <NOBS=variable> <END=variable>; "}},{"Name":"PUT","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Writes lines to the SAS log, to the SAS output window, or to an external location that \nis specified in the most recent FILE statement. Column PUT writes variable values in \nthe specified columns in the output line, Formatted PUT writes variable values with \nthe specified format in the output line. List PUT writes variable values and the \nspecified character strings in the output line. Named PUT writes variable values \nafter the variable name and an equal sign. ODS PUT writes data values to a special \nbuffer from which they can be written to the data component and formatted by ODS.\n\nSyntax:\n(1) PUT <specification(s)><_ODS_><@|@@>; \n(2) [Column PUT] PUT variable start-column <-- end-column> <.decimal-places> <@ | @@>;\n(3) [Formatted PUT] PUT <pointer-control> variable format. <@ | @@>; \n(4) [Formatted PUT] PUT <pointer-control> (variable-list) (format-list) <@ | @@>;\n(5) [List PUT] PUT <pointer-control> variable <@ | @@>; \n(6) [List PUT] PUT <pointer-control> <n*>'character-string' <@ | @@>; \n(7) [List PUT] PUT <pointer-control> variable <: | ~> format.<@ | @@>; \n(8) [List PUT] PUT <pointer-control> variable= <format.> <@ | @@>;\n(9) [List PUT] PUT variable= start-column <-- end-column> <.decimal-places> <@ | @@>; "}},{"Name":"SET","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: SET<SAS-data-set(s) <(data-set-options(s) )>> <options>; \n    \nReads an observation from one or more SAS data sets."}},{"Name":"UPDATE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Updates a master file by applying transactions.\n\nSyntax:\nUPDATE master-data-set<(data-set-options)> transaction-data-set<(data-set-options)>\n   <END=variable>\n   <UPDATEMODE=\n   MISSINGCHECK|NOMISSINGCHECK>;\n   BY by-variable"}},{"Name":"ARRAY","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Defines elements of an array.\n\nSyntax:\nARRAY array-name { subscript } <$><length>\n<array-elements> <(initial-value-list)>; "}},{"Name":"ATTRIB","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: ATTRIB variable-list(s) attribute-list(s) ; \n    \nAssociates a format, informat, label, and/or length with one or more variables."}},{"Name":"DROP","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: DROP variable-list; \n    \nExcludes variables from output SAS data sets."}},{"Name":"FORMAT","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Associates formats with variables.\n\nSyntax:\n(1) FORMAT variable-1 <... variable-n> <format> <DEFAULT=default-format>;\n\n(2) FORMAT variable-1 <... variable-n> format <DEFAULT=default-format>;\n\n(3) FORMAT variable-1 <... variable-n> format variable-1 <... variable-n> format;\n\nIf you omit DEFAULT=, SAS uses BESTw. as the default numeric format and $w. as the default character format."}},{"Name":"INFORMAT","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Associates informats with variables.\n\nSyntax:\nINFORMAT variable-1 <... variable-n> <informat>;\n\nINFORMAT <variable-1> <... variable-n> <DEFAULT=default-informat>;\n\nINFORMAT variable-1 <... variable-n> informat <DEFAULT=default-informat>; "}},{"Name":"KEEP","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: KEEP variable-list; \n    \nIncludes variables in output SAS data sets."}},{"Name":"LABEL","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Assigns descriptive labels to variables.\n\nSyntax:\n(1) LABEL variable-1='label-1' ... <variable-n='label-n'>; \n\n(2) LABEL variable-1=' ' ... <variable-n=' '>; "}},{"Name":"LENGTH","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: LENGTH variable-specification(s)<DEFAULT=n>; \n    \nSpecifies the number of bytes for storing variables."}},{"Name":"MISSING","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: MISSING character(s);  \n\nwhere character is the value in your input data that represents a special missing value. \n\nAssigns characters in your input data to represent special missing values for numeric data."}},{"Name":"RENAME","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: RENAME old-name-1=new-name-1 ... <old-name-n=new-name-n>; \n    \nSpecifies new names for variables in output SAS data sets."}},{"Name":"RETAIN","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Causes a variable that is created by an INPUT or assignment statement to retain \nits value from one iteration of the DATA step to the next.\n\nSyntax:\nRETAIN <element-list(s) <initial-value(s) |\n  (initial-value-1) | (initial-value-list-1) >\n  < ... element-list-n <initial-value-n |\n  (initial-value-n ) | (initial-value-list-n)>>>; "}},{"Name":"DISPLAY","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: DISPLAY window<.group> <NOINPUT > <BLANK> <BELL > <DELETE>;\n    \nDisplays a window that is created with the WINDOW statement."}},{"Name":"WINDOW","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Creates customized windows for your applications.\n\nSyntax:\n(1) WINDOW window <window-options> field-definition(s);\n(2) WINDOW window <window-options> group-definition(s); "}},{"Name":"RUN","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"[Syntax: RUN <CANCEL>;] \n    \nExecutes the previously entered SAS statements."}},{"Name":"WHEN","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: WHEN-1 (when-expression-1 <..., when-expression-n>) statement; \n    \nUsed in a SELECT-END group in a DATA step. SELECT groups contain WHEN statements \nthat identify SAS statements that are executed when a particular condition is \ntrue. Use at least one WHEN statement in a SELECT group."}},{"Name":"OTHERWISE","Type":"DATASTEP_STATEMENT","Help":{"#cdata":"Syntax: <... WHEN-n (when-expression-1 <..., when-expression-n>) statement;> <OTHERWISE statement;> \n          \nUsed with a WHEN statement in a SELECT-END group in a DATA step. An optional OTHERWISE statement \nspecifies a statement to be executed if no WHEN condition is met."}}]}}