{"Keywords":{"Keyword":[{"Name":"$LOGVSw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string in left-to-right logical order to visual order. \n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 200 \n  Range: 1-32000 \n \nDetails:\nThe $LOGVSw. format is used when you store logical-ordered text on a visual server. \n\nNote: If the $LOGVSw. format is not accessible, then the Hebrew or Arabic portion \nof the data will be reversed.  \n \nComparisons:\nThe $LOGVSw. format performs processing that is the opposite of the $LOGVSRw. format."}},{"Name":"$LOGVSRw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string in right-to-left logical order to visual order. \n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 200 \n  Range: 1-32000 \n \nDetails:\nThe $LOGVSRw. format is used when you store logical-ordered text on a visual server. \nThe Hebrew or Arabic portion of the text is reversed if the $LOGVSw. format is not on \nthe server.\n \nComparisons:\nThe $LOGVSRw. format performs processing that is opposite of the $LOGVSw. format."}},{"Name":"$VSLOGw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string in visual order to left-to-right logical order. \n\nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 200 \n  Range: 1-32000 \n  \nDetails:\nThe $VSLOGw. format is used when transferring data that is stored in visual order. \nAn example is transferring data from a UNIX server to a Windows client.\n\nNote: The $VSLOGw. format does not correctly process all combinations of data strings. \n \nComparisons: \nThe $VSLOGw. format performs processing that is opposite to the $VSLOGRw. format."}},{"Name":"$VSLOGRw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string in visual order to right-to-left logical order. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 200 \n  Range: 1-32000 \n  \nDetails:\nThe $VSLOGRw. format is used when transferring data that is stored in visual order. \nAn example is transferring data from a UNIX server to a Windows client.\n\nNote: The $VSLOGRw. format does not correctly process all combinations of data strings.  \n \nComparisons:\nThe $VSLOGRw. format performs processing that is opposite to the $VSLOGw. format."}},{"Name":"$ASCIIw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts native format character data to ASCII representation. \n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 1 \n  Range: 1-32767 \n \nDetails: \nIf ASCII is the native format, no conversion occurs. \n \nComparisons:\nOn EBCDIC systems, $ASCIIw. converts EBCDIC character data to ASCIIw.\n\nOn all other systems, $ASCIIw. behaves like the $CHARw. format."}},{"Name":"$BIDIw.","Type":"SAS_FORMATS","Help":{"#cdata":"Convert a Logical ordered string to a Visually ordered string, and vice versa by \nreversing the order of Hebrew characters while preserving the order of Latin \ncharacters and numbers. \n\nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 1 if w is not specified \n  Range: 1-32767 \n\nDetails:\nIn the Windows operating environment, Hebrew and Arabic text is stored in logical order. \nThe text is stored in the order that it is written and not necessarily as it is displayed. \nHowever, in other operating environments, Hebrew text is stored in the same order it is \ndisplayed. SAS users can encounter Hebrew and Arabic text that is reversed. Such situations \ncan occur when you use SAS/CONNECT or other software to transfer SAS data sets or reports \nwith Hebrew and Arabic text from a visual operating environment to a logical one. The $BIDI \nformat is a format that reverses Hebrew and Arabic text while maintaining the order of \nnumbers and Latin-1 words."}},{"Name":"$BINARYw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts character data to binary representation. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: The default width is calculated based on the length of the variable to be printed. \n  Range: 1-32767 \n \nComparisons:\n\nThe $BINARYw. format converts character values to binary representation. The BINARYw. \nformat converts numeric values to binary representation."}},{"Name":"$CHARw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes standard character data. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field. You can specify a number or a column range.\n\n  Default: 8 if the length of variable is undefined; otherwise, the length of the variable \n  Range: 1-32767 \n \nComparisons:\n\nThe $CHARw. format is identical to the $w. and $Fw. formats. \n\nThe $CHARw., $Fw., and $w. formats do not trim leading blanks. To trim leading blanks, \nuse the LEFT function to left align character data before output."}},{"Name":"$EBCDICw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts native format character data to EBCDIC representation. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 1 \n  Range: 1-32767 \n  \nDetails:\nIf EBCDIC is the native format, no conversion occurs.\n \nComparisons:\nOn ASCII systems, $EBCDICw. converts ASCII character data to EBCDIC.\n\nOn all other systems, $EBCDICw. behaves like the $CHARw. format."}},{"Name":"$HEXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts character data to hexadecimal representation. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field. \n\n  Default: The default width is calculated based on the length of the variable to be printed.  \n  Range: 1-32767 \n  Tip: To ensure that SAS writes the full hexadecimal equivalent of your data, make w twice \n  the length of the variable or field that you want to represent. \n  Tip: If w is greater than twice the length of the variable that you want to represent, \n  $HEXw. pads it with blanks. \n \nDetails:\n\nThe $HEXw. format converts each character into two hexadecimal characters. Each blank \ncounts as one character, including trailing blanks.\n\n \nComparisons:\n\nThe HEXw. format converts real binary numbers to their hexadecimal equivalent."}},{"Name":"$MSGCASEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes character data in uppercase when the MSGCASE system option is in effect. \n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 1 if the length of the variable is undefined; otherwise, the length of the variable \n  Range: 1-32767 \n \nDetails:\nWhen the MSGCASE= system option is in effect, all notes, warnings, and error messages \nthat SAS generates appear in uppercase. Otherwise, all notes, warnings, and error messages \nappear in mixed case. You specify the MSGCASE= system option in the configuration file or \nduring the SAS invocation."}},{"Name":"$OCTALw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts character data to octal representation. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: The default width is calculated based on the length of the variable to be printed.  \n  Range: 1-32767 \n  Tip: Because each character value generates three octal characters, increase the value \n  of w by three times the length of the character value. \n\nComparisons:\n\nThe $OCTALw. format converts character values to the octal representation of their character \ncodes. The OCTALw. format converts numeric values to octal representation."}},{"Name":"$QUOTEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes data values that are enclosed in double quotation marks. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n\n  Default: 2 if the length of the variable is undefined; otherwise, the length of the variable + 2 \n  Range: 2-32767 \n  Tip: Make w wide enough to include the left and right quotation marks.  \n \nDetails:\nThe following list describes the output that SAS produces when you use the $QUOTEw. format.\n\no If your data value is not enclosed in quotation marks, SAS encloses the output in double quotation marks. \no If your data value is not enclosed in quotation marks, but the value contains a single quotation mark, SAS \n    o encloses the data value in double quotation marks \n    o does not change the single quotation mark.\no If your data value begins and ends with single quotation marks, and the value contains double quotation \nmarks, SAS \n    o encloses the data value in double quotation marks \n    o duplicates the double quotation marks that are found in the data value \n    o does not change the single quotation marks. \no If your data value begins and ends with single quotation marks, and the value contains two single \ncontiguous quotation marks, SAS \n    o encloses the value in double quotation marks \n    o does not change the single quotation marks.\nIf your data value begins and ends with single quotation marks, and contains both double quotation \nmarks and single, contiguous quotation marks, SAS \n    o encloses the value in double quotation marks \n    o duplicates the double quotation marks that are found in the data value \n    o does not change the single quotation marks. \nIf the length of the target field is not large enough to contain the string and its quotation \nmarks, SAS returns all blanks."}},{"Name":"$REVERJw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes character data in reverse order and preserves blanks. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: 1 if w is not specified \n  Range: 1-32767 \n \nComparisons:\n\nThe $REVERJw. format is similar to the $REVERSw. format except that $REVERSw. left \naligns the result by trimming all leading blanks."}},{"Name":"$REVERSw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes character data in reverse order and left aligns. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: 1 if w is not specified  \n  Range: 1-32767 \n \nComparisons:\n\nThe $REVERSw. format is similar to the $REVERJw. format except that $REVERJw. does not \nleft align the result."}},{"Name":"$UCS2Bw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string in big-endian, 16-bit, universal character set code in \n2 octets (UCS2), Unicode encoding. \n\nSyntax Description: \nw \n  specifies the width of the output field. Specify enough width to accommodate the \n  16-bit size of the Unicode characters.\n\n  Default: 8 \n  Range: 2-32767 \n \nDetails: \nThe $UCS2Bw. format writes a character string in big-endian, 16-bit, UCS2 (universal \ncharacter set code in two octets), Unicode encoding. It processes character strings \nthat are in the encoding of the current SAS session. \n \nComparison: \nThe $UCS2Bw. format performs processing that is the opposite of the $UCS2BEw. format."}},{"Name":"$UCS2BEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a big-endian, 16-bit, universal character set code in 2 octets (UCS2) \ncharacter string in the encoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the output field. Specify enough width to accommodate the 16-bit \n  size of the Unicode characters.\n\n  Default: 8 \n  Range: 1-32000 \n \nDetails:\nThe $UCS2BEw. format writes a character string in the encoding of the current SAS session. \nIt processes character strings that are in big-endian, 16-bit, UCS2 (universal character \nset code in two octets), Unicode encoding.\n \nComparison:\nThe $UCS2BEw. format performs processing that is the opposite of the $UCS2Bw. format."}},{"Name":"$UCS2Lw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes data in little-endian, 16-bit, universal character set code in 2 octets \n(UCS2), Unicode encoding. \n\nSyntax Description: \nw \n  specifies the width of the output field. Specify enough width to accommodate the 16-bit \n  size of the Unicode characters.\n\n  Default: 8 \n  Range: 2-32767 \n \nDetails: \nThe $UCS2Lw. format writes a character string in little-endian, 16-bit, UCS2 (universal \ncharacter set code in two octets), Unicode encoding. It processes character strings that \nare in the encoding of the current SAS session.\n \nComparison:\nThe $UCS2Lw. format performs processing that is the opposite of the $UCS2LEw. format."}},{"Name":"$UCS2LEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string that is encoded in little-endian, 16-bit,\nuniversal character set code in 2 octets (UCS2), in the encoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the output field. Specify enough width to accommodate the 16-bit \n  size of the Unicode characters.\n\n  Default: 8 \n  Range: 1-32000 \n \nDetails: \nThe $UCS2LEw. format writes a character string in the encoding of the current SAS session. \nIt processes character strings that are in little-endian, 16-bit, UCS2 (universal character \nset code in two octets), Unicode encoding.\n \nComparison: \nThe $UCS2LEw. format performs processing that is the opposite of the $UCS2Lw. format."}},{"Name":"$UCS2Xw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string in native-endian, 16-bit, universal character set code \nin 2 octets (UCS2) Unicode encoding. \n\nSyntax Description:\nw \n  specifies the width of the output field. Specify enough width to accommodate the 16-bit \n  size of the Unicode characters. \n  Default: 8 \n  Range: 2-32767 \n \nDetails:\nThe $UCS2Xw. format writes a character string in 16-bit, UCS2 (universal character set \ncode in two octets), Unicode encoding, by using byte order that is native to the operating \nenvironment.\n \nComparison: \nThe $UCS2Xw. format performs processing that is the opposite of the $UCS2XEw. format. \nIf you are exchanging data within the same operating environment, use the $UCS2Xw. format. \nIf you are exchanging data with a different operating environment, use the $UCS2Bw. format \nor $UCS2Lw. format."}},{"Name":"$UCS2XEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a native-endian, 16-bit, universal character set code in 2 octets (UCS2) \ncharacter string in the encoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the output field. Specify enough width to accommodate the 16-bit \n  size of the Unicode characters. \n  Default: 8 \n  Range: 1-32000 \n \nDetails: \nThe $UCS2XEw. format writes a character string in the encoding of the current SAS session. \nIt processes character strings that are in native-endian, 16-bit, UCS2 (universal character \nset code in two octets), Unicode encoding.\n \nComparison: \nThe $UCS2XEw. format performs processing that is the opposite of the $UCS2Xw. format."}},{"Name":"$UCS4Bw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string in big-endian, 32-bit, universal character set code in \n4 octets (UCS4), Unicode encoding. \n\nSyntax Description: \nw \n  specifies the width of the output field. Specify enough width to accommodate the 32-bit \n  size of the Unicode characters.\n\n  Default: 4 \n  Range: 4-32767 \n \nDetails:\nThe $UCS4Bw. format writes a character string in big-endian, 32-bit, UCS4 (universal \ncharacter set code in four octets), Unicode encoding. It processes character strings \nthat are in the encoding of the current SAS session. \n \nComparison: \nThe $UCS4Bw. format performs processing that is the opposite of the $UCS4BEw. format."}},{"Name":"$UCS4BEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a big-endian, 32-bit, universal character set code in 4 octets (UCS4), \ncharacter string in the encoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the output field. Specify enough width to accommodate the 32-bit \n  size of the Unicode characters.\n\n  Default: 8 \n  Range: 1-32000 \n  \nDetails:\nThe $UCS4BEw. format writes a character string in the encoding of the current SAS session. \nIt processes character strings that are in big-endian, 32-bit, UCS4 (universal character \nset code in four octets), Unicode encoding.\n \nComparison:\nThe $UCS4BEw. format performs processing that is the opposite of the $UCS4Bw. format."}},{"Name":"$UCS4Lw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string in little-endian, 32-bit, universal character set code \nin 4 octets, (UCS4), Unicode encoding. \n\nSyntax Description: \nw \n  specifies the width of the output field. Specify enough width to accommodate the 32-bit \n  size of the Unicode characters.\n\n  Default: 4 \n  Range: 4-32767 \n \nDetails:\nThe $UCS4Lw. format writes a character string in little-endian, 32-bit, UCS4 (universal \ncharacter set code in four octets), Unicode encoding. It processes character strings that \nare in the encoding of the current SAS session.\n \nComparisons:\nThe $UCS4Lw. format performs processing that is the opposite of the $UCS4LEw. format."}},{"Name":"$UCS4LEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a little-endian, 32-bit, universal character set code in 4 octets (UCS4) \ncharacter string in the encoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the output field. Specify enough width to accommodate the 32-bit \n  size of the Unicode characters.\n\n  Default: 8 \n  Range: 1-32000 \n \nDetails:\nThe $UCS4LEw. format writes a character string in the encoding of the current SAS session. \nIt processes character strings that are in little-endian, 32-bit, UCS4 (universal character \nset code in four octets), Unicode encoding.\n \nComparison:\nThe $UCS4LEw. format performs processing that is the opposite of the $UCS4Lw. format."}},{"Name":"$UCS4Xw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string in native-endian, 32-bit, universal character set code \nin 4 octets (UCS4), Unicode encoding. \n\nSyntax Description: \nw \n  specifies the width of the output field. Specify enough width to accommodate the 32-bit \n  size of the Unicode characters.\n\n  Default: 4 \n  Range: 4-32767 \n \nDetails:\nThe $UCS4Xw. format writes a character string in 32-bit, UCS4 (universal character set \ncode in two octets), Unicode encoding, by using byte order that is native to the operating \nenvironment.\n \nComparisons:\nThe $UCS4Xw. format performs processing that is the opposite of the $UCS4XEw. format. If \nyou are exchanging data within the same operating environment, use the $UCS4Xw. format. \nIf you are exchanging data with a different operating environment, use the $UCS4Bw. format \nor $UCS4Lw. format."}},{"Name":"$UCS4XEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a native-endian, 32-bit, universal character set code in 4 octets (UCS4) \ncharacter string in the encoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the output field. Specify enough width to accommodate the 32-bit \n  size of the Unicode characters.\n\n  Default: 8 \n  Range: 1-32000 \n \nDetails:\nThe $UCS4XEw. format writes a character string in the encoding of the current SAS session. \nIt processes character strings that are in native-endian, 32-bit, UCS4 (universal character \nset code in four octets), Unicode encoding.\n \nComparison:\nThe $UCS4XEw. format performs processing that is the opposite of the $UCS4Xw. format."}},{"Name":"$UESCw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string that is encoded in the current SAS session in Unicode \nescape (UESC) representation. \n\nSyntax Description:\nw \n  specifies the width of the input field.\n  Default: 8 \n  Range: 1-32000 \n \nDetails:\nIf the characters are not available on all operating environments, for example, 0-9, \na-z, A-Z, they must be represented in UESC. $UESCw. can be nested.\n\nComparisons:\nThe $UESCw. format performs processing that is opposite of the $UESCEw. format."}},{"Name":"$UESCEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a Unicode escape (UESC) representation character string in the encoding of \nthe current SAS session. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 1-32000 \n \nDetails:\nIf the data is not supported by the encoding of the current SAS session, the data \nremains in UESC.\n \nComparisons:\nThe $UESCEw. format performs processing that is the opposite of the $UESCw. format."}},{"Name":"$UNCRw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string that is encoded in the current SAS session in numeric \ncharacter representation (NCR). \n\nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 1-32000 \n \nComparison:\nThe $UNCRw. format performs processing that is the opposite of the $UNCREw. format."}},{"Name":"$UNCREw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes the numeric character representation (NCR) character string in the encoding \nof the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 1-32000 \n \nDetails: \nNational characters should be represented in NCR.\n \nComparison: \nThe $UNCREw. format performs processing that is the opposite of the $UNCRw. format."}},{"Name":"$UPARENw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string that is encoded in the current SAS session in Unicode \nparenthesis (UPAREN) representation. \n\nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 27-32000 \n \nDetails:\nThe character string is encoded with parentheses and Unicode hexadecimal representation.\n \nComparisons:\nThe $UPARENw. format performs processing that is the opposite of the $UPARENEw. format."}},{"Name":"$UPARENEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string that is in Unicode parenthesis (UPAREN) in a character \nstring that is encoded in the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 1-32000 \n \nComparisons:\nThe $UPARENEw. format performs processing that is the opposite of the $UPARENw. format."}},{"Name":"$UPCASEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts character data to uppercase. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: 8 if the length of the variable is undefined; otherwise, the length of the variable. \n  Range: 1-32767 \n \nDetails:\n\nSpecial characters, such as hyphens and other symbols, are not altered."}},{"Name":"$UTF8Xw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string in universal transformation format (UTF-8) encoding. \n    \nSyntax Description: \n\nw \n  specifies the width of the output field. Specify enough width to include all of the \n  characters in the variable. The width of the characters are dependent on the code point \n  value of the individual characters.\n\n  Default: 8 \n  Range: 2-32767"}},{"Name":"$VARYINGw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes character data of varying length. \n    \nSyntax: $VARYINGw. length-variable  \n\nSyntax Description: \nw \n  specifies the maximum width of the output field for any output line or output file record. \n\n  Default: 8 if the length of the variable is undefined; otherwise, the length of the variable \n  Range: 1-32767 \n\nlength-variable \n  specifies a numeric variable that contains the length of the current value of the character \n  variable. SAS obtains the value of the length-variable by reading it directly from a field \n  that is described in an INPUT statement, reading the value of a variable in an existing SAS \n  data set, or calculating its value.\n\n  Requirement: You must specify length-variable immediately after $VARYINGw. in a SAS statement. \n  Restriction: Length-variable cannot be an array reference. \n  Tip: If the value of length-variable is 0, negative, or missing, SAS writes nothing to the \n  output field. If the value of length-variable is greater than 0 but less than w, SAS writes \n  the number of characters that are specified by length-variable. If length-variable is greater \n  than or equal to w, SAS writes w columns. \n \nDetails:\nUse $VARYINGw. when the length of a character value differs from record to record. After \nwriting a data value with $VARYINGw., the pointer's position is the first column after \nthe value."}},{"Name":"$w.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes standard character data. \n    \nSyntax Description:\nw \n  specifies the width of the output field. You can specify a number or a column range.\n\n  Default: 1 if the length of the identifier is undefined; otherwise, the length of the identifier \n  Range: 1-32767 \n \nComparisons:\n\nThe $w., $Fw., and the $CHARw. formats are identical, and they do not trim leading blanks. \nTo trim leading blanks, use the LEFT function to left align character data before output."}},{"Name":"EURFRATSw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Austrian schillings to euros."}},{"Name":"EURFRBEFw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Belgian francs to euros."}},{"Name":"EURFRCHFw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Swiss francs to euros."}},{"Name":"EURFRCZKw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Czech koruny to euros."}},{"Name":"EURFRDEMw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Deutsche marks to euros."}},{"Name":"EURFRDKKw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Danish kroner to euros."}},{"Name":"EURFRESPw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Spanish pesetas to euros."}},{"Name":"EURFRFIMw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Finnish markkaa to euros."}},{"Name":"EURFRFRFw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from French francs to euros."}},{"Name":"EURFRGBPw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from British pounds to euros."}},{"Name":"EURFRGRDw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Greek drachmas to euros."}},{"Name":"EURFRHUFw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Hungarian forints to euros."}},{"Name":"EURFRIEPw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Irish pounds to euros."}},{"Name":"EURFRITLw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Italian lire to euros."}},{"Name":"EURFRLUFw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Luxembourg francs to euros."}},{"Name":"EURFRNLGw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Dutch guilders to euros."}},{"Name":"EURFRNOKw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Norwegian krone to euros."}},{"Name":"EURFRPLZw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Polish zlotys to euros."}},{"Name":"EURFRPTEw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Portuguese escudos to euros."}},{"Name":"EURFRROLw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Romanian lei to euros."}},{"Name":"EURFRRURw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Russian rubles to euros."}},{"Name":"EURFRSEKw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Swedish kronor to euros."}},{"Name":"EURFRSITw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Slovenian tolars to euros."}},{"Name":"EURFRTRLw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Turkish liras to euros."}},{"Name":"EURFRYUDw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount from Yugoslavian dinars to euros."}},{"Name":"EURTOATSw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Austrian schillings."}},{"Name":"EURTOBEFw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Belgian francs."}},{"Name":"EURTOCHFw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Swiss francs."}},{"Name":"EURTOCZKw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Czech koruny."}},{"Name":"EURTODEMw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Deutsche marks."}},{"Name":"EURTODKKw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Danish kroner."}},{"Name":"EURTOESPw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Spanish pesetas."}},{"Name":"EURTOFIMw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Finnish markkaa."}},{"Name":"EURTOFRFw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to French francs."}},{"Name":"EURTOGBPw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to British pounds."}},{"Name":"EURTOGRDw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Greek drachmas."}},{"Name":"EURTOHUFw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Hungarian forints."}},{"Name":"EURTOIEPw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Irish pounds."}},{"Name":"EURTOITLw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Italian lire."}},{"Name":"EURTOLUFw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Luxembourg francs."}},{"Name":"EURTONLGw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Dutch guilders."}},{"Name":"EURTONOKw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Norwegian krone."}},{"Name":"EURTOPLZw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Polish zlotys."}},{"Name":"EURTOPTEw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Portuguese escudos."}},{"Name":"EURTOROLw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Romanian lei."}},{"Name":"EURTORURw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Russian rubles."}},{"Name":"EURTOSEKw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Swedish kronor."}},{"Name":"EURTOSITw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Slovenian tolars."}},{"Name":"EURTOTRLw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Turkish liras."}},{"Name":"EURTOYUDw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Converts an amount in euros to Yugoslavian dinars."}},{"Name":"$KANJIw.","Type":"SAS_FORMATS","Help":{"#cdata":"Adds shift-code data to DBCS data."}},{"Name":"$KANJIXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Removes shift code data from DBCS data."}},{"Name":"DATEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form ddmmmyy, ddmmmyyyy, or dd-mmm-yyyy.\n    \nSyntax Description:\nw \n  specifies the width of the output field.\n\n  Default: 11 \n  Range: 5-11 \n  Tip: Use a width of 9 to print a 4-digit year without a separator between the day, \n  month, and year. Use a width of 11 to print a 4-digit year using a hyphen as a separator \n  between the day, month, and year. \n \nDetails:\nThe DATEw. format writes SAS date values in the form ddmmmyy, ddmmmyyyy, or dd-mmm-yyyy, where \n\n  dd \n  is an integer that represents the day of the month.\n\n  mmm \n  is the first three letters of the month name.\n\n  yy or yyyy \n  is a two-digit or four-digit integer that represents the year."}},{"Name":"DATEAMPMw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS datetime values in the form ddmmmyy:hh:mm:ss.ss with AM or PM. \n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 19 \n  Range: 7-40 \n  Tip: SAS requires a minimum w value of 13 to write AM or PM. For widths between 10 and 12, \n  SAS writes a 24-hour clock time. \nd \n  specifies the number of digits to the right of the decimal point in the seconds value.\n  Requirement: must be less than w \n  Range: 0-39 \n  Note:   If w-d< 17, SAS truncates the decimal values.  \n\nDetails:\nThe DATEAMPMw.d format writes SAS datetime values in the form ddmmmyy:hh:mm:ss.ss, where \n  dd is an integer that represents the day of the month.\n  mmm is the first three letters of the month name.\n  yy is a two-digit integer that represents the year.\n  hh is an integer that represents the hour.\n  mm is an integer that represents the minutes.\n  ss.ss is the number of seconds to two decimal places.\n \nComparisons:\nThe DATEAMPMw.d format is similar to the DATETIMEw.d format except that DATEAMPMw.d prints \nAM or PM at the end of the time."}},{"Name":"DATETIMEw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS datetime values in the form ddmmmyy:hh:mm:ss.ss. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 16 \n  Range: 7-40 \n  Tip: SAS requires a minimum w value of 16 to write a SAS datetime value with the date, \n  hour, and seconds. Add an additional two places to w and a value to d to return values \n  with optional decimal fractions of seconds. \nd \nspecifies the number of digits to the right of the decimal point in the seconds value.\n  Requirement: must be less than w \n  Range: 0-39 \n  Note:   If w-d< 17, SAS truncates the decimal values. \n \nDetails:\nThe DATETIMEw.d format writes SAS datetime values in the form ddmmmyy:hh:mm:ss.ss, where \n\n  dd is an integer that represents the day of the month.\n  mmm is the first three letters of the month name.\n  yy is a two-digit integer that represents the year.\n  hh is an integer that represents the hour in 24-hour clock time.\n  mm is an integer that represents the minutes.\n  ss.ss is the number of seconds to two decimal places. \n \nComparisons:\nThe DATEAMPMw.d format is similar to the DATETIMEw.d format except that DATEAMPMw.d \nprints AM or PM at the end of the time."}},{"Name":"DAYw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values as the day of the month. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: 2 \n  Range: 2-32"}},{"Name":"DDMMYYw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form ddmm<yy> yy or dd/mm/<yy>yy , where a forward slash \nis the separator and the year appears as either 2 or 4 digits. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n\n  Default: 8 \n  Range: 2-10 \n  Interaction: When w has a value of from 2 to 5, the date appears with as much of the day \n  and the month as possible. When w is 7, the date appears as a two-digit year without slashes. \n \nDetails:\nThe DDMMYYw. format writes SAS date values in the form ddmm<yy>yy or dd/mm/<yy>yy, where \n\n  dd is an integer that represents the day of the month.\n  / is the separator.\n  mm is an integer that represents the month.\n  <yy>yy is a two-digit or four-digit integer that represents the year."}},{"Name":"DDMMYYxw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form ddmm<yy> yy or ddXmmX<yy>yy, where X represents \na specified separator and the year appears as either 2 or 4 digits. \n\nSyntax Description:\nx \n  identifies a separator or specifies that no separator appear between the day, the month, \n  and the year. Valid values for x are:\n    B separates with a blank\n    C separates with a colon \n    D separates with a dash \n    N indicates no separator\n    P separates with a period \n    S separates with a slash.\nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 2-10 \n  Interaction: When w has a value of from 2 to 5, the date appears with as much of the day and \n  the month as possible. When w is 7, the date appears as a two-digit year without separators.  \n  Interaction: When x has a value of N, the width range changes to 2-8. \n  \nDetails:\nThe DDMMYYxw. format writes SAS date values in the form ddmm<yy>yy or ddXmmX<yy>yy, where \n\n  dd is an integer that represents the day of the month.\n  X is a specified separator. \n  mm is an integer that represents the month. \n  <yy>yy is a two-digit or four-digit integer that represents the year."}},{"Name":"DOWNAMEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values as the name of the day of the week. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n  Default: 9 \n  Range: 1-32 \n  Tip: If you omit w, SAS prints the entire name of the day. \n \nDetails:\n\nIf necessary, SAS truncates the name of the day to fit the format width. For example, \nthe DOWNAME2. prints the first two letters of the day name."}},{"Name":"DTDATEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Expects a SAS datetime value as input and writes date values in the form ddmmmyy \nor ddmmmyyyy. \n\nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 7 \n  Range: 5-9 \n  Tip: Use a width of 9 to print a 4-digit year. \n \nDetails:\nThe DTDATEw. format writes SAS date values in the form ddmmmyy or ddmmmyyyy, where \n\n  dd is an integer that represents the day of the month.\n  mmm are the first three letters of the month name.\n  yy or yyyy is a two-digit or four-digit integer that represents the year.\n \nComparisons:\nThe DTDATEw. format produces the same type of output that the DATEw. format produces. \nThe difference is that the DTDATEw. format requires a SAS datetime value."}},{"Name":"DTMONYYw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes the date part of a SAS datetime value as the month and year in the form mmmyy \nor mmmyyyy. \n\nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 5 \n  Range: 5-7 \n  \nDetails:\nThe DTMONYYw. format writes SAS datetime values in the form mmmyy or mmmyyyy, where \n\n  mmm is the first three letters of the month name.\n  yy or yyyy is a two-digit or four-digit integer that represents the year.\n \nComparisons:\nThe DTMONYYw. format and the MONYYw. format are similar in that they both write date values. \nThe difference is that DTMONYYw. expects a SAS datetime value as input, and MONYYw. expects \na SAS date value."}},{"Name":"DTWKDATXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes the date part of a SAS datetime value as the day of the week and the date \nin the form day-of-week, dd month-name yy (or yyyy). \n\nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 29  \n  Range: 3-37  \n \nDetails:\nThe DTWKDATXw. format writes SAS date values in the form day-of-week, dd month-name, yy or yyyy, where \n\n  day-of-week \n  is either the first three letters of the day name or the entire day name.\n\n  dd is an integer that represents the day of the month.\n\n  month-name is either the first three letters of the month name or the entire month name.\n\n  yy or yyyy is a two-digit or four-digit integer that represents the year. \n \nComparisons:\nThe DTWKDATXw. format is similar to the WEEKDATXw. format in that they both write date \nvalues. The difference is that DTWKDATXw. expects a SAS datetime value as input, and \nWEEKDATXw. expects a SAS date value."}},{"Name":"DTYEARw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes the date part of a SAS datetime value as the year in the form yy or yyyy. \n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 4 \n  Range: 2-4 \n\nComparisons:\nThe DTYEARw. format is similar to the YEARw. format in that they both write date values. \nThe difference is that DTYEARw. expects a SAS datetime value as input, and YEARw. expects \na SAS date value."}},{"Name":"DTYYQCw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes the date part of SAS a datetime value as the year and the quarter and \nseparates them with a colon (:). \n\nSyntax Description:\n\nw \n  specifies the width of the output field.\n  Default: 4 \n  Range: 4-6 \n \nDetails:\n\nThe DTYYQCw. format writes SAS datetime values in the form yy or yyyy, followed \nby a colon (:) and the numeric value for the quarter of the year."}},{"Name":"EURDFDDw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes international date values in the form dd.mm.yy or dd.mm.yyyy."}},{"Name":"EURDFDEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes international date values in the form ddmmmyy or ddmmmyyyy."}},{"Name":"EURDFDNw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes international date values as the day of the week."}},{"Name":"EURDFDTw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes international datetime values in the form ddmmmyy:hh:mm:ss.ss or ddmmmyyyy \nhh:mm:ss.ss."}},{"Name":"EURDFDWNw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes international date values as the name of the day."}},{"Name":"EURDFMNw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes international date values as the name of the month."}},{"Name":"EURDFMYw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes international date values in the form mmmyy or mmmyyyy."}},{"Name":"EURDFWDXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes international date values as the name of the month, the day, and the year \nin the form dd month-name yy (or yyyy )."}},{"Name":"EURDFWKXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes international date values as the name of the day and date in the form \nday-of-week, dd month-name yy (or yyyy)."}},{"Name":"HDATEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes date values in the form yyyy mmmmm dd where dd is the day-of-the-month, \nmmmmm represents the month's name in Hebrew, and yyyy is the year."}},{"Name":"HEBDATEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes date values according to the Jewish calendar."}},{"Name":"HHMMw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS time values as hours and minutes in the form hh:mm. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 5 \n  Range: 2-20 \nd \n  specifies the number of digits to the right of the decimal point in the minutes value. \n  The digits to the right of the decimal point specify a fraction of a minute.\n  Default: 0 \n  Range: 0-19 \n  Requirement: must be less than w \n \nDetails:\nThe HHMMw.d format writes SAS datetime values in the form hh:mm, where \n\n  hh is an integer. \n  mm is the number of minutes that range from 00 through 59.\n  SAS rounds hours and minutes that are based on the value of seconds in a SAS time value.\n \nComparisons:\nThe HHMMw.d format is similar to the TIMEw.d format except that the HHMMw.d format \ndoes not print seconds.\n\nThe HHMMw.d format and the TIMEw.d format write a leading blank for the single-hour digit. \nThe TODw.d format writes a leading zero for a single-hour digit."}},{"Name":"HOURw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes time values as hours and decimal fractions of hours. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 2 \n  Range: 2-20 \nd \n  specifies the number of digits to the right of the decimal point in the hour value. \n  Therefore, SAS prints decimal fractions of the hour.\n\n  Requirement: must be less than w \n  Range: 0-19 \n \nDetails:\nSAS rounds hours based on the value of minutes in the SAS time value."}},{"Name":"JULDAYw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes date values as the Julian day of the year."}},{"Name":"JULIANw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values as Julian dates in the form yyddd or yyyyddd. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 5 \n  Range: 5-7 \n  Tip: If w is 5, the JULIANw. format writes the date with a two-digit year. If w is 7, \n  the JULIANw. format writes the date with a four-digit year. \n  \nDetails:\nThe JULIANw. format writes SAS date values in the form yyddd or yyyyddd, where \n\n  yy or yyyy is a two-digit or four-digit integer that represents the year.\n\n  ddd is the number of the day, 1-365 (or 1-366 for leap years), in that year."}},{"Name":"MINGUOw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes date values as Taiwanese dates in the form yyymmdd."}},{"Name":"MMDDYYw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form mmdd<yy> yy or mm/dd/<yy>yy , where a forward \nslash is the separator and the year appears as either 2 or 4 digits. \n\nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 8 \n  Range: 2-10 \n  Interaction: When w has a value of from 2 to 5, the date appears with as much of the month \n  and the day as possible. When w is 7, the date appears as a two-digit year without slashes. \n \nDetails:\nThe MMDDYYw. format writes SAS date values in the form mmdd<yy>yy or mm/dd/<yy>yy, where \n\n  mm is an integer that represents the month.\n\n  / is the separator.\n\n  dd is an integer that represents the day of the month.\n\n  <yy>yy is a two-digit or four-digit integer that represents the year."}},{"Name":"MMDDYYxw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form mmdd<yy> yy or mmXddX<yy>yy , where X represents \na specified separator and the year appears as either 2 or 4 digits. \n\nSyntax Description:\nx \n  identifies a separator or specifies that no separator appear between the month, the day, \n  and the year. Valid values for x are:\n    B separates with a blank\n    C separates with a colon\n    D separates with a dash \n    N indicates no separator \n    P separates with a period \n    S separates with a slash. \nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 2-10 \n  Interaction: When w has a value of from 2 to 5, the date appears with as much of the month \n  and the day as possible. When w is 7, the date appears as a two-digit year without separators. \n  Interaction: When x has a value of N, the width range changes to 2-8. \n \nDetails:\nThe MMDDYYxw. format writes SAS date values in the form mmdd<yy>yy or mmXddX<yy>yy, where \n\n  mm is an integer that represents the month. \n  X is a specified separator.\n  dd is an integer that represents the day of the month.\n  <yy>yy is a two-digit or four-digit integer that represents the year."}},{"Name":"MMSSw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS time values as the number of minutes and seconds since midnight. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n  \n  Default: 5 \n  Range: 2-20 \n  Tip: Set w to a minimum of 5 to write a value that represents minutes and seconds. \nd \n  specifies the number of digits to the right of the decimal point in the seconds value. \n  Therefore, the SAS time value includes fractional seconds.\n\n  Range: 0-19 \n  Restriction: must be less than w"}},{"Name":"MMYYw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form mmM<yy> yy, where M is the separator and the \nyear appears as either 2 or 4 digits. \n\nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: 7 \n  Range: 5-32 \n  Interaction: When w has a value of 5 or 6, the date appears with only the last two \n  digits of the year. When w is 7 or more, the date appears with a four-digit year. \n\nDetails:\nThe MMYYw. format writes SAS date values in the form mmM<yy>yy, where\n\n  mm is an integer that represents the month.\n\n  M is the character separator.\n\n  <yy>yy is a two-digit or four-digit integer that represents the year."}},{"Name":"MMYYxw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form mm<yy> yy or mmX<yy>yy, where X represents \na specified separator and the year appears as either 2 or 4 digits. \n\nSyntax Description:\nx \n  identifies a separator or specifies that no separator appear between the month and the year. \n  Valid values for x are\n    C separates with a colon \n    D separates with a dash \n    N indicates no separator \n    P separates with a period\n    S separates with a forward slash.\nw \n  specifies the width of the output field.\n  Default: 7 \n  Range: 5-32 \n  Interaction: When x is set to N, no separator is specified. The width range is then 4-32, \n  and the default changes to 6. \n  Interaction: When x has a value of C, D, P, or S and w has a value of 5 or 6, the date \n  appears with only the last two digits of the year. When w is 7 or more, the date appears \n  with a four-digit year. \n  Interaction: When x has a value of N and w has a value of 4 or 5, the date appears with \n  only the last two digits of the year. When x has a value of N and w is 6 or more, the date \n  appears with a four-digit year. \n  \nDetails:\nThe MMYYxw. format writes SAS date values in the form mm<yy>yy or mmX<yy>yy, where\n  mm is an integer that represents the month.\n  X is a specified separator.\n  <yy>yy is a two-digit or four-digit integer that represents the year."}},{"Name":"MONNAMEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values as the name of the month. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: 9 \n  Range: 1-32 \n  Tip: Use MONNAME3. to print the first three letters of the month name.  \n\nDetails:\n\nIf necessary, SAS truncates the name of the month to fit the format width."}},{"Name":"MONTHw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values as the month of the year. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: 2 \n  Range: 1-32 \n \nDetails:\n\nThe MONTHw. format writes the month (1 through 12) of the year from a SAS date value."}},{"Name":"MONYYw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values as the month and the year in the form mmmyy or mmmyyyy. \n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 5 \n  Range: 5-7 \n \nDetails:\nThe MONYYw. format writes SAS date values in the form mmmyy or mmmyyyy, where \n\n  mmm is the first three letters of the month name.\n  yy or yyyy is a two-digit or four-digit integer that represents the year. \n \nComparisons:\nThe MONYYw. format and the DTMONYYw. format are similar in that they both write date \nvalues. The difference is that MONYYw. expects a SAS date value as input, and DTMONYYw. \nexpects a datetime value."}},{"Name":"NENGOw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values as Japanese dates in the form e.yymmdd. \n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 10 \n  Range: 2-10 \n \nDetails:\nThe NENGOw. format writes SAS date values in the form e.yymmdd, where\n\n  e is the first letter of the name of the emperor (Meiji, Taisho, Showa, or Heisei).\n\n  yy is an integer that represents the year. \n\n  mm is an integer that represents the month.\n\n  dd is an integer that represents the day of the month.\n\nIf the width is too small, SAS omits the period."}},{"Name":"PDJULGw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes packed Julian date values in the hexadecimal format yyyydddF for IBM. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 4 \n  Range: 3-16 \n \nDetails:\nThe PDJULGw. format writes SAS date values in the form yyyydddF, where \n\n  yyyy \n  is the two-byte representation of the four-digit Gregorian year.\n\n  ddd \n  is the one-and-a-half byte representation of the three-digit integer that corresponds \n  to the Julian day of the year, 1-365 (or 1-366 for leap years). \n\n  F \n  is the half byte that contains all binary 1s, which assigns the value as positive.\n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined \nby the YEARCUTOFF= system option."}},{"Name":"PDJULIw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes packed Julian date values in the hexadecimal format ccyydddF for IBM. \n    \nSyntax Description: \nw \n  specifies the width of the output field.\n\n  Default: 4 \n  Range: 3-16 \n \nDetails:\nThe PDJULIw. format writes SAS date values in the form ccyydddF, where\n\n  cc \n  is the one-byte representation of a two-digit integer that represents the century. \n\n  yy \n  is the one-byte representation of a two-digit integer that represents the year. The \n  PDJULIw. format makes an adjustment for the century byte by subtracting 1900 from the \n  4-digit Gregorian year to produce the correct packed decimal ccyy representation. A \n  year value of 1998 is stored in ccyy as 0098, and a year valueof 2011 is stored as 0111.\n\n  ddd \n  is the one-and-a-half byte representation of the three-digit integer that corresponds \n  to the Julian day of the year, 1-365 (or 1-366 for leap years).\n\n  F \n  is the half byte that contains all binary 1s, which assigns the value as positive. \n\n  Note: SAS interprets a two-digit year as belonging to the 100-year span that is \n  defined by the YEARCUTOFF= system option."}},{"Name":"QTRw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values as the quarter of the year. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: 1 \n  Range: 1-32"}},{"Name":"QTRRw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values as the quarter of the year in Roman numerals. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: 3 \n  Range: 3-32"}},{"Name":"TIMEw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS time values as hours, minutes, and seconds in the form hh:mm:ss.ss. \n    \nSyntax Description:\nw \n  specifies the width of the output field. Default: 8 Range: 2-20 \n  Tip: Make w large enough to produce the desired results. To obtain a complete time value \n  with three decimal places, you must allow at least 12 spaces: Eight spaces to the left of \n  the decimal point, one space for the decimal point itself, and three spaces for the decimal \n  fraction of seconds. \nd \n  specifies the number of digits to the right of the decimal point in the seconds value.\n  Default: 0 \n  Range: 0-19 \n  Requirement: must be less than w \n \nDetails:\nThe TIMEw.d format writes SAS time values in the form hh:mm:ss.ss, where \n  hh is an integer.\n    Note: If hh is a single digit, TIMEw.d places a leading blank before the digit. For example, \n    the TIMEw.d. format writes 9:00 instead of 09:00.  \n  mm is the number of minutes, ranging from 00 through 59.\n  ss.ss is the number of seconds, ranging from 00 through 59, with the fraction of a second \n  following the decimal point.\n \nComparisons:\nThe TIMEw.d format is similar to the HHMMw.d format except that TIMEw.d includes seconds.\n\nThe TIMEw.d format and the HHMMwwrite a leading blank for a single-hour digit. The TODw.d \nformat writes a leading zero for a single-hour digit."}},{"Name":"TIMEAMPMw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS time values as hours, minutes, and seconds in the form hh:mm:ss.ss with AM or PM. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 11 \n  Range: 2-20 \nd \n  specifies the number of digits to the right of the decimal point in the seconds value.\n  Default: 0 \n  Range: 0-19 \n  Requirement: must be less than w \n  \nDetails:\nThe TIMEAMPMw.d format writes SAS time values in the form hh:mm:ss.ss with AM or PM, where \n  hh is an integer that represents the hour. \n  mm is an integer that represents the minutes.\n  ss.ss is the number of seconds to two decimal places. \n\nTimes greater than 23:59:59 PM appear as the next day. \nMake w large enough to produce the desired results. To obtain a complete time value with \nthree decimal places and AM or PM, you must allow at least 11 spaces (hh:mm:ss PM). If w \nis less than 5, SAS writes AM or PM only.\n \nComparisons:\nThe TIMEAMPMMw.d format is similar to the TIMEMw.d format except, that TIMEAMPMMw.d prints \nAM or PM at the end of the time.\n\nTIMEw.d writes hours greater than 23:59:59 PM, and TIMEAMPMw.d does not."}},{"Name":"TODw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes the time portion of SAS datetime values in the form hh:mm:ss.ss. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 2-20 \n  Tip: SAS writes a zero for a zero hour if the specified width is sufficient. For example, 02:30 or 00:30. \nd \n  specifies the number of digits to the right of the decimal point in the seconds value.\n  Default: 0 \n  Range: 0-19 \n  Requirement: must be less than w \n \nDetails:\nThe TODw.d format writes SAS datetime values in the form hh:mm:ss.ss, where \n\n  hh is an integer that represents the hour. \n  mm is an integer that represents the minutes.\n  ss.ss is the number of seconds to two decimal places. \n \nComparisons:\nThe TODw.d format writes a leading zero for a single-hour digit. The TIMEw.d format \nand the HHMMw.d format write a leading blank for a single-hour digit."}},{"Name":"WEEKDATEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values as the day of the week and the date in the form day-of-week, \nmonth-name dd, yy (or yyyy). \n\nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 29 \n  Range: 3-37 \n \nDetails:\nThe WEEKDATEw. format writes SAS date values in the form day-of-week, month-name dd, \nyy (or yyyy), where \n\n  dd is an integer that represents the day of the month.\n\n  yy or yyyy is a two-digit or four-digit integer that represents the year.\n\nIf w is too small to write the complete day of the week and month, SAS abbreviates as needed. \n \nComparisons:\nThe WEEKDATEw. format is the same as the WEEKDATXw. format except that WEEKDATXw. prints \ndd before the month's name."}},{"Name":"WEEKDATXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values as the day of the week and date in the form day-of-week, \ndd month-name yy (or yyyy). \n\nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 29 \n  Range: 3-37 \n  \nDetails:\nThe WEEKDATXw. format writes SAS date values in the form day-of-week, dd month-name, \nyy (or yyyy), where \n\n  dd is an integer that represents the day of the month.\n  yy or yyyy is a two-digit or a four-digit integer that represents the year.\n\nIf w is too small to write the complete day of the week and month, then SAS abbreviates as needed.\n \nComparisons:\nThe WEEKDATEw. format is the same as the WEEKDATXw. format, except that WEEKDATEw. prints \ndd after the month's name.\n\nThe WEEKDATXw. format is the same as the DTWKDATXw. format, except that DTWKDATXw. expects \na datetime value as input."}},{"Name":"WEEKDAYw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values as the day of the week. \n    \nSyntax Description:\n\n  w specifies the width of the output field.\n  Default: 1 \n  Range: 1-32 \n \nDetails:\nThe WEEKDAYw. format writes a SAS date value as the day of the week (where 1=Sunday, 2=Monday, \nand so on)."}},{"Name":"WEEKUw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a week number in decimal format by using the U algorithm."}},{"Name":"WEEKVw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a week number in decimal format by using the V algorithm."}},{"Name":"WEEKWw.","Type":"SAS_FORMATS","Help":{"#cdata":"Reads the format of the number-of-week value within the year and returns a SAS-date \nvalue using the W algorithm."}},{"Name":"WORDDATEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes date values as the name of the month, the day, and the year in the form \nmonth-name dd, yyyy."}},{"Name":"WORDDATXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes date values as the day, the name of the month, and the year in the form \ndd month-name yyyy."}},{"Name":"YEARw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values as the year. \n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 4 \n  Range: 2-32 \n  Tip: If w is less than 4, the last two digits of the year print; otherwise, the year \n  value prints as four digits. \n \nComparisons:\nThe YEARw. format is similar to the DTYEARw. format in that they both write date values. \nThe difference is that YEARw. expects a SAS date value as input, and DTYEARw. expects a \nSAS datetime value."}},{"Name":"YYMMw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form <yy>yyM mm, where M is the separator and the \nyear appears as either 2 or 4 digits. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 1 \n  Range: 1-32 \nd \n  specifies the number of digits to the right of the decimal point in the numeric value.\n\n  Restriction: must be either 0 or 2 \n  Tip: If d is 2, then YENw.d writes a decimal point and two decimal digits. If d is 0, \n  then YENw.d does not write a decimal point or decimal digits. \n \nDetails:\nThe YENw.d format writes numeric values with a leading yen sign and with a comma that \nseparates every three digits of each value.\n\nThe hexadecimal representation of the code for the yen sign character is 5B on EBCDIC \nsystems and 5C on ASCII systems. The monetary character these codes represent might be \ndifferent in other countries."}},{"Name":"YYMMxw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form <yy>yymm or <yy>yyXmm, where X represents \na specified separator and the year appears as either 2 or 4 digits. \n\nSyntax Description:\nx \n  identifies a separator or specifies that no separator appear between the year and the month. \n  Valid values for x are:\n    C separates with a colon\n    D separates with a dash \n    N indicates no separator\n    P separates with a period \n    S separates with a forward slash \nw \n  specifies the width of the output field. Default: 7 Range: 5-32 \n  Interaction: When x is set to N, no separator is specified. The width range is then 4-32, \n  and the default changes to 6. \n  Interaction: When x has a value of C, D, P, or S and w has a value of 5 or 6, the date appears \n  with only the last two digits of the year. When w is 7 or more, the date appears with a four-digit year. \n  Interaction: When x has a value of N and w has a value of 4 or 5, the date appears with only the last \n  two digits of the year. When x has a value of N and w is 6 or more, the date appears with a four-digit year. \n \nDetails:\nThe YYMMxw. format writes SAS date values in the form <yy>yymm or <yy>yyXmm, where\n  <yy>yy is a two-digit or four-digit integer that represents the year. \n  X is a specified separator. \n  mm is an integer that represents the month.\n \nComparisons:\nThe YYMMw.d format is similar to the YYMMxw.d format, except the YYMMxw.d format contains a \nseparator such as a dash, colon, slash, or period, between the year and month."}},{"Name":"YYMMDDw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form <yy>yymmdd or <yy>yy-mm- dd, where a dash \nis the separator and the year appears as either 2 or 4 digits. \n\nSyntax Description:\nw \n  specifies the width of the output field. Default: 8 Range: 2-10 \n  Interaction: When w has a value of from 2 to 5, the date appears with as much of the year \n  and the month as possible. When w is 7, the date appears as a two-digit year without dashes. \n  \nDetails:\nThe YYMMDDw. format writes SAS date values in the form <yy>yymmdd or <yy>yy-mm-dd, where \n\n  <yy>yy is a two-digit or four-digit integer that represents the year.\n\n  - \n  is the separator.\n\n  mm is an integer that represents the month.\n\n  dd is an integer that represents the day of the month. \n  \nComparisons:\nThe YYMMDDw.d format is similar to the YYMMDDxw.d format, except the YYMMDDxw.d format \ncontains separators, such as a colon, slash, or period between the year, month, and day."}},{"Name":"YYMMDDxw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form <yy>yymmdd or <yy>yyXmmXdd, where X represents \na specified separator and the year appears as either 2 or 4 digits. \n\nSyntax Description:\nx \n  identifies a separator or specifies that no separator appear between the year, the month, and the day. \n  Valid values for x are:\n    B separates with a blank \n    C separates with a colon \n    D separates with a dash \n    N indicates no separator \n    P separates with a period \n    S separates with a slash.\nw \n  specifies the width of the output field. Default: 8 Range: 2-10 \n  Interaction: When w has a value of from 2 to 5, the date appears with as much of the year \n  and the month. When w is 7, the date appears as a two-digit year without separators.  \n  Interaction: When x has a value of N, the width range is 2-8. \n  \nDetails:\nThe YYMMDDxw. format writes SAS date values in the form <yy>yymmdd or <yy>yyXmmXdd, where \n  <yy>yy is a two-digit or four-digit integer that represents the year.\n  X is a specified separator.\n  mm is an integer that represents the month.\n  dd is an integer that represents the day of the month. \n  \nComparisons:\nThe YYMMDDw.d format is similar to the YYMMDDxw.d format, but YYMMDDxw.d format contains \na separator between the year and month, such as a colon, slash, or period."}},{"Name":"YYMONw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form yymmm or yyyymmm. \n    \nSyntax Description:\nw \n  specifies the width of the output field. If the format width is too small to print a \n  four-digit year, only the last two digits of the year are printed.\n  \n  Default: 7 \n  Range: 5-32 \n \nDetails:\nThe YYMONw. format abbreviates the month's name to three characters."}},{"Name":"YYQZw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form <yy><qq>, the year appears as 2 or 4 digits, and \nqq is the quarter of the year. \n    \nSyntax Description:\nZ \n  specifies that no separator appear between the year and the quarter. \nw \n  specifies the width of the output field.\n  Default: 4  \n  Maximum: 6 \n  \nDetails:\nThe YYQZw. format writes SAS date values in the form <yy> <qq>\n\n  <yy> is a two-digit or four-digit integer that represents the year. \n  Z specifies that there is no separator. \n  <qq> is an integer (01, 02, 03, or 04) that represents the quarter of the year."}},{"Name":"YYQw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form <yy>yyQ q, where Q is the separator, the year \nappears as either 2 or 4 digits, and q is the quarter of the year. \n\nSyntax Description:\nw \n  specifies the width of the output field. Default: 6 Range: 4-32 \n  Interaction: When w has a value of 4 or 5, the date appears with only the last two digits \n  of the year. When w is 6 or more, the date appears with a four-digit year. \n \nDetails:\nThe YYQw. format writes SAS date values in the form <yy>yyQq, where\n\n  <yy>yy is a two-digit or four-digit integer that represents the year.\n\n  Q is the character separator.\n\n  q is an integer (1,2,3, or 4) that represents the quarter of the year.\n \nComparisons:\nThe YYQw. format is similar to the YYQxw. format, but the YYQxw. format has separators \nbetween the YY and Q, such as a dash, slash, period, or colon."}},{"Name":"YYQxw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form <yy>yyq or <yy>yy-q, where the x in the format name \nis a character that represents the special character that separates the year and the \nquarter of the year, which can be a hyphen (-), period (.), blank character, slash (/), \ncolon (:), or no separator; the year can be either 2 or 4 digits. \n\nSyntax Description:\nx \n  identifies a separator or specifies that no separator appear between the year and \n  the quarter. Valid values for x are:\n    C separates with a colon\n    D separates with a dash\n    N indicates no separator \n    P separates with a period \n    S separates with a forward slash.\nw \n  specifies the width of the output field. Default: 6 Range: 4-32 \n  Interaction: When x is set to N, no separator is specified. The width range is then 3-32, \n  and the default changes to 5. \n  Interaction: When w has a value of 4 or 5, the date appears with only the last two digits \n  of the year. When w is 6 or more, the date appears with a four-digit year. \n  Interaction: When x has a value of N and w has a value of 3 or 4, the date appears with \n  only the last two digits of the year. When x has a value of N and w is 5 or more, the date \n  appears with a four-digit year. \n \nComparisons:\nThe YYQw. format is similar to the YYQxw. format, but the YYQxw. format has separators between \nthe YY and Q, such as a dash, slash, period, or colon. \n\nDetails:\nThe YYQxw. format writes SAS date values in the form <yy>yyq or <yy>yyXq, where\n  <yy>yy is a two-digit or four-digit integer that represents the year. \n  X is a specified separator.\n  q is an integer (1,2,3, or 4) that represents the quarter of the year."}},{"Name":"YYQRw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form <yy>yyQ qr, where Q is the separator, the year \nappears as either 2 or 4 digits, and qr is the quarter of the year expressed in \nroman numerals.\n\nSyntax Description: \nw \n  specifies the width of the output field. Default: 8 Range: 6-32 \n  Interaction: When the value of w is too small to write a four-digit year, the date appears \n  with only the last two digits of the year. \n \nDetails:\nThe YYQRw. format writes SAS date values in the form <yy>yyQqr, where\n\n  <yy>yy is a two-digit or four-digit integer that represents the year.\n  Q is the character separator.\n  qr is a roman numeral (I, II, III, or IV) that represents the quarter of the year.\n \nComparisons:\nThe YYQRw. format is similar to the YYQRxw. format, but the YYQRxw. format has \nseparators between the YY and QR, such as a dash, slash, period, or colon."}},{"Name":"YYQRxw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes SAS date values in the form <yy>yy qr or <yy>yyXqr, where X represents \na specified separator, the year appears as either 2 or 4 digits, and qr is the \nquarter of the year expressed in Roman numerals. \n\nSyntax Description:\nx \n  identifies a separator or specifies that no separator appear between the year and the quarter. \n  Valid values for x are: \n    C separates with a colon \n    D separates with a dash \n    N indicates no separator     \n    P separates with a period \n    S separates with a forward slash.\nw \n  specifies the width of the output field. Default: 8 Range: 6-32 \n  Interaction: When x is set to N, no separator is specified. The width range is then 5-32, \n  and the default changes to 7. \n  Interaction: When the value of w is too small to write a four-digit year, the date appears \n  with only the last two digits of the year. \n \nDetails:\nThe YYQRxw. format writes SAS date values in the form <yy>yyqr or <yy>yyXqr, where\n\n  <yy>yy is a two-digit or four-digit integer that represents the year. \n  X is a specified separator. \n  qr is a roman numeral (I, II, III, or IV) that represents the quarter of the year.\n \nComparisons:\nThe YYQRw. format is similar to the YYQRxw. format, but the YYQRxw. format has separators \nbetween the YY and QR, such as a dash, slash, period, or colon."}},{"Name":"$CPTDWw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string in Hebrew text that is encoded in IBM-PC (cp862) to Windows \nHebrew encoding (cp1255)."}},{"Name":"$CPTWDw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a character string that is encoded in Windows (cp1255) to Hebrew DOS (cp862) \nencoding."}},{"Name":"BESTw.","Type":"SAS_FORMATS","Help":{"#cdata":"SAS chooses the best notation. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n\n  Default: 12 \n  Tip: If you print numbers between 0 and .01 exclusively, then use a field width of at \n  least 7 to avoid excessive rounding. If you print numbers between 0 and -.01 exclusively, \n  then use a field width of at least 8.  \n  Range: 1-32 \n \nDetails:\nThe BESTw. format is the default format for writing numeric values. When there is no \nformat specification, SAS chooses the format that provides the most information about \nthe value according to the available field width. BESTw. rounds the value, and if SAS \ncan display at least one significant digit in the decimal portion, within the width \nspecified, BESTw. produces the result in decimal. Otherwise, it produces the result \nin scientific notation. SAS always stores the complete value regardless of the format \nthat you use to represent it. \n \nComparisons:\no The BESTw. format writes as many significant digits as possible in the output field, \nbut if the numbers vary in magnitude, the decimal points do not line up. Integers print \nwithout a decimal.\n\no The Dw.p format writes numbers with the desired precision and more alignment than \nthe BESTw. format.\n\no The w.d format aligns decimal points, if possible, but does not necessarily show the \nsame precision for all numbers."}},{"Name":"BINARYw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts numeric values to binary representation. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: 8 \n  Range: 1-64 \n  \nComparisons:\n\nBINARYw. converts numeric values to binary representation. The $BINARYw. format converts \ncharacter values to binary representation."}},{"Name":"COMMAw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric values with a comma that separates every three digits and a period \nthat separates the decimal fraction. \n\nSyntax Description:\nw \n  specifies the width of the output field.\n\n  Default: 6 \n  Range: 1-32 \n  Tip: Make w wide enough to write the numeric values, the commas, and the optional decimal point. \nd \n  specifies the number of digits to the right of the decimal point in the numeric value.\n\n  Range: 0-31 \n  Requirement: must be less than w \n \nComparisons:\nThe COMMAw.d format is similar to the COMMAXw.d format, but the COMMAXw.d format reverses \nthe roles of the decimal point and the comma. This convention is common in European countries.\n\nThe COMMAw.d format is similar to the DOLLARw.d format except that the COMMAw.d format does \nnot print a leading dollar sign."}},{"Name":"COMMAXw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric values with a period that separates every three digits and a comma \nthat separates the decimal fraction. \n\nSyntax Description:\nw \n  specifies the width of the output field.\n  \n  Default: 6 \n  Range: 1-32 \n  Tip: Make w wide enough to write the numeric values, the commas, and the optional decimal point. \nd \n  specifies the number of digits to the right of the decimal point in the numeric value.\n\n  Range: 0-31 \n  Requirement: must be less than w \n \nComparisons:\nThe COMMAw.d format is similar to the COMMAXw.d format, but the COMMAXw.d format reverses \nthe roles of the decimal point and the comma. This convention is common in European countries."}},{"Name":"Dw.p","Type":"SAS_FORMATS","Help":{"#cdata":"Prints numeric values, possibly with a great range of values, lining up decimal places \nfor values of similar magnitude. \n\nSyntax Description:\nw \n  specifies the width of the output field. This argument is optional.\n  Default: 12 \n  Range: 1-32 \np \n  specifies the significant digits.\n  Default: 3 \n  Range: 0-16 \n  Requirement: must be less than w \n  \nDetails:\nThe Dw.p format writes numbers so that the decimal point aligns in groups of values \nwith similar magnitude. Larger values of p print the data values with more precision \nand potentially more shifts in the decimal point alignment. Smaller values of p print \nthe data values with less precision and a greater chance of decimal point alignment. \n \nComparisons:\no The BESTw. format writes as many significant digits as possible in the output field, \nbut if the numbers vary in magnitude, the decimal points do not line up.\n\no Dw.p writes numbers with the desired precision and more alignment than BESTw. format"}},{"Name":"DOLLARw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric values with a leading dollar sign, a comma that separates every three \ndigits, and a period that separates the decimal fraction. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 6 \n  Range: 2-32 \nd \n  specifies the number of digits to the right of the decimal point in the numeric value.\n  Range: 0-31 \n  Requirement: must be less than w \n  \nDetails:\nThe DOLLARw.d format writes numeric values with a leading dollar sign, a comma that separates \nevery three digits, and a period that separates the decimal fraction.\n\nThe hexadecimal representation of the code for the dollar sign character ($) is 5B on EBCDIC \nsystems and 24 on ASCII systems. The monetary character that these codes represent might be \ndifferent in other countries, but DOLLARw.d always produces one of these codes. \n \nComparisons:\nThe DOLLARw.d format is similar to the DOLLARXw.d format, but the DOLLARXw.d format reverses \nthe roles of the decimal point and the comma. This convention is common in European countries.\n\nThe DOLLARw.d format is the same as the COMMAw.d format except that the COMMAw.d format does \nnot write a leading dollar sign."}},{"Name":"DOLLARXw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric values with a leading dollar sign, a period that separates every three \ndigits, and a comma that separates the decimal fraction. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 6 \n  Range: 2-32 \nd \n  specifies the number of digits to the right of the decimal point in the numeric value. \n  Default: 0 \n  Range: 2-31 \n  Requirement: must be less than w \n \nDetails:\nThe DOLLARXw.d format writes numeric values with a leading dollar sign, a comma that \nseparates every three digits, and a period that separates the decimal fraction.\n\nThe hexadecimal representation of the code for the dollar sign character ($) is 5B on \nEBCDIC systems and 24 on ASCII systems. The monetary character that these codes represent \nmight be different in other countries, but DOLLARXw.d always produces one of these codes. \n \nComparisons:\nThe DOLLARXw.d format is similar to the DOLLARw.d format, but the DOLLARXw.d format reverses \nthe roles of the decimal point and the comma. This convention is common in European countries.\n\nThe DOLLARXw.d format is the same as the COMMAXw.d format except that the COMMAw.d format does \nnot write a leading dollar sign."}},{"Name":"Ew.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric values in scientific notation. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: 12 \n  Range: 7-32 \n \nDetails:\n\nSAS reserves the first column of the result for a minus sign."}},{"Name":"EUROw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric values with a leading euro symbol (E), a comma that separates every \nthree digits, and a period that separates the decimal fraction. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 6 \n  Range: 1-32 \n  Tip: If you want the euro symbol to be part of the output, be sure to choose an adequate width. \nd \n  specifies the number of digits to the right of the decimal point in the numeric value.\n  Default: 0 \n  Range: 0-31 \n  Requirement: must be less than w \n \nComparisons:\no The EUROw.d format is similar to the EUROXw.d format, but EUROXw.d format reverses the \nroles of the decimal point and the comma. This convention is common in European countries. \n\no The EUROw.d format is similar to the DOLLARw.d format, except that DOLLARw.d format writes \na leading dollar sign instead of the euro symbol.\n\nNote: The EUROXw.d format uses the euro character (U+20AC). If you use the DBCS version of \nSAS and an encoding that does not support the euro character, an error will occur. To prevent \nthis error, change your session encoding to an encoding that supports the euro character."}},{"Name":"EUROXw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric values with a leading euro symbol (E), a period that separates every \nthree digits, and a comma that separates the decimal fraction. \n \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 6 \n  Range: 1-32 \n  Tip: If you want the euro symbol to be part of the output, be sure to choose an adequate width. \nd \n  specifies the number of digits to the right of the decimal point in the numeric value.\n  Default: 0 \n  Range: 0-31 \n  Requirement: must be less than w \n  \nComparisons:\nThe EUROXw.d format is similar to the EUROw.d format, but EUROw.d format reverses the roles of \nthe comma and the decimal point. This convention is common in English-speaking countries.\n\nThe EUROXw.d format is similar to the DOLLARXw.d format, except that DOLLARXw.d format writes \na leading dollar sign instead of the euro symbol.\n\nNote: The EUROXw.d format uses the euro character (U+20AC). If you use the DBCS version of SAS \nand an encoding that does not support the euro character, an error will occur. To prevent this error, \nchange your session encoding to an encoding that supports the euro character. "}},{"Name":"FLOATw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Generates a native single-precision, floating-point value by multiplying a number \nby 10 raised to the dth power. \n\nSyntax Description:\nw \n  specifies the width of the output field.\n    Requirement: width must be 4  \nd \n  specifies the power of 10 by which to multiply the value.\n  Default: 0 \n  Range: 0-31 \n \nDetails:\nValues that are written by FLOAT4. typically are those meant to be read by some other \nexternal program that runs in your operating environment and that expects these single-\nprecision values. If the value that is to be formatted is a missing value, or if it is \nout-of-range for a native single-precision, floating-point value, a single-precision \nvalue of zero is generated."}},{"Name":"FRACTw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts numeric values to fractions. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n  Default: 10 \n  Range: 4-32 \n \nDetails:\n\nDividing the number 1 by 3 produces the value 0.33333333. To write this value as 1/3, \nuse the FRACTw. format. FRACTw. writes fractions in reduced form, that is, 1/2 instead \nof 50/100."}},{"Name":"HEXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts real binary (floating-point) values to hexadecimal representation. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 1-16 \n  Tip: If w < 16, the HEXw. format converts real binary numbers to fixed-point integers \n  before writing them as hexadecimal characters. It also writes negative numbers in two's \n  complement notation, and right aligns digits. If w is 16, HEXw. displays floating-point \n  values in their hexadecimal form. \n  \nDetails:\nIn any operating environment, the least significant byte written by HEXw. is the rightmost \nbyte. Some operating environments store integers with the least significant digit as the first \nbyte. The HEXw. format produces consistent results in any operating environment regardless of \nthe order of significance by byte.\n\nNote: Different operating environments store floating-point values in different ways. However, \nthe HEX16. format writes hexadecimal representations of floating-point values with consistent \nresults in the same way that your operating environment stores them. \n \nComparisons:\nThe HEXw. numeric format and the $HEXw. character format both generate the hexadecimal equivalent \nof values."}},{"Name":"IBw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes native integer binary (fixed-point) values, including negative values. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 4 \n  Range: 1-8 \nd \n  specifies to multiply the number by 10d. This argument is optional. \n  Default 0 \n  Range: 0-10 \n \nDetails:\nThe IBw.d format writes integer binary (fixed-point) values, including negative values that \nare represented in two's complement notation. IBw.d writes integer binary values with consistent \nresults if the values are created in the same type of operating environment that you use to run SAS. \n\nNote: Different operating environments store integer binary values in different ways. This concept \nis called byte ordering."}},{"Name":"IBRw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes integer binary (fixed-point) values in Intel and DEC formats. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 4 \n  Range: 1-8 \nd \n  specifies to multiply the number by 10d. This argument is optional. \n  Default: 0 \n  Range: 0-10 \n \nDetails:\nThe IBRw.d format writes integer binary (fixed-point) values, including negative values that \nare represented in two's complement notation. IBRw.d writes integer binary values that are \ngenerated by and for Intel and DEC operating environments. Use IBRw.d to write integer binary \ndata from Intel or DEC environments on other operating environments. The IBRw.d format in SAS \ncode allows for a portable implementation for writing the data in any operating environment.\n\nNote: Different operating environments store integer binary values in different ways. This \nconcept is called byte ordering."}},{"Name":"IEEEw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Generates an IEEE floating-point value by multiplying a number by 10 raised to the dth power. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 3-8 \n  Tip: If w is 8, an IEEE double-precision, floating-point number is written. If w is 5, 6, or 7, \n  an IEEE double-precision, floating-point number is written, which assumes truncation of the \n  appropriate number of bytes. If w is 4, an IEEE single-precision floating-point number is written. \n  If w is 3, an IEEE single-precision, floating-point number is written, which assumes truncation \n  of one byte. \nd \n  specifies to multiply the number by 10d.\n  Default: 0 \n  Range: 0-10 \n \nDetails:\nThis format is useful in operating environments where IEEEw.d is the floating-point representation \nthat is used. In addition, you can use the IEEEw.d format to create files that are used by programs \nin operating environments that use the IEEE floating-point representation.\n\nTypically, programs generate IEEE values in single-precision (4 bytes) or double-precision (8 bytes). \nPrograms perform truncation solely to save space on output files. Machine instructions require that \nthe floating-point number be one of the two lengths. The IEEEw.d format allows other lengths, which \nenables you to write data to files that contain space-saving truncated data."}},{"Name":"NEGPARENw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes negative numeric values in parentheses. \n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 6 \n  Range: 1-32 \n\nd \n  specifies the number of digits to the right of the decimal point in the numeric value.\n  Default: 0 \n  Range: 0-31 \n \nDetails:\nThe NEGPARENw.d format attempts to right align output values. If the input value is negative, \nNEGPARENw.d displays the output by enclosing the value in parentheses, if the field that you \nspecify is wide enough. Otherwise, it uses a minus sign to represent the negative value. If \nthe input value is non-negative, NEGPARENw.d displays the value with a leading and trailing \nblank to ensure proper column alignment. It reserves the last column for a close parenthesis \neven when the value is positive. \n\nComparisons:\nThe NEGPARENw.d format is similar to the COMMAw.d format in that it separates every three \ndigits of the value with a comma."}},{"Name":"NUMXw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric values with a comma in place of the decimal point."}},{"Name":"OCTALw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts numeric values to octal representation. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n  Default: 3 \n  Range: 1-24 \n \nDetails:\n\nIf necessary, the OCTALw. format converts numeric values to integers before displaying \nthem in octal representation. \n \nComparisons:\n\nOCTALw. converts numeric values to octal representation. The $OCTALw. format converts \ncharacter values to octal representation."}},{"Name":"PDw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes data in packed decimal format."}},{"Name":"PERCENTw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric values as percentages. \n    \nSyntax Description\n\nw \n  specifies the width of the output field.\n  Default: 6 \n  Range: 4-32 \nd \n  specifies the number of digits to the right of the decimal point in the numeric value.\n  Range: 0-31 \n  Requirement: must be less than w \n \nDetails:\nThe PERCENTw.d format multiplies values by 100, formats them the same as the BESTw.d format, \nand adds a percent sign (%) to the end of the formatted value, while it encloses negative \nvalues in parentheses. The PERCENTw.d format allows room for a percent sign and parentheses, \neven if the value is not negative."}},{"Name":"PERCENTNw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Produces percentages, using a minus sign for negative values. \n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 6 \n  Range: 4-32 \nd \n  specifies the number of digits to the right of the decimal point in the numeric value.\n  Range: 0-31 \n  Requirement: must be less than w \n \nDetails:\nThe PERCENTNw.d format multiplies negative values by 100, formats them the same as the \nBESTw.d format, adds a minus sign to the beginning of the value, and adds a percent sign \n(%) to the end of the formatted value. The PERCENTNw.d format allows room for a percent \nsign and a minus sign, even if the value is not negative.\n \nComparisons:\nThe PERCENTNw.d format produces percents by using a minus sign instead of parentheses \nfor negative values. The PERCENTw.d format produces percents by using parentheses for \nnegative values."}},{"Name":"PIBw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes positive integer binary (fixed-point) values."}},{"Name":"PIBRw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes positive integer binary (fixed-point) values in Intel and DEC formats."}},{"Name":"PKw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes data in unsigned packed decimal format."}},{"Name":"PVALUEw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes p-values."}},{"Name":"RBw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes real binary data (floating-point) in real binary format."}},{"Name":"ROMANw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric values as roman numerals. \n    \nSyntax Description:\n\nw \n  specifies the width of the output field.\n\n  Default: 3 \n  Range: 3-32"}},{"Name":"SIZEKw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a numeric value in the form nK for kilobytes.\n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 9 \n  Range: 2-33 \n\nd \n  specifies the number of digits to the right of the decimal point in the numeric value.\n  Default: 0 \n  Range: 0-31 \n \nDetails:\nTo write a numeric value in the form nK by using the SIZEKw.d format, the value of n \nis calculated by dividing the numeric value by 1,024. The symbol K indicates that the \nvalue is a multiple of 1,024."}},{"Name":"SIZEKMGw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a numeric value in the form nKB for kilobytes, nMB for megabytes, \nor nGB for gigabytes.\n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 9 \n  Range: 2-33 \nd \n  specifies the number of digits to the right of the decimal point in the numeric value.\n  Default: 0 \n  Range: 0-31 \n \nDetails:\nWhen you specify the SIZEKMGw.d format, SAS determines the best suffix: KB for kilobytes; \nMB for megabytes; or GB for gigabytes; and divides the SAS numeric value by one of the \nfollowing values:\n\n  KB 1024 \n  MB 1048576 \n  GB 1073741824"}},{"Name":"S370FFw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes native standard numeric data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 12 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional.\n  Range: 0-31 \n \nDetails:\nThe S370FFw.d format writes numeric data in IBM mainframe format (EBCDIC). The EBCDIC \nnumeric values are represented with one byte per digit. If EBCDIC is the native format, \nS370FFw.d performs no conversion.\n\nIf a value is negative, an EBCDIC minus sign precedes the value. A missing value is \nrepresented as a single EBCDIC period.\n \nComparisons:\no On an EBCDIC system, S370FFw.d behaves like the w.d format. \no On all other systems, S370FFw.d performs the same role for numeric data that the \n$EBCDICw. format does for character data."}},{"Name":"S370FIBw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes integer binary (fixed-point) values, including negative values, in IBM\nmainframe format. \n\nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 4 \n  Range: 1-8 \nd \n  specifies to multiply the number by 10d. This argument is optional. \n  Default: 0 \n  Range: 0-10 \n \nDetails: \nThe S370FIBw.d format writes integer binary (fixed-point) values that are stored in IBM mainframe \nformat, including negative values that are represented in two's complement notation. S370FIBw.d \nwrites integer binary values with consistent results if the values are created in the same type \nof operating environment that you use to run SAS. \n\nUse S370FIBw.d to write integer binary data in IBM mainframe format from data that are created \nin other operating environments. \n\nNote:   Different operating environments store integer binary values in different ways. This \nconcept is called byte ordering."}},{"Name":"S370FIBUw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes unsigned integer binary (fixed-point) values in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 4 \n  Range: 1-8 \nd \n  specifies to multiply the number by 10d. This argument is optional. \n  Default: 0 \n  Range: 0-10 \n \nDetails:\nThe S370FIBUw.d format writes unsigned integer binary (fixed-point) values that are stored in IBM \nmainframe format, including negative values that are represented in two's complement notation. \nUnsigned integer binary values are the same as integer binary values, except that all values are \ntreated as positive. S370FIBUw.d writes integer binary values with consistent results if the values \nare created in the same type of operating environment that you use to run SAS.\n\nUse S370FIBUw.d to write unsigned integer binary data in IBM mainframe format from data that are \ncreated in other operating environments. \n\nNote:   Different operating environments store integer binary values in different ways. This \nconcept is called byte ordering."}},{"Name":"S370FPDw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes packed decimal data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 1 \n  Range: 1-16 \nd \n  specifies to multiply the number by 10d. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n \nDetails: \nUse S370FPDw.d in other operating environments to write packed decimal data in the same \nformat as on an IBM mainframe computer."}},{"Name":"S370FPDUw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes unsigned packed decimal data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 1 \n  Range: 1-16 \nd \n  specifies to multiply the number by 10d. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n \nDetails:\nUse S370FPDUw.d in other operating environments to write unsigned packed decimal data \nin the same format as on an IBM mainframe computer. \n\nComparisons:\nThe S370FPDUw.d format is similar to the S370FPDw.d format except that the S370FPDw.d format \nalways uses the absolute value instead of the signed value.\n\nThe S370FPDUw.d format is equivalent to the COBOL notation PIC 9(n) PACKED-DECIMAL, where \nthe n value is the number of digits."}},{"Name":"S370FPIBw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes positive integer binary (fixed-point) values in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 4 \n  Range: 1-8 \nd \n  specifies to multiply the number by 10d. This argument is optional. \n  Default: 0 \n  Range: 0-10 \n \nDetails: \nPositive integer binary values are the same as integer binary values, except that all values \nare treated as positive. S370FPIBw.d writes integer binary values with consistent results if \nthe values are created in the same type of operating environment that you use to run SAS.\n\nUse S370FPIBw.d to write positive integer binary data in IBM mainframe format from data that \nare created in other operating environments. \n\nNote: Different operating environments store integer binary values in different ways. This \nconcept is called byte ordering."}},{"Name":"S370FRBw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes real binary (floating-point) data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 4 \n  Range: 2-8 \nd \n  specifies to multiply the number by 10d. This argument is optional. \n  Default: 0 \n  Range: 0-10 \n  \nDetails:\nA floating-point value consists of two parts: a mantissa that gives the value and an \nexponent that gives the value's magnitude.\n\nUse S370FRBw.d in other operating environments to write floating-point binary data in \nthe same format as on an IBM mainframe computer."}},{"Name":"S370FZDw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes zoned decimal data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 1-32 \nd \n  specifies to multiply the number by 10d. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n \nDetails:\nUse S370FZDw.d in other operating environments to write zoned decimal data in the same \nformat as on an IBM mainframe computer."}},{"Name":"S370FZDLw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes zoned decimal leading-sign data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 1-32 \nd \n  specifies to multiply the number by 10d. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n \nDetails:\nUse S370FZDLw.d in other operating environments to write zoned decimal leading-sign data \nin the same format as on an IBM mainframe computer.\n \nComparisons: \nThe S370FZDLw.d format is similar to the S370FZDw.d format except that the S370FZDLw.d format \ndisplays the sign of the number in the first byte of the formatted output.\n\nThe S370FZDLw.d format is equivalent to the COBOL notation PIC S9(n) DISPLAY SIGN LEADING, \nwhere the n value is the number of digits."}},{"Name":"S370FZDSw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes zoned decimal separate leading-sign data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 2-32 \nd \n  specifies to multiply the number by 10d. This argument is optional.\n  Default: 0 \n  Range: 0-31 \n \nDetails:\nUse S370FZDSw.d in other operating environments to write zoned decimal separate leading-sign \ndata in the same format as on an IBM mainframe computer. \n \nComparisons:\nThe S370FZDSw.d format is similar to the S370FZDLw.d format except that the S370FZDSw.d format \ndoes not embed the sign of the number in the zoned output.\n\nThe S370FZDSw.d format is equivalent to the COBOL notation PIC S9(n) DISPLAY SIGN LEADING SEPARATE, \nwhere the n value is the number of digits."}},{"Name":"S370FZDTw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes zoned decimal separate trailing-sign data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 2-32 \nd \n  specifies to multiply the number by 10d. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n \nDetails:\nUse S370FZDTw.d in other operating environments to write zoned decimal separate trailing-sign \ndata in the same format as on an IBM mainframe computer.\n \nComparisons:\nThe S370FZDTw.d format is similar to the S370FZDSw.d format except that the S370FZDTw.d format \ndisplays the sign of the number at the end of the formatted output. \n\nThe S370FZDTw.d format is equivalent to the COBOL notation PIC S9(n) DISPLAY SIGN TRAILING SEPARATE, \nwhere the n value is the number of digits."}},{"Name":"S370FZDUw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes unsigned zoned decimal data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 1-32 \nd \n  specifies to multiply the number by 10d. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n \nDetails:\nUse S370FZDUw.d in other operating environments to write unsigned zoned decimal data \nin the same format as on an IBM mainframe computer.\n \nComparisons:\nThe S370FZDUw.d format is similar to the S370FZDw.d format except that the S370FZDUw.d \nformat always uses the absolute value of the number.\n\nThe S370FZDUw.d format is equivalent to the COBOL notation PIC 9(n) DISPLAY, where the \nn value is the number of digits."}},{"Name":"SSNw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes Social Security numbers. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 11 \n  Restriction: w must be 11 \n \nDetails:\nIf the value is missing, SAS writes nine single periods with dashes between the third \nand fourth periods and between the fifth and sixth periods. If the value contains fewer \nthan nine digits, SAS right aligns the value and pads it with zeros on the left. If the \nvalue has more than nine digits, SAS writes it as a missing value."}},{"Name":"VAXRBw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes real binary (floating-point) data in VMS format. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 2-8 \nd \n  specifies the power of 10 by which to divide the value.\n  Default: 0 \n  Range: 0-31 \n  \nDetails:\nUse the VAXRBw.d format to write data in native VAX/VMS floating-point notation."}},{"Name":"w.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes standard numeric data one digit per byte. \n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Range: 1-32 \n  Tip: Allow enough space to write the value, the decimal point, and a minus sign, \n  if necessary.  \nd \n  specifies the number of digits to the right of the decimal point in the numeric value.\n  Range: 0-31 \n  Requirement: must be less than w \n  Tip: If d is 0 or you omit d, w.d writes the value without a decimal point. \n \nDetails:\nThe w.d format rounds to the nearest number that fits in the output field. If w.d is too \nsmall, SAS might shift the decimal to the BESTw. format. The w.d format writes negative \nnumbers with leading minus signs. In addition, w.d right aligns before writing and pads \nthe output with leading blanks.\n \nComparisons:\nThe Zw.d format is similar to the w.d format except that Zw.d pads right-aligned output \nwith 0s instead of blanks."}},{"Name":"WORDFw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric values as words with fractions that are shown numerically. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 10 \n  Range: 5-32767 \n \nDetails:\nThe WORDFw. format converts numeric values to their equivalent in English words, with \nfractions that are represented numerically in hundredths. For example, 8.2 prints as \neight and 20/100.\n\nNegative numbers are preceded by the word minus. When the value's equivalent in words \ndoes not fit into the specified field, it is truncated on the right and the last character \nprints as an asterisk.\n \nComparisons:\nThe WORDFw. format is similar to the WORDSw. format except that WORDFw. prints fractions \nas numbers instead of words."}},{"Name":"WORDSw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric values as words. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 10 \n  Range: 5-32767 \n \nDetails:\nYou can use the WORDSw. format to print checks with the amount written out below the payee line.\n\nNegative numbers are preceded by the word minus. If the number is not an integer, the fractional \nportion is represented as hundredths. For example, 5.3 prints as five and thirty hundredths. When \nthe value's equivalent in words does not fit into the specified field, it is truncated on the \nright and the last character prints as an asterisk.\n \nComparisons:\nThe WORDSw. format is similar to the WORDFw. format except that WORDSw. prints fractions as words \ninstead of numbers."}},{"Name":"YENw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric values with yen signs, commas, and decimal points. \n    \nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 1 \n  Range: 1-32 \nd \n  specifies the number of digits to the right of the decimal point in the numeric value.\n  Restriction: must be either 0 or 2 \n  Tip: If d is 2, then YENw.d writes a decimal point and two decimal digits. If d is 0, \n  then YENw.d does not write a decimal point or decimal digits. \n \nDetails:\nThe YENw.d format writes numeric values with a leading yen sign and with a comma that \nseparates every three digits of each value.\n\nThe hexadecimal representation of the code for the yen sign character is 5B on EBCDIC \nsystems and 5C on ASCII systems. The monetary character these codes represent might be \ndifferent in other countries."}},{"Name":"Zw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes standard numeric data with leading 0s. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 1 \n  Range: 1-32 \n  Tip: Allow enough space to write the value, the decimal point, and a minus sign, if necessary.  \nd \n  specifies the number of digits to the right of the decimal point in the numeric value. \n  Default: 0 \n  Range: 0-31 \n  Tip: If d is 0 or you omit d, Zw.d writes the value without a decimal point. \n \nDetails:\nThe Zw.d format writes standard numeric values one digit per byte and fills in 0s to the \nleft of the data value.\n\nThe Zw.d format rounds to the nearest number that will fit in the output field. If w.d is \ntoo large to fit, SAS might shift the decimal to the BESTw. format. The Zw.d format writes \nnegative numbers with leading minus signs. In addition, it right aligns before writing and \npads the output with leading zeros."}},{"Name":"ZDw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes numeric data in zoned decimal format."}},{"Name":"$BASE64Xw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts character data to ASCII text using Base 64 encoding. \n    \nSyntax Description:\n\nw \nspecifies the width of the output field.\n\n  Default: 1 \n  Range: 1-32767 \n \nDetails:\n\nBase 64 is an industry encoding method whose encoded characters are determined by \nusing a positional scheme that uses only ASCII characters. Several Base 64 encoding \nschemes have been defined by the industry for specific uses, such as e-mail or content \nmasking. SAS maps positions 0 - 61 to the characters A - Z, a - z, and 0 - 9. Position \n62 maps to the character +, and position 63 maps to the character /. \n\nThe following are some uses of Base 64 encoding:\n\n  o embed binary data in an XML file\n  o encode passwords\n  o encode URLs\n\nThe '=' character in the encoded results indicates that the results have been padded \nwith zero bits. In order for the encoded characters to be decoded, the '=' must be \nincluded in the value to be decoded."}},{"Name":"$N8601Bw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes ISO 8601 duration, datetime, and interval forms using the basic notations \nPnYnMnDTnHnMnS and yyyymmddThhmmss. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 50 \n  Range: 1 - 200 \n  Requirement: The minimum length for a duration value or a datetime value is 16. The minimum \n  length for an interval value is 16. \nd \n  specifies the number of digits to the right of the lowest order component. This argument is optional.\n  Default: 0 \n  Range: 0 - 3 \n \nDetails:\nThe $N8601B format writes ISO 8601 duration, datetime, and interval values as character data for \nthe following basic notations: \n\n PnYnMnDTnHnMnS  \n yyyymmddThhmmss  \n PnYnMnDTnHnMnS/yyyymmddThhmmss  \n yyyymmddThhmmssT/PnYnMnDTnHnMnS  \n\nThe lowest order component can contain fractions, as in these examples: \n\n p2y3.5m  \n p00020304T05.335"}},{"Name":"$N8601BAw.d","Type":"SAS_FORMATS","Help":{"#cdata":"writes ISO 8601 duration, datetime, and interval forms using the basic notations PyyyymmddThhmmss \nand yyyymmddThhmmss. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 50 \n  Range: 1 - 200 \n  Requirement: The minimum length for a duration value or a datetime value is 16. The minimum \n  length for an interval value is 16. \nd \n  specifies the number of digits to the right of the lowest order component. This argument is optional.\n  Default: 0 \n  Range: 0 - 3 \n \nDetails:\nThe $N8601BA format writes ISO 8601 duration, datetime, and interval values as character data \nfor the following basic notations: \n\n  PyyyymmddThhmmss \n  yyyymmddThhmmss \n  PyyyymmddThhmmss/yyyymmddThhmmss \n  yyyymmddThhmmss/PyyyymmddThhmmss  \n\nThe lowest order component can contain fractions, as in these examples: \n\n p00023.5  \n 00020304T05.335"}},{"Name":"$N8601Ew.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes ISO 8601 duration, datetime, and interval forms using the extended notations \nPnYnMnDTnHnMnS and yyyy-mm-ddThh:mm:ss. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 50 \n  Range: 1 - 200 \n  Requirement: The minimum length for a duration value or a datetime value is 16. The minimum \n  length for an interval value is 16. \nd \n  specifies the number of digits to the right of the lowest order component. This argument is optional.\n  Default: 0 \n  Range: 0 - 3 \n\nThe $N8601B format writes ISO 8601 duration, datetime, and interval values as character data \nfor the following basic notations: \n\n  PnYnMnDTnHnMnS  \n  yyyy-mm-ddThh:mm:ss  \n  PnYnMnDTnHnMnS/yyyy-mm-ddThh:mm:ss  \n  yyyy-mm-ddThh:mm:ssT/PnYnMnDTnHnMnS  \n\nThe lowest order component can contain fractions, as in these examples: \n\n p2y3.5m  \n p0002-03-04T05.335"}},{"Name":"$N8601EAw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes ISO 8601 duration, datetime, and interval forms using the extended notations \nPyyyy-mm-ddThh:mm:ss and yyyy-mm-ddThh:mm:ss. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 50 \n  Range: 1 - 200 \n  Requirement: The minimum length for a duration value or a datetime value is 16. The minimum \n  length for an interval value is 16. \nd \n  specifies the number of digits to the right of the lowest order component. This argument is optional.\n  Default: 0 \n  Range: 0 - 3 \n  \nDetails:\nThe $N8601EA format writes ISO 8601 duration, datetime, and interval values as character \ndata for the following basic notations: \n\n  Pyyyy-mm-ddThh:mm:ss  \n  yyyy-mm-ddThh:mm:ss  \n  Pyyyy-mm-ddThh:mm:ss/yyyy-mm-ddThh:mm:ss  \n  yyyy-mm-ddThh:mm:ss/Pyyyy-mm-ddThh:mm:ss  \n\nThe lowest order component can contain fractions, as in these examples: \n\n p00023.5  \n 0002-03-04T05.335"}},{"Name":"$N8601EHw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes ISO 8601 duration, datetime, and interval forms for the extended notations \nPyyyy-mm-ddThh:mm:ss and yyyy-mm-ddThh:mm:ss, using a hyphen ( - ) for omitted \ncomponents. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 50 \n  Range: 1 - 200 \n  Requirement: The minimum length for a duration value or a datetime value is 16. The minimum \n  length for an interval value is 16. \nd \n  specifies the number of digits to the right of the lowest order component. This argument is optional.\n  Default: 0 \n  Range: 0 - 3 \n\nDetails:   \nThe $N8601H format writes ISO 8601 duration, datetime, and interval values as character data, \nusing a hyphen ( - ) to represent omitted components, for the following extended notations: \n\n  Pyyyy-mm-ddThh:mm:ss  \n  yyyy-mm-ddThh:mm:ss  \n  Pyyyy-mm-ddThh:mm:ss/yyyy-mm-ddThh:mm:ss  \n  yyyy-mm-ddThh:mm:ss/Pyyyy-mm-ddThh:mm:ss  \n  yyyy-mm-ddThh:mm:ss/yyyy-mm-ddThh:mm:ss \n\nOmitted datetime components are always displayed, they are never truncated."}},{"Name":"$N8601EXw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes ISO 8601 duration, datetime, and interval forms for the extended notations \nPyyyy-mm-ddThh:mm:ss and yyyy-mm-ddThh:mm:ss, using an x for each digit of an \nomitted component. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 50 \n  Range: 1 - 200 \n  Requirement: The minimum length for a duration value or a datetime value is 16. The minimum \n  length for an interval value is 16. \nd \n  specifies the number of digits to the right of the lowest order component. This argument is optional.\n  Default: 0 \n  Range: 0 - 3 \n  \nDetails:\nThe $N8601H format writes ISO 8601 duration, datetime, and interval values as character data, \nusing a hyphen ( - ) to represent omitted components, for the following extended notations: \n\n  Pyyyy-mm-ddThh:mm:ss  \n  yyyy-mm-ddThh:mm:ss  \n  Pyyyy-mm-ddThh:mm:ss/yyyy-mm-ddThh:mm:ss  \n  yyyy-mm-ddThh:mm:ss/Pyyyy-mm-ddThh:mm:ss  \n  yyyy-mm-ddThh:mm:ss/yyyy-mm-ddThh:mm:ss  \n\nOmitted datetime components are always displayed, they are never truncated."}},{"Name":"$N8601Hw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes ISO 8601 duration, datetime, and interval forms PnYnMnDTnHnMnS and \nyyyy-mm-ddThh:mm:ss, dropping omitted components in duration values and \nusing a hyphen ( - ) for omitted components in datetime values. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 50 \n  Range: 1 - 200 \n  Requirement: The minimum length for a duration value or a datetime value is 16. The minimum \n  length for an interval value is 16. \nd \n  specifies the number of digits to the right of the lowest order component. This argument is optional.\n  Default: 0 \n  Range: 0 - 3 \n  \nThe $N8601H format writes ISO 8601 durations, intervals, and datetimes in the following forms, \nomitting components in the PnYnMnDTnHnMnS form and using a hyphen ( - ) to represent omitted \ncomponents in the datetime form: \n\n PnYnMnDTnHnMnS  \n yyyy-mm-ddThh:mm:ss  \n PnYnMnDTnHnMnS/yyyy-mm-ddThh:mm:ss  \n yyyy-mm-ddThh:mm:ssT/PnYnMnDTnHnMnS  \n yyyy-mm-ddThh:mm:ss/yyyy-mm-ddThh:mm:ss  \n\nOmitted datetime components are always displayed, they are never truncated."}},{"Name":"$N8601Xw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes ISO 8601 duration, datetime, and interval forms PnYnMnDTnHnMnS and \nyyyy-mm-ddThh:mm:ss, dropping omitted components in duration values and \nusing an x for each digit of an omitted component in datetime values. \n\nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 50 \n  Range: 1 - 200 \n  Requirement: The minimum length for a duration value or a datetime value is 16. The minimum \n  length for an interval value is 16. \nd \n  specifies the number of digits to the right of the lowest order component. This argument is optional.\n  Default: 0 \n  Range: 0 - 3 \n  \nDetails:\n\nThe $N8601X format writes ISO 8601 durations, intervals, and datetimes in the following forms, \nomitting components in the PnYnMnDTnHnMnS form and using an x to represent omitted components \nin the datetime form: \n\n  PnYnMnDTnHnMnS  \n  yyyy-mm-ddThh:mm:ss  \n  PnYnMnDTnHnMnS/yyyy-mm-ddThh:mm:ss  \n  yyyy-mm-ddThh:mm:ssT/PnYnMnDTnHnMnS  \n  yyyy-mm-ddThh:mm:ss/yyyy-mm-ddThh:mm:ss  \n\nOmitted datetime components are always displayed, they are never truncated."}},{"Name":"B8601DAw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes date values using the IOS 8601 base notation yyyymmdd. \n    \nSyntax Description:\nw \n  specifies the width of the output field. \n  Default: 10 \n  Requirement: The width of the output field must be 10. \n\nDetails:\nThe B8601DA format writes the ISO 8601 basic date notation yyyymmdd:\n\n  yyyy is a four-digit year, such as 2008  \n  mm is a two-digit month (zero padded) between 01 and 12  \n  dd is a two-digit day of the month (zero padded) between 01 and 31"}},{"Name":"B8601DNw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes the date from a datetime value using the ISO 8601 basic notation yyyymmdd. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 10 \n  Requirement: The width of the input field must be 10. \n\nDetails: \nThe B8601DN format writes the date from a datetime value using the ISO 8601 basic date \nnotation yyyymmdd:\n\n  yyyy is a four-digit year, such as 2008  \n  mm is a two-digit month (zero padded) between 01 and 12  \n  dd is a two-digit day of the month (zero padded) between 01 and 31"}},{"Name":"B8601DTw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes datetime values in the ISO 8601 basic notation yyyymmddThhmmssffffff. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 19 \n  Range: 19 - 26 \nd \n  specifies the number of digits to the right of the seconds value that represents a fraction \n  of a second. This argument is optional.\n  Default: 0 \n  Range: 0 - 6 \n \nDetails:\nThe B8601DT format writes ISO 8601 basic datetime notation yyyymmddThhmmssffffff:\n\n  yyyy is a four-digit year, such as 2008  \n  mm is a two-digit month (zero padded) between 01 and 12  \n  dd is a two-digit day of the month (zero padded) between 01 and 31  \n  hh is a two-digit hour (zero padded), between 00 - 23  \n  mm is a two-digit minute (zero padded), between 00 - 59  \n  ss is a two-digit second (zero padded), between 00 - 59  \n  .ffffff are optional fractional seconds, with a precision of up to six digits, \n  where each digit is between 0 - ."}},{"Name":"B8601DZw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes datetime values in the Coordinated Universal Time (UTC) time scale using the \nISO 8601 datetime and time zone basic notation yyyymmddThhmmss+|-hhmm. \n\nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 26 \n  Range: 20 - 35 \n \nDetails: \nUTC values specify a time and a time zone based on the zero meridian in Greenwich, England. \nThe B8602DZ format writes SAS datetime values for the zero meridian date and time using one \nof the following ISO 8601 basic datetime notations:\n\n  yyyymmddThhmmss+|-hhmm \n    is the form used whenw is large enough to support this time zone notation. \n  yyyymmddThhmmssZ \n    is the form used when w is not large enough to support the +|-hhmm time zone notation. \n  \n  where \n    yyyy is a four-digit year, such as 2008  \n    mm is a two-digit month (zero padded) between 01 and 12  \n    dd is a two-digit day of the month (zero padded) between 01 and 31  \n    hh is a two-digit hour (zero padded), between 00 - 23  \n    mm is a two-digit minute (zero padded), between 00 - 59  \n    ss is a two-digit second (zero padded), between 00 - 59  \n    Z indicates that the time is for zero meridian (Greenwich, England) or UTC time  \n    +|-hhmm is an hour and minute signed offset from zero meridian time. Note that the offset \n    must be +|-hhmm (that is, + or - and four characters). \n\n      Use + for time zones east of the zero meridian and use - for time zones west of the zero \n      meridian. For example, +0200 indicates a two-hour time difference to the east of the zero \n      meridian, and -0600 indicates a six-hour time differences to the west of the zero meridian.\n\n      Restriction: The shorter form +|-hh is not supported."}},{"Name":"B8601LZw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes time values as local time by appending a time zone offset difference between \nthe local time and UTC, using the ISO 8601 basic time notation hhmmss+|-hhmm. \n\nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 14 \n  Range: 9 - 20 \n \nDetails: \nThe B8602LZ format writes time values without making any adjustments and appends the UTC time \nzone offset for the local SAS session, using the following ISO 8601 basic notation: \n\n hhmmss+|-hhmm \n\nwhere:\n  hh is a two-digit hour (zero padded), between 00 - 23  \n  mm is a two-digit minute (zero padded), between 00 - 59  \n  ss is a two-digit second (zero padded), between 00 - 59  \n  +|-hhmm is an hour and minute signed offset from zero meridian time. Note that the offset \n    must be +|-hhmm (that is, + or - and five characters). \n\n    Use + for time zones east of the zero meridian and use - for time zones west of the zero meridian. \n    For example, +0200 indicates a two hour time difference to the east of the zero meridian, and -0600 \n    indicates a six hour time differences to the west of the zero meridian.\n    Restriction: The shorter form +|-hh is not supported.  \n\nWhen SAS reads a UTC time by using the B8601TZ informat, and the adjusted time is greater than 24 hours \nor less than 00 hours, SAS adjusts the value so that the time is between 000000 and 235959. If the B8601LZ \nformat attempts to format a time outside of this time range, the time is formatted with stars to indicate \nthat the value is out of range."}},{"Name":"B8601TMw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes time values using the ISO 8601 basic notation hhmmssffff. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 8 - 15 \nd \n  specifies the number of digits to the right of the seconds value that represent a \n  fraction of a second. This argument is optional.\n\n  Default: 0 \n  Range: 0 - 6 \n \nDetails:\nThe B8601TM format writes SAS time values using the following ISO 8601 basic time notation hhmmssffffff: \n\n  hh is a two-digit hour (zero padded), between 00 - 23.  \n  mm is a two-digit minute (zero padded), between 00 - 59.  \n  ss is a two-digit second (zero padded), between 00 - 59.\n \nffffff are optional fractional seconds, with a precision of up to six digits, where each digit \nis between 0 - 9."}},{"Name":"B8601TZw.","Type":"SAS_FORMATS","Help":{"#cdata":"Adjusts time values to the Coordinated Universal Time (UTC) and writes them using \nthe ISO 8601 basic time notation hhmmss+|-hhmm. \n\nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 14 \n  Range: 9-20 \n \nDetails:\nUTC time values specify a time and a time zone based on the zero meridian in Greenwich, England. \nThe B8602TZ format adjusts the time value to be the time at the zero meridian and writes it in \none of the following ISO 8601 basic time notations:\n\n  hhmmss+|-hhmm is the form used when w is large enough to support this time notation.  \n  hhmmssZ  is the form used when w is not large enough to support the +|-hhmm time zone notation. \n \n  where \n    hh is a two-digit hour (zero padded), between 00 and 23.  \n    mm is a two-digit minute (zero padded), between 00 and 59.  \n    ss is a two-digit second (zero padded), between 00 and 59.  \n    Z indicates that the time is for zero meridian (Greenwich, England) or UTC time.  \n    +|-hh:mm is an hour and minute signed offset from zero meridian time. Note that the offset must \n      be +|-hhmm (that is, + or - and four characters). \n      Use + for time zones east of the zero meridian and use - for time zones west of the zero \n      meridian. For example, +0200 indicates a two hour time difference to the east of the zero \n      meridian, and -0600 indicates a six hour time differences to the west of the zero meridian.\n      Restriction: The shorter form +|-hh is not supported.  \n\nWhen SAS reads a UTC time by using the B8601TZ informat, and the adjusted time is greater than \n24 hours or less than 00 hours, SAS adjusts the value so that the time is between 000000 and \n240000. If the B8601TZ format attempts to format a time outside of this time range, the time \nis formatted with stars to indicate that the value is out of range."}},{"Name":"BESTDw.p","Type":"SAS_FORMATS","Help":{"#cdata":"Prints numeric values, lining up decimal places for values of similar magnitude, \nand prints integers without decimals. \n\nSyntax Description:\nw \n  specifies the width of the output field.\n  Default: 12 \n  Range: 1-32 \np \n  specifies the precision.\n  Default: 3 \n  Range: 0 to w-1 \n  Requirement: must be less than w \n  Tip: If p is omitted or is specified as 0, then p is set to 3. \n\nDetails:\nThe BESTDw.p format writes numbers so that the decimal point aligns in groups of values \nwith similar magnitude. Integers are printed without a decimal point. Larger values of \np print the data values with more precision and potentially more shifts in the decimal \npoint alignment. Smaller values of p print the data values with less precision and a \ngreater chance of decimal point alignment. \n\nThe format chooses the number of decimal places to print for ranges of values, even when \nthe underlying values can be represented with fewer decimal places."}},{"Name":"E8601DAw.|IS8601DA.w","Type":"SAS_FORMATS","Help":{"#cdata":"Writes date values using the ISO 8601 extended notation yyyy-mm-dd. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 10 \n  Requirement: The width of the output field must be 10. \n \nDetails:\nThe E8601DA format writes a date in the ISO 8601 extended notation yyyy-mm-dd:\n\n  yyyy is a four-digit year, such as 2008.  \n  mm is a two-digit month (zero padded) between 01 and 12.  \n  dd is a two-digit day of the month (zero padded) between 01 and 31."}},{"Name":"E8601DNw.|IS8601DNw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes the date from a SAS datetime value using the ISO 8601 extended notation \nyyyy-mm-dd. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 10 \n  Requirement: The width of the input field must be 10. \n \nDetails: \nThe E8601DN formats writes the date in the ISO 8601 extended date notation yyyy-mm-dd:\n\n  yyyy is a four-digit year, such as 2008.  \n  mm is a two-digit month (zero padded) between 01 and 12.  \n  dd is a two-digit day of the month (zero padded) between 01 and 31."}},{"Name":"E8601DTw.d|IS8601DTw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes datetime values in the ISO 8601 extended notation yyyy-mm-ddThh:mm:ss.ffffff. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 19 \n  Range: 19 - 26 \nd \n  specifies the number of digits to the right of the decimal point in the seconds value. \n  This argument is optional. \n  Default: 0 \n  Range: 0 - 6 \n \nDetails:\nThe E8602DT format writes datetime values using the ISO 8601 extended datetime notation yyyy-mm-ddThh:mm:ss.ffffff:\n\n  yyyy is a four-digit year, such as 2008.  \n  mm is a two-digit month (zero padded) between 01 and 12.  \n  dd is a two-digit day of the month (zero padded) between 01 and 31.  \n  hh is a two-digit hour (zero padded), between 00 - 23.  \n  mm is a two-digit minute (zero padded), between 00 - 59.  \n  ss is a two-digit second (zero padded), between 00 - 59.  \n  .ffffff are optional fractional seconds, with a precision of up to six digits, where each digit \n    is between 0 - 9."}},{"Name":"E8601DZw.|IS8601DZw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes datetime values in the Coordinated Universal Time (UTC) time scale using the \nSO 8601 datetime and time zone extended notation yyyy-mm-ddThh:mm:ss+|-hh:mm. \n\nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 26 \n  Range: 20 - 35 \n  \nDetails:\nUTC values specify a time and a time zone based on the zero meridian in Greenwich, England. The E8602DZ \nformat writes SAS datetime values using one of the following ISO 8601 extended datetime notations:\n\nyyyy-mm-ddThh:mm:ss+|-hh:mm is the form used when w is large enough to support this time zone notation.  \nyyyy-mm-ddThh:mm:ssZ  is the form used when w is not large enough to support the +|- hhmm time zone notation. \n \nwhere \n  yyyy is a four-digit year, such as 2008  \n  mm is a two-digit month (zero padded) between 01 and 12  \n  dd is a two-digit day of the month (zero padded) between 01 and 31  \n  hh is a two-digit hour (zero padded), between 00 - 24  \n  mm is a two-digit minute (zero padded), between 00 - 59  \n  ss is a two-digit second (zero padded), between 00 - 59  \n  Z indicates that the time is for zero meridian (Greenwich, England) or UTC time.  \n  +|-hh:mm is an hour and minute signed offset from zero meridian time. Note that the offset must \n    be +|-hh:mm (that is, + or - and five characters). \n\n    Use + for time zones east of the zero meridian and use - for time zones west of the zero meridian. \n    For example, +02:00 indicates a two hour time difference to the east of the zero meridian, and \n    -06:00 indicates a six hour time differences to the west of the zero meridian.\n\n    Restriction: The shorter form +|-hh is not supported."}},{"Name":"E8601LZw.|IS8601LZw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes time values as local time, appending the Coordinated Universal Time (UTC) \noffset for the local SAS session, using the ISO 8601 extended time notation \nhh:mm:ss+|-hh:mm. \n\nSyntax Description: \nw \n  specifies the width of the output field.\n  Default: 14 \n  Range: 9 - 20 \n \nDetails: \nThe E8602LZ format writes time values without making any adjustments and appends the UTC time \nzone offset for the local SAS session, using one of the following ISO 8601 extended time notations:\n\n  hh:mm:ss+|-hh:mm is the form used when w is large enough to support this time notation.  \n  hh:mm:ssZ  is the form used when w is not large enough to support the +|- hh:mm time zone notation.  \n  where:\n    hh is a two-digit hour (zero padded), between 00 - 23.  \n    mm is a two-digit minute (zero padded), between 00 - 59.  \n    ss is a two-digit second (zero padded), between 00 - 59.  \n    Z indicate zero meridian (Greenwich, England) or UTC time.  \n    +|-hh:mm is an hour and minute signed offset from zero meridian time. Note that the offset must \n      be +|-hh:mm (that is, + or - and five characters). \n\n      Use + for time zones east of the zero meridian and use - for time zones west of the zero meridian. \n      For example, +02:00 indicates a two hour time difference to the east of the zero meridian, and \n      -06:00 indicates a six hour time differences to the west of the zero meridian.\n      Restriction: The shorter form +|-hh is not supported."}},{"Name":"E8601TMw.d|IS8601TMw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes time values using the ISO 8601 extended notation hh:mm:ss.ffffff. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 8 \n  Range: 8 - 15 \nd \n  specifies the number of digits to the right of the decimal point in the seconds value. This \n  argument is optional. \n  Default: 0 \n  Range: 0 - 6 \n \nDetails:\nThe E8601TM format writes SAS time values using the following ISO 8601 extended time notation: \n\n  hh:mm:ss.ffffff  \n  hh is a two-digit hour (zero padded), between 00 - 23.  \n  mm is a two-digit minute (zero padded), between 00 - 59.  \n  ss is a two-digit second (zero padded), between 00 - 59.  \n  .ffffff are optional fractional seconds, with a precision of up to six digits, where each \n  digit is between 0 - 9."}},{"Name":"E8601TZw.d|IS8601TZw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Adjusts time values to the Coordinated Universal Time (UTC) and writes the values \nusing the ISO 8601 extended notation hh:mm:ss+|-hh:mm. \n\nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 14 \n  Range: 9 - 20 \nd \n  specifies the number of digits to the right of the decimal point in the seconds value. This \n  argument is optional. \n  Default: 0 \n  Range: 0 - 6 \n \nDetails:\nUTC time values specify a time and a time zone based on the zero meridian in Greenwich, England. \nThe E8602TZ format writes time values in one of the following ISO 8601 extended time notations:\n\n  hh:mm:ss+|-hh:mm is the form used when w is large enough to support this time zone notation.  \n  hh:mm:ssZ  is the form used when w is not large enough to support the +|- hh:mm time zone notation. \n\nwhere\n  hh is a two-digit hour (zero padded), between 00 - 23  \n  mm is a two-digit minute (zero padded), between 00 - 59  \n  ss is a two-digit second (zero padded), between 00 - 59  \n  Z indicate zero meridian (Greenwich, England) or UTC time  \n  +|-hh:mm is an hour and minute signed offset from zero meridian time. Note that the offset must be \n    +|-hh:mm (that is, + or - and five characters). The shorter form +|-hh is not supported.\n\n    Use + for time zones east of the zero meridian and use - for time zones west of the zero meridian. \n    For example, +02:00 indicates a two hour time difference to the east of the zero meridian, and \n    -06:00 indicates a six hour time differences to the west of the zero meridian.  \n\nWhen SAS reads a UTC time by using the B8601TZ informat, and the adjusted time is greater than 24 hours \nor less than 00 hours, SAS adjusts the value so that the time is between 00:00:00 and 24:00:00. If the \nE8601TZ format attempts to format a time outside of this time range, the time is formatted with stars \nto indicate that the value is out of range."}},{"Name":"VMSZNw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Generates VMS and MicroFocus COBOL zoned numeric data. \n    \nSyntax: VMSZNw.d  \n\nw \n  specifies the width of the output field\n  Default: 1 \n  Range: 1-32 \nd \n  specifies the number of digits to the right of the decimal point in the numeric value. \n  This argument is optional.\n \nDetails:\nThe VMSZNw.d format is similar to the ZDw.d format. Both generate a string of ASCII digits, and the \nlast digit is a special character that denotes the magnitude of the last digit and the sign of the \nentire number. The difference between these formats is in the special character that is used for the \nlast digit. The following table shows the special characters that are used by the VMSZNw.d format. \n\nDesired   Special    Desired   Special\nDigit       Character Digit        Character \n0             0             -0              p \n1             1             -1              q \n2             2             -2              r \n3             3             -3              s \n4             4             -4              t \n5             5             -5              u \n6             6             -6              v \n7             7             -7              w \n8             8             -8              x \n9             9             -9              y \n\nData formatted using the VMSZNw.d format are ASCII strings.\n\nIf the value to be formatted is too large to fit in a field of the specified width, then the VMSZNw.d \nformat does the following: \n\n  o For positive values, it sets the output to the largest positive number that fits in the given width.\n  o For negative values, it sets the output to the negative number of greatest magnitude that fits in \n    the given width."}},{"Name":"NLDATEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts a SAS date value to the date value of the specified locale, and then writes \nthe date value as a date. \n\nSyntax Description: \nw \n  specifies the width of the output field. If necessary, SAS abbreviates the date to fit the \n  format width. \n  Default: 20 \n  Range: 10-200 \n \nComparisons:\nNLDATEw. is similar to DATEw. and WORDDATEw. except that NLDATEw. is locale-specific."}},{"Name":"NLDATEMDw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the SAS date value to the date value of the specified locale, and then writes \nthe value as the name of the month and the day of the month."}},{"Name":"NLDATEMNw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts a SAS date value to the date value of the specified locale, and then writes \nthe value as the name of the month. \n\nSyntax Description: \n\nw \n  specifies the width of the output field.\n\n  Default: 16 \n  Range: 6-200"}},{"Name":"NLDATEWw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts a SAS date value to the date value of the specified locale, and then writes \nthe value as the date and the day of the week. \n\nSyntax Description: \nw \n  specifies the width of the output field. If necessary, SAS abbreviates the date and \n  the day of the week to fit the format width.\n\n  Default: 20 \n  Range: 10-200 \n \nComparisons:\nNLDATEWw. is similar to WEEKDATEw. except that NLDATEWw. is locale specific."}},{"Name":"NLDATEWNw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the SAS date value to the date value of the specified locale, and then writes \nthe date value as the day of the week. \n\nSyntax Description: \nw \n  specifies the width of the output field. If necessary, SAS abbreviates the day of the week \n  to fit the format width.\n\n  Default: 10 \n  Range: 4-200 \n\nComparisons: \nNLDATEWNw. is similar to DOWNAMEw. except that NLDATEWNw. is locale-specific."}},{"Name":"NLDATEYMw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the SAS date value to the date value of the specified locale, and then writes \nthe date value as the year and the name of the month. \n\nSyntax Description: \nw \n  specifies the width of the output field.\n\n  Default: 16 \n  Range: 6-200"}},{"Name":"NLDATEYQw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the SAS date value to the date value of the specified locale, and then writes \nthe date value as the year and the quarter. \n\nSyntax Description: \nw \n  specifies the width of the output field.\n\n  Default: 16 \n  Range: 4-200"}},{"Name":"NLDATEYRw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the SAS date value to the date value of the specified locale, and then writes \nthe date value as the year. \n\nSyntax Description: \nw \n  specifies the width of the output field.\n\n  Default: 16 \n  Range: 2-200"}},{"Name":"NLDATEYWw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the SAS date value to the date value of the specified locale, and then writes \nthe date value as the year and the week. \n\nSyntax Description: \nw \n  specifies the width of the output field.\n\n  Default: 16 \n  Range: 5-200"}},{"Name":"NLDATMw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts a SAS datetime value to the datetime value of the specified locale, and then \nwrites the value as a datetime. \n\nSyntax Description: \nw \n  specifies the width of the output field. If necessary, SAS abbreviates the datetime value to fit \n  the format width.\n\n  Default: 30 \n  Range: 10-200 \n\nComparisons: \nThe NLDATMw. format is similar to the DATETIMEw. format except that the NLDATMw. format is locale-specific."}},{"Name":"NLDATMAPw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts a SAS datetime value to the datetime value of the specified locale, and \nthen writes the value as a datetime with a.m. or p.m. \n\nSyntax Description: \nw \n  specifies the width of the output field. If necessary, SAS abbreviates the date-time value\n  to fit the format width.\n\n  Default: 32 \n  Range: 16-200 \n\nComparisons:\nThe NLDATMAPw. format is similar to DATEAMPMw. except that the NLDATMAPw. format is locale-specific."}},{"Name":"NLDATMDTw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the SAS datetime value to the datetime value of the specified locale, \nand then writes the value as the name of the month, day of the month and year. \n\nSyntax Description:\n\nw \n  specifies the width of the output field\n\n  Default: 20 \n  Range: 10-200"}},{"Name":"NLDATMMDw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the SAS datetime value to the datetime value of the specified locale, \nand then writes the value as the name of the month and the day of the month. \n\nSyntax Description: \n\nw \n  specifies the width of the output field.\n\n  Default: 16 \n  Range: 6-200"}},{"Name":"NLDATMMNw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the SAS datetime value to the datetime value of the specified locale, \nand then writes the value as the name of the month. \n\nSyntax Description: \n\nw \n  specifies the width of the output field.\n\n  Default: 10 \n  Range: 4-200"}},{"Name":"NLDATMTMw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the time portion of a SAS datetime value to the time-of-day value of \nthe specified locale, and then writes the value as a time of day. \n\nSyntax Description: \nw \n  specifies the width of the output field.\n\n  Default: 16 \n  Range: 16-200 \n  \nComparisons:\nThe NLDATMTMw. format is similar to the TODw. format except that the NLDATMTMw. format \nis locale-specific."}},{"Name":"NLDATMWNw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts a SAS datetime value to the datetime value of the specified locale, \nand then writes the value as the day of the week. \n\nSyntax Description: \n\nw \n  specifies the width of the output field.\n\n  Default:  30 \n  Range:  16-200"}},{"Name":"NLDATMWw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts SAS datetime values to the locale sensitive datetime string as the \nday of the week and the datetime. \n\nSyntax Description: \nw \n  specifies the width of the output field. If necessary, SAS abbreviates the day of week \n  and datetime to fit the format width.\n\n  Default: 30 \n  Range: 16-200 \n \nComparisons: \nThe NLDATMWw. format is similar to the TWMDYw. format except that the NLDATMWw. format \nis locale-specific."}},{"Name":"NLDATMYMw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the SAS datetime value to the datetime value of the specified locale, \nand then writes the value as the year and the name of the month. \n\nSyntax Description: \n\nw \n  specifies the width of the output field.\n\n  Default: 16 \n  Range: 6-200"}},{"Name":"NLDATMYQw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the SAS datetime value to the datetime value of the specified locale, \nand then writes the value as the year and the quarter of the year. \n\nSyntax Description: \n\nw \n  specifies the width of the output field.\n\n  Default: 16 \n  Range: 4-200"}},{"Name":"NLDATMYRw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the SAS datetime value to the datetime value of the specified locale, \nand then writes the value as the year. \n\nSyntax Description: \n\nw \n  specifies the width of the output field.\n\n  Default: 16 \n  Range: 2-200"}},{"Name":"NLDATMYWw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts the SAS datetime value to the datetime value of the specified locale, \nand then writes the value as the year and the name of the week. \n\nSyntax Description: \n\nw \n  specifies the width of the output field.\n\n  Default: 16 \n  Range: 5-200"}},{"Name":"NLTIMEw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts a SAS time value to the time value of the specified locale, and then \nwrites the value as a time value. \n\nSyntax Description: \nw \n  specifies the width of the input field.\n\n  Default: 20 \n  Range: 10-200 \n\nComparisons: \nThe NLTIMEw. format is similar to the TIMEw. format except that the NLTIMEw. format \nis locale-specific."}},{"Name":"NLTIMAPw.","Type":"SAS_FORMATS","Help":{"#cdata":"Converts a SAS time value to the time value of a specified locale, and then \nwrites the value as a time value with a.m. or p.m. \n\nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 10 \n  Range: 4-200 \n  \nComparisons:\nThe NLTIMAPw. format is similar to the TIMEAMPMw. format except that the NLTIMAPw. format \nis locale-specific."}},{"Name":"NLBESTw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes the best numerical notation based on the locale. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 12 \n  Tip: If you print numbers between 0 and .01 exclusively, then use a field width \n  of at least 7 to avoid excessive rounding. If you print numbers between 0 and -.01 \n  exclusively, then use a field width of at least 8. \n  Range: 1-32 \n \nDetails: \nThe NLBEST format writes the best numerical value based on the locale's decimal point \nand the sign mark's location. NLBEST is similar to the BEST format."}},{"Name":"NLMNYw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes the monetary format of the local expression in the specified locale \nusing local currency. \n\nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 9 \n  Range: 1-32 \nd \n  specifies the number of digits to the right of the decimal point in the numeric value. \n  Default: 0 \n  Range: 0-31 \n \nDetails:\nThe NLMNYw.d format reads integer binary (fixed-point) values, including negative values \nthat are represented in two's-complement notation. The NLMNYw.d format writes numeric values \nby using the currency symbol, the thousands separator, and the decimal separator that is used \nby the locale.\n\nNote: The NLMNYw.d format does not convert currency format, therefore, the value of the \nformatted number should equal the currency of the current locale value.  \n \nComparisons:\nThe NLMNYw.d and NLMNYIw.d formats write the monetary format with locale-dependent thousands \nand decimal separators. However, the NLMNYIw.d format uses three-letter international currency \ncodes, such as USD, while NLMNYw.d format uses local currency symbols, such as $.\n\nThe NLMNYw.d format is similar to the DOLLARw.d format except that the NLMNYw.d format \nis locale-specific."}},{"Name":"NLMNYIw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes the monetary format of the international expression in the \nspecified locale. \n\nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 9 \n  Range: 1-32 \nd \n  specifies the number of digits to the right of the decimal point in the numeric value. \n  Default: 0 \n  Range: 0-31 \n  \nDetails:\nThe NLMNYIw.d format reads integer binary (fixed-point) values, including negative values \nthat are represented in two's-complement notation. The NLMNYIw.d format writes numeric values \nby using the international currency code, and locale-dependent thousands and decimal separators. \nThe position of international currency code is also locale dependent. \n\nNote: The NLMNYIw.d format does not convert currency format, therefore, the value of the \nformatted number should equal the currency of the current locale value.  \n \nComparisons: \nThe NLMNYw.d and NLMNYIw.d formats write the monetary format with locale-dependent thousands \nand decimal separators. However, the NLMNYIw.d format uses three-letter international currency \ncodes, such as USD, while NLMNYw.d format uses local currency symbols, such as $."}},{"Name":"NLNUMw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes the numeric format of the local expression in the specified locale. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 6 \n  Range: 1-32 \nd \n  specifies to divide the number by 10^d. If the data contains decimal separators, the \n  d value is ignored.\n  Default: 0 \n  Range: 0-31 \n  \nDetails:\nThe NLMUMw.d format reads integer binary (fixed-point) values, including negative values that \nare represented in two's-complement notation. The NLNUMw.d format writes numeric values by using \nthe thousands separator and the decimal separator that is used by the locale. \n \nComparisons:\nThe NLNUMw.d format writes the numeric value with locale-dependent thousand and decimal separators. \nThe NLNUMIw.d format writes the numeric value with a comma (,) as thousand separator and a period (.) \nas a decimal separator\n\nIf the w or d values are not large enough to generate a formatted number, the NLNUMw.d format uses \nan algorithm that prints the thousands-separator characters whenever possible, even if some decimal \nprecision is lost."}},{"Name":"NLNUMIw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes the numeric format of the international expression in the specified locale. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 6 \n  Range: 1-32 \nd \n  specifies to divide the number by 10^d. If the data contains decimal separators, the \n  d value is ignored.\n  Default: 0 \n  Range: 0-31 \n  \nDetails:\nThe NLMUMIw.d format reads integer binary (fixed-point) values, including negative values \nthat are represented in two's-complement notation. The NLNUMIw.d format writes numeric values \nby using a comma (,) as thousands separator and a period (.) as a decimal separator for all locales.\n \nComparisons:\nThe NLNUMIw.d format writes the numeric data of the international expression in the specified \nlocale. The NLNUMIw.d format writes the numeric value with a comma (,) as thousand separator \nand a period (.) as a decimal separator.\n\nIf the w or d values are not large enough to generate a formatted number, the NLNUMw.d format \nuses an algorithm that prints the thousands-separator characters whenever possible, even if \nsome decimal precision is lost."}},{"Name":"NLPCTw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes percentage data of the local expression in the specified locale. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 6 \n  Range: 4-32 \nd \n  specifies to divide the number by 10^d. If the data contains decimal separators, the \n  d value is ignored.\n  Default: 0 \n  Range: 0-31 \n  \nComparisons:\nThe NLPCTw.d format writes percentage data of the local expression in the specified locale. \nThe NLPCTw.d format writes the percentage value with locale-dependent thousand and decimal \nseparators. The NLPCTIw.d format writes the percentage value with a comma (,) as thousand \nseparator and a period (.) as a decimal separator.\n\nThe NLPCTw.d format is similar to the PERCENTw.d format except the NLPCTw.d format \nis locale-specific."}},{"Name":"NLPCTIw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes percentage data of the international expression in the specified locale. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 6 \n  Range: 4-32 \nd \n  specifies to divide the number by 10^d. If the data contains decimal separators, the \n  d value is ignored.\n  Default: 0 \n  Range: 0-31 \n  \nComparisons:\nThe NLPCTIw.d format writes percentage data of the international expression in the specified \nlocale. The NLPCTw.d format writes the percentage value with locale-dependent thousand and \ndecimal separators. The NLPCTIw.d format writes the percentage value with a comma (,) as \nthousand separator and a period (.) as a decimal separator.\n\nThe NLPCTw.d format is similar to the PERCENTw.d format except the NLPCTw.d format \nis locale-specific."}},{"Name":"NLPCTNw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Produces percentages, using a minus sign for negative values.\n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 6 \n  Range: 4-32 \n  Tip: The width of the output field must account for the minus sign ( - ), the percent \n  sign ( % ), and a trailing blank, whether the number is negative or positive. \nd \n  specifies the number of digits to the right of the decimal point in the numeric value. \n  This argument is optional.\n  Range: 0-31 \n  Requirement: must be less than w\n \nDetails:\nThe NLPCTNw.d format multiplies negative values by 100, adds a minus sign to the beginning \nof the value, and adds a percent sign (%) to the end of the formatted value."}},{"Name":"NLPCTPw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes locale-specific numeric values as percentages. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default 6 \n  Range 4-32 \n  Tip: The width of the output field must account for the percent sign (% ). \nd \n  specifies the number of digits to the right of the decimal point in the numeric value. \n  This argument is optional. The thousand separator and decimal symbol for the NLPCTP \n  format is locale-specific.\n\n  Range: 0-31 \n  Requirement: must be less than w \n \nDetails:\nThe NLPCTPw.d format multiplies values by 100, formats them, and adds a percent sign (%) \nto the end of the formatted value. The NLPCTPw.d format is similar to the The PERCENTw.d \nformat except that the thousand separator and decimal symbol for the NLPCTPw.d format is \nlocale-specific."}},{"Name":"NLPVALUEw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes p-values of the local expression in the specified locale. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 6 \n  Range: 3-32 \nd \n  specifies to divide the number by 10^d. If the data contains decimal separators, the \n  d value is ignored.\n  Default: 4 \n  Range: 1-30"}},{"Name":"NLSTRMONw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a numeric value as a day-of-the-month in the specified locale. \n    \nSyntax Description: \nw \n  specifies the width of the output field \n  Default: 20 \n  Range: 200-1 \nd \n  specifies the following: \n    00000001: write abbreviated form.  \n    00000010: write capitalized form. \n  Default: 0 \n  Range: 0-3 \n \nDetails: \nThe NLSTRMONw.d format writes a SAS value, 1-12 as the name-of-the-month in the specified locale. \nThe following examples use the English_UnitedStates locale. \n\n   1 = the first month (January)  \n   2 = the second month (February)  \n   3 = the third month (March)  \n   4 = the fourth month (April)  \n   5 = the fifth month (May)  \n   6 = the sixth month (June)  \n   7 = the seventh month (July)  \n   8 = the eight month (August)  \n   9 = the ninth month (September)  \n   10 = the tenth month (October)  \n   11 = the eleventh month (November)  \n   12 = the twelfth month (December)"}},{"Name":"NLSTRQTRw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a numeric value as the quarter-of-the-year in the specified locale. \n    \nSyntax Description: \nw \n  specifies the width of the output field \n  Default: 20 \n  Range: 1-200\nd \n  specifies the following: \n    00000001: write abbreviated form.  \n    00000010: write capitalized form. \n  Default: 0 \n  Range: 0-3 \n  \nDetails:\nThe NLSTRQTRw.d format writes a SAS value, 1-4 as the name-of-the-quarter for the year \nin the specified locale. The following examples use the English_UnitedStates locale. \n\n  1 = 1st quarter  \n  2 = 2nd quarter  \n  3 = 3rd quarter  \n  4 = 4th quarter"}},{"Name":"NLSTRWKw.d","Type":"SAS_FORMATS","Help":{"#cdata":"Writes a numeric value as the day-of-the-week in the specified locale. \n    \nSyntax Description: \nw \n  specifies the width of the output field \n  Default: 20 \n  Range: 1-200\nd \n  specifies the following: \n    00000001: write abbreviated form.  \n    00000010: write capitalized form. \n  Default: 0 \n  Range: 0-3 \n  \nDetails:\nThe NLSTRQTRw.d format writes a SAS value, 1-7 as the name-of-the-week in the specified locale. \nThe following examples use the English_UnitedStates locale. \n\n  1 = First day-of-week (Monday)  \n  2 = Second day-of-week (Tuesday)  \n  3 = Third day-of-week (Wednesday)  \n  4 = Fourth day-of-week (Thursday)  \n  5 = Fifth day-of-week (Friday)  \n  6 = Sixth day-of-week (Saturday)  \n  7 = Seventh day-of-week (Sunday)"}},{"Name":"B8601DXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Adjusts a Coordinated Universal Time (UTC) datetime value to the user local date and time. \nThen, writes the local date and time by using the ISO 8601 datetime and time zone basic \nnotation yyyymmddThhmmss+hhmm.\n    \nSyntax Description:\n    \nw\nspecifies the width of the output field.\n\nDefault: 26\nRange: 20\u201335\n\nDetails:\nUTC values specify a date and a time that are based on the zero meridian in Greenwich, England. \nUsing this format, SAS converts a datetime value to the UTC value and determines the user local \ndate and time by using the value of the TIMEZONE= system option. If the TIMEZONE= option is not \nset, then the user local date and time are based on the local date and time. The B8601DX format \nwrites SAS datetime values by using the following ISO 8601 basic datetime notation:\n\n\u2022yyyymmddThhmmss+hhmm\n\nyyyy\nis a four-digit year.\nmm\nis a two-digit month (zero padded) between 01 and 12.\ndd\nis a two-digit day of the month (zero padded) between 01 and 31.\nhh\nis a two-digit hour (zero padded) between 00 and 23.\nmm\nis a two-digit minute (zero padded) between 00 and 59.\nss\nis a two-digit second (zero padded) between 00 and 59.\n+|\u2013hhmm\nis an hour and minute signed offset from zero meridian time. The offset must be +|\u2013hhmm \n(that is, + or \u2013 and four characters).\nUse + for time zones east of the zero meridian, and use \u2013 for time zones west of the zero \nmeridian. For example, +0200 indicates a two-hour time difference to the east of the zero \nmeridian, and \u20130600 indicates a six-hour time difference to the west of the zero meridian. \n\nRestriction: The shorter form +|\u2013hh is not supported."}},{"Name":"B8601LXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes datetime values as local time by appending a time zone offset difference between the \nlocal time and UTC, using the ISO 8601 basic notation yyyymmddThhmmss+|\u2013hhmm.\n    \nSyntax Description:\nw specifies the width of the output field.\nDefault: 26\nRange: 20\u201335\nDetails:\nThe B8601LX format writes datetime values without making any adjustments, and appends the UTC time \nzone offset for the local SAS session by using the ISO 8601 basic datetime notation:\n\n\u2022yyyymmddThhmmss+|\u2013hhmm\n\nyyyy is a four-digit year.\nmm is a two-digit month (zero padded) between 01 and 12.\ndd is a two-digit day of the month (zero padded) between 01 and 31.\nhh is a two-digit hour (zero padded) between 00 and 23. \nmm is a two-digit minute (zero padded) between 00 and 59. \nss is a two-digit second (zero padded) between 00 and 59.\n+|\u2013hhmm\nis an hour and minute signed offset from zero meridian time. The offset must be +|\u2013hhmm \n(that is, + or \u2013 and four characters).\n\nUse + for time zones east of the zero meridian, and use \u2013 for time zones west of the zero meridian. \nFor example, +0200 indicates a two-hour time difference to the east of the zero meridian, and \u20130600 \nindicates a six-hour time difference to the west of the zero meridian. \n\nRestriction: The shorter form +|\u2013hh is not supported."}},{"Name":"B8601TXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Adjusts a Coordinated Universal Time (UTC) value to the user local time. Then, writes the local \ntime by using the ISO 8601 basic time notation hhmmss+|-hhmm. \n    \nSyntax Description:\nw specifies the width of the output field.\nDefault: 14\nRange: 9\u201320\nDetails:\nUTC values specify a time based on the zero meridian in Greenwich, England. Using this format, \nSAS converts a time value to the UTC value and determines the user local time by using the TIMEZONE= \nsystem option. If the TIMEZONE= option is not set, then the user local time is based on the local \ntime. The B8601TX format writes SAS datetime values by using the following ISO 8601 basic time notation:\n\n\u2022hhmmss+|\u2013hhmm\n\nhh is a two-digit hour (zero padded) between 00 and 23. \nmm is a two-digit minute (zero padded) between 00 and 59.\nss is a two-digit second (zero padded) between 00 and 59.\n+|\u2013hh:mm\nis an hour and minute signed offset from zero meridian time. The offset must be +|\u2013hhmm (that is, \n+ or \u2013 and four characters).\n\nUse + for time zones east of the zero meridian, and use \u2013 for time zones west of the zero meridian. \nFor example, +0200 indicates a two-hour time difference to the east of the zero meridian, and \u20130600 \nindicates a six-hour time difference to the west of the zero meridian. \n\nRestriction: The shorter form +|\u2013hh is not supported."}},{"Name":"E8601DXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Adjusts a Coordinated Universal Time (UTC) datetime value to the user local date and time. Then, writes \nthe local date and time by using the ISO 8601 datetime and time zone basic notation yyyy-mm-ddThh:mm:ss+hh:mm. \n\nSyntax Description:\nw specifies the width of the output field.\nDefault: 26\nRange: 20\u201335\nDetails:\nUTC values specify a date and time that are based on the zero meridian in Greenwich, England. \nUsing this format, SAS converts a datetime value to the UTC value and determines the user local \ndate and time by using the value of the TIMEZONE= system option. If the TIMEZONE= option is not \nset, the user local date and time are based on the local date and time. The E8601DX format writes \nSAS datetime values by using the following ISO 8601 basic datetime notation:\n\n\u2022yyyy-mm-ddThh:mm:ss+hh:mm \n\nyyyy is a four-digit year. \nmm is a two-digit month (zero padded) between 01 and 12. \ndd is a two-digit day of the month (zero padded) between 01 and 31. \nhh\nis a two-digit hour (zero padded) between 00 and 23.mm\nis a two-digit minute (zero padded) between 00 and 59.ss\nis a two-digit second (zero padded) between 00 and 59.\n+|\u2013hh:mm is an hour and minute signed offset from zero meridian time. The offset must be +|\u2013hh:mm \n(that is, + or \u2013 and four characters). Use + for time zones east of the zero meridian, and use \u2013 for \ntime zones west of the zero meridian. For example, +02:00 indicates a two-hour time difference to \nthe east of the zero meridian, and \u201306:00 indicates a six-hour time difference to the west of the \nzero meridian. \n\nRestriction: The shorter form +|\u2013hh is not supported."}},{"Name":"E8601LXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Writes datetime values as local time by appending a time zone offset difference between the local \ntime and UTC, using the ISO 8601 basic notation yyyy-mm-ddThh:mm:ss+|\u2013hh:mm. \n\nSyntax Description:\nw specifies the width of the output field.\nDefault: 26\nRange: 20\u201335\nDetails:\nThe E8601LX format writes datetime values without making any adjustments, and appends the UTC time \nzone offset for the local SAS session by using the ISO 8601 basic datetime notation:\n\n\u2022yyyy-mm-ddThh:mm:ss+hh:mm\n\nyyyy is a four-digit year. \nmm is a two-digit month (zero padded) between 01 and 12. \ndd is a two-digit day of the month (zero padded) between 01 and 31. \nhh is a two-digit hour (zero padded) between 00 and 23. \nmm is a two-digit minute (zero padded) between 00 and 59. \nss is a two-digit second (zero padded) between 00 and 59.\n+|\u2013hh:mm is an hour and minute signed offset from zero meridian time. The offset must be +|\u2013hh:mm \n(that is, + or \u2013 and four characters).\nUse + for time zones east of the zero meridian, and use \u2013 for time zones west of the zero meridian. \nFor example, +02:00 indicates a two-hour time difference to the east of the zero meridian, and \u201306:00 \nindicates a six-hour time difference to the west of the zero meridian. \n\nRestriction: The shorter form +|\u2013hh is not supported."}},{"Name":"E8601TXw.","Type":"SAS_FORMATS","Help":{"#cdata":"Adjusts a Coordinated Universal Time (UTC) value to the user local time. Then, writes the local time \nby using the ISO 8601 basic time notation hhmmss+|\u2013hhmm. \n\nSyntax Description:\nw specifies the width of the output field.\nDefault: 14\nRange: 9\u201320 \n\nDetails:\nUTC values specify a time based on the zero meridian in Greenwich, England. Using this format, SAS \nconverts a time value to the UTC value and determines the user local time by using the value of the \nTIMEZONE= system option. If the TIMEZONE= option is not set, the user local time is based on the \nlocal time. The E8601TX format writes SAS datetime values by using the following ISO 8601 basic \ntime notation: \u2022hhmmss+|\u2013hhmm \n\nhh is a two-digit hour (zero padded) between 00 and 23. \nmm is a two-digit minute (zero padded) between 00 and 59. \nss is a two-digit second (zero padded) between 00 and 59.\n+|\u2013hh:mm is an hour and minute signed offset from zero meridian time. The offset must be +|\u2013hhmm \n(that is, + or \u2013 and four characters). Use + for time zones east of the zero meridian, and use \u2013 for \ntime zones west of the zero meridian. For example, +0200 indicates a two-hour time difference to the \neast of the zero meridian, and \u20130600 indicates a six-hour time difference to the west of the zero meridian. \n\nRestriction: The shorter form +|-hh is not supported."}}],"#comment":[{},{}]}}