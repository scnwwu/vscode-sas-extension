{"Keywords":{"Keyword":[{"Name":"$LOGVSw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is in left-to-right logical order and then converts \nthe character string to visual order. \n\nw \n  specifies the width of the input field.\n\n  Default: 200 \n  Range: 1-32000 \n \nComparisons:\nThe $LOGVSw. informat performs processing that is opposite to the LOGVSRw. informat."}},{"Name":"$LOGVSRw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is in right-to-left logical order and then converts \nthe character string to visual order. \n\nSyntax Description:\n\nw \n  specifies the width of the input field.\n\n  Default: 200 \n  Range: 1-32000 \n \nComparisons: \nThe $LOGVSRw. informat performs processing that is opposite to the $LOGVSw. informat."}},{"Name":"$VSLOGw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is in visual order and then converts the character \nstring to left-to-right logical order. \n\nSyntax Description\n\nw \n  specifies the width of the input field.\n\n  Default: 200 \n  Range: 1-32000 \n \nComparisons:\nThe $VSLOGw. informat performs processing that is opposite of the $VSLOGRw. informat."}},{"Name":"$VSLOGRw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is in visual order and then converts the character \nstring to right-to-left logical order. \n\nSyntax Description: \n\nw \n  specifies the width of the input field.\n\n  Default: 200 \n  Range: 1-32000 \n  \nComparisons:\nThe $VSLOGRw. informat performs processing that is opposite of the $VSLOGw. informat."}},{"Name":"$ASCIIw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Converts ASCII character data to native format. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 1 if the length of the variable is undefined; otherwise, the length of the variable \n  Range: 1-32767 \n \nDetails:\nIf ASCII is the native format, no conversion occurs.\n \nComparisons:\no On an IBM mainframe system, $ASCIIw. converts ASCII data to EBCDIC.\n\no On all other systems, $ASCIIw. behaves like the $CHARw. informat except that the \ndefault length is different.\n\n"}},{"Name":"$BINARYw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Converts binary data to character data. \n    \nSyntax Description: \nw \n  specifies the width of the input field. Because eight bits of binary information represent \n  one character, every eight characters of input that $BINARYw. reads becomes one character \n  value stored in a variable.\n\n  If w< 8, $BINARYw. reads the data as w characters followed by 0s. Thus, $BINARY4. reads the \n  characters 0101 as 01010000, which converts to an EBCDIC & or an ASCII P. If w> 8 but is not \n  a multiple of 8, $BINARYw. reads up to the largest multiple of 8 that is less than w before \n  converting the data.\n\n  Default: 8 \n  Range: 1-32767 \n \nDetails:\nThe $BINARYw. informat does not interpret actual binary data, but it converts a string of \ncharacters that contains only 0s or 1s as if it is actual binary information. Therefore, \nuse only the character digits 1 and 0 in the input, with no embedded blanks. $BINARYw. \nignores leading and trailing blanks.\n\nTo read representations of binary codes for unprintable characters, enter an ASCII or \nEBCDIC equivalent for a particular character as a string of 0s and 1s. The $BINARYw. informat \nconverts the string to its equivalent character value.\n\nComparisons:\nThe BINARYw. informat reads eight characters of input that contain only 0s or 1s as a binary \nrepresentation of one byte of numeric data.\n\nThe $HEXw. informat reads hexadecimal characters that represent the ASCII or EBCDIC equivalent \nof character data."}},{"Name":"$CHARw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads character data with blanks. \n    \nSyntax Description:\nw \n  specifies the width of the input field.\n\n  Default: 8 if the length of the variable is undefined; otherwise, the length of the variable \n  Range: 1-32767 \n \nDetails: \nThe $CHARw. informat does not trim leading and trailing blanks or convert a single period \nin the input data field to a blank before storing values. If you use $CHARw. in an INFORMAT \nor ATTRIB statement within a DATA step to read list input, then by default SAS interprets \nany blank embedded within data as a field delimiter, including leading blanks.\n \nComparisons:\nThe $CHARw. informat is almost identical to the $w. informat. However $CHARw. does not trim \nleading blanks or convert a single period in the input data field to a blank, while the \n$w. informat does."}},{"Name":"$CHARZBw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Converts binary 0s to blanks. \n    \nSyntax Description: \nw \n  specifies the width of the input field.\n\n  Default: 1 if the length of the variable is undefined; otherwise, the length of the variable \n  Range: 1-32767 \n \nDetails:\nThe $CHARZBw. informat does not trim leading and trailing blanks in character data before \nit stores values.\n \nComparisons:\nThe $CHARZBw. informat is identical to the $CHARw. informat except that $CHARZBw. converts \nany byte that contains a binary 0 to a blank character."}},{"Name":"$EBCDICw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Converts EBCDIC character data to native format. \n    \nSyntax Description: \nw \n  specifies the width of the input field.\n  Default: 1 if the length of the variable is undefined; otherwise, the length of the variable \n  Range: 1-32767 \n \nDetails:\nIf EBCDIC is the native format, no conversion occurs.\n\nNote: Any time a text file originates from anywhere other than the local encoding environment, \nit might be necessary to specify the ENCODING= option on either ASCII or EBCDIC environments.\n\nWhen you read an EBCDIC text file on an ASCII platform, it is recommended that you specify the \nENCODING= option in the FILENAME or INFILE statement. However, if you use the DSD and the DLM= \nor DLMSTR= options in the FILENAME or INFILE statement, the ENCODING= option is a requirement \nbecause these options require certain characters in the session encoding (such as quotation \nmarks, commas, and blanks).\n\nThe use of encoding-specific informats should be reserved for use with true binary files; \nthat is, they contain both character and non-character fields. \n \nComparisons:\no On an IBM mainframe system, $EBCDICw. behaves like the $CHARw. informat.\no On all other systems, $EBCDICw. converts EBCDIC data to ASCII."}},{"Name":"$HEXw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Converts hexadecimal data to character data. \n    \nSyntax Description: \nw \n  specifies the number of digits of hexadecimal data.\n\n  If w=1, $HEXw. pads a trailing hexadecimal 0. If w is an odd number that is greater than 1, \n  then $HEXw. reads w-1 hexadecimal characters.\n  Default: 2 \n  Range: 1-32767 \n \nDetails: \nThe $HEXw. informat converts every two digits of hexadecimal data into one byte of character \ndata. Use $HEXw. to encode hexadecimal values into a character variable when your input method \nis limited to printable characters. \n\nComparisons: \nThe HEXw. informat reads two digits of hexadecimal data at a time and converts them into \none byte of numeric data."}},{"Name":"$OCTALw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Converts octal data to character data. \n    \nSyntax Description: \nw \n  specifies the width of the input field in bits. Because one digit of octal data represents \n  three bits of binary information, increment the value of w by three for every column of octal \n  data that $OCTALw. will read.\n\n  Default: 3 \n  Range: 1-32767 \n \nDetails:\nEight bits of binary data represent the code for one digit of character data. Therefore, \nyou need at least three digits of octal data to represent one digit of character data, \nwhich includes an extra bit. $OCTALw. treats every three digits of octal data as one digit \nof character data, ignoring the extra bit.\n\nUse $OCTALw. to read octal representations of binary codes for unprintable characters. \nEnter an ASCII or EBCDIC equivalent for a particular character in octal notation. Then \nuse $OCTALw. to convert it to its equivalent character value.\n\nUse only the digits 0 through 7 in the input, with no embedded blanks. $OCTALw. ignores \nleading and trailing blanks.\n \nComparisons:\nThe OCTALw. informat reads octal data and converts them into the numeric equivalents."}},{"Name":"$PHEXw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Converts packed hexadecimal data to character data. \n    \nSyntax Description: \nw \n  specifies the number of bytes in the input.\n  When you use $PHEXw. to read packed hexadecimal data, the length of the variable is the \n  number of bytes that are required to store the resulting character value, not w. In general, \n  a character variable whose length is implicitly defined with $PHEXw. has a length of 2w-1.\n\n  Default: 2 \n  Range: 1-32767 \n \nDetails:\nPacked hexadecimal data are like packed decimal data, except that all hexadecimal characters \nare valid. In packed hexadecimal data, the value of the low-order nibble has no meaning. In \npacked decimal data, the value of the low-order nibble indicates the sign of the numeric value \nthat the data represent. The $PHEXw. informat returns a character value and treats the value \nof the sign nibble as if it were X'F', regardless of its actual value.\n \nComparisons: \nThe PDw.d. informat reads packed decimal data and converts them to numeric data."}},{"Name":"$QUOTEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Removes matching quotation marks from character data. \n    \nSyntax Description:\n\nw \n  specifies the width of the input field.\n\n  Default: 8 if the length of the variable is undefined; otherwise, the length of the variable \n  Range: 1-32767"}},{"Name":"$REVERJw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads character data from right to left and preserves blanks. \n    \nSyntax Description: \n\nw \n  specifies the width of the input field.\n\n  Default: 1 if w is not specified  \n  Range: 1-32767 \n\nComparisons: \nThe $REVERJw. informat is similar to the $REVERSw. informat except that $REVERSw. informat \nleft aligns the result by removing all leading blanks."}},{"Name":"$REVERSw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads character data from right to left and left, and then left aligns the text. \n    \nSyntax Description: \n\nw \n  specifies the width of the input field.\n\n  Default: 1 if w is not specified  \n  Range: 1-32767 \n \nComparisons:\nThe $REVERSw. informat is similar to the $REVERJw. informat except that $REVERJw. informat \npreserves all leading and trailing blanks."}},{"Name":"$UCS2Bw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is encoded in big-endian, 16-bit, universal character \nset code in 2 octets (UCS2), Unicode encoding, and then converts the character string \nto the encoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the input field. Specify enough width to accommodate the \n  16-bit size of the Unicode characters.\n\n  Default: 8 \n  Range: 2-32000 \n \nComparisons:\nThe $UCS2Bw. informat performs processing that is opposite of the $UCS2BEw. informat. If \nyou are processing data within the same operating environment, then use the $UCS2Xw. informat. \nIf you are processing data from different operating environments, then use the $UCS2Bw. and \n$UCS2Lw. informats."}},{"Name":"$UCS2BEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is in the encoding of the current SAS session and then \nconverts the character string to big-endian, 16-bit, universal character set code in \n2 octets (UCS2), Unicode encoding. \n\nSyntax Description: \nw \n  specifies the width of the input field. Specify enough width to accommodate the \n  16-bit size of the Unicode characters.\n\n  Default: 8 \n  Range: 1-32000 \n \nComparisons: \nThe $UCS2BEw. informat performs processing that is opposite of the $UCS2Bw. informat."}},{"Name":"$UCS2Lw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is encoded in little-endian, 16-bit, universal character \nset code in 2 octets (UCS2), Unicode encoding, and then converts the character string \nto the encoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the input field. Specify enough width to accommodate the \n  16-bit size of the Unicode characters.\n  \n  Default: 8 \n  Range: 2-32000 \n \nComparisons: \nThe $UCS2Lw. informat performs processing that is opposite of the $UCS2LEw. informat. \nIf you are processing data within the same operating environment, then use the $UCS2Xw. \ninformat. If you are processing data from different operating environments, then use \nthe $UCS2Bw. and $UCS2Lw. informats."}},{"Name":"$UCS2LEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is in the encoding of the current SAS session and then \nconverts the character string to little-endian, 16-bit, universal character set code \nin 2 octets (UCS2), Unicode encoding. \n\nSyntax Description: \nw \n  specifies the width of the input field. Specify enough width to accommodate the \n  16-bit size of the Unicode characters.\n\n  Default: 8 \n  Range: 1-32000 \n \nComparisons:\nThe $UCS2LEw. informat performs processing that is opposite of the $UCS2Lw. informat."}},{"Name":"$UCS2Xw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is encoded in 16-bit, universal character set code in \n2 octets (UCS2), Unicode encoding, and then converts the character string to the \nencoding of the current SAS session. \n\nSyntax Description: \n  w \n  specifies the width of the output field. Specify enough width to accommodate the \n  16-bit size of the Unicode characters.\n\n  Default: 8 \n  Range: 2-32000 \n \nComparisons: \nThe $UCS2Xw. informat performs processing that is the opposite of the $UCS2XEw. informat. \nIf you are processing data within the same operating environment, then use the $UCS2Xw. \ninformat. If you are processing data from different operating environments, then use the \n$UCS2Bw. and $UCS2Lw. informats."}},{"Name":"$UCS2XEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is in the encoding of the current SAS session and then \nconverts the character string to 16-bit, universal character set code in 2 octets \n(UCS2), Unicode encoding. \n\nSyntax Description: \n\n  w \n  specifies the width of the input field. Specify enough width to accommodate the \n  16-bit size of the Unicode characters.\n\n  Default: 8 \n  Range: 1-32000 \n \nComparisons:\nThe $UCS2XEw. informat performs processing that is opposite of the $UCS2Xw. informat."}},{"Name":"$UCS4Bw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is encoded in big-endian, 32-bit, universal character \nset code in 4 octets (UCS4), Unicode encoding, and then converts the character \nstring to the encoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the input field. Specify enough width to accommodate the \n  32-bit size of the Unicode characters.\n\n  Default: 4 \n  Range: 4-32000 \n \nComparison:\nIf you are processing data within the same operating environment, then use the $UCS4Xw. \ninformat. If you are processing data from different operating environments, then use the \n$UCS4Bw. and $UCS4Lw. informats."}},{"Name":"$UCS4Lw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is encoded in little-endian, 32-bit, universal character \nset code in 4 octets (UCS4), Unicode encoding, and then converts the character string \nto the encoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the input field. Specify enough width to accommodate the \n  32-bit size of the Unicode characters.\n\n  Default: 4 \n  Range: 4-32000 \n \nComparison: \nIf you are processing data within the same operating environment, then use the $UCS4Xw. \ninformat. If you are processing data from different operating environments, then use the \n$UCS4Bw. and $UCS4Lw. informats."}},{"Name":"$UCS4Xw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is encoded in 32-bit, universal character set code in \n4 octets (UCS4), Unicode encoding, and then converts the character string to the \nencoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the input field. Specify enough width to accommodate the \n  32-bit size of the Unicode characters.\n\n  Default: 4 \n  Range: 4-32000 \n \nComparisons: \nThe $UCS4Xw. informat performs processing that is the opposite of the $UCS4XEw. informat. \nUse the $UCS4Xw. informat when you are processing data within the same operating environment. \nUse the $UCS4Bw. and $UCS4Lw. informats when you are processing data from different operating \nenvironments."}},{"Name":"$UCS4XEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is in the encoding of the current SAS session and then \nconverts the character string to 32-bit, universal character set code in 4 octets \n(UCS4), Unicode encoding. \n\nSyntax Description\n\nw \n  specifies the width of the input field. Specify enough width to accommodate the \n  32-bit size of the Unicode characters.\n\n  Default: 8 \n  Range: 1-32000 \n \nComparisons: \nThe $UCS4XEw. informat performs processing that is the opposite of the $UCS4Xw. informat."}},{"Name":"$UESCw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is encoded in Unicode escape (UESC) representation, \nand then converts the character string to the encoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the output field.\n\n  Default: 8 \n  Range: 1-32000 \n  \nDetails: \nIf the characters are not available on all operating environments, for example, 0-9, a-z, \nA-Z, they must be represented in UESC representation. The $UESCw. informat can be nested.\n \nComparisons: \nThe $UESCw. informat performs processing that is the opposite of the $UESCEw. informat."}},{"Name":"$UESCEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is in the encoding of the current SAS session, and \nthen converts the character string to Unicode escape (UESC). \n\nSyntax Description: \nw \n  specifies the width of the input field.\n\n  Default: 8 \n  Range: 1-32000 \n \nDetails: \nThe $UESCEw. informat can be nested.\n \nComparisons:\nThe $UESCEw. informat performs processing that is opposite of the $UESCw. informat."}},{"Name":"$UNCRw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads the numeric character representation (NCR) character string, and then converts \nthe character string to the encoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the input field.\n\n  Default: 8 \n  Range: 1-32000 \n \nDetails: \nThe input string must contain only characters and NCR. Any national characters must \nbe represented in NCR.\n \nComparison: \nThe $UNCRw. informat performs processing that is opposite of the $UNCREw. informat."}},{"Name":"$UNCREw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string in the encoding of the current SAS session, and then converts \nthe character string to session-encoded NCR (numeric character representation). \n\nSyntax Description: \nw \n  specifies the width of the input field.\n\n  Default: 8 \n  Range: 1-32000 \n \nDetails:\nThe output string will be converted to plain characters and NCR. Any national characters \nwill be converted to NCR.\n \nComparison: \nThe $UNCREw. informat performs processing that is the opposite of the $UNCRw. informat."}},{"Name":"$UPARENw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is encoded in UPAREN (Unicode parenthesis) representation, \nand then converts the character string to the encoding of the current SAS session. \n\nSyntax Description: \nw \n  specifies the width of the input field.\n\n  Default: 8 \n  Range: 1-32000 \n  \nDetails:\nIf the SAS session encoding does not have a corresponding Unicode expression, the expression \nwill remain in encoding of the current SAS session.\n \nComparisons: \nThe $UPARENw. informat performs processing that is opposite of the $UPARENEw. informat."}},{"Name":"$UPARENEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is encoded in the current SAS session, and then converts \nthe character string to the encoding of the Unicode parenthesis (UPAREN) representation. \n\nSyntax Description: \nw \n  specifies the width of the input field.\n\n  Default: 8 \n  Range: 1-32000 \n \nComparisons:\nThe $UPARENEw. informat performs processing that is opposite of the $UPARENw. informat."}},{"Name":"$UPARENPw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is encoded in Unicode parenthesis (UPAREN) representation, \nand then converts the character string to the encoding of the current SAS session with \nnational characters remaining in the encoding of the UPAREN representation. \n\nSyntax Description: \nw \n  specifies the width of the input field.\n\n  Default: 8 \n  Range: 1-32000 \n \nDetails: \nIf the UPAREN expression contains a national character, whose value is greater than \nUnicode 0x00ff, the expression will remain as a UPAREN expression."}},{"Name":"$UPCASEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Converts character data to uppercase. \n    \nSyntax Description: \n\nw \n  specifies the width of the input field.\n\n  Default: 8 if the length of the variable is undefined; otherwise, the length of the variable \n  Range: 1-32767 \n \nDetails:\nSpecial characters, such as hyphens, are not altered."}},{"Name":"$UTF8Xw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is encoded in Unicode transformation format (UTF-8), \nand then converts the character string to the encoding of the current SAS session. \n\nSyntax Description: \n\nw \n  specifies the width of the input field.\n\n  Default: 8 \n  Range: 1-32000"}},{"Name":"$VARYINGw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads character data of varying length. \n    \nSyntax: $VARYINGw. length-variable  \n    \nSyntax Description: \nw \n  specifies the maximum width of a character field for all the records in an input file. \n  Default: 8 if the length of the variable is undefined; otherwise, the length of the variable \n  Range: 1-32767 \n\nlength-variable \n  specifies a numeric variable that contains the width of the character field in the current \n  record. SAS obtains the value of length-variable by reading it directly from a field that \n  is described in an INPUT statement or by calculating its value in the DATA step. \n\n  Requirement: You must specify length-variable immediately after $VARYINGw. in an INPUT statement.  \n  Restriction: Length-variable cannot be an array reference. \n  Tip: If the value of length-variable is 0, negative, or missing, SAS reads no data from the \n  corresponding record. A value of 0 for length-variable enables you to read zero-length records \n  and fields. If length-variable is greater than 0 but less than w, SAS reads the number of columns \n  that are specified by length-variable. Then SAS pads the value with trailing blanks up to the \n  maximum width that is assigned to the variable. If length-variable is greater than or equal to \n  w, SAS reads w columns. \n \nDetails:\nUse $VARYINGw. when the length of a character value differs from record to record. After reading \na data value with $VARYINGw., the pointer's position is set to the first column after the value."}},{"Name":"$w.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads standard character data. \n    \nSyntax Description: \nw \n  specifies the width of the input field. You must specify w because SAS does not supply a \n  default value.\n\n  Range: 1-32767 \n \nDetails:\nThe $w. informat trims leading blanks and left aligns the values before storing the text. \nIn addition, if a field contains only blanks and a single period, $w. converts the period \nto a blank because it interprets the period as a missing value. The $w. informat treats two \nor more periods in a field as character data.\n \nComparisons:\nThe $w. informat is almost identical to the $CHARw. informat. However, $CHARw. does not trim \nleading blanks nor does it convert a single period in an input field to a blank, while $w. does both."}},{"Name":"$CBw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads standard character data from column-binary files. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: none \n  Range: 1-32767 \n \nDetails:\nColumn-binary data storage compresses data so that more than 80 items of data can be \nstored on a single \"virtual\" punch card.\n\nThe $CBw. informat reads standard character data from column-binary files, with each card \ncolumn represented in two bytes. The $CBw. informat translates the data into standard character \ncodes. If the combinations are invalid punch codes, SAS returns blanks and sets the automatic \nvariable _ERROR_ to 1."}},{"Name":"CBw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads standard numeric values from column-binary files. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Range: 1-32 \n\nd \n  specifies the power of 10 by which to divide the value. SAS uses the d value even \n  if the data contain decimal points. This argument is optional.\n \nDetails:\nColumn-binary data storage compresses data so that more than 80 items of data can be \nstored on a single \"virtual\" punch card.\n\nThe CBw.d informat reads standard numeric values from column-binary files and translates \nthe data into standard binary format.\n\nSAS first stores each column of column-binary data you read with CBw.d in two bytes and \nignores the two high-order bits of each byte. If the punch codes are valid, then SAS stores \nthe equivalent numeric value in the variable that you specify. If the combinations are not \nvalid, then SAS assigns the variable a missing value and sets the automatic variable _ERROR_ to 1."}},{"Name":"PUNCH.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads whether a row of column-binary data is punched. \n    \nSyntax Description: \nd \n  specifies which row in a card column to read. \n  Range: 1-12 \n \nDetails:\nColumn-binary data storage compresses data so that more than 80 items of data can be \nstored on a single \"virtual\" punch card.\n\nThis informat assigns the value 1 to the variable if row d of the current card column \nis punched, or 0 if row d of the current card column is not punched. After PUNCH.d reads \na field, the pointer does not advance to the next column."}},{"Name":"ROWw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a column-binary field down a card column. \n    \nSyntax Description: \nw \n  specifies the row where the field begins. \n  Range: 0-12 \nd \n  specifies the length in rows of the field. \n  Default: 1 \n  Range: 1-25 \n  \nDetails:\nColumn-binary data storage compresses data so that more than 80 items of data can be stored \non a single \"virtual\" punch card.\n\nThe ROWw.d informat assigns the relative position of the punch in the field to a numeric variable.\n\nIf the field that you specify has more than one punch, then ROWw.d assigns the variable a missing \nvalue and sets the automatic variable _ERROR_ to 1. If the field has no punches, then ROWw.d \nassigns the variable a missing value.\n\nROWw.d can read fields across columns, continuing with row 12 of the new column and going down \nthrough the rest of the rows. After ROWw.d reads a field, the pointer moves to the next row."}},{"Name":"$KANJIw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Removes shift code data from DBCS data. \n    \nSyntax Description: \nw \n  specifies the width of the input field.\n\n  Restriction: The width must be an even number. If it is an odd number, it is truncated. \n  The width must be equal to or greater than the length of the shift-code data. \n  Range: The minimum width for the informat is 2. \n\nDetails: \nThe $KANJI informat removes shift-code data from DBCS data. The $KANJI informat processes \nhost-mainframe data. $KANJI can be used on other platforms. If you use the $KANJI informat \non non-EBCDIC (non-modal encoding) hosts, the data does not change.\n\nThe data must start with SO and end with SI, unless single-byte blank data are returned. \nThe input data length must be 2 + (SO/SI length)*2."}},{"Name":"$KANJIXw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Adds shift code data to DBCS data. \n    \nSyntax Description:\nw \n  specifies the width of the input field.\n\n  Restriction: The width must be an even number. If it is an odd number, it is truncated. \n  The width must be equal to or greater than the length of the shift-code data. \n  Range: The minimum width for the informat is 2 + (length of shift code used on the current \n  DBCSTYPE= setting)*2.  \n \nDetails: \nThe $KANJIX informat adds shift-code data to DBCS data that does not have shift-code data. \nIf the input data is blank, shift-code data is not added. The $KANJIX informat processes \nhost-mainframe data, but $KANJIX can be used on other platforms. If you use the $KANJIX informat \non non-EBCDIC (non-modal encoding) hosts, the data does not change."}},{"Name":"ANYDTDTEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads and extracts the date value from various date, time, and datetime forms. \n\nSyntax Description: \n\nw \n  specifies the width of the input field. \n  Default: 9 \n  Range: 5-32"}},{"Name":"ANYDTDTMw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads and extracts datetime values from various date, time, and datetime forms. \n\nSyntax Description: \n\nw \n  specifies the width of the input field.\n\n  Default: 19 \n  Range: 1-32"}},{"Name":"ANYDTTMEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads and extracts time values from various date, time, and datetime forms.\n    \nSyntax Description: \n\nw \n  specifies the width of the input field.\n  Default: 8 \n  Range: 1-32"}},{"Name":"DATEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads date values in the form ddmmmyy or ddmmmyyyy. \n    \nSyntax Description\n\nw \n  specifies the width of the input field. \n  Default: 7 \n  Range: 7-32 \n  Tip: Use a width of 9 to read a 4-digit year. \n \nDetails:\nThe date values must be in the form ddmmmyy or ddmmmyyyy, where \n\n  dd \n  is an integer from 01 through 31 that represents the day of the month.\n\n  mmm \n  is the first three letters of the month name.\n\n  yy or yyyy \n  is a two-digit or four-digit integer that represents the year. \n\nYou can separate the year, month, and day values by blanks or by special characters. Make \nsure the width of the input field allows space for blanks and special characters.\n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined \nby the YEARCUTOFF= system option."}},{"Name":"DATETIMEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads datetime values in the form ddmmmyy hh:mm:ss.ss or ddmmmyyyy hh:mm:ss.ss. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 18 \n  Range: 13-40 \n \nDetails:\nThe datetime values must be in the following form: ddmmmyy or ddmmmyyyy, followed by a blank \nor special character, followed by hh:mm:ss.ss (the time). In the date,\n\n  dd is an integer from 01 through 31 that represents the day of the month.\n  mmm is the first three letters of the month name.\n  yy or yyyy is a two-digit or four-digit integer that represents the year.\n  \nIn the time, \n  hh is the number of hours ranging from 00 through 23. \n  mm is the number of minutes ranging from 00 through 59.\n  ss.ss is the number of seconds ranging from 00 through 59 with the fraction of a second \n  following the decimal point.\n\nDATETIMEw. requires values for both the date and the time; however, the ss.ss portion is optional. \nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined \nby the YEARCUTOFF= system option.  \n\nNote: SAS can read time values with AM and PM in them.  \n \nComparisons:\nThe DATETIMEw.d informat reads datetime values with optional separators in the form \n  dd-mmm-yy<yy> hh:mm:ss.ss AM|PM \n  \nand the date and time can be separated by a special character."}},{"Name":"DDMMYYw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads date values in the form ddmmyy or ddmmyyyy. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 6 \n  Range: 6-32 \n \nDetails:\nThe date values must be in the form ddmmyy<yy> or ddxmmxyy<yy>, where \n\n  dd is an integer from 01 through 31 that represents the day of the month.\n\n  mm is an integer from 01 through 12 that represents the month.\n\n  yy or yyyy is a two-digit or four-digit integer that represents the year. \n\n  x is a separators that can be any special character or a blank.:\n\nIf you use separators, place them between all the values. Blanks can also be placed \nbefore and after the date. Make sure the width of the input field allows space for \nblanks and special characters.\n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is \ndefined by the YEARCUTOFF= system option."}},{"Name":"EURDFDEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads international date values. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 7 (except Finnish) \n  Range: 7-32 (except Finnish)  \n\n  Note: If you use the Finnish (FIN) language prefix, the w range is 10-32 and the default w is 10.  \n \nDetails: \nThe date values must be in the form ddmmmyy or ddmmmyyyy: \n\n  dd is an integer from 01-31 that represents the day of the month. \n  mmm is the first three letters of the month name. \n  yy or yyyy is a two-digit or four-digit integer that represents the year. \n\nYou can place blanks and other special characters between day, month, and year values.\n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined \nby the YEARCUTOFF= system option."}},{"Name":"EURDFDTw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads international datetime values in the form ddmmmyy hh:mm:ss.ss or ddmmmyyyy \nhh:mm:ss.ss. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 18  \n  Range: 13-40  \n \nDetails: \nThe date values must be in the form ddmmmyy or ddmmmyyyy, followed by a blank or special \ncharacter, and then the time values as hh:mm:ss.ss. The syntax for the date is represented \nas follows:\n\n  dd is an integer from 01-31 that represents the day of the month. \n  mmm is the first three letters of the month name.\n  yy or yyyy is a two-digit or four-digit integer that represents the year.\n\n  The syntax for time is represented as follows: \n    hh is the number of hours ranging from 00-23, \n    mm is the number of minutes ranging from 00-59, \n    ss.ss \n    is the number of seconds ranging from 00-59 with the fraction of a second following \n    the decimal point.\n\nThe EURDFDTw. informat requires values for both the date and the time; however, the ss.ss \nportion is optional. \n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined \nby the YEARCUTOFF= system option."}},{"Name":"EURDFMYw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads month and year date values in the form mmmyy or mmmyyyy. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 5 (except Finnish) \n  Range: 5-32 (except Finnish)  \n  Note:   If you use the Finnish (FIN) language prefix, the w range is 7-32 and \n  the default value for w is 7.  \n \nDetails:\nThe date values must be in the form mmmyy or mmmyyyy: \n\n  mmm \n  is the first three letters of the month name. \n  yy or yyyy \n  is a two-digit or four-digit integer that represents the year. \n\nYou can place blanks and other special characters between day, month, and year values. \nA value that is read with EURDFMYw. results in a SAS date value that corresponds to the \nfirst day of the specified month.\n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined \nby the YEARCUTOFF= system option."}},{"Name":"JDATEYMDw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads Japanese Kanji date values in the format yymmmdd or yyyymmmdd. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 12 \n  Range: 12-32 \n \nDetails:\nThe date values must be in the form yymmmdd or yyyymmmdd. \n\nYou can separate the year, month, and day values by blanks or by special characters. Note that \nin the example, the date values in the data lines are separated by special characters.\n\nWhen you use this informat, ensure that the width of the input field includes space for blanks \nand special characters.\n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined by \nthe YEARCUTOFF= system option."}},{"Name":"JNENGOw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads Japanese Kanji date values in the form yymmdd. \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 16 \n  Range: 16-32 \n  \nDetails: \nThe JNENGOw. informat reads Japanese kanji values in the form yymmdd.\n\nYou can separate the year, month, and day values by blanks or by special characters. Note \nthat in the example, the date values in the data lines are separated by special characters.\n\nWhen you use this informat, ensure that the width of the input field includes space for \nblanks and special characters. \n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined \nby the YEARCUTOFF= system option."}},{"Name":"JULIANw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads Julian dates in the form yyddd or yyyyddd. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 5 \n  Range: 5-32 \n \nDetails:\nThe date values must be in the form yyddd or yyyyddd, where\n\n  yy or yyyy \n  is a two-digit or four-digit integer that represents the year. \n\n  dd or ddd \n  is an integer from 01 through 365 that represents the day of the year.\n\nJulian dates consist of strings of contiguous numbers, which means that zeros must pad \nany space between the year and the day values. \n\nJulian dates that contain year values before 1582 are invalid for the conversion to Gregorian dates.\n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined \nby the YEARCUTOFF= system option."}},{"Name":"MINGUOw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads dates in Taiwanese form. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 6 \n  Range: 6-10 \n \nDetails:\nThe general form of a Taiwanese date is yyyymmdd:\n\n  yyyy is an integer that represents the year. \n\n  mm is an integer from 01 through 12 that represents the month.\n\n  dd is an integer from 01 through 31 that represents the day of the month.\n\nThe Taiwanese calendar uses 1912 as the base year (01/01/01 is January 1, 1912). \nDates before 1912 are not valid. Year values do not roll over after 100 years; \ninstead, they continue to increase.\n\nYou can separate the year, month, and day values with any delimiters, such as \nblanks, slashes, or dashes, that are permitted by the YYMMDDw. informat. If \ndelimiters are used, place them between all the values. If you omit delimiters, \nbe sure to use a leading zero for days or months that have a value less than 10."}},{"Name":"MDYAMPMw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads datetime values in the form mm-dd-yy<yy> hh:mm:ss.ss AM|PM, where a special character such \nas a hyphen (-), period (.), slash (/), or colon (:) separates the month, day, and year; \nthe year can be either 2 or 4 digits.  \n    \nSyntax Description: \nw \n  specifies the width of the output field. \n  Default: 19 \n  Range: 8-40 \nd \n  specifies the number of digits to the right of the decimal point in the seconds value.\n  The digits to the right of the decimal point specify a fraction of a second. This argument \n  is optional.\n  Default: 0 \n  Range: 0-39 \n \nDetails: \nThe MDYAMPMw.d format reads SAS datetime values in the following form: \n  mm-dd-yy<yy> hh:mm<:ss<.ss>> <AM | PM> \nwhere: \n  mm is an integer from 01 through 12 that represents the month.\n\n  dd is an integer from 01 through 31 that represents the day of the month.\n  yy or yyyy \n  specifies a two-digit or four-digit integer that represents the year.\n  hh is the number of hours that range from 00 through 23.\n  mm is the number of minutes that range from 00 through 59.\n  ss.ss \n    is the number of seconds that range from 00 through 59 with the fraction of a second \n    following the decimal point.\n    Requirement: If a fraction of a second is specified, the decimal point can be represented \n    only by a period and is required. \n  AM | PM \n    specifies either the time period 00:01-12:00 noon (AM) or the time period 12:01 - 12:00 midnight ( PM) \n  - or : \n  represents one of several special characters, such as the slash (/), hyphen (-), colon (:), \n  or a blank character that can be used to separate date and time components. Special characters \n  can be used as separators between any date or time component and between the date and the time."}},{"Name":"MMDDYYw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads date values in the form mmddyy or mmddyyyy. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 6 \n  Range: 6-32 \n \nDetails:\nThe date values must be in the form mmddyy or mmddyyyy, where \n\n  mm is an integer from 01 through 12 that represents the month.\n\n  dd is an integer from 01 through 31 that represents the day of the month.\n\n  yy or yyyy is a two-digit or four-digit integer that represents the year. \n\nYou can separate the month, day, and year fields by blanks or by special characters. \nHowever, if you use delimiters, place them between all fields in the value. Blanks can \nalso be placed before and after the date.\n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined \nby the YEARCUTOFF= system option."}},{"Name":"MONYYw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads month and year date values in the form mmmyy or mmmyyyy. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 5 \n  Range: 5-32 \n \nDetails:\nThe date values must be in the form mmmyy or mmmyyyy, where \n\n  mmm is the first three letters of the month name.\n\n  yy or yyyy is a two-digit or four-digit integer that represents the year. \n\nA value read with the MONYYw. informat results in a SAS date value that corresponds to the \nfirst day of the specified month.\n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined by \nthe YEARCUTOF= system option."}},{"Name":"MSECw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads TIME MIC values. \n    \nSyntax Description: \nw \n  specifies the width of the input field.\n  Requirement: w must be 8 because the OS TIME macro or the STCK System/370 instruction on \n  IBM mainframes each return an eight-byte value. \n \nDetails: \nThe MSECw. informat reads time values that are produced by IBM mainframe operating environments \nand converts the time values to SAS time values.\n\nUse the MSECw. informat to find the difference between two IBM mainframe TIME values, with \nprecision to the nearest microsecond.\n \nComparisons:\nThe MSECw. and TODSTAMPw. informats both read IBM time-of-day clock values, but the \nMSECw. informat assigns a time value to a variable, and the TODSTAMPw. informat assigns \na datetime value."}},{"Name":"NENGOw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads Japanese date values in the form eyymmdd. \n    \nSyntax Description: \nw \n  specifies the width of the input field.\n  Default: 10 \n  Range: 7-32 \n \nDetails: \nThe general form of a Japanese date is eyymmdd:\n\n  e is the first letter of the name of the imperial era(Meiji, Taisho, Showa, or Heisei).\n\n  yy is an integer that represents the year. \n\n  mm is an integer from 01 through 12 that represents the month.\n\n  dd is an integer from 01 through 31 that represents the day of the month.\n\nThe e value can be separated from the integers by a period. If you omit e, SAS uses the \ncurrent imperial era. You can separate the year, month, and day values by blanks or any \nnonnumeric character. However; if delimiters are used, place them between all the values. \nIf you omit delimiters, be sure to use a leading zero for days or months that are values \nless than 10."}},{"Name":"NLDATEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads the date value in the specified locale and then converts the date value to \nthe local SAS date value. \n\nSyntax Description: \n\nw \n  specifies the width of the input field.\n\n  Default: 20 \n  Range: 10-200"}},{"Name":"NLDATMw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads the datetime value of the specified locale, and then converts the datetime \nvalue to the local SAS datetime value. \n\nSyntax Description: \n\nw \n  specifies the width of the input field.\n\n  Default: 30 \n  Range: 10-200"}},{"Name":"NLTIMAPw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads the time value and uses a.m. and p.m. in the specified locale, and then \nconverts the time value to the local SAS-time value. \n\nSyntax Description: \n\nw \n  specifies the width of the input field.\n\n  Default: 10 \n  Range: 4-200"}},{"Name":"NLTIMEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads the time value in the specified locale and then converts the time value to \nthe local SAS time value. \n\nSyntax Description: \n\nw \n  specifies the width of the input field.\n\n  Default: 20 \n  Range: 10-200"}},{"Name":"PDJULGw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads packed Julian date values in the hexadecimal form yyyydddF for IBM. \n    \nSyntax Description\n\nw \n  specifies the width of the input field. \n  Default: 4 \n  Range: 4 \n \nDetails: \nThe PDJULGw. informat reads IBM packed Julian date values in the form of yyyydddF, \nconverting them to SAS date values, where \n\n  yyyy \n  is the two-byte representation of the four-digit Gregorian year.\n\n  ddd \n  is the one-and-a-half byte representation of the three-digit integer that corresponds \n  to the Julian day of the year, 1-365 (or 1-366 for leap years). \n\n  F \n  is the half byte that contains all binary 1s, which assigns the value as positive.\n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined \nby the YEARCUTOFF= system option."}},{"Name":"PDJULIw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads packed Julian dates in the hexadecimal format ccyyddd F for IBM. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 4 \n  Range: 4 \n \nDetails: \nThe PDJULIw. informat reads IBM packed Julian date values in the form ccyydddF, converting \nthem to SAS date values, where\n\n  cc \n  is the one-byte representation of a two-digit integer that represents the century.\n\n  yy \n  is the one-byte representation of a two-digit integer that represents the year. The \n  PDJULIw informat makes an adjustment to the one-byte century representation by adding \n  1900 to the two-byte ccyy value in order to produce the correct four-digit Gregorian \n  year. This adjustment causes ccyy values of 0098 to become 1998, 0101 to become 2001, \n  and 0218 to become 2118.\n\n  ddd \n  is the one-and-a-half bytes representation of the three-digit integer that corresponds \n  to the Julian day of the year, 1-365 (or 1-366 for leap years).\n\n  F \n  is the half byte that contains all binary 1s, which assigns the value as positive."}},{"Name":"PDTIMEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads packed decimal time of SMF and RMF records. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Requirement: w must be 4 because packed decimal time values in RMF and SMF records \n  contain four bytes of information.  \n \nDetails:\nThe PDTIMEw. informat reads packed decimal time values that are contained in SMF and \nRMF records that are produced by IBM mainframe systems and converts the values to SAS \ntime values. \n\nThe general form of a packed decimal time value in hexadecimal notation is 0hhmmssF, where \n\n  0 is a half byte that contains all 0s.\n\n  hh is one byte that represents two digits that correspond to hours. \n\n  mm is one byte that represents two digits that correspond to minutes.\n\n  ss is one byte that represents two digits that correspond to seconds.\n\n  F is a half byte that contains all 1s.\n\nIf a field contains all 0s, PDTIMEw. treats it as a missing value. \nPDTIMEw. enables you to read packed decimal time values from files that are created \non an IBM mainframe on any operating environment."}},{"Name":"RMFDURw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads duration intervals of RMF records. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Requirement: w must be 4 because packed decimal duration values in RMF records \n  contain four bytes of information. \n \nDetails: \nThe RMFDURw. informat reads the duration of RMF measurement intervals of RMF records \nthat are produced as packed decimal data by IBM mainframe systems and converts them to \nSAS time values.\n\nThe general form of the duration interval data in an RMF record in hexadecimal notation \nis mmsstttF, where \n\n  mm is the one-byte representation of two digits that correspond to minutes.\n\n  ss is the one-byte representation of two digits that correspond to seconds.\n\n  ttt is the one-and-a-half-bytes representation of three digits that correspond \n  to thousandths of a second.\n\n  F is a half byte that contains all binary 1s, which assigns the value as positive. \n\nIf the field does not contain packed decimal data, then RMFDURw. results in a missing value.\n \nComparisons: \nBoth the RMFDURw. informat and the RMFSTAMPw. informat read packed decimal information \nfrom RMF records that are produced by IBM mainframe systems.\n\nThe RMFDURw. informat reads duration data and results in a time value.\nThe RMFSTAMPw. informat reads time-of-day data and results in a datetime value."}},{"Name":"RMFSTAMPw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads time and date fields of RMF records. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Requirement: w must be 8 because packed decimal time and date values in RMF records \n  contain eight bytes of information: four bytes of time data that are followed by four \n  bytes of date data. \n  \nDetails:\nThe RMFSTAMPw. informat reads packed decimal time and date values of RMF records that \nare produced by IBM mainframe systems, and converts the time and date values to SAS \ndatetime values.\n\nThe general form of the time and date information in an RMF record in hexadecimal notation \nis 0hhmmssFccyydddF, where \n\n  0 is the half byte that contains all binary 0s.\n\n  hh is the one-byte representation of two digits that correspond to the hour of the day.\n\n  mm is the one-byte representation of two digits that correspond to minutes.\n\n  ss is 1 byte that represents two digits that correspond to seconds.\n\n  cc is the one-byte representation of two digits that correspond to the century.\n\n  yy is the one-byte representation of two digits that correspond to the year.\n\n  ddd is the one-and-a-half bytes that contain three digits that correspond to the day of the year.\n\n  F is the half byte that contains all binary 1s. \n\nThe century indicators 00 correspond to 1900, 01 to 2000, and 02 to 2100.\n\nRMFSTAMPw. enables you to read, on any operating environment, packed decimal time and \ndate values from files that are created on an IBM mainframe."}},{"Name":"SHRSTAMPw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads date and time values of SHR records. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Requirement: w must be 8 because packed decimal date and time values in SHR records \n  contain eight bytes of information: four bytes of date data that are followed by four \n  bytes of time data. \n \nDetails:\nThe SHRSTAMPw. informat reads packed decimal date and time values of SHR records that are produced \nby IBM mainframe environments and converts the date and time values to SAS datetime values.\n\nThe general form of the date and time information in an SHR record in hexadecimal notation is \nccyydddFhhmmssth, where \n\n  ccyy \n  is the two byte representation of the year. The cc portion is the one byte representation of a \n  two-digit integer that represents the century. The yy portion is the one byte representation of \n  two digits that correspond to the year.\n\n  The cc portion is the century indicator where 00 indicates 19yy, 01 indicates 20yy, 02 indicates \n  21yy, and so on. A hexadecimal year value of 0115 is equal to the year 2015.\n\n  ddd \n  is the one-and-a-half bytes that contain three digits that correspond to the day of the year.\n\n  F is the half byte that contains all binary 1s.\n  hh is the one byte representation of two digits that correspond to the hour of the day.\n  mm is the one byte representation of two digits that correspond to minutes. \n  ss is the one byte representation of two digits that correspond to seconds. \n  th is the one byte representation of two digits that correspond to a 100th of a second. \n\nThe SHRSTAMPw. informat enables you to read, on any operation environment, packed decimal date \nand time values from files that are created on an IBM mainframe."}},{"Name":"SMFSTAMPw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads time and date values of SMF records. \n    \nSyntax Description: \nw \n  specifies the width of the input field.\n  Requirement: w must be 8 because time and date values in SMF records contain eight bytes of \n  information: four bytes of time data that are followed by four bytes of date data. \n  Tip: The time portion of an SMF record is a four-byte integer binary number that represents \n  time as the number of hundredths of a second past midnight. \n \nDetails:\nThe SMFSTAMPw. informat reads integer binary time values and packed decimal date values of SMF \nrecords that are produced by IBM mainframe systems and converts the time and date values to SAS \ndatetime values.\n\nThe date portion of an SMF record in hexadecimal notation is ccyydddF, where \n\n  cc is the one-byte representation of two digits that correspond to the century.\n\n  yy is the one-byte representation of two digits that correspond to the year.\n\n  ddd is the one-and-a-half bytes that contain three digits that correspond to the day of the year.\n\n  F is the half byte that contains all binary 1s.\n\nThe SMFSTAMPw. informat enables you to read, on any operating environment, integer binary \ntime values and packed decimal date values from files that are created on an IBM mainframe."}},{"Name":"STIMERw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads time values and determines whether the values are hours, minutes, or seconds; \nreads the output of the STIMER system option. \n\nSyntax Description: \nw \n  specifies the width of the input field.\n \nDetails: \nThe STIMER informat reads performance statistics that the STIMER system option writes to the SAS log.\n\nThe informat reads time values and determines whether the values are hours, minutes, or seconds \nbased on the presence of decimal points and colons: \n\n  o If no colon is present, the value is the number of seconds. \n  o If a single colon is present, the value before the colon is the number of minutes. The value \n    after the colon is the number of seconds. \n  o If two colons are present, the sequence of time is hours, minutes, and then seconds.\n  \nIn all cases, the result is a SAS time value.\nThe input values for STIMER must be in one of the following forms: \n  o ss \n  o ss.ss \n  o mm:ss \n  o mm:ss.ss \n  o hh:mm:ss \n  o hh:mm:ss.ss\n\nwhere\n  ss is an integer that represents the number of seconds.\n  mm is an integer that represents the number of minutes.\n  hh is an integer that represents the number of hours."}},{"Name":"TIMEw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads hours, minutes, and seconds in the form hh:mm:ss.ss. \n    \nSyntax Description: \n  w \n  specifies the width of the input field.\n  Default: 8 \n  Range: 5-32 \n  \nDetails:\nThe TIMEw. informat reads SAS time values in the following form: \n\n hh:mm:ss<.ss> <AM | PM> \n\nwhere\n  hh is an integer that represents the number of hours.\n  : represents a special character that separates hours, minutes, and seconds.\n  mm is the number of minutes that range from 00 through 59.\n  \n  ss<.ss> \n  is an integer that represents the number of seconds, and if needed, tenths of a second. \n  Seconds and tenths of a second must always be separated by a period.\n\n  AM | PM \n  AM indicates time between 12:00 midnight and 11:59 in the morning. PM indicates time \n  between 12:00 noon and 11:59 at night.\n\nSeparate hh, mm, and ss with a special character. When the period is used as the special character, \nthe time is interpreted in the order hours, minutes, and seconds. For example, 23.22 is 23 hours and \n22 minutes, not 23 minutes and 22 seconds, or 23 seconds and 22 tenths of a second.\n\nIf you do not enter a value for seconds, SAS assumes a value of 0. \nThe stored value is the total number of seconds in the time value."}},{"Name":"TODSTAMPw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads an eight-byte time-of-day stamp. \n    \nSyntax Description\n\nw \n  specifies the width of the input field. \n  Requirement: w must be 8 because the OS TIME macro or the STCK instruction on IBM \n  mainframes each return an eight-byte value. \n \nDetails:\nThe TODSTAMPw. informat reads time-of-day clock values that are produced by IBM mainframe \noperating systems and converts the clock values to SAS datetime values.\n\nIf the time-of-day value is all 0s, TODSTAMPw. results in a missing value.\n\nUse TODSTAMPw. on other operating environments to read time-of-day values that are produced \nby an IBM mainframe."}},{"Name":"TUw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads timer units. \n    \nSyntax Description: \n\nw \n  specifies the width of the input field.\n  Requirement: w must be 4 because the OS TIME macro returns a four-byte value. \n \nDetails: \nThe TUw. informat reads timer unit values that are produced by IBM mainframe operating \nenvironments and converts the timer unit values to SAS time values.\n\nThere are exactly 38,400 software timer units per second. The low-order bit in a timer unit \nvalue represents approximately 26.041667 microseconds.\n\nUse the TUw. informat to read timer unit values that are produced by an IBM mainframe on \nother operating environments."}},{"Name":"WEEKUw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads the format of the number-of-week value within the year and returns a SAS date \nvalue by using the U algorithm. \n\nSyntax Description: \nw \n  specifies the width of the input field.\n\n  Default: 11 \n  Range: 3-200 \n \nDetails:\nThe WEEKUw. informat reads the format of the number-of-week within the year, and then \nreturns a SAS date value by using the U algorithm. If the input does not contain a year \nexpression, then WEEKUw. uses the current year as the year expression, which is the default. \nIf the input does not contain a day expression, then WEEKUw. uses the first day of the week \nas the day expression, which is the default. \n\nThe U Algorithm calculates the SAS date value using the number-of-week value within the year \n(Sunday is considered the first day of the week). The number-of-week value is represented as \na decimal number in the range 0-53, with a leading zero and maximum value of 53. For example, \nthe fifth week of the year would be represented as 05."}},{"Name":"WEEKVw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads the format of the number-of-week value within the year and returns a SAS date \nvalue using the V algorithm. \n\nSyntax Description:\nw \n  specifies the width of the input field.\n  Default: 11 \n  Range: 3-200 \n \nDetails:\nThe WEEKVw. informat reads a format of the number-of-week value. If the input does not \ncontain a year expression, WEEKVw. uses the current year as the year expression, which \nis the default. If the input does not contain a day expression, WEEKVw. uses the first \nday of the week as the day expression, which is the default. \n\nThe V algorithm calculates the SAS date value. The number-of-week value is represented \nas a decimal number in the range 01-53, with a leading zero and maximum value of 53. \nWeeks begin on a Monday and week 1 of the year is the week that includes both January \n4th and the first Thursday of the year. If the first Monday of January is the 2nd, 3rd, \nor 4th, the preceding days are part of the last week of the preceding year. For example, \nthe fifth week of the year would be represented as 06."}},{"Name":"WEEKWw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads the format of the number-of-week value within the year and returns a SAS date \nvalue using the W algorithm. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 11 \n  Range: 3-200 \n\nDetails: \nThe WEEKWw. informat reads a format of the number-of-week value. If the input does \nnot contain a year expression, the WEEKWw. informat uses the current year as the year \nexpression, which is the default. If the input does not contain a day expression, the \nWEEKWw. informat uses the first day of the week as the day expression, which is the \ndefault. Algorithm W calculates the SAS date value using the number of the week within \nthe year (Monday is considered the first day of the week). The number-of-week value is \nrepresented as a decimal number in the range 0-53, with a leading zero and maximum \nvalue of 53. For example, the fifth week of the year would be represented as 05."}},{"Name":"YMMDDTTMw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads datetime values in the form <yy>yy-mm-dd hh:mm:ss.ss, where special characters \nsuch as a hyphen (-), period (.), slash (/), or colon (:) are used to separate the \nyear, month, day, hour, minute, and seconds; the year can be either 2 or 4 digits.  \n    \nSyntax Description: \nw \n  specifies the width of the output field.\n  Default: 19 \n  Range: 13-40 \nd \n  specifies the number of digits to the right of the decimal point in the seconds value. The digits \n  to the right of the decimal point specify a fraction of a second. This argument is optional.\n  Default: 0 \n  Range: 0-39 \n \nDetails:\nThe YMDDTTMw.d format reads SAS datetime values in the following form: \n    <yy>yy-mm-dd hh:mm:<ss<.ss>>  \n  The following list explains the datetime variables: \n    yy or yyyy \n    specifies a two- or four-digit integer that represents the year.\n\n    mm is an integer from 01 through 12 that represents the month. \n    dd is an integer from 01 through 31 that represents the day of the month. \n    hh is the number of hours ranging from 00 through 23. \n    mm is the number of minutes ranging from 00 through 59.\n\n    ss.ss is the number of seconds ranging from 00 through 59 with the fraction of a second \n      following the decimal point. \n\n      Requirement: If a fraction of a second is specified, the decimal point can be represented \n      only by a period and is required. \n\n    - or : \n      represents one of several special characters, such as the slash (/), dash (-), colon (:), \n      or a blank character that can be used to separate date and time components. Special characters \n      can be used as separators between any date or time component and between the date and the time."}},{"Name":"YYMMDDw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads date values in the form yymmdd or yyyymmdd. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 6 \n  Range: 6-32 \n \nDetails:\nThe date values must be in the form yymmdd or yyyymmdd, where \n\n  yy or yyyy is a two-digit or four-digit integer that represents the year. \n\n  mm is an integer from 01 through 12 that represents the month of the year. \n\n  dd is an integer from 01 through 31 that represents the day of the month.\n\nYou can separate the year, month, and day values by blanks or by special characters. \nHowever, if delimiters are used, place them between all the values. You can also place \nblanks before and after the date. Make sure the width of the input field allows space \nfor blanks and special characters.\n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined \nby the YEARCUTOFF= system option."}},{"Name":"YYMMNw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads date values in the form yyyymm or yymm. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 4 \n  Range: 4-6 \n \nDetails:\nThe date values must be in the form yyyymm or yymm, where \n\n  yy or yyyy \n  is a two-digit or four-digit integer that represents the year. \n\n  mm \n  is a two-digit integer that represents the month.\n\nThe N in the informat name must be used and indicates that you cannot separate the \nyear and month values by blanks or by special characters. SAS automatically adds a \nday value of 01 to the value to make a valid SAS date variable.\n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is \ndefined by the YEARCUTOFF= system option."}},{"Name":"YYQw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads quarters of the year in the form yyQ q or yyyyQq. \n    \nSyntax Description: \nw \n  specifies the width of the input field.\n\n  Default: 6 (For SAS version 6, the default is 4.) \n  Range: 4-32 (For SAS version 6, the range is 4-6.) \n  \nDetails:\nThe quarter must be in the form yyQq or yyyyQq, where\n\n  yy or yyyy \n  is an integer that represents the two-digit or four-digit year.\n\n  q \n  is an integer (1, 2, 3, or 4) that represents the quarter of the year. You can also \n  represent the quarter as 01, 02, 03, or 04. \n\nThe letter Q must separate the year value and the quarter value. The year value, the \nletter Q, and the quarter value cannot be separated by blanks. A value that is read \nwith YYQw. produces a SAS date value that corresponds to the first day of the specified \nquarter.\n\nNote: SAS interprets a two-digit year as belonging to the 100-year span that is defined \nby the YEARCUTOFF= system option."}},{"Name":"$CPTDWw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is encoded in Hebrew DOS (cp862) and then converts the \ncharacter string to Windows (cp1255) encoding. \n\nSyntax Description:\nw \n  specifies the width of the input field.\n\n  Default: 200 \n  Range: 1-32000 \n \nComparisons:\nThe $CPTDWw. informat performs processing that is opposite of the $CPTWDw. informat."}},{"Name":"$CPTWDw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a character string that is encoded in Windows (cp1255) and then converts the \ncharacter string to Hebrew DOS (cp862) encoding. \n\nSyntax Description: \n\nw \nspecifies the width of the input field.\n\nDefault: 200 \nRange: 1-32000 \n \nComparisons:\nThe $CPTWDw. informat performs processing that is opposite of the $CPTDWw. informat."}},{"Name":"BINARYw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Converts positive binary values to integers. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 8 \n  Range: 1-64 \nd \n  specifies the power of 10 by which to divide the value. SAS uses the d value even if the \n  data contain decimal points. This argument is optional. \n  Range: 0-31 \n\nDetails: \nUse only the character digits 1 and 0 in the input, with no embedded blanks. BINARYw.d ignores \nleading and trailing blanks.\n\nBINARYw.d cannot read negative values. It treats all input values as positive (unsigned)."}},{"Name":"BITSw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Extracts bits. \n    \nSyntax Description: \nw \n  specifies the number of bits to read. \n  Default: 1 \n  Range: 1-64 \nd \n  specifies the zero-based offset. \n  Range: 0-63 \n \nDetails:\nThe BITSw.d informat extracts particular bits from an input stream and assigns the numeric \nequivalent of the extracted bit string to a variable. Together, the w and d values specify \nthe location of the string you want to read.\n\nThis informat is useful for extracting data from system records that have many pieces of \ninformation packed into single bytes."}},{"Name":"BZw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Converts blanks to 0s. \n   \nSyntax Description:\nw \n  specifies the width of the input field. \n  Default: 1 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. If the data contain decimal points, \n  the d value is ignored. This argument is optional. \n  Range: 0-31 \n \nDetails: \nThe BZw.d informat reads numeric values, converts any trailing or embedded blanks to 0s, \nand ignores leading blanks.\n\nThe BZw.d informat can read numeric values that are located anywhere in the field. Blanks \ncan precede or follow the numeric value, and a minus sign must precede negative values. \nThe BZw.d informat ignores blanks between a minus sign and a numeric value in an input field.\n\nThe BZw.d informat interprets a single period in a field as a 0. The informat interprets \nmultiple periods or other nonnumeric characters in a field as a missing value.\n\nTo use BZw.d in a DATA step with list input, change the delimiter for list input with the \nDLM= or DLMSTR= option in the INFILE statement. By default, SAS interprets blanks between \nvalues in the data line as delimiters rather than 0s.\n \nComparisons:\nThe BZw.d informat converts trailing or embedded blanks to 0s. If you do not want to convert \ntrailing blanks to 0s (for example, when reading values in E-notation), use either the w.d \ninformat or the Ew.d informat instead."}},{"Name":"COMMAw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Removes embedded characters. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 1 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. If the data contain decimal \n  points, the d value is ignored. This argument is optional. \n  Range: 0-31 \n \nDetails:\nThe COMMAw.d informat reads numeric values and removes embedded commas, blanks, dollar \nsigns, percent signs, dashes, and close parentheses from the input data. The COMMAw.d \ninformat converts an open parenthesis at the beginning of a field to a minus sign.\n \nComparisons:\nThe COMMAw.d informat operates like the COMMAXw.d informat, but it reverses the roles of \nthe decimal point and the comma. This convention is common in European countries."}},{"Name":"COMMAXw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Removes embedded characters. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 1 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. If the data contain a comma, \n  which represents a decimal point, the d value is ignored. This argument is optional.\n  Range: 0-31 \n  \nDetails: \nThe COMMAXw.d informat reads numeric values and removes embedded periods, blanks, dollar \nsigns, percent signs, dashes, and close parentheses from the input data. The COMMAXw.d \ninformat converts an open parenthesis at the beginning of a field to a minus sign.\n \nComparisons:\nThe COMMAXw.d informat operates like the COMMAw.d informat, but it reverses the roles of \nthe decimal point and the comma. This convention is common in European countries."}},{"Name":"Ew.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads numeric values that are stored in scientific notation and double-precision \nscientific notation. \n\nSyntax Description: \nw \n  specifies the width of the field that contains the numeric value. \n  Default: 12 \n  Range: 1-32 \nd \n  specifies the number of digits to the right of the decimal point in the numeric value. \n  If the data contain decimal points, the d value is ignored. This argument is optional. \n  Range: 0-31 \n \nComparisons:\nThe Ew.d informat is not used extensively because the SAS informat for standard numeric data, \nthe w.d informat, can read numbers in scientific notation. Use Ew.d to permit only scientific \nnotation in your input data."}},{"Name":"EUROw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads numeric values and removes embedded characters in European currency and \nreverses the comma and decimal point. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 6 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. If the data contains decimal \n  points, the d value is ignored. \n  Default: 0 \n  Range: 0-31 \n \nDetails:\nThe EUROw.d informat reads numeric values and removes embedded euro symbols (E), commas, \nblanks, percent signs, dashes, and close parentheses from the input data. A decimal point \nis assumed to be a separator between the whole number and the decimal portion. The EUROw.d \ninformat converts an open parenthesis at the beginning of a field to a minus sign. \n \nComparisons:\nThe EUROw.d informat is similar to the EUROXw.d informat, but EUROXw.d reverses the roles \nof the decimal point and the comma. This convention is common in European countries.\n\nIf no commas or periods appear in the input, then the EUROw.d and the EUROXw.d informats \nare interchangeable."}},{"Name":"EUROXw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads numeric values and removes embedded characters in European currency. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 6 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. If the data contains decimal \n  points, the d value is ignored. \n  Default: 0 \n  Range: 0-31 \n  \nDetails:\nThe EUROXw.d informat reads numeric values and removes embedded euro symbols (E), periods, \nblanks, percent signs, dashes, and close parentheses from the input data. A comma is assumed \nto be a separator between the whole number and the decimal portion. The EUROXw.d informat \nconverts an open parenthesis at the beginning of a field to a minus sign. \n \nComparisons:\nThe EUROXw.d informat is similar to the EUROw.d informat, but EUROw.d reverses the roles of \nthe comma and the decimal point. This convention is common in English-speaking countries.\n\nIf no commas or periods appear in the input, the EUROXw.d and the EUROw.d informats are interchangeable."}},{"Name":"FLOATw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a native single-precision, floating-point value and divides it by 10 raised \nto the dth power. \n\nSyntax Description:\nw \n  specifies the width of the input field. \n  Requirement: w must be 4.  \nd \n  specifies the power of 10 by which to divide the value. This argument is optional.\n \nDetails:\nThe FLOATw.d informat is useful in operating environments where a float value is not the same \nas a truncated double.\n\nOn the IBM mainframe systems, a four-byte floating-point number is the same as a truncated eight-byte \nfloating-point number. However, in operating environments that use the IEEE floating-point standard, \nsuch as the IBM PC-based operating environments and most UNIX platforms, a four-byte floating-point \nnumber is not the same as a truncated double. Therefore, the RB4. informat does not produce the same \nresults as FLOAT4. Floating-point representations other than IEEE might have this same characteristic. \nValues read with FLOAT4. typically come from some other external program that is running in your \noperating environment."}},{"Name":"HEXw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Converts hexadecimal positive binary values to either integer (fixed-point) or real \n(floating-point) binary values. \n\nSyntax Description: \nw \n  specifies the field width of the input value and also specifies whether the final value \n  is fixed-point or floating-point.\n\n  Default: 8 \n  Range: 1-16 \n  Tip: If w<16, HEXw. converts the input value to positive integer binary values, treating \n  all input values as positive (unsigned). If w is 16, HEXw. converts the input value to real \n  binary (floating-point) values, including negative values. \n \nDetails:\nNote: Different operating environments store floating-point values in different ways. \nHowever, HEX16. reads hexadecimal representations of floating-point values with consistent \nresults if the values are expressed in the same way that your operating environment stores them.  \n\nThe HEXw. informat ignores leading or trailing blanks."}},{"Name":"IBw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads native integer binary (fixed-point) values, including negative values. \n    \nSyntax Description: \nw \n  specifies the width of the input field.\n  Default: 4 \n  Range: 1-8 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Range: 0-10 \n \nDetails:\nThe IBw.d informat reads integer binary (fixed-point) values, including negative values \nrepresented in two's complement notation. IBw.d reads integer binary values with consistent \nresults if the values are created in the same type of operating environment that you use to \nrun SAS. \n\nNote:   Different operating environments store integer binary values in different ways. This \nconcept is called byte ordering."}},{"Name":"IBRw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads integer binary (fixed-point) values in Intel and DEC formats. \n    \nSyntax Description: \nw \n  specifies the width of the input field.\n  Default: 4 \n  Range: 1-8 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Range: 0-10 \n  \nDetails:\nThe IBRw.d informat reads integer binary (fixed-point) values, including negative values \nthat are represented in two's complement notation. IBRw.d reads integer binary values that \nare generated by and for Intel and DEC platforms. Use IBRw.d to read integer binary data \nfrom Intel or DEC environments in other operating environments. The IBRw.d informat in SAS \ncode allows for a portable implementation for reading the data in any operating environment.\n\nNote: Different operating environments store integer binary values in different ways. \nThis concept is called byte ordering."}},{"Name":"IEEEw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads an IEEE floating-point value and divides it by 10 raised to the d th power. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 8 \n  Range: 2-8 \n  Tip: If w is 8, an IEEE double-precision, floating-point number is read. If w is 5, 6, \n  or 7, an IEEE double-precision, floating-point number is read, which assumes truncation \n  of the appropriate number of bytes. If w is 4, an IEEE single-precision, floating-point \n  number is read. If w is 3, an IEEE single-precision, floating-point number is read, \n  which assumes truncation of one byte. \nd \nspecifies the power of 10 by which to divide the value.\n \nDetails:\nThe IEEEw.d informat is useful in operating environments where IEEE is the floating-point \nrepresentation that is used. In addition, you can use the IEEEw.d informat to read files \nthat are created by programs on operating environments that use the IEEE floating-point \nrepresentation.\n\nTypically, programs generate IEEE values in single precision (4 bytes) or double precision \n(8 bytes). Truncation is performed by programs solely to save space on output files. Machine \ninstructions require that the floating-point number be of one of the two lengths. The IEEEw.d \ninformat allows other lengths, which enables you to read data from files that contain space-saving \ntruncated data."}},{"Name":"NLMNYw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads monetary data in the specified locate for the local expression, and converts \nthe data to a numeric value. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 9 \n  Range: 1-32 \nd \n   optionally specifies whether to divide the number by 10^d. If the data contains decimal \n  separators, the d value is ignored. \n  Default: 0 \n  Range: 0-31\n \nDetails: \nThe NLMNYw.d informat reads monetary data in the specified locale for the local expression, \nand then converts the data to a numeric value. It removes any thousands separators, decimal \nseparators, blanks, the currency symbol, and the close parenthesis from the input data.\n \nComparisons: \nThe NLMNYw.d informat performs processing that is the opposite of the NLMNYIw.d informat.\n\nThe NLMNYw.d informat is similar to the DOLLARw.d informat except that the NLMNYw.d informat \nis locale-specific."}},{"Name":"NLMNYIw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads monetary data in the specified locale for the international expression, and \nthen converts the data to a numeric value. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 9 \n  Range: 1-32 \nd \n  optionally specifies whether to divide the number by 10^d. If the data contains decimal \n  separators, the d value is ignored. \n  Default: 0 \n  Range: 0-31 \n  \nDetails:\nThe NLMNYIw.d informat reads monetary data in the specified locale for the international \nexpression, and then converts the data to a numeric value. It removes any thousands separators, \ndecimal separators, blanks, the currency symbol, and the close parenthesis from the input data.\n \nComparisons:\nThe NLMNYIw.d informat performs processing that is the opposite of the NLMNYw.d informat."}},{"Name":"NLNUMw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads numeric data in the specified locale for local expressions, and then converts \nthe data to a numeric value. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 6\n  Range: 1-32 \nd \n  optionally specifies whether to divide the number by 10^d. If the data contains decimal \n  separators, the d value is ignored. \n  Default: 0 \n  Range: 0-31 \n  \nDetails:\nThe NLNUMw.d) informat reads numeric data in the specified locale for local expressions, \nand then converts the data to a numeric value. It removes any thousands separators, decimal \nseparators, blanks, the currency symbol, and the close parenthesis from the input data.\n \nComparisons:\nThe NLNUMw.d informat performs processing that is opposite to the NLNUMIw.d informat."}},{"Name":"NLNUMIw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads numeric data in the specified locale for international expressions, and then \nconverts the data to a numeric value. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 6\n  Range: 1-32 \nd \n  optionally specifies whether to divide the number by 10^d. If the data contains decimal \n  separators, the d value is ignored. \n  Default: 0 \n  Range: 0-31 \n  \nDetails:\nThe NLNUMIw.d informat reads numeric data in the specified locale for international \nexpressions, and then converts the data to a numeric value. It removes any thousands \nseparators, decimal separators, blanks, the currency symbol, and the close parenthesis \nfrom the input data.\n\nComparisons: \nThe NLNUMIw.d informat performs processing that is opposite to the NLNUMw.d informat."}},{"Name":"NLPCTw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads percentage data in the specified locale for local expressions, and then \nconverts the data to a numeric value. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 6\n  Range: 1-32 \nd \n  optionally specifies whether to divide the number by 10^d. If the data contains decimal \n  separators, the d value is ignored. \n  Default: 0 \n  Range: 0-31 \n  \nDetails:\nThe NLPCTw.d informat reads percentage data in the specified locale for local expressions, \nand then converts the data to a numeric value. It divides the value by 100 and removes any \nthousands separators, decimal separators, blanks, the percent sign, and the close parenthesis \nfrom the input data.\n \nComparisons: \nThe NLPCTw.d informat performs processing that is opposite of the NLPCTIw.d informat. The \nNLPCTw.d informat is similar to the PERCENTw.d informat except that the NLPCTw.d informat \nis locale-specific."}},{"Name":"NLPCTIw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads percentage data in the specified locale for international expressions, and \nthen converts the data to a numeric value. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 6\n  Range: 1-32 \nd \n  optionally specifies whether to divide the number by 10^d. If the data contains decimal \n  separators, the d value is ignored. \n  Default: 0 \n  Range: 0-31 \n  \nDetails: \nThe NLPCTIw.d informat reads percentage data in the specified locale for international \nexpressions, and then converts the data to a numeric value. It divides the value by 100 \nand removes any thousands separators, decimal separators, blanks, the percent sign, and \nthe close parentheses from the input data.\n \nComparisons: \nThe NLPCTIw.d informat performs processing that is opposite of the NLPCTw.d informat."}},{"Name":"NUMXw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads numeric values with a comma in place of the decimal point. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 12 \n  Range: 1-32 \nd \n  specifies the number of digits to the right of the decimal. If the data contain decimal \n  points, the d value is ignored. This argument is optional. \n  Range: 0-31 \n \nDetails: \nThe NUMXw.d informat reads numeric values and interprets a comma as a decimal point.\n \nComparisons: \nThe NUMXw.d informat is similar to the w.d informat except that it reads numeric values \nthat contain a comma in place of the decimal point."}},{"Name":"OCTALw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Converts positive octal values to integers. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 3 \n  Range: 1-24 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional.\n  Range: 1-31 \n  Restriction: must be greater than or equal to the w value. \n \nDetails: \nUse only the digits 0 through 7 in the input, with no embedded blanks. The OCTALw.d \ninformat ignores leading and trailing blanks.\n\nOCTALw.d cannot read negative values. It treats all input values as positive (unsigned)."}},{"Name":"PDw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads data that are stored in IBM packed decimal format. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 1 \n  Range: 1-16 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Range: 0-10 \n \nDetails:\nThe PDw.d informat is useful because many programs write data in packed decimal format for \nstorage efficiency, fitting two digits into each byte and using only a half byte for a sign. \n\nNote: Different operating environments store packed decimal values in different ways. However, \nPDw.d reads packed decimal values with consistent results if the values are created on the same \ntype of operating environment that you use to run SAS.  \n\nThe PDw.d format writes missing numerical data as -0. When the PDw.d informat reads -0, it \nstores it as 0."}},{"Name":"PERCENTw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads percentages as numeric values. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 6 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. If the data contain decimal \n  points, the d value is ignored. This argument is optional. \n  Range: 0-31 \n \nDetails:\nThe PERCENTw.d informat converts the numeric portion of the input data to a number using \nthe same method as the COMMAw.d informat. If a percent sign (%) follows the number in the \ninput field, PERCENTw.d divides the number by 100."}},{"Name":"PIBw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads positive integer binary (fixed-point) values. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 1 \n  Range: 1-8 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Range: 0-10 \n \nDetails:\nAll values are treated as positive. PIBw.d reads positive integer binary values with \nconsistent results if the values are created in the same type of operating environment \nthat you use to run SAS.\n\nNote: Different operating environments store positive integer binary values in different \nways. This concept is called byte ordering."}},{"Name":"PIBRw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads positive integer binary (fixed-point) values in Intel and DEC formats. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 1 \n  Range: 1-8 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Range: 0-10 \n  \nDetails:\nAll values are treated as positive. PIBRw.d reads positive integer binary values that have \nbeen generated by and for Intel and DEC operating environments. Use PIBRw.d to read positive \ninteger binary data from Intel or DEC environments on other operating environments. The \nPIBRw.d informat in SAS code allows for a portable implementation for reading the data in \nany operating environment. \n\nNote: Different operating environments store positive integer binary values in different \nways. This concept is called byte ordering."}},{"Name":"PKw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads unsigned packed decimal data. \n    \nSyntax Description:\n\nw \n  specifies the number of bytes of unsigned packed decimal data, each of which contains two digits.\n  Default: 1 \n  Range: 1-16 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Range: 0-10 \n \nDetails: \nEach byte of unsigned packed decimal data contains two digits.\n \nComparisons: \nThe PKw.d informat is the same as the PDw.d informat, except that PKw.d treats the sign \nhalf of the field's last byte as part of the value, not as the sign of the value."}},{"Name":"RBw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads numeric data that are stored in real binary (floating-point) notation. \n    \nSyntax Description:\nw \nspecifies the width of the input field.\n\nd \nspecifies the power of 10 by which to divide the input value. This argument \nis optional. If you specify d, the RBw.d informat divides the input value by \nthe 10d value. SAS uses the d value even if the input data contains decimal points.\n\nDetails:\nThe RBw.d informat reads numeric data that is stored in native real-binary (floating-point) \nnotation. Numeric data for scientific calculations is often stored in floating-point notation. \n(SAS stores all numeric values in floating-point notation.) A floating-point value consists of \ntwo parts: a mantissa that gives the value and an exponent that gives the value's magnitude.\n\nIt is usually impossible to key in floating-point binary data directly from a terminal, but \nmany programs write floating-point binary data. Use caution if you are using the RBw.d \ninformat to read floating-point data created by programs other than SAS because the RBw.d \ninformat is designed to read-only double-precision data."}},{"Name":"S370FFw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads EBCDIC numeric data. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 12 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Range: 0-31 \n \nDetails:\nThe S370FFw.d informat reads numeric data that are represented in EBCDIC and converts the data \nto native format. If EBCDIC is the native format, S370FFw.d performs no conversion.\n\nS370FFw.d reads EBCDIC numeric values that are represented with one byte per digit. Use S370FFw.d \non other operating environments to read numeric data from IBM mainframe files.\n\nS370FFw.d reads numeric values located anywhere in the input field. EBCDIC blanks can precede \nor follow a numeric value with no effect. If a value is negative, an EBCDIC minus sign should \nimmediately precede the value. S370FFw.d reads values with EBCDIC decimal points and values in \nscientific notation, and it interprets a single EBCDIC period as a missing value.\n \nComparisons:\nThe S370FFw.d informat performs the same role for numeric data that the $EBCDICw.d informat \ndoes for character data. That is, on an IBM mainframe system, S370FFw.d has the same effect \nas the standard w.d informat. On all other systems, using S370FFw.d is equivalent to using \n$EBCDICw.d as well as using the standard w.d informat."}},{"Name":"S370FIBw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads integer binary (fixed-point) values, including negative values, \nin IBM mainframe format. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 4 \n  Range: 1-8 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional.\n\n  Range: 0-10 \n  \nDetails:\nThe S370FIBw.d informat reads integer binary (fixed-point) values that are stored in \nIBM mainframe format, including negative values that are represented in two's complement \nnotation. S370FIBw.d reads integer binary values with consistent results if the values \nare created in the same type of operating environment that you use to run SAS.\n\nUse S370FIBw.d for integer binary data that are created in IBM mainframe format for \nreading in other operating environments. \n\nNote: Different operating environments store integer binary values in different ways. \nThis concept is called byte ordering."}},{"Name":"S370FIBUw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads unsigned integer binary (fixed-point) values in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 4 \n  Range: 1-8 \nd \n  specifies the power of 10 by which to divide the value. SAS uses the d value even \n  if the data contain decimal points. This argument is optional.\n  Range: 0-10 \n \nDetails: \nThe S370FIBUw.d informat reads unsigned integer binary (fixed-point) values that are \nstored in IBM mainframe format, including negative values that are represented in two's \ncomplement notation. Unsigned integer binary values are the same as integer binary values, \nexcept that all values are treated as positive. S370FIBUw.d reads integer binary values \nwith consistent results if the values are created in the same type of operating environment \nthat you use to run SAS.\n\nUse S370FIBUw.d for unsigned integer binary data that are created in IBM mainframe format \nfor reading in other operating environments. \n\nNote: Different operating environments store integer binary values in different ways. \nThis concept is called byte ordering.   \n \nComparisons:\nThe S370FIBUw.d informat is equivalent to the COBOL notation PIC 9(n) BINARY, where n \nis the number of digits.\n\nThe S370FIBUw.d and S370FPIBw.d informats are identical.\nS370FPIBw.d, S370FIBUw.d, and S370FIBw.d are used to read big endian integers in any \noperating environment."}},{"Name":"S370FPDw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads packed data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 1 \n  Range: 1-16 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n \nDetails:\nPacked decimal data contain two digits per byte, but only one digit in the input field \nrepresents the sign. The last half of the last byte indicates the sign: a C or an F for \npositive numbers and a D for negative numbers.\n\nUse S370FPDw.d to read packed decimal data from IBM mainframe files on other operating \nenvironments."}},{"Name":"S370FPDUw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads unsigned packed decimal data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 1 \n  Range: 1-16 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n  \nDetails: \nPacked decimal data contain two digits per byte. The last half of the last byte, which \nindicates the sign for signed packed data, is always F for unsigned packed data. \n\nUse S370FPDUw.d on other operating environments to read unsigned packed decimal data \nfrom IBM mainframe files.\n \nComparisons:\nThe S370FPDUw.d informat is similar to the S370FPDw.d informat except that the S370FPDUw.d \ninformat rejects all sign digits except F.\n\nThe S370FPDUw.d informat is equivalent to the COBOL notation PIC 9(n) PACKED-DECIMAL, \nwhere the n value is the number of digits."}},{"Name":"S370FPIBw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads positive integer binary (fixed-point) values in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 4 \n  Range: 1-8 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Default: 0 \n  Range: 0-10 \n \nDetails:\nPositive integer binary values are the same as integer binary values, except that all values \nare treated as positive. S370FPIBw.d reads integer binary values with consistent results if \nthe values are created in the same type of operating environment that you use to run SAS. \n\nUse S370FPIBw.d for positive integer binary data that are created in IBM mainframe format for \nreading in other operating environments. \n\nNote: Different operating environments store integer binary values in different ways. This \nconcept is called byte ordering.  \n\nComparisons:\nIf you use SAS on an IBM mainframe, S370FPIBw.d and PIBw.d are identical. \nS370FPIBw.d, S370FIBUw.d, and S370FIBw.d are used to read big endian integers in any \noperating environment."}},{"Name":"S370FRBw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads real binary (floating-point) data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 6 \n  Range: 2-8 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Range: 0-10 \n \nDetails: \nReal binary values are represented in two parts: a mantissa that gives the value, and \nan exponent that gives the value's magnitude.\n\nUse S370FRBw.d to read real binary data from IBM mainframe files on other operating environments. \nIf you use SAS on an IBM mainframe, S370FRBw.d and RBw.d are identical."}},{"Name":"S370FZDw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads zoned decimal data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 8 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. If the data contain decimal \n  points, the d value is ignored. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n \nDetails: \nZoned decimal data are similar to standard decimal data in that every digit requires \none byte. However, the value's sign is stored in the last byte, along with the last digit.\n\nUse S370FZDw.d on other operating environments to read zoned decimal data from IBM mainframe files.\n\nComparisons:\nIf you use SAS on an IBM mainframe, S370FZDw.d and ZDw.d are identical."}},{"Name":"S370FZDLw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads zoned decimal leading-sign data in IBM mainframe format. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 8 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n \nDetails:\nUse S370FZDLw.d on other operating environments to read zoned decimal data from IBM \nmainframe files.\n \nComparisons:\nZoned decimal leading-sign data is similar to standard zoned decimal data except that the \nsign of the value is stored in the first byte of zoned decimal leading-sign data, along with \nthe first digit.\n\nThe S370FZDLw.d informat is equivalent to the COBOL notation PIC S9(n) DISPLAY SIGN LEADING, \nwhere the n value is the number of digits."}},{"Name":"S370FZDSw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads zoned decimal separate leading-sign data in IBM mainframe format. \n    \nSyntax Description:\nw \n  specifies the width of the input field. \n  Default: 8 \n  Range: 2-32 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n \nDetails:\nUse S370FZDSw.d on other operating environments to read zoned decimal data from IBM \nmainframe files.\n\nComparisons:\nZoned decimal separate leading-sign data is similar to standard zoned decimal data except \nthat the sign of the value is stored in the first byte of zoned decimal leading sign data, \nand the first digit of the value is stored in the second byte.\n\nThe S370FZDSw.d informat is equivalent to the COBOL notation PIC S9(n) DISPLAY SIGN LEADING \nSEPARATE, where the n value is the number of digits."}},{"Name":"S370FZDTw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads zoned decimal separate trailing-sign data in IBM mainframe format. \n    \nSyntax Description:\nw \n  specifies the width of the input field. \n  Default: 8 \n  Range: 2-32 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n  \nDetails:\nUse S370FZDTw.d on other operating environments to read zoned decimal data from IBM \nmainframe files.\n \nComparisons:\nZoned decimal separate trailing-sign data are similar to zoned decimal separate leading-sign \ndata except that the sign of the value is stored in the last byte of zoned decimal separate \ntrailing-sign data.\n\nThe S370FZDTw.d informat is equivalent to the COBOL notation PIC S9(n) DISPLAY SIGN TRAILING \nSEPARATE, where the n value is the number of digits."}},{"Name":"S370FZDUw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads unsigned zoned decimal data in IBM mainframe format. \n    \nSyntax Description:\nw \n  specifies the width of the input field. \n  Default: 8 \n  Range: 2-32 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n  \nDetails:\nUse S370FZDUw.d on other operating environments to read unsigned zoned decimal data from \nIBM mainframe files.\n \nComparisons: \nThe S370FZDUw.d informat is similar to the S370FZDw.d informat except that the S370FZDUw.d \ninformat rejects all sign digits except F.\n\nThe S370FZDUw.d informat is equivalent to the COBOL notation PIC 9(n) DISPLAY, where the n \nvalue is the number of digits."}},{"Name":"TRAILSGNw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a trailing plus (+) or minus (-) sign. \n    \nSyntax Description:\n\nw \n  specifies the width of the input field.\n\n  Default: 6 \n  Range: 1-32 \n \nDetails: \nIf the data contains a decimal point, the TRAILSGN informat honors the number of decimal \nplaces that are in the input data. If the data contains a comma, the TRAILSGN informat \nreads the value, ignoring the comma."}},{"Name":"VAXRBw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads real binary (floating-point) data in VMS format. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 4 \n  Range: 2-8 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional.\n  Range: 0-10 \n \nDetails:\nUse the VAXRBw.d informat to read floating-point data from VMS files on other operating environments.\n \nComparisons:\nIf you use SAS that is running under VMS, the VAXRBw.d and the RBw.d informats are identical."}},{"Name":"w.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads standard numeric data. \n    \nSyntax Description:\nw \n  specifies the width of the input field. \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. If the data contain decimal \n  points, the d value is ignored. This argument is optional. \n  Range: 0-31 \n \nDetails:\nThe w.d informat reads numeric values that are located anywhere in the field. Blanks can \nprecede or follow a numeric value with no effect. A minus sign with no separating blank \nshould immediately precede a negative value. The w.d informat reads values with decimal \npoints and values in scientific E-notation, and it interprets a single period as a missing value.\n \nComparisons: \nThe w.d informat is identical to the BZw.d informat, except that the w.d informat ignores \ntrailing blanks in the numeric values. To read trailing blanks as 0s, use the BZw.d informat.\n\nThe w.d informat can read values in scientific E-notation exactly as the Ew.d informat does."}},{"Name":"YENw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Removes embedded yen signs, commas, and decimal points. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 1 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. \n  Requirement: d must be 0 or 2 \n  Tip: If the d is 2, then YENw.d reads a decimal point and two decimal digits. If d is 0, \n  YENw.d reads the value without a decimal point.  \n \nDetails:\nThe hexadecimal representation of the code for the yen sign character is 5B on EBCDIC \nsystems and 5C on ASCII systems. The monetary character that these codes represent might \nbe different in other countries."}},{"Name":"ZDw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads zoned decimal data. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 1 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Range: 1-31 \n \nDetails:\nThe ZDw.d informat reads zoned decimal data in which every digit requires one byte and in \nwhich the last byte contains the value's sign along with the last digit.\n\nNote: Different operating environments store zoned decimal values in different ways. However, \nZDw.d reads zoned decimal values with consistent results if the values are created in the same \ntype of operating environment that you use to run SAS.  \n\nYou can enter positive values in zoned decimal format from a personal computer. Some keying \ndevices enable you to enter negative values by overstriking the last digit with a minus sign.\n \nComparisons:\nLike the w.d informat, the ZDw.d informat reads data in which every digit requires one byte. \nUse ZDVw.d or ZDw.d to read zoned decimal data in which the last byte contains the last digit \nand the sign.\n\nThe ZDw.d informat functions like the ZDVw.d informat with one exception: ZDVw.d validates the \ninput string and disallows invalid data."}},{"Name":"ZDBw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads zoned decimal data in which zeros have been left blank. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 1 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Range: 0-31 \n \nDetails:\nThe ZDBw.d informat reads zoned decimal data that are produced in IBM 1410, 1401, and 1620 \nform, where 0s are left blank rather than being punched."}},{"Name":"ZDVw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads and validates zoned decimal data. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 1 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Range: 1-31 \n \nDetails:\nThe ZDVw.d informat reads data in which every digit requires one byte and in which the last \nbyte contains the value's sign along with the last digit. It also validates the input string \nand disallows invalid data.\n\nZDVw.d is dependent on the operating environment. For example, on IBM mainframes, ZDVw.d requires \nan F for all high-order nibbles except the last. (In contrast, the ZDw.d informat ignores the \nhigh-order nibbles for all bytes except for the nibbles that are associated with the sign.) The \nlast high-order nibble accepts values ranging from A-F, where A, C, E, and F are positive values \nand B and D are negative values. The low-order nibble on IBM mainframes must be a numeric digit \nthat ranges from 0-9, as with ZD.\n\nNote: Different operating environments store zoned decimal values in different ways. However, \nthe ZDVw.d informat reads zoned decimal values with consistent results if the values are created \nin the same type of operating environment that you use to run SAS.  \n \nComparisons:\nThe ZDVw.d informat functions like the ZDw.d informat with one exception: ZDVw.d validates the \ninput string and disallows invalid data."}},{"Name":"$BASE64Xw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Converts ASCII text to character data by using Base 64 encoding. \n    \nSyntax Description:\nw \n  specifies the width of the input field. \n  Default: 1 \n  Range: 1-32767 \n \nDetails:\nBase 64 is an industry encoding method whose encoded characters are determined by using a \npositional scheme that uses only ASCII characters. Several Base 64 encoding schemes have \nbeen defined by the industry for specific uses, such as e-mail or content masking. SAS maps \npositions 0-61 to the characters A-Z, a-z, and 0-9. Position 62 maps to the character +, and \nposition 63 maps to the character /. \n\nThe following are some uses of Base 64 encoding:\n\n  o embed binary data in an XML file \n  o encode passwords \n  o encode URLs\n\nThe '=' character in the encoded results indicates that the results have been padded with \nzero bits. In order for the encoded characters to be decoded, the '=' must be included in \nthe value to be decoded."}},{"Name":"$N8601Bw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads complete, truncated, and omitted forms of ISO 8601 duration, datetime, and \ninterval values that are specified in either the basic or extended notations. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  \n  Default: 50 \n  Range: 1 - 200 \n  Requirement: The minimum length for a duration value or a datetime value is 16. The minimum \n  length for an interval value is 16. \nd \n  specifies the number of digits to the right of the decimal point in the seconds value. \n  This argument is optional.\n\n  Default: 0 \n  Range: 0 - 3 \n  \nComparisons: \nThe $N8601B informat reads durations, intervals, and datetimes that are specified in either \nthe basic or extended notation. The $N8601E informat reads valid durations, intervals, and \ndatetimes that are specified only in the extended notation. Use the $N8601E informat when you \nneed to ensure compliance with the extended notation."}},{"Name":"$N8601Ew.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads ISO 8601 duration, datetime, and interval values that are specified in the \nextended notation. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  \n  Default: 50 \n  Range: 1 - 200 \n  Requirement: The minimum length for a duration value or a datetime value is 16. The minimum \n  length for an interval value is 16. \nd \n  specifies the number of digits to the right of the decimal point in the seconds value. \n  This argument is optional.\n\n  Default: 0 \n  Range: 0 - 3 \n  \nComparisons:\nThe $N8601E informat reads only valid durations, intervals, and datetimes that are specified \nin the extended notation. The $N8601B informat reads valid durations, intervals, and datetimes \nthat are specified in either the basic or extended notation. Use the $N8601E informat when you \nneed to ensure compliance with the extended notation."}},{"Name":"B8601DAw.|ND8601DAw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads date values that are specified in the ISO 8601 basic notation yyyymmdd. \n    \nSyntax Description: \nw \n  specifies the width of the input field.\n\n  Default: 10 \n  Requirement: The width of the output field must be 10. \n \nDetails: \nThe B8602DA informat reads date values that are specified in the ISO 8601 basic date \nnotation yyyymmdd:\n\n  yyyy is a four-digit year, such as 2008\n \n  mm is a two-digit month (zero padded) between 01 and 12\n \n  dd is a two-digit day of the month (zero padded) between 01 and 31"}},{"Name":"B8601DNw.|ND8601DNw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads date values that are specified the ISO 8601 basic notation yyyymmdd and returns \nSAS datetime values where the time portion of the value is 000000. \n\nSyntax Description:\nw \n  specifies the width of the input field.\n\n  Default: 10 \n  Requirement: The width of the input field must be 10. \n \nDetails:\nThe B8602DN informat reads date values that are specified in the ISO 8601 basic date \nnotation yyyymmdd and returns the date in a SAS datetime value:\n\nyyyy is a four-digit year, such as 2008.\n \nmm is a two-digit month (zero padded) between 01 and 12.\n \ndd is a two-digit day of the month (zero padded) between 01 and 31."}},{"Name":"B8601DTw.d|ND8601DTw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads datetime values that are specified in the ISO 8601 basic notation yyyymmddThhmmssffffff. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 19 \n  Range: 19-26 \nd \n  specifies the number of digits to the right of the decimal point in the seconds value. This argument is optional.\n\n  Default: 0 \n  Range: 0-6 \n \nDetails:\nThe B8602DT informat reads datetime values that are specified in the ISO 8601 basic datetime \nnotation yyyymmddThhmmssffffff:\n\n  yyyy is a four-digit year, such as 2008 \n  mm is a two-digit month (zero padded) between 01 and 12 \n  dd is a two-digit day of the month (zero padded) between 01 and 31 \n  hh is a two-digit hour (zero padded), between 00 - 23 \n  mm is a two-digit minute (zero padded), between 00 - 59 \n  ss is a two-digit second (zero padded), between 00 - 59 \n  ffffff are optional fractional seconds, with a precision of up to six digits, \n  where each digit is between 0 - 9"}},{"Name":"B8601DZw.d|ND8601DZw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads datetime values that are specified in the Coordinated Universal Time (UTC) \ntime scale using the ISO 8601 datetime basic notation yyyymmddThhmmss+|-hhmm or \nyyyymmddThhmmssffffffZ. \n\nSyntax Description:\nw \n  specifies the width of the input field. \n  Default: 26 \n  Range: 20-35 \nd \n  specifies the number of digits to the right of the seconds value, which represents \n  a fraction of a second. This argument is optional. \n  Default: 0 \n  Range: 0-6 \n \nDetails:\nUTC values specify a time and a time zone based on the zero meridian in Greenwich, England. \nThe B8602DZ informat reads datetime values that are specified in one of the following ISO 8601 \nbasic datetime notations: \n\n yyyymmddThhmmss+|-hhmm  \n yyyymmddThhmmssffffffZ  \n\nwhere: \n  yyyy is a four-digit year, such as 2008 \n  mm is a two-digit month (zero padded) between 01 and 12 \n  dd is a two-digit day of the month (zero padded) between 01 and 31 \n  hh is a two-digit hour (zero padded), between 00 and 24 \n  mm is a two-digit minute (zero padded), between 00 and 59 \n  ss is a two-digit second (zero padded), between 00 and 59 \n  .ffffff \n  are optional fractional seconds, with a precision of up to six digits, where each digit is between 0 and 9.\n\n  Z indicates that the time is for zero meridian (Greenwich, England) or UTC time. \n  +|-hhmm \n    is an hour and minute signed offset from zero meridian time. Note that the offset must be \n    +|-hhmm (that is, + or - and four characters). \n\n    Use + for time zones east of the zero meridian and use - for time zones west of the zero meridian. \n    For example, +0200 indicates a two hour time difference to the east of the zero meridian, and -0600 \n    indicates a six hour time differences to the west of the zero meridian.\n\n    Restriction: The shorter form +|-hh is not supported."}},{"Name":"B8601TMw.d|ND8601TMw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads time values that are specified in the ISO 8601 basic notation hhmmssffffff. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 8 \n  Range: 8-15 \nd \n  specifies the number of digits to the right of the decimal point in the seconds value. \n  This argument is optional. \n  Default: 0 \n  Range: 0-6 \n \nDetails:\nThe B8601TM informat reads time values that are specified in the ISO 8601 basic time notation hhmmssffffff:\n\n  hh is a two-digit hour (zero padded), between 00 and 23 \n  mm is a two-digit minute (zero padded), between 00 and 59 \n  ss is a two-digit second (zero padded), between 00 and 59 \n  \n  .ffffff \n  are optional fractional seconds, with a precision of up to six digits, where each digit is between 0 - 9"}},{"Name":"B8601TZw.d|ND8601TZw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads time values that are specified in the ISO 8601 basic time notation hhmmssfffff+|-hhmm \nor hhmmssffffffZ. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 14 \n  Range: 9-20 \nd \n  (optional) specifies the number of digits to the right of the decimal point in the seconds value. \n  Default: 0 \n  Range: 0 - 6 \n \nDetails:\nUTC time values specify a time and a time zone based on the zero meridian in Greenwich, England. \nThe B8602TZ informat reads time values that are specified in the following ISO 8601 basic time notations: \n\n hhmmssffffff+|-hhmm  \n hhmmssffffffZ  \n\nwhere:\n  hh is a two-digit hour (zero padded), between 00 and 23 \n  mm is a two-digit minute (zero padded), between 00 and 59 \n  ss is a two-digit second (zero padded), between 00 and 59\n\n  ffffff \n  are optional fractional seconds, with a precision of up to six digits, where each digit is between 0 and 9\n\n  Z indicates that the time is for zero meridian (Greenwich, England) or UTC time\n  +|-hh:mm \n    is an hour and minute signed offset from zero meridian time. Note that the offset must \n    be +|-hhmm (that is, + or - and four characters). \n\n    Use + for time zones east of the zero meridian and use - for time zones west of the zero \n    meridian. For example, +0200 indicates a two hour time difference to the east of the zero\n    meridian, and -0600 indicates a six hour time differences to the west of the zero meridian.\n    Restriction: The shorter form +|-hh is not supported."}},{"Name":"E8601DAw.|IS8601DAw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads date values that are specified in the ISO 8601 extended notation yyyy-mm-dd. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 10 \n  Requirement: The width of the input field must be 10. \n \nDetails: \nThe E8601DA informat reads date values that are specified in the ISO 8601 extended date notation yyyy-mm-dd:\n\n  yyyy is a four-digit year, such as 2008  \n  mm is a two-digit month (zero padded) between 01 and 12  \n  dd is a two-digit day of the month (zero padded) between 01 and 31"}},{"Name":"E8601DNw.|IS8601DNw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads date values that are specified in the ISO 8601 extended notation yyyy-mm-dd \nand returns SAS datetime values where the time portion of the value is 000000. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 10 \n  Requirement: The width of the input field must be 10. \n \nDetails: \nThe E8601DN informat reads date values that are specified in the ISO 8601 extended date \nnotation is yyyy-mm-dd and returns the date in a SAS datetime value:\n\n  yyyy is a four-digit year, such as 2008  \n  mm is a two-digit month (zero padded) between 01 and 12  \n  dd is a two-digit day of the month (zero padded) between 01 and 31"}},{"Name":"E8601DTw.d|IS8601DTw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads datetime values that are specified in the ISO 8601 extended notation \nyyyy-mm-ddThh:mm:ss.ffffff. \n\nSyntax Description:\nw \n  specifies the width of the input field. \n  Default: 19 \n  Range: 19-26 \nd \n  specifies the number of digits to the right of the decimal point in the seconds value. \n  This argument is optional. \n  Default: 0 \n  Range: 0-6 \n \nDetails:\nThe E8601DT informat reads datetime values that are specified in the ISO 8601 extended \ndatetime notationyyyy-mm-ddThh:mm:ss.ffffff:\n\n  yyyy is a four-digit year, such as 2008. \n  mm is a two-digit month (zero padded) between 01 and 12. \n  dd is a two-digit day of the month (zero padded) between 01 and 31. \n  hh is a two-digit hour (zero padded), between 00 and 23. \n  mm is a two-digit minute (zero padded), between 00 and 59. \n  ss is a two-digit second (zero padded), between 00 and 59.\n\n  .ffffff \n  are optional fractional seconds, with a precision of up to six digits, where each digit \n  is between 0 and 9."}},{"Name":"E8601DZw.d|IS8601DZw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads datetime values that are specified in the Coordinated Universal Time (UTC) \ntime scale using the ISO 8601 datetime extended notation hh:mm:ss+|-hh:mm.fffff \nor hh:mm:ss.fffffZ. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 26 \n  Range: 20-35 \nd \n  specifies the number of digits to the right of the decimal point in the value for the '\n  lowest order component. This argument is optional. \n  Default: 0 \n  Range: 0-6 \n \nDetails: \nUTC values specify a time and a time zone based on the zero meridian in Greenwich, England. \nThe E8602DZ informat reads datetime values contain UTC time offsets and that are specified \nin one of the following ISO 8601 extended datetime notations: \n\n yyyy-mm-ddThh:mm:ss.ffffff+|-hh:mm  \n yyyy-mm-ddThh:mm:ss.ffffffZ  \n\nwhere\n  yyyy is a four-digit year, such as 2008 \n  mm is a two-digit month (zero padded) between 01 and 12 \n  dd is a two-digit day of the month (zero padded) between 01 and 31 \n  hh is a two-digit hour (zero padded), between 00 and 24 \n  mm is a two-digit minute (zero padded), between 00 and 59 \n  ss is a two-digit second (zero padded), between 00 and 59\n\n  .ffffff \n  are optional fractional seconds, with a precision of up to six digits, where each digit is between 0 and 9\n\n  Z indicates that the time is UTC time at the zero meridian (Greenwich, England) \n\n  +|-hh:mm \n    is an hour and minute signed offset from zero meridian time. Note that the offset must \n    be +|-hh:mm (that is, + or - and five characters). \n\n    Use + for time zones east of the zero meridian and use - for time zones west of the zero \n    meridian. For example, +02:00 indicates a two hour time difference to the east of the zero\n    meridian, and -06:00 indicates a six hour time differences to the west of the zero meridian.\n    Restriction: The shorter form +|-hh is not supported."}},{"Name":"E8601LZw.d|IS8601LZw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads Coordinated Universal Time (UTC) values that are specified in the ISO 8601 \nextended notation hh:mm:ss+|-hh:mm.fffff or hh:mm:ss.fffffZ and converts them \nto the local time. \n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 14 \n  Range: 9-20 \n  Requirement: To read a time with the Z time zone indicator, the width of the input field \n  must be 9 if data follows on the same line of data. \nd \n  specifies the number of digits to the right of the decimal point in the value for the lowest \n  order component. This argument is optional. \n  Default: 0 \n  Range: 0-6 \n \nDetails:\nUTC values specify a time and a time zone based on the zero meridian in Greenwich, England. \nThe E8602LZ informat reads UTC time values that are specified in one of the following ISO 8601 \nextended time notations and return a SAS time value for the local time: \n\n hh:mm:ss.ffffff+|-00:00  \n hh:mm:ss.ffffffZ  \n\nwhere\n  hh is a two-digit hour (zero padded), between 00 and 23 \n  mm is a two-digit minute (zero padded), between 00 and 59 \n  ss is a two-digit second (zero padded), between 00 and 59\n\n  .ffffff \n  are optional fractional seconds, with a precision of up to six digits, where each digit \n  is between 0 and 9\n\n  Z indicate zero meridian or UTC time.\n\n  +|-hh:mm \n    is an hour and minute signed offset from zero meridian or UTC time. Note that the offset \n    must be +|-hh:mm (that is, + or - and five characters). \n\n    Use the + for time zones east of the zero meridian and use the - for time zones west of \n    the zero meridian.\n    Restriction: The shorter form +|-hh is not supported."}},{"Name":"E8601TMw.d|IS8601TMw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads time values that are specified in the ISO 8601 extended notation hh:mm:ss.ffffff. \n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 8 \n  Range: 8-15 \nd \n  specifies the number of digits to the right of the decimal point in the seconds value. \n  This argument is optional.\n  Default: 0 \n  Range: 0-6 \n \nDetails: \nThe E8601TM informat reads time values that are specified in the following ISO 8601 extended \ntime notation: \n\n hh:mm:ss.ffffff \n \nwhere\n  hh is a two-digit hour (zero padded), between 00 and 23 \n  mm is a two-digit minute (zero padded), between 00 and 59 \n  ss is a two-digit second (zero padded), between 00 and 59\n\n  .ffffff \n  are optional fractional seconds, with a precision of up to six digits, where each digit \n  is between 0 and 9"}},{"Name":"E8601TZw.d|IS8601TZw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads time values that are specified in the ISO 8601 extended time notation \nhh:mm:ss+|-hh:mm.ffffff or hh:mm:ssZ.\n\nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 14 \n  Range: 9-20 \n  Requirement: To read a time with the Z time zone indicator, the width of the input field\n  must be 9 if data follows on the same line of data. \n\nd \n  (optional) specifies the number of digits to the right of the decimal point in the value \n  for the lowest order component. \n  Default: 0 \n  Range: 0-6 \n \nDetails:\nUTC time values specify a time and a time zone based on the zero meridian in Greenwich, England. \nThe E8602TZ informat reads UTC time values that are specified in one of the following ISO 8601 \nextended notations: \n\n  hh:mm:ss+|-hh:mm.ffffff  \n  hh:mm:ss  \n\nThe following list explains the UTC time variables:\n\n  hh is a two-digit hour (zero padded), between 00 and 23 \n  mm is a two-digit minute (zero padded), between 00 and 59 \n  ssis a two-digit second (zero padded), between 00 and 59\n\n  .ffffff \n  are optional fractional seconds, with a precision of up to six digits, where each \n  digit is between 0 - 9\n\n  Z indicate zero meridian or UTC time\n\n  +|-hh:mm \n    is an hour and minute signed offset from zero meridian. Note that the offset must\n    be +|-hh:mm (that is, + or - and five characters). \n\n    Use the + for time zones east of the zero meridian and use the - for time zones west \n    of the zero meridian. \n    Restriction: The shorter form +|-hh is not supported."}},{"Name":"S370FZDBw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads zoned decimal data in which zeros have been left blank. \n    \nSyntax Description\n\nw \n  specifies the width of the input field. \n  Default: 8 \n  Range: 1-32 \nd \n  specifies the power of 10 by which to divide the value. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n \nDetails:\nUse the S370ZFDBw.d informat on other operating environments to read zoned decimal \ndata from IBM mainframe files."}},{"Name":"SIZEKMGw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads numeric data that is appended to the letters K, M, or G.\n    \nSyntax Description: \nw \n  specifies the width of the input field. \n  Default: 6 \n  Range: 4-35 \nd \n  specifies the number of digits to the right of the decimal point in the numeric \n  value. This argument is optional. \n  Default: 0 \n  Range: 0-31 \n \nDetails: \nThe SAS data value that results when the SIZEKMGw.d informat reads a number that contains \na K, M, or G is the number multiplied by the following values:\n\n  K 1024  \n  M 1048576  \n  G 1073741824"}},{"Name":"VMSZNw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads VMS and MicroFocus COBOL zoned numeric data. \n    \nSyntax Description: \nw \n  specifies the width of the output field.\nd \n  specifies the number of digits to the right of the decimal point in the numeric value. \n  This argument is optional.\n \nDetails:\nThe VMSZNw.d informat is similar to the ZDw.d informat. Both read a string of ASCII digits, \nand the last digit is a special character denoting the magnitude of the last digit and the \nsign of the entire number. The difference between the VMSZNw.d informat and the ZDw.d informat \nis in the special character used for the last digit. The following table shows the special \ncharacters used by the VMSZNw.d informat. \n\nDesired   Special    Desired   Special\nDigit       Character Digit        Character \n0             0             -0              p \n1             1             -1              q \n2             2             -2              r \n3             3             -3              s \n4             4             -4              t \n5             5             -5              u \n6             6             -6              v \n7             7             -7              w \n8             8             -8              x \n9             9             -9              y \n\nData formatted using the VMSZNw.d informat are ASCII strings."}},{"Name":"B8601CIw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads an IBM date and time value that includes a century marker, in the form cyymmddhhmmss<fff>.\n    \nSyntax: B8601CIw.d\n\nSyntax Description:\nw specifies the width of the input field. \n  Default:16 \n  Range:10\u201326 \nd specifies the number of digits to the right of the decimal point in the seconds value. \n  Default:0 \n  Range:0\u20136\n  \nDetails:\nThe B8601CI informat reads time values that are specified in the following IBM time notation: \n    cyymmddhhmmss<fff> \nc  is a single digit that represents a century: \n  0 indicates the years 1900\u20131999. \n  1 indicates the years 2000\u20132099. \n  2 indicates the years 2100\u20132199. \n  n indicates the years 00\u201399 in a century that is determined by performing a calculation \n  on a year greater than 2199. To determine the century marker, subtract 1900 from the year \n  and divide the result by 100. Discard the remainder. The remaining integer is the century \n  marker. For example, to determine the century marker for the year 2382, perform this \n  calculation: (2382-1900)/100=4.82. Discard .82. The century marker is 4.  \n\nyy is a two-digit year between 00 and 99. \nmm is a two-digit month (zero padded) between 01 and 12. \ndd is a two-digit day of the month (zero padded) between 01 and 31. \nhh is a two-digit hour (zero padded) between 00 and 23. \nmm is a two-digit minute (zero padded) between 00 and 59. \nss is a two-digit second (zero padded) between 00 and 59. \nfff are optional fractional seconds, with a precision of up to three digits, where \n  each digit is between 0 and 9."}},{"Name":"B8601DJw.d","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads a Java date and time value that is in the form yyyymmddhhmmss<ffffff>.\n    \nSyntax: B8601DJw.d\n\nSyntax Description:\nw \n  specifies the width of the input field. \n  Default:16 \n  Range:10\u201326 \nd \n  specifies the number of digits to the right of the decimal point in the seconds value. \n  Default:0 \n  Range:0\u20136\n  \nDetails:\nThe B8601DJ informat reads a date and time value that is specified in the following Java \ndate and time notation: \n\n    yyyymmddhhmmss<ffffff> \n    \nyyyy\n  is a four-digit year between 0000 and 9999. \nmm\n  is a two-digit month (zero padded) between 01 and 12. \ndd\n  is a two-digit day of the month (zero padded) between 01 and 31. \nhh\n  is a two-digit hour (zero padded) between 00 and 23. \nmm\n  is a two-digit minute (zero padded) between 00 and 59. \nss\n  is a two-digit second (zero padded) between 00 and 59. \nffffff\n  are optional fractional seconds, with a precision of up to six digits, where each \n  digit is between 0 and 9."}},{"Name":"HHMMSSw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads hours, minutes, and seconds in the form hh:mm:ss or hhmmss.\n    \nSyntax: HHMMSSw. \n\nSyntax Description:\nw \n  specifies the width of the input field. \n  Default:8 \n  Range:1\u201320\n  \nDetails:\nThe HHMMSSw. informat reads SAS time values in one of the following forms: \n  o hh:mm:ss\n  o hhmmss\nhh\n  is an integer that represents the number of hours. \n: \n  represents a special character that separates hours, minutes, and seconds. \nmm\n  is an integer that represents the number of minutes. \nss\n  is an integer that represents the number of seconds. Fractional seconds are ignored."}},{"Name":"B8601DXw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Adjusts a Coordinated Universal Time (UTC) datetime value to the user local date and time. Then, \nreads the local date and time by using the ISO 8601 datetime and time zone basic notation \nyyyymmddThhmmss+|-hhmm."}},{"Name":"B8601LXw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads datetime values as local time by appending a time zone offset difference between the local \ntime and UTC, using the ISO 8601 basic notation yyyymmddThhmmss+|\u2013hhmm."}},{"Name":"B8601TXw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Adjusts a Coordinated Universal Time (UTC) value to the user local time. Then, reads the local \ntime by using the ISO 8601 basic time notation hhmmss+|\u2013hhmm."}},{"Name":"E8601DXw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Adjusts a Coordinated Universal Time (UTC) datetime value to the user local date and time. Then, \nreads the local date and time by using the ISO 8601 datetime and time zone extended notation \nyyyy-mm-ddThh:mm:ss+|-hh:mm."}},{"Name":"E8601LXw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Reads datetime values as local time by appending a time zone offset difference between the local \ntime and UTC, using the ISO 8601 extended notation yyyy-mm-ddThh:mm:ss+|-hh:mm."}},{"Name":"E8601TXw.","Type":"SAS_INFORMAT","Help":{"#cdata":"Adjusts a Coordinated Universal Time (UTC) value to the user local time. Then, reads the local \ntime by using the ISO 8601 extended time notation hh:mm:ss+|-hh:mm."}}],"#comment":[{},{}]}}