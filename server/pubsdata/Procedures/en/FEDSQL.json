{"name":"FEDSQL","statements":[{"name":"PROC FEDSQL","description":"Specifies that the subsequent input is FedSQL language statements.","help":"PROC FEDSQL  [connection-options][processing-options];\n\t  ...FedSQL statements\n\tQUIT ;","arguments":[{"name":"_METHOD","optional":true,"description":"prints a brief text description of the FedSQL query plan.","type":"standalone"},{"name":"_POSTOPTPLAN","optional":true,"description":"prints an XML tree illustrating the FedSQL query plan.","type":"standalone"},{"name":"ANSIMODE","optional":true,"description":"specifies that nonexistent values in CHAR and DOUBLE columns are processed as ANSI SQL null values.","type":"standalone"},{"name":"AUTOCOMMIT","optional":true,"description":"for use with DBMS that support transactions only, specifies whether updates are automatically saved to a table after a default number of rows are updated, or whether rollback is available.","type":"standalone"},{"name":"NOAUTOCOMMIT","optional":true,"description":"for use with DBMS that support transactions only, specifies whether updates are automatically saved to a table after a default number of rows are updated, or whether rollback is available.","type":"standalone"},{"name":"CNTL=","optional":true,"description":"specifies optional control instructions for FedSQL query planning and query execution in CAS.","help":"CNTL=(*instruction(s)*)","type":"value","arguments":[{"name":"DISABLEPASSTHROUGH","description":"disables implicit FedSQL pass-through in CAS.","type":"standalone"},{"name":"DYNAMICCARDINALITY","description":"instructs the FedSQL query planner to perform cardinality estimations before selecting a query plan.","type":"standalone"},{"name":"OPTIMIZEVARBINARYPRECISION","description":"optimizes VARBINARY precision by using a precision that is appropriate to the actual data, instead of the precision declared for the VARBINARY columns.","type":"standalone"},{"name":"OPTIMIZEVARCHARPRECISION","description":"optimizes VARCHAR precision by using a precision that is appropriate to the actual data, instead of the precision declared for the VARCHAR columns.","type":"standalone"},{"name":"PRESERVEJOINORDER","description":"joins tables in the specified order instead of an order chosen by the FedSQL query optimizer.","type":"standalone"},{"name":"REQUIREFULLPASSTHROUGH","description":"stops processing the FedSQL request when implicit pass-through of the full query cannot be achieved.","type":"standalone"},{"name":"SHOWSTAGES","description":"writes query execution details to the SAS log.","type":"standalone"}]},{"name":"ERRORSTOP","optional":true,"description":"specifies whether the procedure stops executing if it encounters an error.","type":"standalone"},{"name":"NOERRORSTOP","optional":true,"description":"specifies whether the procedure stops executing if it encounters an error.","type":"standalone"},{"name":"EXEC","optional":true,"description":"specifies whether a statement should be executed after its syntax is checked for accuracy.","type":"standalone"},{"name":"NOEXEC","optional":true,"description":"specifies whether a statement should be executed after its syntax is checked for accuracy.","type":"standalone"},{"name":"LABEL","optional":true,"description":"specifies whether to use the column label or the column name as the column heading.","type":"standalone"},{"name":"NOLABEL","optional":true,"description":"specifies whether to use the column label or the column name as the column heading.","type":"standalone"},{"name":"LIBS=","optional":true,"aliases":["LIBNAMES="],"description":"specifies one or more librefs that have previously been assigned to a SAS library.","help":"LIBS=*libref* | (*libref1**libref2* ...*librefn*)","type":"choice","arguments":[{"name":"libref","placeholder":true,"type":"dataSet"},{"name":"(libref1libref2 ...librefn)","placeholder":true,"type":"dataSet"}]},{"name":"MEMSIZE=","optional":true,"description":"specifies a limit for the amount of memory that is used for an underlying query (such as a SELECT statement), so that allocated memory is available to support other PROC FEDSQL operations.","help":"MEMSIZE=*n* | *n*M | *n*G","type":"choice","arguments":[{"name":"n","placeholder":true,"type":"value"},{"name":"M","type":"value"},{"name":"G","type":"value"}]},{"name":"NOPRINT","optional":true,"description":"suppresses the normal display of results.","type":"standalone"},{"name":"NUMBER","optional":true,"description":"specifies to include a column named Row, which is the row (observation) number of the data as the rows are retrieved.","type":"standalone"},{"name":"SESSREF=","optional":true,"description":"specifies to run the FedSQL statements in a CAS session. The CAS session is identified by its session name.","help":"SESSREF=*session-name*","type":"value"},{"name":"SESSUUID=","optional":true,"description":"specifies to run the FedSQL statements in a CAS session. The CAS session is identified by its universally unique identifier (UUID).","help":"SESSUUID=\"*session-uuid*\"","type":"value"},{"name":"STIMER","optional":true,"description":"specifies to write a subset of system performance statistics, such as time-elapsed statistics, to the SAS log.","type":"standalone"},{"name":"XCODE=","optional":true,"description":"controls the behavior of the SAS session when an NLS transcoding failure occurs.","help":"XCODE=ERROR | WARNING | IGNORE","type":"choice","arguments":[{"name":"ERROR","description":"specifies that a run-time error occurs, which causes row processing to halt. An error message is written to the SAS log. This is the default behavior.","type":"standalone"},{"name":"WARNING","description":"specifies that the incompatible character is set to a substitution character. A warning message is written to the SAS log.","type":"standalone"},{"name":"IGNORE","description":"specifies that the incompatible character is set to a substitution character. No messages are written to the SAS log.","type":"standalone"}]}]},{"name":"ALTER TABLE","description":"Adds or drops table columns and modifies column definitions.","help":"ALTER TABLE  table [\\{OPTIONS SAS-table-option=value [,  ...SAS-table-option=value]\\ }] \n\tADD COLUMN <column-definition>[,  ...<column-definition>] | \n\t ADD CONSTRAINT <table-constraint> | \n\t ALTER [COLUMN]<column-definition>[,  ...<column-definition>] | \n\t DROP COLUMN |  column[,  ...column] [FORCE]\n\t DROP CONSTRAINT constraint[,  ...constraint] | \n\t RENAME TO table | \n\t RENAME column TO column\n\t;                     \n<column-definition>::=  \n\t columndata-type [<column-constraint>] [SET DEFAULT value | DROP DEFAULT]     \n<column-constraint>::=  \n\tCONSTRAINT constraint \n \n\t{CHECK (search-condition) | \n\t\t PRIMARY KEY | \n\t\t UNIQUE | \n\t\t NOT NULL }     \n<table-constraint>::=  \n\tCONSTRAINT  constraint \n \n\t{ CHECK (search-condition) | \n\t\t PRIMARY KEY (column[,  ...column]) | \n\t\t UNIQUE (column[,  ...column]) | \n\t\t<referential-constraint >}\n\t\t[<constraint-check-time>] \n           \n<referential-constraint>::=  \n\tFOREIGN KEY  (referencing-column [,  ... referencing-column])\n\t\tREFERENCES referenced-table (referenced-column [,  ...referenced-column]) \n\t\t[<referential-trigger-action>]  \n<referential-trigger-action>::=  \n\t{[ON UPDATE <referential-action>[ON DELETE <referential-action>] |  \n\t\t ON DELETE <referential-action>[ON UPDATE <referential-action>]] } \n  \n<referential-action>::=  \n\tCASCADE | SET NULL | SET DEFAULT | RESTRICT | NO ACTION \n<constraint-check-time>::=  \n\t{ DEFERRABLE [INITIALLY DEFERRED | INITIALLY IMMEDIATE] | \n\t\t[INITIALLY DEFERRED | INITIAILLY IMMEDIATE] DEFERRABLE |  \n\t\t INITIALLY DEFERRED | \n\t\t NOT DEFERRABLE [INITIALLY IMMEDIATE] | \n\t\t[INITIALLY IMMEDIATE] NOT DEFERRABLE }          ","arguments":[{"name":"catalog","placeholder":true,"description":"is an implementation of the ANSI SQL standard for an SQL catalog. The catalog is a data container object that groups logically related schemas. It is the first-level (top) grouping mechanism in a data organization hierarchy that is used along with a schema to provide a means of qualifying names. A catalog is a metadata object in a SAS Metadata Repository.","type":"dataSet"},{"name":"schema","placeholder":true,"description":"is an implementation of the ANSI SQL standard for an SQL schema. The schema is a data container object that groups files such as tables and views and other objects that are supported by a data source such as stored procedures. The schema provides a grouping object that is used along with a catalog to provide a means of qualifying names.","type":"value"},{"name":"table-name","placeholder":true,"description":"is the name of the table.","type":"dataSet"},{"name":"{OPTIONS","optional":true,"description":"specifies one or more table options and their respective values to apply to the table.","help":"{OPTIONS *SAS-table-option=value* [,  ...*SAS-table-option=value*]}","type":"dataSet"},{"name":"column","optional":true,"placeholder":true,"description":"specifies the name of a column in a table.","type":"value"},{"name":"ADD","optional":true,"description":"specifies to add a column to a table.","help":"ADD COLUMN &lt;column-definition&gt; [,  ...&lt;column-definition&gt;]","type":"standaloneOrValue"},{"name":"ADD","optional":true,"description":"specifies to add an integrity constraint to one or more columns.","help":"ADD CONSTRAINT &lt;table-constraint&gt;","type":"standalone"},{"name":"ALTER","optional":true,"description":"specifies to modify the definition of one or more columns.","help":"ALTER [COLUMN] &lt;column-definition&gt;[ ,  ...&lt;column-definition&gt;] ","type":"standaloneOrValue"},{"name":"DROP","optional":true,"description":"specifies to delete the specified column from the table. When FORCE is specified, the column is dropped from the table without error processing. Use the FORCE keyword only when you are certain that dropping the column without error processing will not negatively affect the table.","help":"DROP COLUMN *column* , [ ...*column*] [FORCE]","type":"value"},{"name":"DROP","optional":true,"description":"specifies to delete an integrity constraint.","help":"DROP CONSTRAINT *constraint* [, …*constraint*]","type":"value","arguments":[{"name":"constraint","placeholder":true,"description":"specifies the name of the constraint to drop.","type":"value"}]},{"name":"RENAME","optional":true,"description":"changes the specified table or column name to a new name. The new name follows the TO keyword.","type":"standalone"}]},{"name":"BEGIN","description":"Marks the beginning of a transaction that comprises multiple statements.","help":"BEGIN  [TRANSACTION];"},{"name":"COMMIT","description":"Makes changes that have been performed since the start of a transaction a permanent part of the database.","help":"COMMIT  [TRANSACTION];"},{"name":"CREATE INDEX","description":"Creates an index on columns in a specified table.","help":"CREATE  [UNIQUE] INDEX  index ON table\n\t (column [ASCENDING | DESCENDING][,  ...column]);","arguments":[{"name":"UNIQUE","optional":true,"description":"creates a unique index on a table.","type":"standalone"},{"name":"index","optional":true,"placeholder":true,"description":"specifies the name of the index.","type":"value"},{"name":"table","optional":true,"placeholder":true,"description":"specifies the name of the table that contains the column or columns to be indexed.","type":"dataSet"},{"name":"column","optional":true,"placeholder":true,"description":"specifies the name of the column to which the index applies. Specify two or more column names to create a composite index.","type":"value"},{"name":"ASCENDING","optional":true,"aliases":["ASC"],"description":"Rows are sorted from the smallest value to the largest value. This is the default value.","type":"standalone"},{"name":"DESCENDING","optional":true,"aliases":["DESC"],"description":"Rows are sorted from the largest value to the smallest value.","type":"standalone"}]},{"name":"CREATE TABLE","description":"Creates a new table.","help":"CREATE TABLE  {table | _NULL_ }\n\t[\\{OPTIONS SAS-table-option=value [ ...SAS-table-option=value] \\}]\n\t( <column-definition>[,  ...<column-definition> | <table-constraint>]) | \n\tAS query-expression\n\t; \n          \n<column-definition>::=  \n\tcolumn data-type [<column-constraint>] [DEFAULT value]\n\t\t[HAVING [FORMAT format][INFORMAT informat][LABEL 'label']] \n     \n<column-constraint>::=  \n\tCONSTRAINT constraint{CHECK (search-condition) | \n\t PRIMARY KEY | \n\t UNIQUE | \n\t NOT NULL}             \n<table-constraint>::=  \n\tCONSTRAINT  constraint{CHECK (search-condition) | \n\t PRIMARY KEY (column[,  ...column]) | \n\t UNIQUE (column[,  ...column]) | \n\t<referential-constraint>}\n\t[<constraint-check-time>] \n           \n<referential-constraint>::=  \n\tFOREIGN KEY (referencing-column [,  ...referencing-column]) \n\t\tREFERENCES referenced-table (referenced-column [,  ...referenced-column])\n\t\t[<referential-trigger-action>]  \n<referential-trigger-action>::=  \n\t{ON UPDATE <referential-action>[ON DELETE <referential-action>] | \n\t\t ON DELETE <referential-action>[ON UPDATE <referential-action>]} \n  \n<referential-action>::=  \n\tCASCADE | SET NULL | SET DEFAULT | RESTRICT | NO ACTION \n<constraint-check-time>::= \n\t{DEFERRABLE [INITIALLY DEFERRED |  INITIALLY IMMEDIATE] | \n\t[INITIALLY DEFERRED |  INITIALLY IMMEDIATE] DEFERRABLE | \n\tINITIALLY DEFERRED | \n\t NOT DEFERRABLE [INITIALLY IMMEDIATE] | \n\t[INITIALLY IMMEDIATE] NOT DEFERRABLE} ","arguments":[{"name":"catalog","placeholder":true,"description":"is an implementation of the ANSI SQL standard for an SQL catalog. The catalog is a data container object that groups logically related schemas. The catalog is the first-level (top) grouping mechanism in a data organization hierarchy that is used along with a schema to provide a means of qualifying names.","type":"dataSet"},{"name":"schema","placeholder":true,"description":"is an implementation of the ANSI SQL standard for an SQL schema The schema is a data container object that groups files such as tables and views and other objects supported by a data source such as stored procedures. The schema provides a grouping object that is used along with a catalog to provide a means of qualifying names.","type":"value"},{"name":"table-name","placeholder":true,"description":"is the name of the table.","type":"dataSet"},{"name":"_NULL_","optional":true,"description":"specifies to test the performance of creating a table using the AS query-expression clause. FedSQL creates the table internally as if it were to be saved, writing the normal progress messages. The table creation appears to be successful. Once the query expression is complete, the table is discarded.","type":"standalone"},{"name":"{OPTIONS","optional":true,"description":"specifies one or more table options and their respective values to apply to the table.","help":"{OPTIONS *SAS-table-option=value* [ ...*SAS-table-option=value*]}","type":"dataSet"},{"name":"AS","optional":true,"description":"specifies to create a new table from an existing table by selecting rows from the existing table using a query expression. The column attributes, such as formats and labels, are copied from the existing table to the new table.","help":"AS *query-expression*","type":"value","arguments":[{"name":"query-expression","placeholder":true,"description":"specifies the SELECT statement that retrieves information from an existing table to use in creating a new table.","type":"value"}]},{"name":"schema","placeholder":true,"description":"is an implementation of the ANSI SQL standard for an SQL schema. The schema is a data container object that groups files such as tables and views and other objects supported by a data source such as stored procedures. The schema provides a grouping object that is used along with a catalog to provide a means of qualifying names.","type":"value"},{"name":"column-name","placeholder":true,"description":"is the name of the column.","type":"value"},{"name":"BIGINT","description":"stores a large signed, exact whole number.","type":"standalone"},{"name":"BINARY","description":"stores varying-length binary data.","help":"BINARY(*n*)","type":"value","arguments":[{"name":"n","placeholder":true,"description":"specifies the maximum number of bytes that can be used to store the binary data. The number of bytes that are used to store the binary data is the number of bytes that are necessary to represent the binary data, up to n bytes.","type":"value"}]},{"name":"CHAR","aliases":["CHARACTER(<i>n</i>)"],"description":"stores a fixed-length character string.","help":"CHAR(*n*) [CHARACTER SET \"*character-set-identifier*\"]","type":"value","arguments":[{"name":"n","placeholder":true,"description":"specifies the number of bytes that are used to store the character string. If the character string is less than n bytes, the value is right-padded with spaces.","type":"value"},{"name":"CHARACTER","description":"specifies character set encoding information for CHAR data types.","help":"CHARACTER SET \"*character-set-identifier*\"","type":"value"}]},{"name":"DATE","description":"stores a date value in the format yyyy-mm-dd.","type":"standalone"},{"name":"DECIMAL","aliases":["NUMERIC"],"description":"stores a signed, fixed-point decimal number.","type":"standalone"},{"name":"DOUBLE","aliases":["DOUBLE PRECISION"],"description":"stores a signed, approximate, floating point number.","type":"standalone"},{"name":"FLOAT","description":"stores a signed, approximate, single-precision or double-precision, floating point number. The user-specified precision determines whether the data type stores a single precision or double precision number. If the specified precision is equal to or greater than 25, the value is stored as a double precision number, which is a DOUBLE. If the specified precision is less than 25, the value is stored as a single precision number, which is a REAL.","help":"FLOAT(*p*)","type":"value","arguments":[{"name":"p","placeholder":true,"description":"specifies the maximum number of digits in the floating point number.","type":"value"}]},{"name":"INTEGER","description":"stores an exact whole number.","type":"standalone"},{"name":"NCHAR","description":"stores a fixed-length character string by using the Unicode national character set.","help":"NCHAR(*n*)","type":"value","arguments":[{"name":"n","placeholder":true,"description":"specifies the maximum number of multibyte characters that are used to store the character string. If the character string is less than n characters, the value is right-padded with spaces.","type":"value"}]},{"name":"NUMERIC","aliases":["DECIMAL"],"description":"stores a signed, fixed-point decimal number.","type":"standalone"},{"name":"NVARCHAR","description":"stores a varying-length multibyte character string by using the Unicode national character set.","help":"NVARCHAR(*n*)","type":"value","arguments":[{"name":"n","placeholder":true,"description":"specifies the maximum number of multibyte characters that can be used to store the character string. The number of bytes is the actual number of multibyte characters specified, up to n characters.","type":"value"}]},{"name":"REAL","description":"stores a signed, approximate, single-precision, floating-point number.","type":"standalone"},{"name":"SMALLINT","description":"stores a small signed, exact whole number.","type":"standalone"},{"name":"TIME","description":"stores a time value with seconds precision.","help":"TIME(*p*)","type":"value"},{"name":"TIMESTAMP","aliases":["DATETIME"],"description":"stores both the date and time value with seconds precision.","help":"TIMESTAMP(*p*)","type":"value"},{"name":"TINYINT","description":"stores a very small signed exact, whole number.","type":"standalone"},{"name":"VARBINARY","description":"stores varying-length binary data.","help":"VARBINARY(*n*)","type":"value","arguments":[{"name":"n","placeholder":true,"description":"specifies the maximum number of bytes that can be used to store the binary data. The number of bytes that are used to store the binary data is the number of bytes that are necessary to represent the binary data, up to n bytes.","type":"value"}]},{"name":"VARCHAR","description":"stores a varying-length character string.","help":"VARCHAR(*n*)  [CHARACTER SET \"*character-set-identifier*\"]","type":"value","arguments":[{"name":"n","placeholder":true,"description":"specifies the number of multibyte characters that are used to store the character string. The number of bytes that are stored is the actual number of multibyte characters, up to n characters.","type":"value"},{"name":"CHARACTER","description":"specifies character set encoding information for CHAR data types.","help":"[CHARACTER SET \"*character-set-identifier*\"]","type":"standaloneOrValue"}]},{"name":"column-constraint","optional":true,"description":"specifies to place an integrity constraint on the column.","type":"standalone"},{"name":"DEFAULT","optional":true,"description":"for each row that is added to the table, specifies a value for the column that is assumed when no other value is entered for that column.","help":"DEFAULT *value*","type":"value","arguments":[{"name":"value","placeholder":true,"description":"specifies the default value.","type":"value"}]},{"name":"HAVING","optional":true,"description":"specifies a clause that is used to associate a format, informat, or label with the column.","help":"HAVING [FORMAT *format*] [INFORMAT *informat*] [LABEL '*label* ']","type":"standaloneOrValue","arguments":[{"name":"FORMAT","description":"specifies a SAS data format that is stored as column metadata. The format is not applied to the column data until execution time.","help":" FORMAT *format*","type":"value","arguments":[{"name":"format","placeholder":true,"description":"specifies a valid SAS data format. If the format is a format other than a FedSQL or DS2 format, it must be a valid format for the Base SAS.","type":"value"}]},{"name":"INFORMAT","description":"specifies a SAS data informat that is stored as column metadata. The informat is not applied to the column data. No validation is done on the informat; it is only informational.","help":"INFORMAT *informat*","type":"value","arguments":[{"name":"informat","placeholder":true,"description":"specifies a SAS data informat.","type":"value"}]},{"name":"LABEL","description":"specifies a text string to use as an alternate column heading that appears in place of the column name in a query expression result.","help":"LABEL '*text-string*'","type":"value"}]},{"name":"CONSTRAINT","optional":true,"description":"begins a column constraint or a table constraint.","type":"standalone"},{"name":"constraint","optional":true,"placeholder":true,"description":"specifies a name to identify the constraint.","type":"value"},{"name":"CHECK","optional":true,"description":"specifies a condition for values in the column or table. search-condition is a valid FedSQL expression that resolves to a Boolean value. If search-condition is false, no changes are made to the table.","help":"CHECK(*search-condition*)","type":"value"},{"name":"PRIMARY","optional":true,"description":"specifies that, for each row in the table, the value in the column can be used to uniquely identify its respective row in the table. It is a value that does not change. A primary key cannot have a null value.","help":"PRIMARY KEY","type":"standalone"},{"name":"PRIMARY","optional":true,"description":"specifies that, for each row in the table, the values for all of the columns specified are used to uniquely identify its respective row in the table. A primary key cannot have a null value and it must be unique for each row in the column. It is a value that does not change.","help":"PRIMARY KEY (*column* [,  ...*column*])","type":"value"},{"name":"UNIQUE","optional":true,"description":"specifies that no two rows in the column can have the same value. A null value is allowed unless you specify NOT NULL.","type":"standalone"},{"name":"UNIQUE","optional":true,"description":"specifies that no two rows in any of the specified columns can have the same value. A null value is allowed unless you specify NOT NULL.","help":"UNIQUE(*column* [,  ...*column*])","type":"value"},{"name":"NOT","optional":true,"description":"specifies that a null value is not valid in any row for the specified column.","help":"NOT NULL","type":"standalone"},{"name":"FOREIGN","optional":true,"description":"specifies the clause that relates columns in table to columns in another table through the values for those columns. Foreign keys must always include enough columns to uniquely identify a row in the referenced table. Foreign key constraints help ensure the integrity of related data in multiple tables.","help":"FOREIGN KEY (*referencing-column* [,  ...*referencing column*]) REFERENCES *referenced-table* (*referenced-column* [,  ...*referenced-column*] [&lt;referential-trigger-action&gt;])","type":"dataSet","arguments":[{"name":"FOREIGN","description":"begins the clause that identifies one or more columns in table that relate to columns in another table.","help":"FOREIGN KEY","type":"standalone"},{"name":"referencing-colunm","placeholder":true,"description":"specifies the columns in table that relate to columns in another table.","type":"value"},{"name":"REFERENCES","description":"begins the clause that identifies the columns in another table.","type":"standalone"},{"name":"referenced-table","placeholder":true,"description":"specifies the table whose columns relate to columns in table.","type":"dataSet"},{"name":"referenced-column","placeholder":true,"description":"specifies one or more columns in the referenced table that relate to the columns in table.","type":"value"},{"name":"referential-trigger-action","description":"specifies the action to take in the referenced table when columns in table are updated or deleted.","type":"standalone","arguments":[{"name":"ON","description":"specifies the clause for the action to take when a column in table is updated.","help":"ON UPDATE &lt;referential-action&gt;","type":"standalone"},{"name":"ON","description":"specifies the clause for the action to take when a column in table is deleted.","help":"ON DELETE &lt;referential-action&gt;","type":"standalone"}]},{"name":"referential-action","description":"specifies the action to take when a column in table is updated or deleted.","type":"standalone","arguments":[{"name":"CASCADE","description":"ON UPDATE, specifies to update all rows in table that reference an updated value in the referenced table. ON DELETE, removes all rows in table that reference the deleted rows in the referenced table.","type":"standalone"},{"name":"SET","description":"specifies to set the referenced columns to a null value.","help":"SET NULL","type":"standalone"},{"name":"SET","description":"specifies to set the referenced columns to their default value.","help":"SET DEFAULT","type":"standalone"},{"name":"RESTRICT","description":"specifies that if the referential constraint is not satisfied at any time while the FedSQL statement is processing, no action is taken and the update or deletion fails.","type":"standalone"},{"name":"NO","description":"specifies that if the referential constraint is not satisfied at the end of the FedSQL statement, no action is taken and the update or deletion fails.","help":"NO ACTION","type":"standalone"}]}]},{"name":"constraint-check-time","optional":true,"description":"specifies when the constraint is checked:","type":"standalone","arguments":[{"name":"DEFERRABLE","description":"specifies whether the constraint violation check can be performed after the transaction completes or if it must be checked at the end of each FedSQL statement. If DEFERRABLE is specified, the constraint check can occur at the end of the transaction. If NOT DEFERRABLE is specified, the constraint must be checked when the FedSQL statement terminates. Specifying DEFERRABLE is useful when more than one statement is necessary to complete a transaction.","type":"standalone"},{"name":"NOT","description":"specifies whether the constraint violation check can be performed after the transaction completes or if it must be checked at the end of each FedSQL statement. If DEFERRABLE is specified, the constraint check can occur at the end of the transaction. If NOT DEFERRABLE is specified, the constraint must be checked when the FedSQL statement terminates. Specifying DEFERRABLE is useful when more than one statement is necessary to complete a transaction.","help":"NOT DEFERRABLE","type":"standalone"},{"name":"INITIALLY","description":"specifies that the constraint violation check is deferred, by default, at the beginning of each transaction and it does not occur until the end of a transaction.","help":"INITIALLY DEFERRED","type":"standalone"},{"name":"INITIALLY","description":"specifies that the constraint violation check occurs at the end of each FedSQL statement.","help":"INITIALLY IMMEDIATE","type":"standalone"}]}]},{"name":"CREATE VIEW","description":"Creates a FedSQL view of data from one or more tables or other views.","help":"CREATE VIEW  *view* [SECURITY *security-type*] AS *query-expression*;","arguments":[{"name":"SECURITY","optional":true,"description":"specifies the type of security that will be enforced for the view. security-type can be one of the following values.","help":"SECURITY *security-type*","type":"value","arguments":[{"name":"DEFINER","description":"specifies that the view is run with the schema owner’s credentials.","type":"standalone"},{"name":"INVOKER","description":"specifies that the view is run with the invoking user’s credentials.","type":"standalone"}]},{"name":"view","optional":true,"placeholder":true,"description":"specifies the name of the view being created.","type":"dataSet"},{"name":"query-expression","optional":true,"placeholder":true,"description":"specifies the SELECT statement that retrieves the information from an existing table that is used to create the view.","type":"value"}]},{"name":"DELETE","description":"Deletes rows from a table.","help":"DELETE  FROM *table* [WHERE &lt;search-condition&gt;];","arguments":[{"name":"table","optional":true,"placeholder":true,"description":"specifies the table from which you are deleting rows.","type":"dataSet"},{"name":"WHERE","optional":true,"description":"specifies any valid WHERE clause used to limit the number of rows that are deleted.","help":"WHERE &lt;search-condition&gt;","type":"standalone"}]},{"name":"DESCRIBE TABLE","description":"Retrieves SQL from a table and returns a result set.","help":"DESCRIBE TABLE  [*catalog*.][*schema*.]*table*;","arguments":[{"name":"catalog","optional":true,"placeholder":true,"description":"specifies the catalog that contains the table.","type":"dataSet"},{"name":"schema","optional":true,"placeholder":true,"description":"specifies the schema that contains the table.","type":"value"},{"name":"table","optional":true,"placeholder":true,"description":"specifies the name of the table.","type":"dataSet"}]},{"name":"DESCRIBE VIEW","description":"Retrieves SQL from a view and returns a result set.","help":"DESCRIBE VIEW  [\"*catalog*\".][\"*schema*\".]\"*view*\"DESCRIBE VIEW  XML [\"*catalog*\".][\"*schema*\".]\"*view*\"","arguments":[{"name":"catalog","optional":true,"placeholder":true,"description":"specifies the catalog that contains the view.","type":"dataSet"},{"name":"schema","optional":true,"placeholder":true,"description":"specifies the schema that contains the view.","type":"value"},{"name":"view","optional":true,"placeholder":true,"description":"specifies the name of the view.","type":"dataSet"}]},{"name":"DROP INDEX","description":"Removes the specified index from a table.","help":"DROP INDEX  *index* [FROM *table*] [FORCE];","arguments":[{"name":"index","optional":true,"placeholder":true,"description":"specifies the name of the index to be removed.","type":"value"},{"name":"FROM","optional":true,"description":"specifies the name of the table where the index resides.","help":"FROM *table*","type":"dataSet"},{"name":"FORCE","optional":true,"description":"specifies that the index is removed without error processing. Use the FORCE keyword only when you are certain that removing the index without error processing will not negatively affect the table.","type":"standalone"}]},{"name":"DROP TABLE","description":"Removes a table from the database.","help":"DROP TABLE  *table* [FORCE];","arguments":[{"name":"table","optional":true,"placeholder":true,"description":"specifies the name of the table to be removed.","type":"dataSet"},{"name":"FORCE","optional":true,"description":"specifies that the table is dropped without error processing.","type":"standalone"}]},{"name":"DROP VIEW","description":"Removes a view from the database.","help":"DROP VIEW  *view* [FORCE];","arguments":[{"name":"view","optional":true,"placeholder":true,"description":"specifies the name of the view to be removed.","type":"dataSet"},{"name":"FORCE","optional":true,"description":"specifies that the view is removed without error processing.","type":"standalone"}]},{"name":"EXECUTE","description":"Sends a DBMS-specific statement to a DBMS that FedSQL supports.","help":"EXECUTE (*native-syntax*) BY  *catalog*;","arguments":[{"name":"native-syntax","optional":true,"placeholder":true,"description":"specifies a native query that can be run on the catalog’s driver. The EXECUTE statement accepts statements that produce a result set, as well as statements that do not produce a result set.","type":"value"},{"name":"catalog","optional":true,"placeholder":true,"description":"specifies the name of a catalog in the existing FedSQL connection.","type":"dataSet"}]},{"name":"INSERT","description":"Adds rows to a specified table.","help":"Form 1: \nINSERT  INTO table\n\t{VALUES (value | NULL [,  ...value | NULL])}; \nForm 2: \nINSERT  INTO table  \n\t{ (column [,  ...column]) VALUES (value | NULL [,  ...value | NULL]) };\nForm 3: \nINSERT  INTO table\n\t{ (column [,  ...column]) [query-expression] };","arguments":[{"name":"table","optional":true,"placeholder":true,"description":"specifies the name of a table into which you are inserting rows.","type":"dataSet"},{"name":"value","optional":true,"placeholder":true,"description":"specifies a data value to insert into the table.","type":"value"},{"name":"column","optional":true,"placeholder":true,"description":"specifies the column into which you are inserting data.","type":"value"},{"name":"<query-expression>","optional":true,"placeholder":true,"description":"specifies any valid query expression that returns rows and where the number of columns in each row is the same as the number of items to be inserted.","type":"value"}]},{"name":"ROLLBACK","description":"Rolls back transaction changes to the beginning of the transaction.","help":"ROLLBACK  [TRANSACTION];"},{"name":"SELECT","description":"Retrieves columns and rows of data from tables.","help":"The main clauses of the SELECT statement can be summarized as follows.\nSELECT  <select-list> \n\tFROM <table-specification> \n \n\t[WHERE <search-condition>] \n \n\t[GROUP BY <grouping-column>] \n \n\t[HAVING <search-condition>] \n \n\t[ORDER BY <sort-specification>] \n \n\t[LIMIT {count | ALL}] \n \n\t[OFFSET number] ;\n\nThe detailed syntax of the SELECT statement is as follows.\n<query-expression>  \n\t[ORDER BY <sort-specification> [,  ...<sort-specification>]]; \n<query-expression>::=  \n\t{<query-specification> | <query-expression>} \n\t\t{UNION  | EXCEPT | INTERSECT} {[ALL][CORRESPONDING [BY (column[, ... column])]]} {<query-specification> | <query-expression>}  \n<query-specification>::=  \n\tSELECT  [ALL | DISTINCT] <select-list> <table-expression> \n<select-list>::=  \n\t*   \n\t| column [AS column-alias] \n \n\t| expression [AS column-alias] \n \n\t| table.* \n \n\t| table-alias.*\n\t| table.column [AS column-alias] \n<table-expression>::=  \n\tFROM <table-specification> [,  ...<table-specification>] \n \n\t[WHERE <search-condition>] \n \n\t[GROUP BY <grouping-column> [,  ...<grouping-column>]] \n \n\t[HAVING <search-condition>] \n<table-specification>::=\n\ttable [[AS]alias]\n\t| CONNECTION TO catalog (<native-syntax>) [[AS]table-alias]\n\t| (<query-specification>) [AS] alias\n\t| <joined-table>\n<joined-table>::=  \n\t<cross-join> \n \n\t| <qualified-join> \n \n\t| <natural-join> \n    \n\t<cross-join>::=  \n\t\t<table-specification> CROSS JOIN <table-specification>  \n \n\t<qualified-join>::=  \n\t\t<table-specification> [<join-type>] JOIN <table-specification> <join-specification>  \n \n\t<natural-join>::=  \n\t\t<table-specification> NATURAL [<join-type>] JOIN <table-specification> \n  \n\t<join-type>::=  \n\t\tINNER   \n\t\t| LEFT [OUTER] \n \n\t\t| RIGHT [OUTER] \n \n\t\t| FULL [OUTER]  \n \n\t<join-specification>::=  \n\t\tON <search-condition> \n \n\t\t | USING (column [,  ...column])  \n<search-condition>::=  \n\t{  \n\t\t[NOT] {<sql-expression> | (<search-condition>)}  \n\t\t\t[{AND | OR} [NOT] {<sql-expression> | (<search-condition>)}]  }  \n\t\t[,... {[NOT] {<sql-expression> | (<search-condition>)}\n\t\t\t  [{AND | OR} [NOT] {<sql-expression> | (<search-condition>)}]}]\n\t\t\t   \n<sql-expression>::=  \n\texpression {operator | predicate} expression \n<sort-specification>::=  \n\t{order-by-expression [ASC | DESC]} [,  ...order-by-expression [ASC | DESC]] \n<grouping-column>::=  \n\tcolumn [,  ...column] \n \n\t| column-position-number \n \n\t| <sql-expression> "},{"name":"UPDATE","description":"Modifies a column's values in existing rows of a table.","help":"UPDATE  table\n\t{ \n \n\tSET column=<sql-expression> [,  ...column=<sql-expression>]\n\t\t| column=value-expression [,  ...column=value-expression] \n \n\t}   \n\t[WHERE <sql-expression> | value-expression]; ","arguments":[{"name":"table","optional":true,"placeholder":true,"description":"specifies a table name.","type":"dataSet"},{"name":"column","optional":true,"placeholder":true,"description":"specifies a column name.","type":"value"},{"name":"WHERE","optional":true,"description":"specifies any valid SQL expression.","help":"WHERE &lt;*sql-expression*&gt;","type":"value"},{"name":"value-expression","optional":true,"placeholder":true,"description":"specifies any valid value expression.","type":"value"}]}]}